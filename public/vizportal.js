/// <reference path="../../lib/angular/angular.d.ts" />
/// <reference path="../../lib/angular/angular-cookies.d.ts" />
/// <reference path="../../lib/angular/angular-sanitize.d.ts" />
/// <reference path="../../lib/angular/angular-translate.d.ts" />
/// <reference path="../../lib/angular/angular-ui-router.d.ts" />
/// <reference path="../../lib/cldr/cldr.d.ts" />
/// <reference path="../../lib/flux/flux.d.ts" />
/// <reference path="../../lib/globalize/globalize.d.ts" />
/// <reference path="../../lib/jquery/jquery.d.ts" />
/// <reference path="../../lib/jquery/jquery.caret-1.5.2.d.ts" />
/// <reference path="../../lib/q/Q.d.ts" />
/// <reference path="../../lib/react/react-addons-global.d.ts" />
/// <reference path="../../lib/rsa/rsa.d.ts" />
/// <reference path="../../lib/tableau/tableau-js-api.d.ts" />
/// <reference path="../../lib/textile-js/textile.d.ts" />
/// <reference path="../../lib/underscore/underscore.d.ts" /> 
/// <reference path="../libs.ts" />
var Helpers;
(function (Helpers) {
    // Taken from httpd.conf (.*(?:\:|\%3A)embed=(y|yes|t|true|1).*)
    Helpers.BooleanQueryParamRegex = /^[yt1]/i;
    Helpers.BooleanQueryParamRegexFalse = /^[nf0]/i;
    function dictFromArray(array, key) {
        return _.object(_.pluck(array, key), array);
    }
    Helpers.dictFromArray = dictFromArray;
    function toBoolean(val) {
        return val === 'true';
    }
    Helpers.toBoolean = toBoolean;
    function swapDict(map) {
        return _.object(_.values(map), _.keys(map));
    }
    Helpers.swapDict = swapDict;
})(Helpers || (Helpers = {}));
/// <reference path="libs.ts" />
/// <reference path="helpers/Helpers.ts" />
/**
 * Takes any feature flags specified in the URL, and parses them into an array of objects that can
 * be used to override the default values. Feature flag overrides must be specified in the query
 * string (between ? and #) portion of the URL.
 *
 * Overrides work as follows:
 *  - If a flag is not given, it will not be overridden
 *  - If a flag is assigned the value "true" or "false" (case-insensitive), it will be overridden
 *    to true or false, respectively
 *  - If a flag is given any other value, it will not be overridden
 */
var FeatureFlagsHelper;
(function (FeatureFlagsHelper) {
    /**
     * Returns an array of objects that represent the overridden feature flags
     */
    function getOverridesFromQueryString(queryString) {
        var params = queryString.slice(1).split("&");
        var overrides = [];
        params.forEach(function (param) {
            var override = parseQueryParameter(param);
            if (isOverrideValid(override)) {
                overrides.push(override);
            }
        });
        return overrides;
    }
    FeatureFlagsHelper.getOverridesFromQueryString = getOverridesFromQueryString;
    function isOverrideValid(override) {
        return override && override.flagName
            && (override.value === true || override.value === false);
    }
    function parseQueryParameter(param) {
        var keyAndValue = param.split("=");
        var key = decodeURIComponent(keyAndValue[0]);
        var valueString = decodeURIComponent(keyAndValue[1]);
        var value = null;
        if (Helpers.BooleanQueryParamRegex.test(valueString)) {
            value = true;
        }
        else if (Helpers.BooleanQueryParamRegexFalse.test(valueString)) {
            value = false;
        }
        return { flagName: key, value: value };
    }
    // TODO: It would be more logical to refactor the FeatureFlags module into a class
    //       and can keep this state and some of these helper methods there.
    var featureFlagsOverwrittenFromQueryString = {};
    /**
     * Takes in a query string and overwrites the feature flags in the VizPortal module according
     * to the overrides specified in the query string.
     */
    function overwriteFeatureFlagsFromQueryString(queryString, featureFlagsObj) {
        var overrides = getOverridesFromQueryString(queryString);
        overrides.forEach(function (override) {
            // Don't add flags that we haven't defined
            if (isFlagDefined(override.flagName, featureFlagsObj)) {
                featureFlagsObj[override.flagName] = override.value;
                featureFlagsOverwrittenFromQueryString[override.flagName] = override.flagName;
            }
        });
    }
    FeatureFlagsHelper.overwriteFeatureFlagsFromQueryString = overwriteFeatureFlagsFromQueryString;
    /**
     * Takes the server feature flags and updates the corresponding client feature flags to match.
     * Values specified in the query string take precedence over values from the server.
     */
    function overwriteFeatureFlagsFromServerFeatureFlags(serverFeatureFlags, featureFlagsObj) {
        _.each(serverFeatureFlags, function (value, flagName) {
            // Don't add flags that we haven't defined and query string overrides take priority over flag values from the server
            if (isFlagDefined(flagName, featureFlagsObj) && !featureFlagsOverwrittenFromQueryString[flagName]) {
                featureFlagsObj[flagName] = value;
            }
        });
    }
    FeatureFlagsHelper.overwriteFeatureFlagsFromServerFeatureFlags = overwriteFeatureFlagsFromServerFeatureFlags;
    function isFlagDefined(flag, featureFlagsObj) {
        return featureFlagsObj[flag] !== undefined;
    }
})(FeatureFlagsHelper || (FeatureFlagsHelper = {}));
/// <reference path="libs.ts" />
/// <reference path="FeatureFlagsHelper.ts" />
var VizPortal;
(function (VizPortal) {
    /**
     * The FeatureFlags module is a global object that is as low-level in the app as possible,
     * so we can theoretically put any parameter of the application behind a flag. They are specified
     * here, but can be overridden at runtime via URL query parameters.
     */
    var FeatureFlags;
    (function (FeatureFlags) {
        /**
         * Enables the feature where users can see search results ordered by various relevant metrics
         */
        FeatureFlags.contentAnalyticsEnabled = false;
        /**
         * Online Sync Client features. (set by server)
         */
        FeatureFlags.dataSyncEnabled = false;
        /**
         * Enables the "Home" place and makes it the default start page.
         */
        FeatureFlags.homePlaceEnabled = false;
        /**
        *  Enables the feature where user can use their OAuth credential to refresh WDC data souces.
        */
        FeatureFlags.oAuthWDCServerRefresh = false;
        /**
         * Enables the feature that allows project owners to "lock" a project, and thus cause the
         * permissions for all the workbooks in that project to assume the permissions specified on the
         * project level.
         */
        FeatureFlags.projectControlledPermissionsEnabled = false;
        /**
         * Splits up the project permissions into project/workbook/datasource areas, where the
         * workbook/datasource areas are the template "defaults" for new items created under that
         * project.
         */
        FeatureFlags.projectPermissionsTemplatesEnabled = false;
        // Clicking a selectable table row toggles its selection status
        FeatureFlags.toggleSelectableRow = false;
        FeatureFlags.reactDataGridInGroupsPlace = true;
        FeatureFlags.reactDatasourceGrid = true;
        FeatureFlags.reactExtractTasksGrid = false;
        FeatureFlags.reactGroupUsersGrid = false;
        FeatureFlags.reactProjectGrid = true;
        FeatureFlags.reactRemoteSchedulesGrid = false;
        FeatureFlags.reactSchedulesGrid = false;
        FeatureFlags.reactServerUsersGrid = false;
        FeatureFlags.reactSitesGrid = false;
        FeatureFlags.reactSubscriptionsGrid = false;
        FeatureFlags.reactViewGrid = true;
        FeatureFlags.reactWorkbookGrid = true;
        FeatureFlags.reactDataGridInSiteUsersPlace = false;
        FeatureFlags.reactDataGridLoadingIndicator = false;
        FeatureFlags.reactFavoritesMenu = false;
        FeatureFlags.reactThumbnailsInWorkbooksAndViews = false;
        FeatureFlags.reactTypeaheadFilter = false;
        FeatureFlags.reactToasts = true;
        FeatureFlags.reactTopBar = false;
        FeatureFlags.reactTopBarDark = false;
        /*
         * Enables viewing and deletion of connected devices in site user settings.
         * To be deleted after the new UX has been tested (TFS 419851)
         */
        FeatureFlags.connectedClientsTableEnabled = true;
        /*
         * These should generally be enabled together:
         * Use updated font styles, including BentonSans.
         * Use a taller row height for data grids and other lists.
         * NOTE: These should be kept in sync with the same-named flags in includes/flags.styl.
         */
        FeatureFlags.useTallerRowHeight = false;
        FeatureFlags.useUpdatedFontStyles = false;
        /*
         * Enables the feature that allows data sources to be created using web data connectors.
         */
        FeatureFlags.webDataConnectorsEnabled = false;
        /*
         * Enables the feature that allows viewing/restoration of previous workbook revisions.
         */
        FeatureFlags.workbookVersionHistoryEnabled = false;
    })(FeatureFlags = VizPortal.FeatureFlags || (VizPortal.FeatureFlags = {}));
})(VizPortal || (VizPortal = {}));
// Override the feature flags as soon as possible after the page loads and the feature flag defaults
// are set, before the application is initialized. The helper must be invoked after declaration of
// the feature flags, otherwise there will not be existing values to overwrite
if (window.location.search) {
    FeatureFlagsHelper.overwriteFeatureFlagsFromQueryString(window.location.search, VizPortal.FeatureFlags);
}
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.ContentFiltersKeys = {
        connectionType: 'connectionType',
        createdBefore: 'createdBefore',
        createdAfter: 'createdAfter',
        databaseUsername: 'databaseUsername',
        domain: 'domain',
        forWorkbook: 'forWorkbook',
        hasDatasource: 'hasDatasource',
        hasAlert: 'hasAlert',
        hasExtracts: 'hasExtracts',
        hasPassword: 'hasPassword',
        inGroup: 'inGroup',
        lastRefreshedBefore: 'lastRefreshedBefore',
        lastRefreshedAfter: 'lastRefreshedAfter',
        maxSiteRole: 'maxSiteRole',
        groupsMinimumSiteRole: 'groupsMinimumSiteRole',
        modifiedBefore: 'modifiedBefore',
        modifiedAfter: 'modifiedAfter',
        owner: 'owner',
        project: 'project',
        schedule: 'schedule',
        search: 'search',
        serverName: 'serverName',
        serverPort: 'serverPort',
        showEmbedded: 'showEmbedded',
        siteId: 'siteId',
        siteRole: 'siteRole',
        tag: 'tag',
        workbook: 'workbook',
        datasource: 'datasource',
        favorite: 'favorite',
        recent: 'recent',
        group: 'group'
    };
})(VizPortal || (VizPortal = {}));
/// <reference path="libs.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.BuildId;
    var Module;
    (function (Module) {
        var _instance;
        var eagerServices = [];
        function instance() {
            if (!_instance) {
                _instance = angular.module('VizPortal', [
                    'ngCookies', 'ngSanitize', 'ui.router', 'pascalprecht.translate', 'placeholderShim']);
            }
            return _instance;
        }
        Module.instance = instance;
        /**
         * Register a service for eager instantiation. Note that this call does _not_ in itself
         * eagerly instantiate the registered service. A call to {@link #initializeEagerServices} is required.
         */
        function registerEagerService(serviceName) {
            eagerServices.push(serviceName);
        }
        Module.registerEagerService = registerEagerService;
        /**
         * Instantiate services which were registered using {@link #registerEagerService}. This method should
         * be called after the initial bootstrapping of Angular is finished, for example, in a run-block.
         */
        function initializeEagerServices(injector) {
            angular.forEach(eagerServices, function (service) {
                injector.get(service);
            });
        }
        Module.initializeEagerServices = initializeEagerServices;
    })(Module = VizPortal.Module || (VizPortal.Module = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="IError.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="IRequest.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="IServer.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="../types/IRequest.ts" />
/// <reference path="../types/IServer.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var Request = (function () {
            function Request(method, params) {
                this.method = method;
                this.params = params;
            }
            // This is not used anywhere. It's only purpose is to use TResult so that Result doesn't lose type safety
            // Later versions of TypeScript might not need this. 
            Request.prototype.send = function (server) {
                return server.sendRequest(this);
            };
            return Request;
        })();
        ServerApi.Request = Request;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
/// <reference path="../types/IResponse.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var UpdateDisplayModeRequest = (function (_super) {
            __extends(UpdateDisplayModeRequest, _super);
            function UpdateDisplayModeRequest(params) {
                _super.call(this, 'updateDisplayMode', params);
            }
            return UpdateDisplayModeRequest;
        })(ServerApi.Request);
        ServerApi.UpdateDisplayModeRequest = UpdateDisplayModeRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        ServerApi.UserKeys = {
            id: 'id',
            authId: 'authId',
            displayName: 'displayName'
        };
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        ServerApi.AuthenticationType = {
            AD: 'AD',
            ClientCertificate: 'CLIENT_CERTIFICATE',
            // when fallback is enabled, users can authenticate with username/password
            ClientCertificateWithFallback: 'CLIENT_CERTIFICATE_WITH_FALLBACK',
            Kerberos: 'KERBEROS',
            Local: 'LOCAL',
            OpenId: 'OPENID',
            Saml: 'SAML',
            Sspi: 'SSPI'
        };
        ServerApi.DomainFamily = {
            ActiveDirectory: 'activedirectory',
            Local: 'local',
            External: 'external' // used by Tableau Online
        };
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
// This file holds interfaces that are extended by other ServerApi interfaces
// The interfaces in this file should not be stand-alone interfaces
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        // Key Objects
        //TODO Figure out a way to remove the dependency on these Key variables and then remove it
        ServerApi.NamedItemKeys = {
            id: 'id',
            name: 'name'
        };
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="resourceParts.ts" />
/// <reference path="ISiteNameSansId.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="IServerSettingsUnauthenticated.ts" />
/// <reference path="ISiteNameWithId.ts" />
/// <reference path="ISiteThirdPartyAuthState.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="IUser.ts" />
/// <reference path="IFeatureFlags.ts" />
/// <reference path="ISiteNameWithRole.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        ServerApi.DisplayModes = {
            list: 'list',
            thumbnail: 'thumbnail'
        };
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
//NOTE: Feature detection is the perfered way to handle browser differences.
//      Browser detection (using isIE7orLess() or isIE8orLess() methods) should
//      only be used if a feature detection is not possible.
var VizPortal;
(function (VizPortal) {
    VizPortal.ViewportContent = {
        deviceWidth: 'width=device-width, maximum-scale=1.3',
        fixedWidth: 'width=1024, maximum-scale=1.3'
    };
    var BrowserSupportService = (function () {
        function BrowserSupportService($window) {
            this.msieMatch = BrowserSupportService.MSIE_REGEX.exec($window.navigator.userAgent);
            this.touchTest = BrowserSupportService.TOUCH_REGEX.test($window.navigator.userAgent);
            this.chromeIOSTest = BrowserSupportService.CHROME_IOS_REGEX.test($window.navigator.userAgent);
            this.chromeAndroidTest = BrowserSupportService.CHROME_REGEX.test($window.navigator.userAgent)
                && BrowserSupportService.ANDROID_REGEX.test($window.navigator.userAgent);
        }
        BrowserSupportService.prototype.isIE7orLess = function () {
            return !!this.msieMatch && this.msieMatch[1] < '8';
        };
        BrowserSupportService.prototype.isIE8orLess = function () {
            return !!this.msieMatch && this.msieMatch[1] < '9';
        };
        BrowserSupportService.prototype.isIE9orLess = function () {
            // this.msieMatch[1] evaluates to '9.0', this will not compare as expected to '10'
            // Therefore, parseInt and compare as numbers instead.
            return !!this.msieMatch && parseInt(this.msieMatch[1], 10) < 10;
        };
        BrowserSupportService.prototype.isTouch = function () {
            return this.touchTest;
        };
        BrowserSupportService.prototype.isAndroidChrome = function () {
            return !!this.chromeAndroidTest;
        };
        BrowserSupportService.prototype.supportsFormData = function () {
            return window['FormData'] !== undefined;
        };
        BrowserSupportService.prototype.supportsFileReader = function () {
            return window['FileReader'] !== undefined;
        };
        BrowserSupportService.prototype.supportsDragAndDropEvents = function () {
            var div = document.createElement('div');
            return ('ondragstart' in div && 'ondrop' in div);
        };
        BrowserSupportService.prototype.setViewport = function (content) {
            var viewportEl = $('meta[name="viewport"]');
            var newViewportEl = $('<meta>').attr('name', 'viewport').attr('content', content);
            if (viewportEl.length) {
                viewportEl.replaceWith(newViewportEl);
            }
            else {
                $(document.head).prepend(newViewportEl);
            }
        };
        BrowserSupportService.MSIE_REGEX = /msie ([\w.]+)/i; //This check only works for versions of IE < 11
        // Keep minimum touch check in sync with workgroup\vqlweb\scriptsharp\src\Core\Utility\BrowserSupport.cs
        BrowserSupportService.TOUCH_REGEX = /iphone|ipad|ipod|android|blackberry|webos|iemobile|palm/i;
        BrowserSupportService.CHROME_IOS_REGEX = /CriOS\//; // https://developer.chrome.com/multidevice/user-agent
        BrowserSupportService.ANDROID_REGEX = /android/i;
        BrowserSupportService.CHROME_REGEX = /Chrome\/[.0-9]*/; // https://developer.chrome.com/multidevice/user-agent
        BrowserSupportService.$inject = ['$window'];
        return BrowserSupportService;
    })();
    VizPortal.BrowserSupportService = BrowserSupportService;
    VizPortal.Module.instance().service('BrowserSupportService', BrowserSupportService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/BrowserSupportService.ts" />
var VizPortal;
(function (VizPortal) {
    var L10n;
    (function (L10n) {
        L10n.MissingTranslationHandlerName = "missingTranslation";
        VizPortal.Module.instance().factory(L10n.MissingTranslationHandlerName, [
            'BrowserSupportService',
            function (BrowserSupportService) {
                // IE9 (real, not emulated) gets very sad when you even test for console.error
                // without the Dev Tools open.  So, we log nothing for missing translations on IE8.
                if (BrowserSupportService.isIE9orLess()) {
                    return function (key) { };
                }
                else {
                    return function (key) {
                        if (console && console.error) {
                            console.error('missing \'' + L10n.language + '\' translation for key: ' + key);
                        }
                    };
                }
            }
        ]);
    })(L10n = VizPortal.L10n || (VizPortal.L10n = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/MissingTranslationService.ts" />
var VizPortal;
(function (VizPortal) {
    var L10n;
    (function (L10n) {
        var Keys;
        (function (Keys) {
            Keys.allOwners = "allOwners";
            Keys.allProjects = "allProjects";
            Keys.allTags = "allTags";
            Keys.connector = "connector";
            Keys.custom = "custom";
            Keys.datasourceConnector = "datasourceConnector";
            Keys.datasourceEditor = "datasourceEditor";
            Keys.delete_ = "delete"; // Old versions of IE don't allow 'delete' as a property name
            Keys.denied = "denied";
            Keys.edit = "edit";
            Keys.editor = "editor";
            Keys.interactor = "interactor";
            Keys.projectLeader = "project_leader";
            Keys.none = "none";
            Keys.permissions = "permissions";
            Keys.publisher = "publisher";
            Keys.save = "save";
            Keys.sizeInBytes = "sizeInBytes";
            Keys.sizeInGB = "sizeInGB";
            Keys.sizeInKB = "sizeInKB";
            Keys.sizeInMB = "sizeInMB";
            Keys.title = "title";
            Keys.viewer = "viewer";
        })(Keys = L10n.Keys || (L10n.Keys = {}));
        L10n.language;
        L10n.locale;
        function loadLocaleJson(data) {
            Globalize.load(data);
        }
        L10n.loadLocaleJson = loadLocaleJson;
        // This maps several nonstandard locales into CLDR locales.
        // This logic is duplicated in the get-cldr-data.js tool.
        function getGlobalizeLocale(userLocale) {
            var cldr = new Cldr(userLocale);
            switch (cldr.locale) {
                case 'zh-HK': return 'zh-Hans-HK';
                case 'zh-SG': return 'zh-Hans-SG';
                case 'zh-TW': return 'zh-Hant-TW';
                case 'no': return 'nb';
                case 'sr-BA': return 'sr-Cyrl-BA';
                case 'sr-ME': return 'sr-Cyrl-ME';
                case 'sr-CS': return 'sr-Cyrl';
                default: return cldr.locale;
            }
        }
        var cldr;
        var countFormatter;
        var floatFormatter;
        var percentFormatter;
        var dateFormatter;
        var dateTimeFormatter;
        var timeFormatter;
        var shortTimeFormatter;
        var hourParser;
        var firstDayOfWeekNumber;
        var narrowDayNamesArray;
        var wideDayNamesArray;
        var yearAndMonthFormatter;
        var preferredTimeCycle;
        // Create reference to internal Globalize method.
        // This is used to replace placeholders in CLDR format strings such as "{0} {1}".
        // It's internal, but unlikely to change, as it is core functionality.
        var formatMessage = (Globalize['_formatMessage']);
        // Construct a datetime format pattern that is just like the 'medium' datetime pattern,
        // but uses the 'short' time (which omits the seconds).
        // This code is patterned after the Globalize method "dateExpandPattern" in date.js.
        function mediumShortDateTimePattern(cldr) {
            var dateTimeFormat = cldr.main([
                'dates/calendars/gregorian/dateTimeFormats',
                'medium'
            ]);
            return formatMessage(dateTimeFormat, [
                cldr.main([
                    'dates/calendars/gregorian/timeFormats',
                    'short'
                ]),
                cldr.main([
                    'dates/calendars/gregorian/dateFormats',
                    'medium'
                ])
            ]);
        }
        function useLocale(locale) {
            cldr = Globalize.locale(getGlobalizeLocale(locale));
            countFormatter = Globalize.numberFormatter({ maximumFractionDigits: 0 });
            floatFormatter = Globalize.numberFormatter({ minimumFractionDigits: 1, maximumFractionDigits: 1 });
            percentFormatter = Globalize.numberFormatter({ style: 'percent' });
            dateFormatter = Globalize.dateFormatter({ date: 'medium' });
            dateTimeFormatter = Globalize.dateFormatter({ pattern: mediumShortDateTimePattern(cldr) });
            timeFormatter = Globalize.dateFormatter({ time: 'short' });
            yearAndMonthFormatter = Globalize.dateFormatter('yMMM');
            shortTimeFormatter = Globalize.dateFormatter({ time: 'short' });
            hourParser = Globalize.dateParser({ pattern: 'H' });
            firstDayOfWeekNumber = cldr.supplemental.weekData.firstDay() === 'mon' ? 1 : 0;
            narrowDayNamesArray = _.values(cldr.main('dates/calendars/gregorian/days/format/narrow'));
            wideDayNamesArray = _.values(cldr.main('dates/calendars/gregorian/days/format/wide'));
            if (firstDayOfWeekNumber === 1) {
                narrowDayNamesArray.push(narrowDayNamesArray.shift());
                wideDayNamesArray.push(wideDayNamesArray.shift());
            }
            preferredTimeCycle = cldr.supplemental.timeData.preferred();
        }
        L10n.useLocale = useLocale;
        function localizedCount(value) {
            if (!countFormatter)
                return value;
            if (value === +value) {
                if (value === (value | 0)) {
                    return countFormatter(value);
                }
            }
            return value;
        }
        L10n.localizedCount = localizedCount;
        function localizedFloat(value) {
            if (!floatFormatter)
                return value;
            if (value === +value) {
                return floatFormatter(value);
            }
            return value;
        }
        L10n.localizedFloat = localizedFloat;
        function localizedPercent(value) {
            if (!percentFormatter)
                return value;
            if (value === +value) {
                return percentFormatter(value / 100);
            }
            return value;
        }
        L10n.localizedPercent = localizedPercent;
        function formatAsDate(value, formatter) {
            if (!formatter)
                return '';
            if (_.isDate(value)) {
                return formatter(value);
            }
            else if (_.isString(value)) {
                return formatter(new Date(value));
            }
            return '';
        }
        function parse24Hour(value) {
            return hourParser(value);
        }
        L10n.parse24Hour = parse24Hour;
        function localizedDate(value) {
            return formatAsDate(value, dateFormatter);
        }
        L10n.localizedDate = localizedDate;
        function localizedDateTime(value) {
            return formatAsDate(value, dateTimeFormatter);
        }
        L10n.localizedDateTime = localizedDateTime;
        function localizedShortTime(value) {
            return formatAsDate(value, shortTimeFormatter);
        }
        L10n.localizedShortTime = localizedShortTime;
        function localizedTime(value) {
            return formatAsDate(value, timeFormatter);
        }
        L10n.localizedTime = localizedTime;
        // returns 0 for Sunday, 1 for Monday
        function firstDayOfWeek() {
            return firstDayOfWeekNumber || 0;
        }
        L10n.firstDayOfWeek = firstDayOfWeek;
        // True if Monday, false if Sunday. Callers shouldn't need to know the int values.
        function firstDayOfWeekIsMonday() {
            return firstDayOfWeek() === 1;
        }
        L10n.firstDayOfWeekIsMonday = firstDayOfWeekIsMonday;
        function is24HourTimeCycle() {
            return preferredTimeCycle === 'H';
        }
        L10n.is24HourTimeCycle = is24HourTimeCycle;
        function narrowDayNames() {
            return narrowDayNamesArray || [];
        }
        L10n.narrowDayNames = narrowDayNames;
        function wideDayNames() {
            return wideDayNamesArray || [];
        }
        L10n.wideDayNames = wideDayNames;
        function yearAndMonth(date) {
            return yearAndMonthFormatter ? yearAndMonthFormatter(date) : '';
        }
        L10n.yearAndMonth = yearAndMonth;
        function elideIfLong(s) {
            return s && s.length > 100
                ? s.substr(0, 100) + '\u2026' // HORIZONTAL ELLIPSIS
                : s;
        }
        L10n.elideIfLong = elideIfLong;
        var SanitizingTranslateInterpolationWrapper = (function () {
            function SanitizingTranslateInterpolationWrapper(wrappedInterpolation, id, sanitizeStrategy) {
                if (id === void 0) { id = ''; }
                if (sanitizeStrategy === void 0) { sanitizeStrategy = 'escaped'; }
                this.wrappedInterpolation = wrappedInterpolation;
                this.id = id;
                this.sanitizeStrategy = sanitizeStrategy;
            }
            SanitizingTranslateInterpolationWrapper.prototype.setLocale = function (locale) {
                this.wrappedInterpolation.setLocale(locale);
            };
            SanitizingTranslateInterpolationWrapper.prototype.getInterpolationIdentifier = function () {
                return this.id;
            };
            SanitizingTranslateInterpolationWrapper.prototype.useSanitizeValueStrategy = function (value) {
                this.savedSanitizeStrategy = value;
                this.wrappedInterpolation.useSanitizeValueStrategy(value);
                return this;
            };
            SanitizingTranslateInterpolationWrapper.prototype.interpolate = function (input, params) {
                this.wrappedInterpolation.useSanitizeValueStrategy(this.sanitizeStrategy);
                var result = this.wrappedInterpolation.interpolate(input, params);
                this.wrappedInterpolation.useSanitizeValueStrategy(this.savedSanitizeStrategy);
                return result;
            };
            return SanitizingTranslateInterpolationWrapper;
        })();
        var NumberLocalizingTranslateInterpolationWrapper = (function () {
            function NumberLocalizingTranslateInterpolationWrapper(wrappedInterpolation, id, localize, sanitizeStrategy) {
                if (sanitizeStrategy === void 0) { sanitizeStrategy = null; }
                this.wrappedInterpolation = wrappedInterpolation;
                this.id = id;
                this.localize = localize;
                this.sanitizeStrategy = sanitizeStrategy;
            }
            NumberLocalizingTranslateInterpolationWrapper.prototype.setLocale = function (locale) {
                this.wrappedInterpolation.setLocale(locale);
            };
            NumberLocalizingTranslateInterpolationWrapper.prototype.getInterpolationIdentifier = function () {
                return this.id;
            };
            NumberLocalizingTranslateInterpolationWrapper.prototype.useSanitizeValueStrategy = function (value) {
                this.savedSanitizeStrategy = value;
                this.wrappedInterpolation.useSanitizeValueStrategy(value);
                return this;
            };
            NumberLocalizingTranslateInterpolationWrapper.prototype.interpolate = function (input, params) {
                var _this = this;
                var newParams = {};
                _.each(params, function (value, key) {
                    newParams[key] = value;
                    var locKey = key + '_LOC';
                    if (!_.has(params, locKey) && value === +value) {
                        newParams[locKey] = _this.localize(value);
                    }
                });
                this.wrappedInterpolation.useSanitizeValueStrategy(this.sanitizeStrategy);
                var result = this.wrappedInterpolation.interpolate(input, newParams);
                this.wrappedInterpolation.useSanitizeValueStrategy(this.savedSanitizeStrategy);
                return result;
            };
            return NumberLocalizingTranslateInterpolationWrapper;
        })();
        /**
         * When to use escaped vs non:
         *   If you are using the translate directive in jade, use the escaped version
         *   If you are binding to a string that was localized with the $translate service, use the non-escaped version.
         *
         * Details:
         *   Angular will escape the results of expressions before rendering them in the DOM (https://docs.angularjs.org/api/ng/service/$sce)
         *   The translate directive does not escape strings. This is fine for static strings, but we need to use the escaped versions
         *   of the interpolators to ensure that any dynamic data gets santized.
         */
        L10n.Interpolations = {
            Escaped: 'escaped',
            Count: 'localizedCount',
            CountEscaped: 'localizedCountEscaped',
            Float: 'localizedFloat',
            FloatEscaped: 'localizedFloatEscaped',
            Percent: 'localizedPercent',
            PercentEscaped: 'localizedPercentEscaped'
        };
        var EscapedTranslateInterpolationName = 'EscapedTranslateInterpolation';
        angular.module('pascalprecht.translate').factory(EscapedTranslateInterpolationName, [
            '$translateMessageFormatInterpolation',
            function ($translateMessageFormatInterpolation) {
                return new SanitizingTranslateInterpolationWrapper($translateMessageFormatInterpolation, L10n.Interpolations.Escaped);
            }
        ]);
        var LocalizedCountTranslateInterpolationName = 'LocalizedCountTranslateInterpolation';
        angular.module('pascalprecht.translate').factory(LocalizedCountTranslateInterpolationName, [
            '$translateMessageFormatInterpolation',
            function ($translateMessageFormatInterpolation) {
                return new NumberLocalizingTranslateInterpolationWrapper($translateMessageFormatInterpolation, L10n.Interpolations.Count, localizedCount);
            }
        ]);
        var LocalizedCountEscapedTranslateInterpolationName = 'LocalizedCountEscapedTranslateInterpolation';
        angular.module('pascalprecht.translate').factory(LocalizedCountEscapedTranslateInterpolationName, [
            '$translateMessageFormatInterpolation',
            function ($translateMessageFormatInterpolation) {
                return new NumberLocalizingTranslateInterpolationWrapper($translateMessageFormatInterpolation, L10n.Interpolations.CountEscaped, localizedCount, 'escaped');
            }
        ]);
        var LocalizedFloatTranslateInterpolationName = 'LocalizedFloatTranslateInterpolation';
        angular.module('pascalprecht.translate').factory(LocalizedFloatTranslateInterpolationName, [
            '$translateMessageFormatInterpolation',
            function ($translateMessageFormatInterpolation) {
                return new NumberLocalizingTranslateInterpolationWrapper($translateMessageFormatInterpolation, L10n.Interpolations.Float, localizedFloat);
            }
        ]);
        var LocalizedFloatEscapedTranslateInterpolationName = 'LocalizedFloatEscapedTranslateInterpolation';
        angular.module('pascalprecht.translate').factory(LocalizedFloatEscapedTranslateInterpolationName, [
            '$translateMessageFormatInterpolation',
            function ($translateMessageFormatInterpolation) {
                return new NumberLocalizingTranslateInterpolationWrapper($translateMessageFormatInterpolation, L10n.Interpolations.FloatEscaped, localizedFloat, 'escaped');
            }
        ]);
        var LocalizedPercentTranslateInterpolationName = 'LocalizedPercentTranslateInterpolation';
        angular.module('pascalprecht.translate').factory(LocalizedPercentTranslateInterpolationName, [
            '$translateMessageFormatInterpolation',
            function ($translateMessageFormatInterpolation) {
                return new NumberLocalizingTranslateInterpolationWrapper($translateMessageFormatInterpolation, L10n.Interpolations.Percent, localizedPercent);
            }
        ]);
        var LocalizedPercentEscapedTranslateInterpolationName = 'LocalizedPercentEscapedTranslateInterpolation';
        angular.module('pascalprecht.translate').factory(LocalizedPercentEscapedTranslateInterpolationName, [
            '$translateMessageFormatInterpolation',
            function ($translateMessageFormatInterpolation) {
                return new NumberLocalizingTranslateInterpolationWrapper($translateMessageFormatInterpolation, L10n.Interpolations.PercentEscaped, localizedPercent, 'escaped');
            }
        ]);
        VizPortal.Module.instance().config(['$translateProvider', function ($translateProvider) {
                $translateProvider
                    .translationNotFoundIndicatorLeft('[')
                    .translationNotFoundIndicatorRight(']')
                    .useMissingTranslationHandler(L10n.MissingTranslationHandlerName)
                    .useStaticFilesLoader({
                    prefix: 'loc/',
                    suffix: '.json'
                })
                    .useMessageFormatInterpolation() // (see https://github.com/SlexAxton/messageformat.js)
                    .addInterpolation(EscapedTranslateInterpolationName)
                    .addInterpolation(LocalizedCountTranslateInterpolationName)
                    .addInterpolation(LocalizedCountEscapedTranslateInterpolationName)
                    .addInterpolation(LocalizedFloatTranslateInterpolationName)
                    .addInterpolation(LocalizedFloatEscapedTranslateInterpolationName)
                    .addInterpolation(LocalizedPercentTranslateInterpolationName)
                    .addInterpolation(LocalizedPercentEscapedTranslateInterpolationName);
            }]);
    })(L10n = VizPortal.L10n || (VizPortal.L10n = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/ISiteLoginParams.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var ClientCertificateLoginRequest = (function (_super) {
            __extends(ClientCertificateLoginRequest, _super);
            function ClientCertificateLoginRequest(params) {
                _super.call(this, 'auth/clientCertificateLogin', params);
            }
            return ClientCertificateLoginRequest;
        })(ServerApi.Request);
        ServerApi.ClientCertificateLoginRequest = ClientCertificateLoginRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GeneratePublicKeyRequest = (function (_super) {
            __extends(GeneratePublicKeyRequest, _super);
            function GeneratePublicKeyRequest(params) {
                if (params === void 0) { params = {}; }
                _super.call(this, 'generatePublicKey', params);
            }
            return GeneratePublicKeyRequest;
        })(ServerApi.Request);
        ServerApi.GeneratePublicKeyRequest = GeneratePublicKeyRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/IServerSettingsUnauthenticated.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetServerSettingsUnauthenticatedRequest = (function (_super) {
            __extends(GetServerSettingsUnauthenticatedRequest, _super);
            function GetServerSettingsUnauthenticatedRequest(params) {
                if (params === void 0) { params = {}; }
                _super.call(this, 'getServerSettingsUnauthenticated', params);
            }
            return GetServerSettingsUnauthenticatedRequest;
        })(ServerApi.Request);
        ServerApi.GetServerSettingsUnauthenticatedRequest = GetServerSettingsUnauthenticatedRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../types/ISessionInfo.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetSessionInfoRequest = (function (_super) {
            __extends(GetSessionInfoRequest, _super);
            function GetSessionInfoRequest() {
                _super.call(this, 'getSessionInfo', {});
            }
            return GetSessionInfoRequest;
        })(ServerApi.Request);
        ServerApi.GetSessionInfoRequest = GetSessionInfoRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="ISiteLoginParams.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="../types/ILoginParams.ts" />
/// <reference path="../types/ISessionInfo.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var InitializeServerWithActiveDirectoryUserRequest = (function (_super) {
            __extends(InitializeServerWithActiveDirectoryUserRequest, _super);
            function InitializeServerWithActiveDirectoryUserRequest(params) {
                _super.call(this, 'initializeServerWithActiveDirectoryUser', params);
            }
            return InitializeServerWithActiveDirectoryUserRequest;
        })(ServerApi.Request);
        ServerApi.InitializeServerWithActiveDirectoryUserRequest = InitializeServerWithActiveDirectoryUserRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../types/ILoginParams.ts" />
/// <reference path="../types/ISessionInfo.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var InitializeServerWithExternalUserRequest = (function (_super) {
            __extends(InitializeServerWithExternalUserRequest, _super);
            function InitializeServerWithExternalUserRequest(params) {
                _super.call(this, 'initializeServerWithExternalUser', params);
            }
            return InitializeServerWithExternalUserRequest;
        })(ServerApi.Request);
        ServerApi.InitializeServerWithExternalUserRequest = InitializeServerWithExternalUserRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../types/ILoginParams.ts" />
/// <reference path="../types/ISessionInfo.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var InitializeServerWithLocalUserRequest = (function (_super) {
            __extends(InitializeServerWithLocalUserRequest, _super);
            function InitializeServerWithLocalUserRequest(params) {
                _super.call(this, 'initializeServerWithLocalUser', params);
            }
            return InitializeServerWithLocalUserRequest;
        })(ServerApi.Request);
        ServerApi.InitializeServerWithLocalUserRequest = InitializeServerWithLocalUserRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/ISiteLoginParams.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var KerberosLoginRequest = (function (_super) {
            __extends(KerberosLoginRequest, _super);
            function KerberosLoginRequest(params) {
                _super.call(this, 'auth/kerberosLogin', params);
            }
            return KerberosLoginRequest;
        })(ServerApi.Request);
        ServerApi.KerberosLoginRequest = KerberosLoginRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../types/ILoginParams.ts" />
/// <reference path="../types/ISessionInfo.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var LoginRequest = (function (_super) {
            __extends(LoginRequest, _super);
            function LoginRequest(params) {
                _super.call(this, 'login', params);
            }
            return LoginRequest;
        })(ServerApi.Request);
        ServerApi.LoginRequest = LoginRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var LogoutRequest = (function (_super) {
            __extends(LogoutRequest, _super);
            function LogoutRequest() {
                _super.call(this, 'logout', {});
            }
            return LogoutRequest;
        })(ServerApi.Request);
        ServerApi.LogoutRequest = LogoutRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/ISiteLoginParams.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var SspiLoginRequest = (function (_super) {
            __extends(SspiLoginRequest, _super);
            function SspiLoginRequest(params) {
                _super.call(this, 'auth/sspiLogin', params);
            }
            return SspiLoginRequest;
        })(ServerApi.Request);
        ServerApi.SspiLoginRequest = SspiLoginRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var SwitchSiteRequest = (function (_super) {
            __extends(SwitchSiteRequest, _super);
            function SwitchSiteRequest(params) {
                _super.call(this, 'switchSite', params);
            }
            return SwitchSiteRequest;
        })(ServerApi.Request);
        ServerApi.SwitchSiteRequest = SwitchSiteRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        // More info here: http://mytableau/display/devft/Site+Role
        // And at: http://mytableau/display/devft/getSiteUsers
        ServerApi.SiteRoles = {
            ServerAdministrator: 'ServerAdministrator',
            SiteAdministrator: 'SiteAdministrator',
            Publisher: 'Publisher',
            Interactor: 'Interactor',
            Viewer: 'Viewer',
            Unlicensed: 'Unlicensed',
            ViewerWithPublish: 'ViewerWithPublish',
            UnlicensedWithPublish: 'UnlicensedWithPublish',
            Guest: 'Guest'
        };
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../../ts/FeatureFlags.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    (function (ToastType) {
        ToastType[ToastType["Info"] = 0] = "Info";
        ToastType[ToastType["Error"] = 1] = "Error";
        ToastType[ToastType["External"] = 2] = "External";
    })(VizPortal.ToastType || (VizPortal.ToastType = {}));
    var ToastType = VizPortal.ToastType;
    var ToasterService = (function () {
        function ToasterService($interval) {
            this.listeners = [];
            this.nextToastId = 0;
            this.nextListenerId = 0;
            this.$interval = $interval;
            this.toasts = [];
        }
        ToasterService.prototype.pop = function (toastOptions) {
            var id = this.nextToastId++;
            var toast = {
                id: id,
                type: ToastType[toastOptions.type].toLowerCase(),
                isClosed: false,
                lines: toastOptions.text ? toastOptions.text.split('\n') : undefined,
                templateUrl: toastOptions.templateUrl,
                data: toastOptions.data,
                timeoutDelay: toastOptions.timeoutDelay,
                content: toastOptions.content
            };
            toast.timeoutDelay = _.isNumber(toastOptions.timeoutDelay)
                ? toastOptions.timeoutDelay
                : this.defaultTimeoutForType(toastOptions.type);
            this.toasts.push(toast);
            if (VizPortal.FeatureFlags.reactToasts) {
                this.notifyListeners();
            }
            return toast.id;
        };
        ToasterService.prototype.defaultTimeoutForType = function (toastType) {
            return toastType === ToastType.Info ? ToasterService.DefaultTimeOutForInfo : ToasterService.DefaultTimeOutForError;
        };
        ToasterService.prototype.notifyListeners = function () {
            var _this = this;
            _.each(this.listeners, function (l) { return l.toastsUpdated(_this.toasts); });
        };
        ToasterService.prototype.close = function (id) {
            var _this = this;
            if (VizPortal.FeatureFlags.reactToasts) {
                this.toasts = _.filter(this.toasts, function (t) { return t.id !== id; });
                this.notifyListeners();
            }
            else {
                _.find(this.toasts, function (toast, index) {
                    if (toast.id === id) {
                        _this.toasts.splice(index, 1);
                        _this.$interval.cancel(toast.timeout);
                        toast.isClosed = true;
                        return true;
                    }
                    return false;
                });
            }
        };
        ToasterService.prototype.isClosed = function (id) {
            _.each(this.toasts, function (t) {
                if (t.id === id) {
                    return false;
                }
            });
            return true;
        };
        ToasterService.prototype.addListener = function (listener) {
            var listenerId = this.nextListenerId++;
            listener.id = listenerId;
            this.listeners.push(listener);
            return listenerId;
        };
        ToasterService.prototype.removeListener = function (id) {
            this.listeners = _.filter(this.listeners, function (listener) { return listener.id !== id; });
        };
        ToasterService.NoTimeout = 0;
        ToasterService.DefaultTimeOutForInfo = 10 * 1000; // 10 seconds
        ToasterService.DefaultTimeOutForError = ToasterService.NoTimeout;
        ToasterService.$inject = ['$interval'];
        return ToasterService;
    })();
    VizPortal.ToasterService = ToasterService;
    VizPortal.Module.instance().service('ToasterService', ToasterService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/ClientCertificateLoginRequest.ts" />
/// <reference path="../ServerApi/requests/GeneratePublicKeyRequest.ts" />
/// <reference path="../ServerApi/requests/GetServerSettingsUnauthenticatedRequest.ts" />
/// <reference path="../ServerApi/requests/GetSessionInfoRequest.ts" />
/// <reference path="../ServerApi/requests/InitializeServerWithActiveDirectoryUserRequest.ts" />
/// <reference path="../ServerApi/requests/InitializeServerWithExternalUserRequest.ts" />
/// <reference path="../ServerApi/requests/InitializeServerWithLocalUserRequest.ts" />
/// <reference path="../ServerApi/requests/kerberosLoginRequest.ts" />
/// <reference path="../ServerApi/requests/LoginRequest.ts" />
/// <reference path="../ServerApi/requests/LogoutRequest.ts" />
/// <reference path="../ServerApi/requests/SspiLoginRequest.ts" />
/// <reference path="../ServerApi/requests/SwitchSiteRequest.ts" />
/// <reference path="../ServerApi/types/IRequest.ts" />
/// <reference path="../ServerApi/types/IResponse.ts" />
/// <reference path="../ServerApi/types/IPodRedirectionError.ts" />
/// <reference path="../ServerApi/types/IServer.ts" />
/// <reference path="../ServerApi/types/ISiteRole.ts" />
/// <reference path="../services/ToasterService.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().constant('ApiPrefix', 'vizportal/api/web/v1/');
    VizPortal.Module.instance().constant('RestApiPrefix', 'vizportal/api/rest/v1/');
    var SessionState;
    (function (SessionState) {
        SessionState[SessionState["Exists"] = 0] = "Exists";
        SessionState[SessionState["NoSession"] = 1] = "NoSession";
        SessionState[SessionState["Unknown"] = 2] = "Unknown";
    })(SessionState || (SessionState = {}));
    // Start at 7-digit numbers so these don't collide with server error codes
    (function (ErrorReason) {
        ErrorReason[ErrorReason["Canceled"] = 1000001] = "Canceled";
        ErrorReason[ErrorReason["ResourceNotFound"] = 1000002] = "ResourceNotFound";
        ErrorReason[ErrorReason["Unauthorized"] = 1000003] = "Unauthorized";
        ErrorReason[ErrorReason["Unknown"] = 1000004] = "Unknown";
    })(VizPortal.ErrorReason || (VizPortal.ErrorReason = {}));
    var ErrorReason = VizPortal.ErrorReason;
    (function (AuthLevel) {
        AuthLevel[AuthLevel["Anonymous"] = 0] = "Anonymous";
        AuthLevel[AuthLevel["Authenticated"] = 1] = "Authenticated";
        AuthLevel[AuthLevel["SiteAdmin"] = 2] = "SiteAdmin";
        AuthLevel[AuthLevel["SelfOrAdmin"] = 3] = "SelfOrAdmin";
        AuthLevel[AuthLevel["SelfOrServerAdmin"] = 4] = "SelfOrServerAdmin";
        AuthLevel[AuthLevel["ServerAdmin"] = 5] = "ServerAdmin";
    })(VizPortal.AuthLevel || (VizPortal.AuthLevel = {}));
    var AuthLevel = VizPortal.AuthLevel;
    VizPortal.MaxRequestArrayLength = 1000;
    var ServerService = (function () {
        function ServerService($http, $location, $q, $state, $stateParams, $translate, $cookies, apiPrefix, restApiPrefix, toaster, windowLocation, stateWrapperService) {
            this.$http = $http;
            this.$location = $location;
            this.$q = $q;
            this.$state = $state;
            this.$stateParams = $stateParams;
            this.$translate = $translate;
            this.$cookies = $cookies;
            this.apiPrefix = apiPrefix;
            this.restApiPrefix = restApiPrefix;
            this.toaster = toaster;
            this.windowLocation = windowLocation;
            this.stateWrapperService = stateWrapperService;
            this.sessionState = SessionState.Unknown;
            this.numSessionInfoRequests = 0;
            this.sessionInfoPromise = null;
            this.caseInsensitiveSiteUrlNames = new VizPortal.Set(function (siteUrlName) { return siteUrlName.toLowerCase(); });
        }
        ServerService.prototype.getSessionInfoPromise = function () {
            return this.sessionInfoPromise ? this.sessionInfoPromise : this.$q.when();
        };
        /**
         * Make a server request. If there is a request pending that might change the session,
         * wait until that request is finished before sending this one.
         */
        ServerService.prototype.sendRequest = function (request) {
            var _this = this;
            // Wait until any pending session info request is resolved before attempting the request
            if (this.numSessionInfoRequests > 0) {
                return this.sessionInfoPromise.then(function () { return _this.requestPost(request); });
            }
            return this.requestPost(request);
        };
        /**
         * Send a series of requests of the same type.
         * The results are combined using the given function.
         * If any request results in a broken promise,
         * then this method returns that broken promise.
         */
        ServerService.prototype.sendRequests = function (requests, combineResults) {
            var _this = this;
            var sendNextRequest = function (index, results) {
                return _this.sendRequest(requests[index]).then(function (result) {
                    results[index] = result;
                    var nextIndex = index + 1;
                    if (nextIndex < requests.length) {
                        return sendNextRequest(nextIndex, results);
                    }
                    else {
                        return combineResults(results);
                    }
                });
            };
            return sendNextRequest(0, []);
        };
        /**
         * Like sendRequests, but sends the requests in parallel.
         */
        ServerService.prototype.sendRequestsParallel = function (requests, combineResults) {
            var _this = this;
            var results = requests.map(function (request) {
                return _this.sendRequest(request);
            });
            return this.$q.all(results).then(function (results) {
                return combineResults(results);
            });
        };
        ServerService.prototype.login = function (username, password, siteUrlName) {
            var _this = this;
            return this.sessionInfoRequest(function () {
                return _this.requestPost(new VizPortal.ServerApi.GeneratePublicKeyRequest())
                    .then(function (generatePublicKeyResult) {
                    var loginParams = {
                        username: username,
                        encryptedPassword: rsa.encrypt(password, generatePublicKeyResult.key),
                        keyId: generatePublicKeyResult.keyId
                    };
                    if (_.isString(siteUrlName)) {
                        loginParams.siteUrlName = siteUrlName;
                    }
                    var loginRequest = new VizPortal.ServerApi.LoginRequest(loginParams);
                    return _this.requestPost(loginRequest)
                        .then(function (loginResult) {
                        if (loginResult.errors) {
                            return _this.$q.reject(loginResult.errors[0]);
                        }
                        return _this.setSessionInfo(loginResult);
                    });
                });
            });
        };
        ServerService.prototype.autoLogin = function (siteUrlName) {
            var _this = this;
            return this.sessionInfoRequest(function () {
                var loginParams = {};
                if (_.isString(siteUrlName)) {
                    loginParams.siteUrlName = siteUrlName;
                }
                var authType = _this.authenticationType();
                var loginRequest;
                switch (authType) {
                    case VizPortal.ServerApi.AuthenticationType.Sspi:
                        loginRequest = new VizPortal.ServerApi.SspiLoginRequest(loginParams);
                        break;
                    case VizPortal.ServerApi.AuthenticationType.Kerberos:
                        loginRequest = new VizPortal.ServerApi.KerberosLoginRequest(loginParams);
                        break;
                    case VizPortal.ServerApi.AuthenticationType.ClientCertificate:
                    case VizPortal.ServerApi.AuthenticationType.ClientCertificateWithFallback:
                        loginRequest = new VizPortal.ServerApi.ClientCertificateLoginRequest(loginParams);
                        break;
                }
                // This must be GET to get around an IE "feature". See B144390
                return _this.requestGet(loginRequest)
                    .then(function (sessionInfo) {
                    if (sessionInfo.errors) {
                        return _this.$q.reject(sessionInfo.errors[0] && sessionInfo.errors[0].code);
                    }
                    return _this.setSessionInfo(sessionInfo);
                }, function (reason) {
                    _this.clearSessionInfo();
                    if (reason === ErrorReason.Unauthorized || reason === ErrorReason.Unknown) {
                        switch (authType) {
                            case VizPortal.ServerApi.AuthenticationType.Sspi:
                                reason = VizPortal.LoginErrorCodes.SspiFailed;
                                break;
                            case VizPortal.ServerApi.AuthenticationType.Kerberos:
                                reason = VizPortal.LoginErrorCodes.KerberosFailed;
                                break;
                            case VizPortal.ServerApi.AuthenticationType.ClientCertificate:
                            case VizPortal.ServerApi.AuthenticationType.ClientCertificateWithFallback:
                                reason = VizPortal.LoginErrorCodes.ClientCertificateNotFound;
                                break;
                        }
                    }
                    return _this.$q.reject(reason);
                });
            });
        };
        ServerService.prototype.initialize = function (username, password, displayName) {
            var _this = this;
            return this.sessionInfoRequest(function () {
                return _this.requestPost(new VizPortal.ServerApi.GeneratePublicKeyRequest())
                    .then(function (generatePublicKeyResult) {
                    var encryptedPassword = rsa.encrypt(password, generatePublicKeyResult.key);
                    var initializeRequest;
                    if (_this.isServerDomainFamilyActiveDirectory()) {
                        initializeRequest = new VizPortal.ServerApi.InitializeServerWithActiveDirectoryUserRequest({
                            username: username,
                            encryptedPassword: encryptedPassword,
                            keyId: generatePublicKeyResult.keyId
                        });
                    }
                    else if (_this.isServerDomainFamilyLocal()) {
                        initializeRequest = new VizPortal.ServerApi.InitializeServerWithLocalUserRequest({
                            username: username,
                            encryptedPassword: encryptedPassword,
                            keyId: generatePublicKeyResult.keyId,
                            displayName: displayName
                        });
                    }
                    else if (_this.isServerDomainFamilyExternal()) {
                        initializeRequest = new VizPortal.ServerApi.InitializeServerWithExternalUserRequest({
                            username: username,
                            encryptedPassword: encryptedPassword,
                            keyId: generatePublicKeyResult.keyId
                        });
                    }
                    else {
                        throw new Error('Unknown domain family type. Current implementation only supports: AD, local, and external.');
                    }
                    return _this.requestPost(initializeRequest)
                        .then(function (initializeResult) {
                        if (initializeResult.errors) {
                            return _this.$q.reject(initializeResult.errors[0] && initializeResult.errors[0].code);
                        }
                        return _this.setSessionInfo(initializeResult);
                    });
                });
            });
        };
        /**
         * Returned promise will be fulfilled. All rejections are handled.
         * If there is an error, the code will be returned in the fulfilled handler.
         */
        ServerService.prototype.refreshSessionInfo = function () {
            var _this = this;
            return this.sessionInfoRequest(function () {
                return _this.requestPost(new VizPortal.ServerApi.GetSessionInfoRequest())
                    .then(function (result) {
                    if (result.errors) {
                        _this.sessionState = SessionState.NoSession;
                        return result.errors[0] && result.errors[0].code;
                    }
                    else {
                        return _this.setSessionInfo(result);
                    }
                })
                    .fail(function (reason) {
                    _this.clearSessionInfo();
                    return reason;
                });
            });
        };
        ServerService.prototype.refreshServerSettings = function () {
            var _this = this;
            return this.requestPost(new VizPortal.ServerApi.GetServerSettingsUnauthenticatedRequest())
                .then(function (result) {
                _this.serverSettings = result;
            });
        };
        ServerService.prototype.overrideAuthenticationType = function (authType) {
            this.authenticationTypeOverride = authType;
        };
        /**
         * Loads all state needed to render the app
         * Returns a promise that fulfills with a code indicating bootstrap state
         */
        ServerService.prototype.bootstrapSession = function () {
            var _this = this;
            var sessionInfoNoSessionReason = null;
            return this.$q.all([
                this.refreshServerSettings(),
                this.refreshSessionInfo()
            ]).then(function (results) {
                sessionInfoNoSessionReason = results[1];
                // Now that we have server settings and session info we can determine the language to display
                return _this.updateLanguageAndLocale();
            }).then(function () {
                return _this.$q.when(sessionInfoNoSessionReason);
            });
        };
        /**
         * This won't handle errors. Use SiteSwitchService.switchIfNeeded
         * to get the proper error feedback
         */
        ServerService.prototype.switchSiteIfNeeded = function (urlName, podRedirectPath) {
            var _this = this;
            return this.sessionInfoRequest(function () {
                // falsy values should be empty string for default site
                urlName = urlName || '';
                if (!_this.isCurrentSiteUrlName(urlName)) {
                    return _this.requestPost(new VizPortal.ServerApi.SwitchSiteRequest({ urlName: urlName }))
                        .then(function (sessionInfo) {
                        if (sessionInfo && sessionInfo.errors) {
                            var error = sessionInfo.errors[0];
                            if (error && error.code === VizPortal.SiteSwitchErrorCodes.AttemptedToSwitchSiteToCurrentSite) {
                                // No-op, do nothing
                                // Remember that this particular site url name is case insensitive
                                _this.caseInsensitiveSiteUrlNames.add(urlName);
                                return;
                            }
                            return _this.$q.reject(error);
                        }
                        _this.setSessionInfo(sessionInfo);
                    }, function (error) {
                        if (error && error.code === VizPortal.CommonErrorCode.RedirectToOtherPod) {
                            _this.redirectToOtherPod(error, podRedirectPath);
                            // If redirected, defer indefinitely, to prevent further execution here
                            return _this.$q.defer().promise;
                        }
                    });
                }
                return _this.$q.when(null);
            });
        };
        ServerService.prototype.redirectToOtherPod = function (error, destinationPodPath) {
            var destinationPodUrl = this.getDestinationPodFromError(error);
            var dest = destinationPodUrl + destinationPodPath;
            this.windowLocation.navigateToWithoutAddingToHistory(dest);
        };
        ServerService.prototype.isCurrentSiteUrlName = function (urlName) {
            if (this.caseInsensitiveSiteUrlNames.contains(urlName)) {
                return this.sessionSiteUrlName().toLowerCase() === urlName.toLowerCase();
            }
            return this.sessionSiteUrlName() === urlName;
        };
        ServerService.prototype.isUserAuthorized = function (role) {
            switch (role) {
                case AuthLevel.Anonymous:
                default:
                    return true;
                case AuthLevel.Authenticated:
                    return this.inSession();
                case AuthLevel.SiteAdmin:
                    return this.isSessionSiteOrServerAdmin();
                case AuthLevel.SelfOrAdmin:
                    // for the user place page, return true if an admin or the URL contains the
                    // username and domainName of the session user
                    return this.isSessionSiteOrServerAdmin() || this.isSessionUserSelf();
                case AuthLevel.SelfOrServerAdmin:
                    // for the user place page, return true if a server admin or the URL contains the
                    // username and domainName of the session user
                    return this.isSessionServerAdmin() || this.isSessionUserSelf();
                case AuthLevel.ServerAdmin:
                    return this.isSessionServerAdmin();
            }
        };
        ServerService.prototype.signOut = function () {
            var _this = this;
            this.requestPost(new VizPortal.ServerApi.LogoutRequest())
                .then(function (logoutResult) {
                // This causes all scripts to reload, so all client side app state will be cleared.
                _this.windowLocation.navigateTo(logoutResult.redirectUrl || '/');
            });
        };
        ServerService.prototype.sessionStateString = function () {
            return SessionState[this.sessionState];
        };
        ServerService.prototype.sessionUserInfo = function () {
            return this.sessionInfo && this.sessionInfo.user;
        };
        ServerService.prototype.isSessionRestrictedTrustedTicket = function () {
            return this.sessionInfo && this.sessionInfo.isRestrictedTrustedTicketSession;
        };
        ServerService.prototype.sessionUserDisplayName = function () {
            return this.sessionInfo && this.sessionInfo.user && this.sessionInfo.user.displayName || '';
        };
        ServerService.prototype.sessionUserId = function () {
            return this.sessionInfo && this.sessionInfo.user && this.sessionInfo.user.id;
        };
        ServerService.prototype.sessionAuthUserId = function () {
            return this.sessionInfo && this.sessionInfo.user && this.sessionInfo.user.authId;
        };
        ServerService.prototype.sessionSiteLuid = function () {
            return this.sessionInfo && this.sessionInfo.site && this.sessionInfo.site.luid;
        };
        ServerService.prototype.sessionUsername = function () {
            return this.sessionInfo && this.sessionInfo.user && this.sessionInfo.user.username;
        };
        ServerService.prototype.sessionUserDomainName = function () {
            return this.sessionInfo && this.sessionInfo.user && this.sessionInfo.user.domainName;
        };
        ServerService.prototype.inSession = function () {
            return !!this.sessionInfo;
        };
        // for the user place page, retu
        ServerService.prototype.isSessionUserEqualTo = function (username, domainName) {
            return this.sessionInfo && this.sessionInfo.user
                && this.sessionInfo.user.username === username
                && this.sessionInfo.user.domainName === domainName;
        };
        ServerService.prototype.isSessionUserSelf = function () {
            return this.isSessionUserEqualTo(this.$stateParams['username'], this.$stateParams['domainName']);
        };
        ServerService.prototype.isSessionServerAdmin = function () {
            return this.sessionInfo && this.sessionInfo.user && this.sessionInfo.user.serverAdmin;
        };
        ServerService.prototype.isSessionSiteAdmin = function () {
            return this.sessionInfo && this.sessionInfo.site.role === VizPortal.ServerApi.SiteRoles.SiteAdministrator;
        };
        ServerService.prototype.isSessionSiteOrServerAdmin = function () {
            return this.isSessionServerAdmin() || this.isSessionSiteAdmin();
        };
        ServerService.prototype.sessionSiteId = function () {
            return this.sessionInfo ? this.sessionInfo.site.id : '';
        };
        ServerService.prototype.sessionServerId = function () {
            return this.sessionInfo ? this.sessionInfo.server.logicalServerInstanceId : '';
        };
        ServerService.prototype.sessionSite = function () {
            return this.sessionInfo && this.sessionInfo.site;
        };
        ServerService.prototype.sessionSiteUrlName = function () {
            return (this.sessionInfo && this.sessionInfo.site.urlName) || '';
        };
        ServerService.prototype.sessionSiteName = function () {
            return this.sessionInfo ? this.sessionInfo.site.name : '';
        };
        ServerService.prototype.sessionServerVersion = function () {
            return this.sessionInfo ? this.sessionInfo.server.version : null;
        };
        ServerService.prototype.thirdPartyAuthState = function () {
            return (this.sessionInfo && this.sessionInfo.site.thirdPartyAuthState)
                || { allowed: false, enabled: false, serverEnabled: false, hasThirdPartyAuthenticatedUsers: false };
        };
        ServerService.prototype.isThirdPartyAuthAllowed = function () {
            return this.thirdPartyAuthState().allowed;
        };
        ServerService.prototype.isThirdPartyAuthConfiguredForServer = function () {
            return this.thirdPartyAuthState().serverEnabled;
        };
        ServerService.prototype.isThirdPartyAuthEnabled = function () {
            return this.thirdPartyAuthState().enabled;
        };
        ServerService.prototype.isThirdPartyAuthEditable = function () {
            // third party auth settings are editable when
            // * 3rd party auth is enabled
            // * or any user on the site is set to use 3rd party auth
            return this.thirdPartyAuthState().enabled || this.thirdPartyAuthState().hasThirdPartyAuthenticatedUsers;
        };
        ServerService.prototype.sessionSupportHost = function () {
            return this.sessionInfo && this.sessionInfo.server.supportHost;
        };
        ServerService.prototype.sessionSupportPath = function () {
            return this.sessionInfo && this.sessionInfo.server.supportPath;
        };
        ServerService.prototype.isSessionStateUnknown = function () {
            return this.sessionState === SessionState.Unknown;
        };
        ServerService.prototype.isSessionMultiSite = function () {
            return this.sessionInfo && this.sessionInfo.user && this.sessionInfo.user.numberOfSites > 1;
        };
        ServerService.prototype.isLogoutEnabled = function () {
            return this.sessionInfo && this.sessionInfo.site && this.sessionInfo.site.logoutEnabled;
        };
        ServerService.prototype.isLiveDBAvailable = function () {
            return this.sessionInfo && this.sessionInfo.site && this.sessionInfo.site.liveDBAvailable;
        };
        ServerService.prototype.siteLogo = function () {
            return this.sessionInfo && this.sessionInfo.site && this.sessionInfo.site.customization;
        };
        ServerService.prototype.isSiteCustomizationEnabled = function () {
            return this.sessionInfo && this.sessionInfo.server && this.sessionInfo.server.siteCustomizationEnabled;
        };
        ServerService.prototype.isTabAdminServiceEnabled = function () {
            return this.sessionInfo && this.sessionInfo.server && this.sessionInfo.server.tabAdminServiceEnabled;
        };
        ServerService.prototype.isSiteAdminSettingsEnabled = function () {
            return this.sessionInfo && this.sessionInfo.server && this.sessionInfo.server.siteAdminSettingsEnabled;
        };
        ServerService.prototype.waitForSession = function () {
            return (this.numSessionInfoRequests > 0) ? this.sessionInfoPromise : this.$q.when();
        };
        ServerService.prototype.sessionLanguage = function () {
            return this.sessionInfo && this.sessionInfo.user && this.sessionInfo.user.language;
        };
        ServerService.prototype.sessionLocale = function () {
            return this.sessionInfo && this.sessionInfo.user && this.sessionInfo.user.locale;
        };
        ServerService.prototype.updateDisplayNameAllowed = function () {
            return this.sessionInfo && this.sessionInfo.server && this.sessionInfo.server.updateDisplayNameAllowed;
        };
        ServerService.prototype.defaultSubscriptionsEmail = function () {
            return this.sessionInfo && this.sessionInfo.server && this.sessionInfo.server.defaultSubscriptionsEmail;
        };
        ServerService.prototype.featureFlags = function () {
            return this.sessionInfo && this.sessionInfo.server && this.sessionInfo.server.featureFlags;
        };
        ServerService.prototype.changePasswordUrl = function () {
            return this.sessionInfo && this.sessionInfo.server && this.sessionInfo.server.changePasswordUrl;
        };
        ServerService.prototype.datasourceHelpUrl = function () {
            return this.sessionInfo && this.sessionInfo.server && this.sessionInfo.server.datasourceHelpUrl;
        };
        ServerService.prototype.offlineHelpEnabled = function () {
            return this.sessionInfo && this.sessionInfo.server && this.sessionInfo.server.offlineHelpEnabled;
        };
        ServerService.prototype.helpEdition = function () {
            return this.sessionInfo && this.sessionInfo.server && this.sessionInfo.server.helpEdition;
        };
        ServerService.prototype.oauthGoogleEnabled = function () {
            return this.sessionInfo && this.sessionInfo.server && this.sessionInfo.server.oauthGoogleEnabled;
        };
        ServerService.prototype.oauthSalesforceEnabled = function () {
            return this.sessionInfo && this.sessionInfo.server && this.sessionInfo.server.oauthSalesforceEnabled;
        };
        ServerService.prototype.rebuildingSearchIndex = function () {
            return this.sessionInfo && this.sessionInfo.server && this.sessionInfo.server.rebuildingSearchIndex;
        };
        ServerService.prototype.canSessionUserManageUsers = function () {
            return this.sessionInfo && this.sessionInfo.user && this.sessionInfo.user.canManageUsers;
        };
        ServerService.prototype.domainFamily = function () {
            return this.serverSettings && this.serverSettings.domainFamily;
        };
        ServerService.prototype.isServerDomainFamilyActiveDirectory = function () {
            return this.serverSettings && this.serverSettings.domainFamily === VizPortal.ServerApi.DomainFamily.ActiveDirectory;
        };
        ServerService.prototype.isServerDomainFamilyLocal = function () {
            return this.serverSettings && this.serverSettings.domainFamily === VizPortal.ServerApi.DomainFamily.Local;
        };
        ServerService.prototype.isServerDomainFamilyExternal = function () {
            return this.serverSettings && this.serverSettings.domainFamily === VizPortal.ServerApi.DomainFamily.External;
        };
        ServerService.prototype.getStartPage = function () {
            return this.sessionInfo && this.sessionInfo.user && this.sessionInfo.user.startPage || '/';
        };
        ServerService.prototype.sessionUserDisplayMode = function () {
            return this.sessionInfo && this.sessionInfo.user && this.sessionInfo.user.displayMode;
        };
        ServerService.prototype.isAlertFailureCountEnabled = function () {
            return this.sessionInfo.server.alertFailureCountEnabled;
        };
        // Server Settings
        ServerService.prototype.authenticationType = function () {
            return this.authenticationTypeOverride || this.serverSettings && this.serverSettings.authenticationType && this.serverSettings.authenticationType.type;
        };
        ServerService.prototype.licenseExpirationDateIfWithinWarningPeriod = function () {
            return this.serverSettings && this.serverSettings.licenseExpirationDate;
        };
        ServerService.prototype.serverCustomization = function () {
            return this.serverSettings && this.serverSettings.customization;
        };
        ServerService.prototype.serverName = function () {
            var customization = this.serverCustomization();
            return customization && customization.serverName || this.$translate.instant(VizPortal.L10n.Keys.title);
        };
        ServerService.prototype.serverLanguage = function () {
            return this.serverSettings && this.serverSettings.defaultLanguage;
        };
        ServerService.prototype.serverLocale = function () {
            return this.serverSettings && this.serverSettings.defaultLocale;
        };
        ServerService.prototype.isGuestEnabled = function () {
            return this.serverSettings && this.serverSettings.guestEnabled;
        };
        ServerService.prototype.preloginCustomization = function () {
            return this.serverSettings && this.serverSettings.preloginCustomization;
        };
        /**
         * Requests that could change the session must make the request through this method
         */
        ServerService.prototype.sessionInfoRequest = function (makeRequest) {
            var _this = this;
            if (this.numSessionInfoRequests > 0) {
                // If existing session info request, make this request once it is completed.
                this.sessionInfoPromise = this.sessionInfoPromise.then(makeRequest);
            }
            else {
                this.sessionInfoPromise = makeRequest();
            }
            this.numSessionInfoRequests++;
            this.sessionInfoPromise.fin(function () {
                _this.numSessionInfoRequests--;
            });
            return this.sessionInfoPromise;
        };
        ServerService.prototype.getFirstErrorFromResponse = function (response) {
            return response && response.data && response.data.result &&
                response.data.result.errors && response.data.result.errors[0];
        };
        ServerService.prototype.getCodeFromError = function (error) {
            return error && error.code;
        };
        ServerService.prototype.getDestinationPodFromError = function (error) {
            var podRedirectionError = error;
            return podRedirectionError && podRedirectionError.destinationPodUrl;
        };
        ServerService.prototype.request = function (requestConfig) {
            var _this = this;
            return this.$http(requestConfig)
                .then(function (successResponse) {
                var error = _this.getFirstErrorFromResponse(successResponse);
                var code = _this.getCodeFromError(error);
                if (_this.maybeHandleSearchServerDown(code)) {
                    return _this.$q.reject(code);
                }
                var location = _this.getDestinationPodFromError(error);
                if (_this.maybeHandleRedirectionToOtherPod(code, location)) {
                    return _this.$q.reject(error);
                }
                return successResponse.data && !_.isUndefined(successResponse.data.result)
                    ? successResponse.data.result
                    : null;
            }, function (errorResponse) {
                var reason = _this.getCodeFromError(_this.getFirstErrorFromResponse(errorResponse));
                if (errorResponse.status === 401) {
                    _this.handle401(reason);
                }
                return _this.$q.reject(reason || ErrorReason.Unknown);
            });
        };
        ServerService.prototype.requestGet = function (request) {
            var queryParams = '';
            if (request.params) {
                var requestParamsAsQueryParams = $.param(request.params);
                if (requestParamsAsQueryParams) {
                    queryParams = '?' + requestParamsAsQueryParams;
                }
            }
            return this.request({
                method: 'GET',
                url: this.apiPrefix + request.method + queryParams
            });
        };
        ServerService.prototype.requestPost = function (request) {
            return this.request({
                method: 'POST',
                url: this.apiPrefix + request.method,
                data: request
            });
        };
        ServerService.prototype.requestPostFormDataToRestApi = function (formData, method) {
            return this.request({
                method: 'POST',
                // Do not serialize into JSON (which is Angular's default) so we can send binary data
                transformRequest: function (data) { return data; },
                // Allow browser to choose Content-Type to get boundry needed for binary data
                // see: https://groups.google.com/d/msg/angular/MBf8qvBpuVE/krmd75giKJUJ
                headers: { 'Content-Type': undefined },
                url: this.restApiPrefix + method,
                data: formData
            });
        };
        ServerService.prototype.handle401 = function (reason) {
            // If we are not in a state (i.e. app has not bootstrapped) or if we are in an anonymous state
            if (!this.$state.current.name || this.$state.current.data.authLevel === AuthLevel.Anonymous) {
                return;
            }
            if (this.isAuthenticationAutoLogin() || this.isAuthenticationExternal()) {
                // For these auth types we can't give an error message that the user's session expired
                // so just refresh the page and let vizportal re-bootstrap and re-authenticate
                this.windowLocation.reload();
            }
            else {
                // For other auth types we can give a "session expired" error message, so do that
                var href = this.$state.href('login.authenticate', {
                    redirect: this.$location.url() || null,
                    error: reason || VizPortal.CommonErrorCode.InvalidSession
                });
                // We must remove the hash so the browser does a full page load. The /signin route is a special
                // route that apache will rewrite to /#/signin with query params intact
                this.windowLocation.navigateTo(href.replace(/^#/, ''));
            }
        };
        ServerService.prototype.maybeHandleSearchServerDown = function (errorCode) {
            if (errorCode && errorCode === VizPortal.SolrErrorCode.SolrCommunicationError || errorCode === VizPortal.SolrErrorCode.SolrDisabled) {
                if (!this.isUserAuthorized(AuthLevel.ServerAdmin)) {
                    this.$state.go('login.error.errorCode', { errorCode: errorCode });
                }
                else if (!this.$state.is('main.server.status')) {
                    this.$state.go('main.error', {
                        detailsLocKey: 'searchServerDown',
                        redirectState: 'main.server.status',
                        redirectLocKey: 'goToServerStatus'
                    });
                }
                return true;
            }
            else {
                return false;
            }
        };
        ServerService.prototype.maybeHandleRedirectionToOtherPod = function (errorCode, destinationPodUrl) {
            return errorCode && (errorCode === VizPortal.CommonErrorCode.RedirectToOtherPod) && (destinationPodUrl !== null);
        };
        ServerService.prototype.isAuthenticationAutoLogin = function () {
            return this.isWindowsCredentialsAutoLogin() ||
                this.authenticationType() === VizPortal.ServerApi.AuthenticationType.ClientCertificate ||
                this.authenticationType() === VizPortal.ServerApi.AuthenticationType.ClientCertificateWithFallback;
        };
        ServerService.prototype.isWindowsCredentialsAutoLogin = function () {
            return this.authenticationType() === VizPortal.ServerApi.AuthenticationType.Sspi ||
                this.authenticationType() === VizPortal.ServerApi.AuthenticationType.Kerberos;
        };
        ServerService.prototype.isAuthenticationSaml = function () {
            return this.authenticationType() === VizPortal.ServerApi.AuthenticationType.Saml;
        };
        ServerService.prototype.isAuthenticationOpenId = function () {
            return this.authenticationType() === VizPortal.ServerApi.AuthenticationType.OpenId;
        };
        ServerService.prototype.isAuthenticationExternal = function () {
            return this.isAuthenticationSaml() || this.isAuthenticationOpenId();
        };
        ServerService.prototype.getSessionIdleLimitSeconds = function () {
            // TODO: remove the 5 minute default when the backend implements this. B144748
            return this.sessionInfo && this.sessionInfo.server && this.sessionInfo.server.sessionIdleLimitSeconds || 5 * 60;
        };
        ServerService.prototype.setSessionInfo = function (newSessionInfo) {
            var _this = this;
            this.sessionInfo = newSessionInfo;
            this.sessionState = SessionState.Exists;
            FeatureFlagsHelper.overwriteFeatureFlagsFromServerFeatureFlags(newSessionInfo.server.featureFlags, VizPortal.FeatureFlags);
            return this.updateLanguageAndLocale().then(function () {
                _this.showOrHideRebuildingSearchIndexToast();
            });
        };
        ServerService.prototype.clearSessionInfo = function () {
            this.sessionState = SessionState.NoSession;
            this.sessionInfo = null;
        };
        ServerService.prototype.showOrHideRebuildingSearchIndexToast = function () {
            if (this.inSession() && VizPortal.L10n.language && this.rebuildingSearchIndex()) {
                if (!this.rebuildingSearchIndexToast || this.rebuildingSearchIndexToast.isClosed) {
                    this.toaster.pop({
                        type: VizPortal.ToastType.Error,
                        text: this.$translate.instant('rebuildingSearchIndexMessage')
                    });
                    this.rebuildingSearchIndexToast = this.toaster.toasts[this.toaster.toasts.length - 1];
                }
            }
            else {
                if (this.rebuildingSearchIndexToast) {
                    this.toaster.close(this.rebuildingSearchIndexToast.id);
                }
            }
        };
        ServerService.prototype.updateLanguageAndLocale = function () {
            var _this = this;
            var oldLanguage = VizPortal.L10n.language;
            var oldLocale = VizPortal.L10n.locale;
            var newLanguage = this.sessionLanguage() || this.serverLanguage() || 'en';
            var newLocale = this.sessionLocale() || this.serverLocale() || 'en_US';
            var languagePromise = this.$q.when();
            var localePromise = this.$q.when();
            if (newLanguage !== oldLanguage) {
                VizPortal.L10n.language = newLanguage;
                languagePromise = this.$translate.use(newLanguage).then(function () {
                    // If we update the language again before this request completes, ignore the result.
                    if (VizPortal.L10n.language === newLanguage) {
                        document.title = _this.serverName();
                    }
                });
            }
            if (newLocale !== oldLocale) {
                VizPortal.L10n.locale = newLocale;
                localePromise = this.$q.all([
                    this.getSupplementalLocaleJson(),
                    this.getLocaleJson(newLocale)
                ]).then(function (results) {
                    // If we update the locale again before this request completes, ignore the result.
                    if (VizPortal.L10n.locale === newLocale) {
                        VizPortal.L10n.loadLocaleJson(results[1]); // result of the second promise (locale-specific json)
                        VizPortal.L10n.useLocale(newLocale);
                    }
                });
            }
            return this.$q.all([languagePromise, localePromise]);
        };
        ServerService.prototype.getSupplementalLocaleJson = function () {
            if (!this.supplementalLocaleJsonPromise) {
                this.supplementalLocaleJsonPromise = this.getLocaleJson('supplemental').then(function (data) {
                    VizPortal.L10n.loadLocaleJson(data);
                });
            }
            return this.supplementalLocaleJsonPromise;
        };
        ServerService.prototype.getLocaleJson = function (fileName) {
            return this.$http.get('locales/' + fileName + '.json')
                .then(function (response) {
                return response.data;
            });
        };
        ServerService.prototype.updateSiteLogo = function (file, resetToDefaultLogo) {
            var formData = new FormData();
            formData.append('updateSiteCustomLogoInput', file);
            formData.append(VizPortal.CookieKeys.XsrfToken, this.$cookies[VizPortal.CookieKeys.XsrfToken]);
            formData.append('useCustomLogo', !resetToDefaultLogo);
            formData.append('useIframeResponse', false);
            return this.requestPostFormDataToRestApi(formData, 'updateSiteLogo');
        };
        ServerService.$inject = [
            '$http',
            '$location',
            '$q',
            '$state',
            '$stateParams',
            '$translate',
            '$cookies',
            'ApiPrefix',
            'RestApiPrefix',
            'ToasterService',
            'WindowLocationService',
            'StateWrapperService'
        ];
        return ServerService;
    })();
    VizPortal.ServerService = ServerService;
    VizPortal.Module.instance().service('ServerService', ServerService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../models/ContentFilters.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/UpdateDisplayModeRequest.ts" />
/// <reference path="../ServerApi/types/ISessionInfo.ts" />
/// <reference path="../services/ServerService.ts" />
var VizPortal;
(function (VizPortal) {
    var DisplaySettingsService = (function () {
        function DisplaySettingsService($location, ServerService, BrowserSupportService) {
            this.$location = $location;
            this.ServerService = ServerService;
            this.BrowserSupportService = BrowserSupportService;
            this.displayModeUpdatedFromSession = false;
            this.displayModeUpdatedFromUrl = false;
            this.displayMode = DisplaySettingsService.DefaultDisplayMode;
            this.topBar = {
                collapsed: false,
                height: null
            };
            this.showFilterPanel = !BrowserSupportService.isTouch();
        }
        DisplaySettingsService.prototype.saveDisplayMode = function () {
            this.ServerService.sendRequest(new VizPortal.ServerApi.UpdateDisplayModeRequest({ displayMode: this.displayMode }));
            if (this.$location.search().mode) {
                this.$location.search('mode', this.displayMode);
            }
        };
        DisplaySettingsService.prototype.maybeUpdateDisplayModeFromSession = function () {
            if (!this.displayModeUpdatedFromSession && !this.displayModeUpdatedFromUrl) {
                this.displayModeUpdatedFromSession = true;
                var displayMode = this.ServerService.sessionUserDisplayMode();
                if (displayMode) {
                    this.displayMode = displayMode;
                }
            }
        };
        DisplaySettingsService.prototype.updateDisplayModeFromUrl = function () {
            this.displayMode = this.getDisplayModeFromUrl(this.displayMode);
        };
        DisplaySettingsService.prototype.getDisplayModeFromUrl = function (currentDisplayMode) {
            var urlParams = this.$location.search();
            var displayMode = urlParams.mode;
            switch (displayMode) {
                case VizPortal.ServerApi.DisplayModes.list:
                case VizPortal.ServerApi.DisplayModes.thumbnail:
                    this.displayModeUpdatedFromUrl = true;
                    return displayMode;
                default:
                    this.displayModeUpdatedFromUrl = false;
                    return currentDisplayMode;
            }
        };
        DisplaySettingsService.prototype.updateShowFilterPanel = function () {
            var _this = this;
            // show filter panel if any filters are active
            _.each(_.keys(this.$location.search()), function (key) {
                if (_.has(VizPortal.ContentFiltersKeys, key)) {
                    _this.showFilterPanel = true;
                }
            });
        };
        DisplaySettingsService.DefaultDisplayMode = VizPortal.ServerApi.DisplayModes.thumbnail;
        DisplaySettingsService.$inject = [
            '$location',
            'ServerService',
            'BrowserSupportService'
        ];
        return DisplaySettingsService;
    })();
    VizPortal.DisplaySettingsService = DisplaySettingsService;
    VizPortal.Module.instance().service('DisplaySettingsService', DisplaySettingsService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../ts/libs.ts" />
/// <reference path="../ts/services/DisplaySettingsService.ts" />
/// <reference path="../ts/libs.ts" />
/// <reference path="../ts/libs.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.UrlParamKeys = {
        SiteUrlName: 'siteUrlName',
        IsFromSaml: ':isFromSaml',
        ClosePopupWhenDone: 'closePopupWhenDone',
        AuthenticationType: 'auth'
    };
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/ServerService.ts" />
var VizPortal;
(function (VizPortal) {
    var BrowserTitleService = (function () {
        function BrowserTitleService($translate, ServerService) {
            this.$translate = $translate;
            this.ServerService = ServerService;
        }
        BrowserTitleService.prototype.setTitle = function (placeKey, object) {
            document.title = this.getTitle(placeKey, object);
        };
        BrowserTitleService.prototype.getTitle = function (placeKey, object) {
            var serverName = this.ServerService.serverName();
            if (placeKey) {
                var place = this.$translate.instant(placeKey);
                if (object) {
                    return this.$translate.instant('browserTitle_objectPlace', { OBJECT: object, PLACE: place, SERVER_NAME: serverName });
                }
                else {
                    return this.$translate.instant('browserTitle_place', { PLACE: place, SERVER_NAME: serverName });
                }
            }
            else {
                return serverName;
            }
        };
        BrowserTitleService.prototype.setVizTitle = function (viewName, workbookName) {
            var serverName = this.ServerService.serverName();
            document.title = this.$translate.instant('browserTitle_viz', { VIEW: viewName, WORKBOOK: workbookName, SERVER_NAME: serverName });
        };
        BrowserTitleService.$inject = [
            '$translate',
            'ServerService'
        ];
        return BrowserTitleService;
    })();
    VizPortal.BrowserTitleService = BrowserTitleService;
    VizPortal.Module.instance().service('BrowserTitleService', BrowserTitleService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    // From workgroup\java\tab-model-workgroup\src\com\tableausoftware\domain\content\exceptions\errorcodes
    // CONSIDER: code-gen this file from the Java sources?
    (function (CommonErrorCode) {
        CommonErrorCode[CommonErrorCode["None"] = 0] = "None";
        CommonErrorCode[CommonErrorCode["CallingUserInsufficientPermissions"] = 1] = "CallingUserInsufficientPermissions";
        CommonErrorCode[CommonErrorCode["SiteUserNotFound"] = 4] = "SiteUserNotFound";
        CommonErrorCode[CommonErrorCode["SystemUserNotFound"] = 5] = "SystemUserNotFound";
        CommonErrorCode[CommonErrorCode["GroupNotFound"] = 6] = "GroupNotFound";
        CommonErrorCode[CommonErrorCode["WorkbookNotFound"] = 7] = "WorkbookNotFound";
        CommonErrorCode[CommonErrorCode["ViewNotFound"] = 8] = "ViewNotFound";
        CommonErrorCode[CommonErrorCode["ProjectNotFound"] = 9] = "ProjectNotFound";
        CommonErrorCode[CommonErrorCode["DataConnectionNotFound"] = 10] = "DataConnectionNotFound";
        CommonErrorCode[CommonErrorCode["DatasourceNotFound"] = 11] = "DatasourceNotFound";
        CommonErrorCode[CommonErrorCode["SiteNotFound"] = 12] = "SiteNotFound";
        CommonErrorCode[CommonErrorCode["EncryptionTokenNotFound"] = 13] = "EncryptionTokenNotFound";
        CommonErrorCode[CommonErrorCode["FileUploadNotFound"] = 14] = "FileUploadNotFound";
        CommonErrorCode[CommonErrorCode["AdGroupNotFound"] = 15] = "AdGroupNotFound";
        CommonErrorCode[CommonErrorCode["UnexpectedErrorOccurred"] = 17] = "UnexpectedErrorOccurred";
        CommonErrorCode[CommonErrorCode["InvalidNumberOrderClauses"] = 18] = "InvalidNumberOrderClauses";
        CommonErrorCode[CommonErrorCode["InvalidPageSize"] = 19] = "InvalidPageSize";
        CommonErrorCode[CommonErrorCode["InvalidStartIndex"] = 20] = "InvalidStartIndex";
        CommonErrorCode[CommonErrorCode["InvalidNumberFilterClauses"] = 21] = "InvalidNumberFilterClauses";
        CommonErrorCode[CommonErrorCode["InvalidSortClauseFieldName"] = 22] = "InvalidSortClauseFieldName";
        CommonErrorCode[CommonErrorCode["InProgress"] = 23] = "InProgress";
        CommonErrorCode[CommonErrorCode["UnexpectedNullOrEmptyParameter"] = 24] = "UnexpectedNullOrEmptyParameter";
        CommonErrorCode[CommonErrorCode["UnexpectedParameterValue"] = 25] = "UnexpectedParameterValue";
        CommonErrorCode[CommonErrorCode["DomainNotFound"] = 26] = "DomainNotFound";
        CommonErrorCode[CommonErrorCode["CommentNotFound"] = 27] = "CommentNotFound";
        CommonErrorCode[CommonErrorCode["AsyncJobNotFound"] = 28] = "AsyncJobNotFound";
        CommonErrorCode[CommonErrorCode["SubscriptionNotFound"] = 29] = "SubscriptionNotFound";
        CommonErrorCode[CommonErrorCode["ADUserNotFound"] = 30] = "ADUserNotFound";
        CommonErrorCode[CommonErrorCode["InvalidSession"] = 46] = "InvalidSession";
        CommonErrorCode[CommonErrorCode["UnlicensedServer"] = 50] = "UnlicensedServer";
        CommonErrorCode[CommonErrorCode["InsecureSAMLEndpoint"] = 53] = "InsecureSAMLEndpoint";
        CommonErrorCode[CommonErrorCode["RedirectToOtherPod"] = 55] = "RedirectToOtherPod";
        CommonErrorCode[CommonErrorCode["SiteSAMLUserCannotAddTableauIDUser"] = 64] = "SiteSAMLUserCannotAddTableauIDUser";
        CommonErrorCode[CommonErrorCode["FeatureNotEnabled"] = 67] = "FeatureNotEnabled";
        CommonErrorCode[CommonErrorCode["FileSizeTooLarge"] = 68] = "FileSizeTooLarge";
    })(VizPortal.CommonErrorCode || (VizPortal.CommonErrorCode = {}));
    var CommonErrorCode = VizPortal.CommonErrorCode;
    (function (AlertErrorCode) {
        AlertErrorCode[AlertErrorCode["AlertUnknownFailure"] = 1000] = "AlertUnknownFailure";
        AlertErrorCode[AlertErrorCode["AlertRemoteUnknownFailure"] = 1001] = "AlertRemoteUnknownFailure";
        AlertErrorCode[AlertErrorCode["AlertSignInFailed"] = 2000] = "AlertSignInFailed";
        AlertErrorCode[AlertErrorCode["AlertRemoteSignInFailed"] = 2001] = "AlertRemoteSignInFailed";
        AlertErrorCode[AlertErrorCode["AlertExpiredPassword"] = 2100] = "AlertExpiredPassword";
        AlertErrorCode[AlertErrorCode["AlertRemoteExpiredPassword"] = 2101] = "AlertRemoteExpiredPassword";
        AlertErrorCode[AlertErrorCode["AlertAccessTokenValidation"] = 2200] = "AlertAccessTokenValidation";
        AlertErrorCode[AlertErrorCode["AlertAuthConfiguration"] = 2300] = "AlertAuthConfiguration";
        AlertErrorCode[AlertErrorCode["AlertConnectionFailure"] = 3000] = "AlertConnectionFailure";
        AlertErrorCode[AlertErrorCode["AlertRemoteConnectionFailure"] = 3001] = "AlertRemoteConnectionFailure";
        AlertErrorCode[AlertErrorCode["AlertOverlappingSchedules"] = 4000] = "AlertOverlappingSchedules";
        AlertErrorCode[AlertErrorCode["AlertFullRefreshRequired"] = 5000] = "AlertFullRefreshRequired";
        AlertErrorCode[AlertErrorCode["AlertConnectionlessFailure"] = 10000] = "AlertConnectionlessFailure";
    })(VizPortal.AlertErrorCode || (VizPortal.AlertErrorCode = {}));
    var AlertErrorCode = VizPortal.AlertErrorCode;
    (function (DataConnectionErrorCode) {
        DataConnectionErrorCode[DataConnectionErrorCode["DataConnectionNullOrEmptyDataConnectionIds"] = 60000] = "DataConnectionNullOrEmptyDataConnectionIds";
        DataConnectionErrorCode[DataConnectionErrorCode["UpdateConnectionsInvalidPort"] = 60005] = "UpdateConnectionsInvalidPort";
    })(VizPortal.DataConnectionErrorCode || (VizPortal.DataConnectionErrorCode = {}));
    var DataConnectionErrorCode = VizPortal.DataConnectionErrorCode;
    (function (DatasourceErrorCode) {
        DatasourceErrorCode[DatasourceErrorCode["DatasourceDescriptionGreaterThanMaxLength"] = 50000] = "DatasourceDescriptionGreaterThanMaxLength";
        DatasourceErrorCode[DatasourceErrorCode["DatasourceMoveInsufficientPermissionsOnDestinationProject"] = 50001] = "DatasourceMoveInsufficientPermissionsOnDestinationProject";
        DatasourceErrorCode[DatasourceErrorCode["DatasourceMoveInsufficientPermissionsOnSourceProject"] = 50002] = "DatasourceMoveInsufficientPermissionsOnSourceProject";
        DatasourceErrorCode[DatasourceErrorCode["DatasourceMoveInsufficientPermissionsOnDatasource"] = 50003] = "DatasourceMoveInsufficientPermissionsOnDatasource";
        DatasourceErrorCode[DatasourceErrorCode["DatasourceWithSameNameInDestinationProject"] = 50004] = "DatasourceWithSameNameInDestinationProject";
        DatasourceErrorCode[DatasourceErrorCode["DatasourceNullOrEmptyProjectIds"] = 50005] = "DatasourceNullOrEmptyProjectIds";
        DatasourceErrorCode[DatasourceErrorCode["DatasourceNullOrEmptyUserIds"] = 50006] = "DatasourceNullOrEmptyUserIds";
        DatasourceErrorCode[DatasourceErrorCode["DatasourceNullOrEmptyDatasourceIds"] = 50007] = "DatasourceNullOrEmptyDatasourceIds";
        DatasourceErrorCode[DatasourceErrorCode["DatasourceNullOrEmptyWorkbookIds"] = 50008] = "DatasourceNullOrEmptyWorkbookIds";
        DatasourceErrorCode[DatasourceErrorCode["DatasourceChangeOwnerDisabled"] = 50009] = "DatasourceChangeOwnerDisabled";
        DatasourceErrorCode[DatasourceErrorCode["DatasourceChangeOwnerToGuest"] = 50010] = "DatasourceChangeOwnerToGuest";
    })(VizPortal.DatasourceErrorCode || (VizPortal.DatasourceErrorCode = {}));
    var DatasourceErrorCode = VizPortal.DatasourceErrorCode;
    (function (UnifiedDatasourceErrorCode) {
        UnifiedDatasourceErrorCode[UnifiedDatasourceErrorCode["UnifiedDatasourceNullOrEmptyDatasourceIds"] = 160000] = "UnifiedDatasourceNullOrEmptyDatasourceIds";
        UnifiedDatasourceErrorCode[UnifiedDatasourceErrorCode["OperationOnlySupportedForPublishedDatasource"] = 160001] = "OperationOnlySupportedForPublishedDatasource";
    })(VizPortal.UnifiedDatasourceErrorCode || (VizPortal.UnifiedDatasourceErrorCode = {}));
    var UnifiedDatasourceErrorCode = VizPortal.UnifiedDatasourceErrorCode;
    (function (LoginErrorCodes) {
        LoginErrorCodes[LoginErrorCodes["BadCredentials"] = 16] = "BadCredentials";
        LoginErrorCodes[LoginErrorCodes["SspiFailed"] = 42] = "SspiFailed";
        LoginErrorCodes[LoginErrorCodes["KerberosFailed"] = 43] = "KerberosFailed";
        LoginErrorCodes[LoginErrorCodes["ClientCertificateNotFound"] = 59] = "ClientCertificateNotFound";
        LoginErrorCodes[LoginErrorCodes["ClientCertificateUserNotFoundInCertificate"] = 60] = "ClientCertificateUserNotFoundInCertificate";
        LoginErrorCodes[LoginErrorCodes["ClientCertificateUserNotFoundOnServer"] = 61] = "ClientCertificateUserNotFoundOnServer";
        LoginErrorCodes[LoginErrorCodes["OpenIdFailed"] = 69] = "OpenIdFailed";
    })(VizPortal.LoginErrorCodes || (VizPortal.LoginErrorCodes = {}));
    var LoginErrorCodes = VizPortal.LoginErrorCodes;
    (function (ProjectErrorCode) {
        ProjectErrorCode[ProjectErrorCode["ProjectNullOrEmptyProjectIds"] = 30000] = "ProjectNullOrEmptyProjectIds";
        ProjectErrorCode[ProjectErrorCode["ProjectNullOrEmptyUserIds"] = 30001] = "ProjectNullOrEmptyUserIds";
        ProjectErrorCode[ProjectErrorCode["ProjectNameAlreadyExists"] = 30002] = "ProjectNameAlreadyExists";
        ProjectErrorCode[ProjectErrorCode["ProjectNameTooLong"] = 30003] = "ProjectNameTooLong";
        ProjectErrorCode[ProjectErrorCode["ProjectDescriptionGreaterThanMaxLength"] = 30004] = "ProjectDescriptionGreaterThanMaxLength";
        ProjectErrorCode[ProjectErrorCode["ProjectChangeOwnerDisabled"] = 30005] = "ProjectChangeOwnerDisabled";
        ProjectErrorCode[ProjectErrorCode["ProjectDefaultAlreadyExists"] = 30006] = "ProjectDefaultAlreadyExists";
        ProjectErrorCode[ProjectErrorCode["ProjectNameEmpty"] = 30007] = "ProjectNameEmpty";
        ProjectErrorCode[ProjectErrorCode["DeletingDefaultProject"] = 30010] = "DeletingDefaultProject";
        ProjectErrorCode[ProjectErrorCode["DefaultProjectCannotBeRenamed"] = 30011] = "DefaultProjectCannotBeRenamed";
        ProjectErrorCode[ProjectErrorCode["TargetUserInsufficientPermissions"] = 30012] = "TargetUserInsufficientPermissions";
    })(VizPortal.ProjectErrorCode || (VizPortal.ProjectErrorCode = {}));
    var ProjectErrorCode = VizPortal.ProjectErrorCode;
    (function (TagErrorCode) {
        TagErrorCode[TagErrorCode["TagNameTooLong"] = 110000] = "TagNameTooLong";
    })(VizPortal.TagErrorCode || (VizPortal.TagErrorCode = {}));
    var TagErrorCode = VizPortal.TagErrorCode;
    (function (WorkbookErrorCode) {
        WorkbookErrorCode[WorkbookErrorCode["WorkbookDisabled"] = 40000] = "WorkbookDisabled";
        WorkbookErrorCode[WorkbookErrorCode["WorkbookDestinationProjectNotFound"] = 40001] = "WorkbookDestinationProjectNotFound";
        WorkbookErrorCode[WorkbookErrorCode["WorkbookMoveInsufficientPermissionsOnDestinationProject"] = 40002] = "WorkbookMoveInsufficientPermissionsOnDestinationProject";
        WorkbookErrorCode[WorkbookErrorCode["WorkbookMoveInsufficientPermissionsOnSourceProject"] = 40003] = "WorkbookMoveInsufficientPermissionsOnSourceProject";
        WorkbookErrorCode[WorkbookErrorCode["WorkbookMoveInsufficientPermissionsOnWorkbook"] = 40004] = "WorkbookMoveInsufficientPermissionsOnWorkbook";
        WorkbookErrorCode[WorkbookErrorCode["WorkbookNameAlreadyExistsInDestinationProject"] = 40005] = "WorkbookNameAlreadyExistsInDestinationProject";
        WorkbookErrorCode[WorkbookErrorCode["WorkbookDescriptionTooLong"] = 40006] = "WorkbookDescriptionTooLong";
        WorkbookErrorCode[WorkbookErrorCode["WorkbookInvalidViewPath"] = 40007] = "WorkbookInvalidViewPath";
        WorkbookErrorCode[WorkbookErrorCode["WorkbookNullOrEmptyWorkbookIds"] = 40008] = "WorkbookNullOrEmptyWorkbookIds";
        WorkbookErrorCode[WorkbookErrorCode["WorkbookNullOrEmptyViewIds"] = 40009] = "WorkbookNullOrEmptyViewIds";
        WorkbookErrorCode[WorkbookErrorCode["WorkbookNullOrEmptyUserIds"] = 40010] = "WorkbookNullOrEmptyUserIds";
    })(VizPortal.WorkbookErrorCode || (VizPortal.WorkbookErrorCode = {}));
    var WorkbookErrorCode = VizPortal.WorkbookErrorCode;
    (function (SiteSwitchErrorCodes) {
        SiteSwitchErrorCodes[SiteSwitchErrorCodes["UserNotMemberOfSiteOrSiteNotExist"] = 16] = "UserNotMemberOfSiteOrSiteNotExist";
        SiteSwitchErrorCodes[SiteSwitchErrorCodes["UserUnlicensedForSite"] = 10028] = "UserUnlicensedForSite";
        SiteSwitchErrorCodes[SiteSwitchErrorCodes["SiteSuspended"] = 10029] = "SiteSuspended";
        SiteSwitchErrorCodes[SiteSwitchErrorCodes["SiteLocked"] = 10030] = "SiteLocked";
        SiteSwitchErrorCodes[SiteSwitchErrorCodes["AttemptedToSwitchSiteToCurrentSite"] = 10056] = "AttemptedToSwitchSiteToCurrentSite";
    })(VizPortal.SiteSwitchErrorCodes || (VizPortal.SiteSwitchErrorCodes = {}));
    var SiteSwitchErrorCodes = VizPortal.SiteSwitchErrorCodes;
    (function (SiteSettingsErrorCode) {
        SiteSettingsErrorCode[SiteSettingsErrorCode["SiteNotFound"] = 12] = "SiteNotFound";
        SiteSettingsErrorCode[SiteSettingsErrorCode["SiteNameIsEmptyOrNull"] = 70000] = "SiteNameIsEmptyOrNull";
        SiteSettingsErrorCode[SiteSettingsErrorCode["SiteAdminCannotAddUsersButUserQuotaIsSet"] = 70001] = "SiteAdminCannotAddUsersButUserQuotaIsSet";
        SiteSettingsErrorCode[SiteSettingsErrorCode["InvalidUserQuotaOrStorageQuota"] = 70002] = "InvalidUserQuotaOrStorageQuota";
        SiteSettingsErrorCode[SiteSettingsErrorCode["UserQuotaGreaterThanServerLicenseLimit"] = 70003] = "UserQuotaGreaterThanServerLicenseLimit";
        SiteSettingsErrorCode[SiteSettingsErrorCode["InvalidCustomEmailAddress"] = 70004] = "InvalidCustomEmailAddress";
        SiteSettingsErrorCode[SiteSettingsErrorCode["SiteNameOrUrlNameAlreadyExists"] = 70005] = "SiteNameOrUrlNameAlreadyExists";
        SiteSettingsErrorCode[SiteSettingsErrorCode["SiteIdsAreNullOrEmpty"] = 70006] = "SiteIdsAreNullOrEmpty";
        SiteSettingsErrorCode[SiteSettingsErrorCode["SiteSubscriptionsSetWithDisabledServerSubscriptions"] = 70007] = "SiteSubscriptionsSetWithDisabledServerSubscriptions";
        SiteSettingsErrorCode[SiteSettingsErrorCode["AttemptedToUpdateDefaultSiteUrlName"] = 70008] = "AttemptedToUpdateDefaultSiteUrlName";
        SiteSettingsErrorCode[SiteSettingsErrorCode["AttemptedToSuspendDefaultSite"] = 70009] = "AttemptedToSuspendDefaultSite";
        SiteSettingsErrorCode[SiteSettingsErrorCode["SiteNameTooLong"] = 70010] = "SiteNameTooLong";
        SiteSettingsErrorCode[SiteSettingsErrorCode["SiteUrlNameTooLong"] = 70011] = "SiteUrlNameTooLong";
        SiteSettingsErrorCode[SiteSettingsErrorCode["AttemptedToDeleteDefaultSite"] = 70012] = "AttemptedToDeleteDefaultSite";
        SiteSettingsErrorCode[SiteSettingsErrorCode["StorageQuotaLessThanStorageUsed"] = 70013] = "StorageQuotaLessThanStorageUsed";
    })(VizPortal.SiteSettingsErrorCode || (VizPortal.SiteSettingsErrorCode = {}));
    var SiteSettingsErrorCode = VizPortal.SiteSettingsErrorCode;
    (function (WebClientErrorCode) {
        WebClientErrorCode[WebClientErrorCode["NotAnInteger"] = 80000] = "NotAnInteger";
        WebClientErrorCode[WebClientErrorCode["NotASiterole"] = 80001] = "NotASiterole";
        WebClientErrorCode[WebClientErrorCode["InvalidStartIndex"] = 80002] = "InvalidStartIndex";
        WebClientErrorCode[WebClientErrorCode["InvalidMaxItems"] = 80003] = "InvalidMaxItems";
        WebClientErrorCode[WebClientErrorCode["MutuallyExclusiveParametersPresent"] = 80004] = "MutuallyExclusiveParametersPresent";
        WebClientErrorCode[WebClientErrorCode["SiteSubscriptionSettingsMissing"] = 80005] = "SiteSubscriptionSettingsMissing";
        WebClientErrorCode[WebClientErrorCode["NotAScheduledAction"] = 80006] = "NotAScheduledAction";
        WebClientErrorCode[WebClientErrorCode["NotAScheduleType"] = 80007] = "NotAScheduleType";
        WebClientErrorCode[WebClientErrorCode["NotADayOfMonth"] = 80008] = "NotADayOfMonth";
        WebClientErrorCode[WebClientErrorCode["NotADayOfWeek"] = 80009] = "NotADayOfWeek";
        WebClientErrorCode[WebClientErrorCode["NotATaskType"] = 80010] = "NotATaskType";
        WebClientErrorCode[WebClientErrorCode["NotATargetType"] = 80011] = "NotATargetType";
        WebClientErrorCode[WebClientErrorCode["TaskTypeIncrementExtractNotAllowed"] = 80012] = "TaskTypeIncrementExtractNotAllowed";
        WebClientErrorCode[WebClientErrorCode["TaskTypeRefreshExtractNotAllowed"] = 80013] = "TaskTypeRefreshExtractNotAllowed";
        WebClientErrorCode[WebClientErrorCode["UnableToDeleteUserWhoOwnsContent"] = 80014] = "UnableToDeleteUserWhoOwnsContent";
    })(VizPortal.WebClientErrorCode || (VizPortal.WebClientErrorCode = {}));
    var WebClientErrorCode = VizPortal.WebClientErrorCode;
    (function (SchedulingErrorCode) {
        SchedulingErrorCode[SchedulingErrorCode["SchedulingNullOrEmptyScheduleIds"] = 120000] = "SchedulingNullOrEmptyScheduleIds";
        SchedulingErrorCode[SchedulingErrorCode["SchedulingScheduleNotFound"] = 120001] = "SchedulingScheduleNotFound";
        SchedulingErrorCode[SchedulingErrorCode["SchedulingTaskNotFound"] = 120002] = "SchedulingTaskNotFound";
        SchedulingErrorCode[SchedulingErrorCode["SchedulingNameEmpty"] = 120003] = "SchedulingNameEmpty";
        SchedulingErrorCode[SchedulingErrorCode["SchedulingNameTooLong"] = 120004] = "SchedulingNameTooLong";
        SchedulingErrorCode[SchedulingErrorCode["SchedulingNameAlreadyExists"] = 120005] = "SchedulingNameAlreadyExists";
        SchedulingErrorCode[SchedulingErrorCode["SchedulingStartTimeValueInvalid"] = 120006] = "SchedulingStartTimeValueInvalid";
        SchedulingErrorCode[SchedulingErrorCode["SchedulingEndTimeValueInvalid"] = 120007] = "SchedulingEndTimeValueInvalid";
        SchedulingErrorCode[SchedulingErrorCode["SchedulingRecurrenceMinutesValueInvalid"] = 120008] = "SchedulingRecurrenceMinutesValueInvalid";
        SchedulingErrorCode[SchedulingErrorCode["SchedulingRecurrenceDaysOfWeekValueMissing"] = 120009] = "SchedulingRecurrenceDaysOfWeekValueMissing";
        SchedulingErrorCode[SchedulingErrorCode["SchedulingRecurrenceDayOfMonthValueMissing"] = 120010] = "SchedulingRecurrenceDayOfMonthValueMissing";
        SchedulingErrorCode[SchedulingErrorCode["SchedulingPriorityValueInvalid"] = 120011] = "SchedulingPriorityValueInvalid";
        SchedulingErrorCode[SchedulingErrorCode["SchedulingExtractTaskExistsForTarget"] = 120012] = "SchedulingExtractTaskExistsForTarget";
    })(VizPortal.SchedulingErrorCode || (VizPortal.SchedulingErrorCode = {}));
    var SchedulingErrorCode = VizPortal.SchedulingErrorCode;
    (function (UninitializedServerErrorCode) {
        UninitializedServerErrorCode[UninitializedServerErrorCode["UntrustedMachine"] = 80015] = "UntrustedMachine";
        UninitializedServerErrorCode[UninitializedServerErrorCode["ReadyToInitialize"] = 80018] = "ReadyToInitialize";
    })(VizPortal.UninitializedServerErrorCode || (VizPortal.UninitializedServerErrorCode = {}));
    var UninitializedServerErrorCode = VizPortal.UninitializedServerErrorCode;
    // From '../java/tab-model-workgroup/src/com/tableausoftware/api/rest/util/RestApiErrorCode.java'
    (function (RestApiErrorCode) {
        RestApiErrorCode[RestApiErrorCode["UserNotSupportedAdminOperation"] = 90000] = "UserNotSupportedAdminOperation";
        RestApiErrorCode[RestApiErrorCode["UserInvalidSiteRole"] = 90001] = "UserInvalidSiteRole";
        RestApiErrorCode[RestApiErrorCode["ADNotConfigured"] = 90002] = "ADNotConfigured";
        RestApiErrorCode[RestApiErrorCode["ADDomainInvalid"] = 90003] = "ADDomainInvalid";
        RestApiErrorCode[RestApiErrorCode["InvalidPageNumber"] = 90004] = "InvalidPageNumber";
        RestApiErrorCode[RestApiErrorCode["InvalidRequestPayload"] = 90005] = "InvalidRequestPayload";
        RestApiErrorCode[RestApiErrorCode["AmbiguousWorkbookPublishSource"] = 90006] = "AmbiguousWorkbookPublishSource";
        RestApiErrorCode[RestApiErrorCode["InvalidWorkbookFile"] = 90007] = "InvalidWorkbookFile";
        RestApiErrorCode[RestApiErrorCode["InvalidOverwriteParameter"] = 90008] = "InvalidOverwriteParameter";
        RestApiErrorCode[RestApiErrorCode["InvalidPageSize"] = 90009] = "InvalidPageSize";
        RestApiErrorCode[RestApiErrorCode["GroupUserExists"] = 90010] = "GroupUserExists";
        RestApiErrorCode[RestApiErrorCode["GroupUserNotFound"] = 90011] = "GroupUserNotFound";
        RestApiErrorCode[RestApiErrorCode["CannotModifyADGroupName"] = 90012] = "CannotModifyADGroupName";
        RestApiErrorCode[RestApiErrorCode["GroupAlreadyExists"] = 90013] = "GroupAlreadyExists";
        RestApiErrorCode[RestApiErrorCode["InvalidEmbedParameter"] = 90014] = "InvalidEmbedParameter";
        RestApiErrorCode[RestApiErrorCode["InvalidDatasourceFile"] = 90015] = "InvalidDatasourceFile";
        RestApiErrorCode[RestApiErrorCode["MismatchADGroupDomainNameOnSync"] = 90016] = "MismatchADGroupDomainNameOnSync";
        RestApiErrorCode[RestApiErrorCode["InsufficientProject_permissions"] = 90017] = "InsufficientProject_permissions";
        RestApiErrorCode[RestApiErrorCode["InvalidShowTabsParameter"] = 90018] = "InvalidShowTabsParameter";
        RestApiErrorCode[RestApiErrorCode["WorkbookChangeOwnerInsufficientPermissions"] = 90019] = "WorkbookChangeOwnerInsufficientPermissions";
        RestApiErrorCode[RestApiErrorCode["WorkbookChangeDisplayTabsInsufficientPermissions"] = 90020] = "WorkbookChangeDisplayTabsInsufficientPermissions";
        RestApiErrorCode[RestApiErrorCode["InvalidOAuthParameter"] = 90021] = "InvalidOAuthParameter"; //  The "oAuth" parameter was provided with a non-boolean string
    })(VizPortal.RestApiErrorCode || (VizPortal.RestApiErrorCode = {}));
    var RestApiErrorCode = VizPortal.RestApiErrorCode;
    // From '../java/tab-domain-user/src/com/tableausoftware/domain/user/exceptions/errorcodes/UserErrorCode'
    (function (UserErrorCode) {
        UserErrorCode[UserErrorCode["UserGroupInvalidName"] = 10001] = "UserGroupInvalidName";
        UserErrorCode[UserErrorCode["UserDomainInvalidName"] = 10002] = "UserDomainInvalidName";
        UserErrorCode[UserErrorCode["UserGroupWithNameAlreadyExists"] = 10003] = "UserGroupWithNameAlreadyExists";
        UserErrorCode[UserErrorCode["UserCsvParamNotText"] = 10004] = "UserCsvParamNotText";
        UserErrorCode[UserErrorCode["UserCsvParamerterTooLong"] = 10005] = "UserCsvParamerterTooLong";
        UserErrorCode[UserErrorCode["UserCannotSetAdminStatusForSystemAdmin"] = 10006] = "UserCannotSetAdminStatusForSystemAdmin";
        UserErrorCode[UserErrorCode["UserCannotRenameSystemGroup"] = 10007] = "UserCannotRenameSystemGroup";
        UserErrorCode[UserErrorCode["UserCannotRenameNonLocalGroup"] = 10008] = "UserCannotRenameNonLocalGroup";
        UserErrorCode[UserErrorCode["UserInsufficientLicenses"] = 10009] = "UserInsufficientLicenses";
        UserErrorCode[UserErrorCode["UserCannotUnlicenseAdmin"] = 10010] = "UserCannotUnlicenseAdmin";
        UserErrorCode[UserErrorCode["UserInvalidEmailAddress"] = 10011] = "UserInvalidEmailAddress";
        UserErrorCode[UserErrorCode["UserSystemUserWithEmailAddressAlreadyExists"] = 10012] = "UserSystemUserWithEmailAddressAlreadyExists";
        UserErrorCode[UserErrorCode["UserOverlappedGroupidInUpdate"] = 10013] = "UserOverlappedGroupidInUpdate";
        UserErrorCode[UserErrorCode["UserAllUsersGroupAlreadyExists"] = 10014] = "UserAllUsersGroupAlreadyExists";
        UserErrorCode[UserErrorCode["UserGuestAlreadyExists"] = 10015] = "UserGuestAlreadyExists";
        UserErrorCode[UserErrorCode["UserCannotAutocreateUser"] = 10016] = "UserCannotAutocreateUser";
        UserErrorCode[UserErrorCode["UserInvalidPassword"] = 10017] = "UserInvalidPassword";
        UserErrorCode[UserErrorCode["UserCannotUpdatePassword"] = 10018] = "UserCannotUpdatePassword";
        UserErrorCode[UserErrorCode["UserCannotUpdateFriendlyName"] = 10019] = "UserCannotUpdateFriendlyName";
        UserErrorCode[UserErrorCode["UserInvalidUserName"] = 10020] = "UserInvalidUserName";
        UserErrorCode[UserErrorCode["UserAlreadyExists"] = 10021] = "UserAlreadyExists";
        UserErrorCode[UserErrorCode["UserOverlappedSiteidInUpdate"] = 10022] = "UserOverlappedSiteidInUpdate";
        UserErrorCode[UserErrorCode["UserNotSupportedGuestOperation"] = 10023] = "UserNotSupportedGuestOperation";
        UserErrorCode[UserErrorCode["UserNotSupportedAdminOperation"] = 10024] = "UserNotSupportedAdminOperation";
        UserErrorCode[UserErrorCode["UserNotSupportedSelfOperation"] = 10025] = "UserNotSupportedSelfOperation";
        UserErrorCode[UserErrorCode["UserInvalidFriendlyName"] = 10026] = "UserInvalidFriendlyName";
        UserErrorCode[UserErrorCode["UserInvalidSiteRole"] = 10027] = "UserInvalidSiteRole";
        UserErrorCode[UserErrorCode["UserLoginFailedUnlicensedOnSite"] = 10028] = "UserLoginFailedUnlicensedOnSite";
        UserErrorCode[UserErrorCode["UserLoginFailedSuspendedSite"] = 10029] = "UserLoginFailedSuspendedSite";
        UserErrorCode[UserErrorCode["UserLoginFailedLockedSite"] = 10030] = "UserLoginFailedLockedSite";
        UserErrorCode[UserErrorCode["UserGuestLoginFailed"] = 10031] = "UserGuestLoginFailed";
        UserErrorCode[UserErrorCode["UserMissingPasswordParameters"] = 10032] = "UserMissingPasswordParameters";
        UserErrorCode[UserErrorCode["UserCannotFavoriteType"] = 10033] = "UserCannotFavoriteType";
        UserErrorCode[UserErrorCode["UserCannotDeleteSystemUserWithAssociatedUsers"] = 10040] = "UserCannotDeleteSystemUserWithAssociatedUsers";
        UserErrorCode[UserErrorCode["UserCsvMissingUsername"] = 10050] = "UserCsvMissingUsername";
        UserErrorCode[UserErrorCode["UserCsvInvalidAdminLevel"] = 10051] = "UserCsvInvalidAdminLevel";
        UserErrorCode[UserErrorCode["UserCsvInvalidLicense"] = 10052] = "UserCsvInvalidLicense";
        UserErrorCode[UserErrorCode["UserCsvInvalidPublisher"] = 10053] = "UserCsvInvalidPublisher";
        UserErrorCode[UserErrorCode["UserCsvMissingPassword"] = 10054] = "UserCsvMissingPassword";
        UserErrorCode[UserErrorCode["UserCsvPasswordMismatch"] = 10055] = "UserCsvPasswordMismatch";
        UserErrorCode[UserErrorCode["UserTriedSwitchSiteToCurrentSite"] = 10056] = "UserTriedSwitchSiteToCurrentSite";
        UserErrorCode[UserErrorCode["UserInsufficientSiteQuota"] = 10057] = "UserInsufficientSiteQuota";
        UserErrorCode[UserErrorCode["UserCannotUpdateMinimumSiteRoleNonAdGroup"] = 10058] = "UserCannotUpdateMinimumSiteRoleNonAdGroup";
        UserErrorCode[UserErrorCode["UserOpenIdBadConfig"] = 10059] = "UserOpenIdBadConfig";
        UserErrorCode[UserErrorCode["UserOpenIdIdpNotReachable"] = 10060] = "UserOpenIdIdpNotReachable";
        UserErrorCode[UserErrorCode["UserOpenIdUserNotFound"] = 10061] = "UserOpenIdUserNotFound";
        UserErrorCode[UserErrorCode["UserOpenIdConflictingUserAccount"] = 10062] = "UserOpenIdConflictingUserAccount";
    })(VizPortal.UserErrorCode || (VizPortal.UserErrorCode = {}));
    var UserErrorCode = VizPortal.UserErrorCode;
    (function (GroupErrorCode) {
        GroupErrorCode[GroupErrorCode["GroupNullOrEmptyName"] = 20000] = "GroupNullOrEmptyName";
        GroupErrorCode[GroupErrorCode["GroupAmbiguousNameSearch"] = 20001] = "GroupAmbiguousNameSearch";
        GroupErrorCode[GroupErrorCode["GroupCannotBeDeleted"] = 20002] = "GroupCannotBeDeleted";
        GroupErrorCode[GroupErrorCode["InvalidGroupMembershipUpdate"] = 20003] = "InvalidGroupMembershipUpdate";
    })(VizPortal.GroupErrorCode || (VizPortal.GroupErrorCode = {}));
    var GroupErrorCode = VizPortal.GroupErrorCode;
    // From '../java/tab-domain-interfaces/src/com/tableausoftware/domain/ldap/LdapErrorCode.java'
    (function (LdapErrorCode) {
        LdapErrorCode[LdapErrorCode["LdapOperationsError"] = 100001] = "LdapOperationsError";
        LdapErrorCode[LdapErrorCode["LdapProtocolError"] = 100002] = "LdapProtocolError";
        LdapErrorCode[LdapErrorCode["LdapTimelimitExceeded"] = 100003] = "LdapTimelimitExceeded";
        LdapErrorCode[LdapErrorCode["LdapSizelimitExceeded"] = 100004] = "LdapSizelimitExceeded";
        LdapErrorCode[LdapErrorCode["LdapCompareFalse"] = 100005] = "LdapCompareFalse";
        LdapErrorCode[LdapErrorCode["LdapCompareTrue"] = 100006] = "LdapCompareTrue";
        LdapErrorCode[LdapErrorCode["LdapAuthMethodNotSupported"] = 100007] = "LdapAuthMethodNotSupported";
        LdapErrorCode[LdapErrorCode["LdapStrongAuthRequired"] = 100008] = "LdapStrongAuthRequired";
        LdapErrorCode[LdapErrorCode["LdapPartialResults"] = 100009] = "LdapPartialResults";
        LdapErrorCode[LdapErrorCode["LdapReferral"] = 100010] = "LdapReferral";
        LdapErrorCode[LdapErrorCode["LdapAdminLimitExceeded"] = 100011] = "LdapAdminLimitExceeded";
        LdapErrorCode[LdapErrorCode["LdapUnavailableCritExtension"] = 100012] = "LdapUnavailableCritExtension";
        LdapErrorCode[LdapErrorCode["LdapConfidentialityRequired"] = 100013] = "LdapConfidentialityRequired";
        LdapErrorCode[LdapErrorCode["LdapSaslBindInProgress"] = 100014] = "LdapSaslBindInProgress";
        LdapErrorCode[LdapErrorCode["LdapReferralV2"] = 100015] = "LdapReferralV2";
        LdapErrorCode[LdapErrorCode["LdapNoSuchAttribute"] = 100016] = "LdapNoSuchAttribute";
        LdapErrorCode[LdapErrorCode["LdapUndefinedType"] = 100017] = "LdapUndefinedType";
        LdapErrorCode[LdapErrorCode["LdapInappropriateMatching"] = 100018] = "LdapInappropriateMatching";
        LdapErrorCode[LdapErrorCode["LdapConstraintViolation"] = 100019] = "LdapConstraintViolation";
        LdapErrorCode[LdapErrorCode["LdapAttributeOrValueExists"] = 100020] = "LdapAttributeOrValueExists";
        LdapErrorCode[LdapErrorCode["LdapInvalidSyntax"] = 100021] = "LdapInvalidSyntax";
        LdapErrorCode[LdapErrorCode["LdapNoSuchObject"] = 100032] = "LdapNoSuchObject";
        LdapErrorCode[LdapErrorCode["LdapAliasProblem"] = 100033] = "LdapAliasProblem";
        LdapErrorCode[LdapErrorCode["LdapInvalidDnSyntax"] = 100034] = "LdapInvalidDnSyntax";
        LdapErrorCode[LdapErrorCode["LdapIsLeaf"] = 100035] = "LdapIsLeaf";
        LdapErrorCode[LdapErrorCode["LdapAliasDerefProblem"] = 100036] = "LdapAliasDerefProblem";
        LdapErrorCode[LdapErrorCode["LdapInappropriateAuth"] = 100048] = "LdapInappropriateAuth";
        LdapErrorCode[LdapErrorCode["LdapInvalidCredentials"] = 100049] = "LdapInvalidCredentials";
        LdapErrorCode[LdapErrorCode["LdapInsufficientRights"] = 100050] = "LdapInsufficientRights";
        LdapErrorCode[LdapErrorCode["LdapBusy"] = 100051] = "LdapBusy";
        LdapErrorCode[LdapErrorCode["LdapUnavailable"] = 100052] = "LdapUnavailable";
        LdapErrorCode[LdapErrorCode["LdapUnwillingToPerform"] = 100053] = "LdapUnwillingToPerform";
        LdapErrorCode[LdapErrorCode["LdapLoopDetect"] = 100054] = "LdapLoopDetect";
        LdapErrorCode[LdapErrorCode["LdapSortControlMissing"] = 100060] = "LdapSortControlMissing";
        LdapErrorCode[LdapErrorCode["LdapOffsetRangeError"] = 100061] = "LdapOffsetRangeError";
        LdapErrorCode[LdapErrorCode["LdapNamingViolation"] = 100064] = "LdapNamingViolation";
        LdapErrorCode[LdapErrorCode["LdapObjectClassViolation"] = 100065] = "LdapObjectClassViolation";
        LdapErrorCode[LdapErrorCode["LdapNotAllowedOnNonleaf"] = 100066] = "LdapNotAllowedOnNonleaf";
        LdapErrorCode[LdapErrorCode["LdapNotAllowedOnRdn"] = 100067] = "LdapNotAllowedOnRdn";
        LdapErrorCode[LdapErrorCode["LdapAlreadyExists"] = 100068] = "LdapAlreadyExists";
        LdapErrorCode[LdapErrorCode["LdapNoObjectClassMods"] = 100069] = "LdapNoObjectClassMods";
        LdapErrorCode[LdapErrorCode["LdapResultsTooLarge"] = 100070] = "LdapResultsTooLarge";
        LdapErrorCode[LdapErrorCode["LdapAffectsMultipleDsas"] = 100071] = "LdapAffectsMultipleDsas";
        LdapErrorCode[LdapErrorCode["LdapVirtualListViewError"] = 100076] = "LdapVirtualListViewError";
        LdapErrorCode[LdapErrorCode["LdapOther"] = 100080] = "LdapOther";
        LdapErrorCode[LdapErrorCode["LdapServerDown"] = 100081] = "LdapServerDown";
        LdapErrorCode[LdapErrorCode["LdapLocalError"] = 100082] = "LdapLocalError";
        LdapErrorCode[LdapErrorCode["LdapEncodingError"] = 100083] = "LdapEncodingError";
        LdapErrorCode[LdapErrorCode["LdapDecodingError"] = 100084] = "LdapDecodingError";
        LdapErrorCode[LdapErrorCode["LdapTimeout"] = 100085] = "LdapTimeout";
        LdapErrorCode[LdapErrorCode["LdapAuthUnknown"] = 100086] = "LdapAuthUnknown";
        LdapErrorCode[LdapErrorCode["LdapFilterError"] = 100087] = "LdapFilterError";
        LdapErrorCode[LdapErrorCode["LdapUserCancelled"] = 100088] = "LdapUserCancelled";
        LdapErrorCode[LdapErrorCode["LdapParamError"] = 100089] = "LdapParamError";
        LdapErrorCode[LdapErrorCode["LdapNoMemory"] = 100090] = "LdapNoMemory";
        LdapErrorCode[LdapErrorCode["LdapConnectError"] = 100091] = "LdapConnectError";
        LdapErrorCode[LdapErrorCode["LdapNotSupported"] = 100092] = "LdapNotSupported";
        LdapErrorCode[LdapErrorCode["LdapNoResultsReturned"] = 100094] = "LdapNoResultsReturned";
        LdapErrorCode[LdapErrorCode["LdapControlNotFound"] = 100093] = "LdapControlNotFound";
        LdapErrorCode[LdapErrorCode["LdapMoreResultsToReturn"] = 100095] = "LdapMoreResultsToReturn";
        LdapErrorCode[LdapErrorCode["LdapClientLoop"] = 100096] = "LdapClientLoop";
        LdapErrorCode[LdapErrorCode["LdapReferralLimitExceeded"] = 100097] = "LdapReferralLimitExceeded";
        LdapErrorCode[LdapErrorCode["NotUniqueUserSearch"] = 101000] = "NotUniqueUserSearch";
        LdapErrorCode[LdapErrorCode["NotUniqueGroupSearch"] = 101001] = "NotUniqueGroupSearch";
        LdapErrorCode[LdapErrorCode["UserNotFound"] = 101002] = "UserNotFound";
        LdapErrorCode[LdapErrorCode["GroupNotFound"] = 101003] = "GroupNotFound";
        LdapErrorCode[LdapErrorCode["NullOrEmptySearch"] = 101004] = "NullOrEmptySearch";
        LdapErrorCode[LdapErrorCode["UnknownObject"] = 101005] = "UnknownObject";
        LdapErrorCode[LdapErrorCode["UnknownSidType"] = 101006] = "UnknownSidType";
        LdapErrorCode[LdapErrorCode["UnknownNativeError"] = 101007] = "UnknownNativeError";
    })(VizPortal.LdapErrorCode || (VizPortal.LdapErrorCode = {}));
    var LdapErrorCode = VizPortal.LdapErrorCode;
    (function (SolrErrorCode) {
        SolrErrorCode[SolrErrorCode["SolrCommunicationError"] = 200000] = "SolrCommunicationError";
        SolrErrorCode[SolrErrorCode["SolrDisabled"] = 200001] = "SolrDisabled";
        SolrErrorCode[SolrErrorCode["SolrIndexingFailed"] = 200002] = "SolrIndexingFailed";
    })(VizPortal.SolrErrorCode || (VizPortal.SolrErrorCode = {}));
    var SolrErrorCode = VizPortal.SolrErrorCode;
    // From '../java/tab-domain-online/src/com/tableausoftware/domain/online/exceptions/errorcodes/OnlineErrorCode.java'
    (function (OnlineErrorCode) {
        OnlineErrorCode[OnlineErrorCode["InvalidImage"] = 250000] = "InvalidImage";
        OnlineErrorCode[OnlineErrorCode["ImageProcessingError"] = 250001] = "ImageProcessingError";
        OnlineErrorCode[OnlineErrorCode["StorageException"] = 250010] = "StorageException";
        OnlineErrorCode[OnlineErrorCode["SiteCustomizationUnavailable"] = 250011] = "SiteCustomizationUnavailable"; // Site customization not available.
    })(VizPortal.OnlineErrorCode || (VizPortal.OnlineErrorCode = {}));
    var OnlineErrorCode = VizPortal.OnlineErrorCode;
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="resourceParts.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="resourceParts.ts" />
/// <reference path="ISiteSettingsForSiteAdmin.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        ServerApi.SiteKeys = {
            id: 'id'
        };
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/ErrorCodes.ts" />
/// <reference path="../ServerApi/types/ISite.ts" />
var VizPortal;
(function (VizPortal) {
    var CreateSiteAction = (function () {
        function CreateSiteAction(ConfirmActionDialog, $translate, toaster, server, Sites, $q) {
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.$translate = $translate;
            this.toaster = toaster;
            this.server = server;
            this.Sites = Sites;
            this.$q = $q;
        }
        CreateSiteAction.prototype.execute = function (parentScope) {
            var _this = this;
            return this.getPlaceholderSiteSettings().then(function (siteSettingsForServerAdmin) {
                var dialogScope = parentScope.$new(true);
                var siteSettingsForSiteAdmin = {
                    id: undefined,
                    siteAdminSettings: {
                        liveDBConnectionsWhitelistEnabled: false,
                        refreshTokenEnabled: true
                    }
                };
                dialogScope.siteSettingsForServerAdmin = siteSettingsForServerAdmin;
                dialogScope.siteSettingsForSiteAdmin = siteSettingsForSiteAdmin;
                dialogScope.isDefaultSite = false;
                dialogScope.hideNameAndId = false;
                dialogScope.hideAvailability = true;
                dialogScope.autoSelectSiteName = true;
                dialogScope.liveDBAvailable = _this.server.isLiveDBAvailable();
                dialogScope.siteSettingsForServerAdminFormState = {};
                return _this.ConfirmActionDialog.open({
                    scope: dialogScope,
                    title: _this.$translate.instant('newSiteDialogTitle'),
                    bodyTemplateUrl: 'siteDialog.html',
                    actionName: _this.$translate.instant('newSiteDialogSubmit'),
                    confirmDisabled: function () { return _.isEmpty(dialogScope.siteSettingsForServerAdminFormState) || !dialogScope.siteSettingsForServerAdminFormState.isValid(); },
                    action: function () {
                        return _this.Sites.createSite(dialogScope.siteSettingsForServerAdmin.settings, dialogScope.siteSettingsForSiteAdmin.siteAdminSettings, dialogScope.siteSettingsForServerAdmin.subscriptionSettings)
                            .then(function () {
                            _this.toaster.pop({
                                type: VizPortal.ToastType.Info,
                                text: _this.$translate.instant('siteCreateSuccess', {
                                    SITE_NAME: VizPortal.L10n.elideIfLong(dialogScope.siteSettingsForServerAdmin.settings.name)
                                })
                            });
                            _this.server.refreshSessionInfo(); // Refresh top bar
                        }, function (errors) {
                            _this.errorMessages(errors, dialogScope.siteSettingsForServerAdmin);
                            return _this.$q.reject();
                        });
                    },
                    size: VizPortal.ModalSize.fitToContent
                }).result.fin(function () { return dialogScope.$destroy(); });
            });
        };
        CreateSiteAction.prototype.isServerLevelSubscriptionsEnabled = function () {
            return this.Sites.getCurrentSiteSettingsForServerAdmin()
                .then(function (siteSettingsForServerAdmin) { return !_.isUndefined(siteSettingsForServerAdmin.subscriptionSettings); });
        };
        CreateSiteAction.prototype.errorMessages = function (errors, site) {
            var _this = this;
            _.each(errors, function (error) {
                _this.toaster.pop({ type: VizPortal.ToastType.Error, text: _this.Sites.errorMessage(error.code, site) });
            });
        };
        CreateSiteAction.prototype.getPlaceholderSiteSettings = function () {
            return this.isServerLevelSubscriptionsEnabled().then(function (isEnabled) {
                var placeholderSiteSettings = {
                    id: undefined,
                    userCount: 1,
                    licensedUserCount: 1,
                    adminCount: undefined,
                    availability: VizPortal.SiteAvailabilityState.ACTIVE,
                    currentLoggedInUserCount: undefined,
                    storageQuotaPercentUsed: undefined,
                    storageUsedBytes: undefined,
                    createdAt: undefined,
                    settings: {
                        urlName: '',
                        name: '',
                        storageQuotaEnabled: false,
                        storageQuotaBytes: VizPortal.ByteSizeConversionFactor.ONE_GB,
                        siteAdminsCanAddUsers: true,
                        userQuotaEnabled: false,
                        userQuota: 1,
                        metricsEnabled: false,
                        authoringEnabled: true,
                        sheetImageEnabled: true
                    }
                };
                if (isEnabled) {
                    placeholderSiteSettings.subscriptionSettings = {
                        subscriptionsEnabled: true,
                        customSubscriptionEmailEnabled: false,
                        customSubscriptionEmail: 'no-reply@tableau.com',
                        customSubscriptionFooterEnabled: false,
                        customSubscriptionFooter: ''
                    };
                }
                return placeholderSiteSettings;
            });
        };
        CreateSiteAction.$inject = [
            'ConfirmActionDialog',
            '$translate',
            'ToasterService',
            'ServerService',
            'Sites',
            '$q'
        ];
        return CreateSiteAction;
    })();
    VizPortal.CreateSiteAction = CreateSiteAction;
    VizPortal.Module.instance().service('CreateSiteAction', CreateSiteAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../services/BrowserTitleService.ts" />
/// <reference path="../services/CreateSiteAction.ts" />
var VizPortal;
(function (VizPortal) {
    var AddSiteCtrl = (function () {
        function AddSiteCtrl(scope, $state, BrowserTitleService, createSiteAction) {
            BrowserTitleService.setTitle('serverSettings_addSite');
            scope.createSite = function () { return createSiteAction.execute(scope)
                .then(function () { return $state.go('main.server.sites.sites'); }); };
        }
        AddSiteCtrl.$inject = [
            '$scope',
            '$state',
            'BrowserTitleService',
            'CreateSiteAction'
        ];
        return AddSiteCtrl;
    })();
    VizPortal.AddSiteCtrl = AddSiteCtrl;
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../libs.ts" />
/// <reference path="../models/Viz.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/BrowserSupportService.ts" />
var VizPortal;
(function (VizPortal) {
    var VizService = (function () {
        function VizService($state, $location, WindowLocationService, server, BrowserSupportService) {
            this.$state = $state;
            this.$location = $location;
            this.WindowLocationService = WindowLocationService;
            this.server = server;
            this.BrowserSupportService = BrowserSupportService;
        }
        /**
         * Reload the current state when the location changes. This is needed for two reasons
         * 1. The query string parameters are not registered as $stateParams, so ui-router won't reload the state
         *    if they change. We need to make it reload in this case.
         * 2. If the $location changes but the $stateParams are identical to the $stateParams we originally entered
         *    the $state with, then ui-router will not reload the $state. This can happen if a user types in url to
         *    viz with vizPath `workbook/view1`, switches tabs by clicking on view2 so the url updates, then uses
         *    the url to switch back to `workbook/view1`. Because `workbook/view1` is the $stateParam when we entered
         *    the $state, ui-router will assume that nothing is changed and it won't reload. We force it to.
         */
        VizService.prototype.reloadOnLocationChange = function ($scope) {
            var _this = this;
            // reloadOnSearch must be true otherwise ui-router will not reload the state. Ever. No matter what you do.
            this.$state.current.reloadOnSearch = true;
            $scope.$on('$locationChangeSuccess', function () {
                if (_this.$state.current.reloadOnSearch) {
                    // We need to get the new state params. $state.$current gives us access to the internal state of ui-router.
                    // It's partially documented in ui-router's documentation.
                    var currentStateUrlMatcher = _this.$state.$current.url;
                    var newStateParams = currentStateUrlMatcher.exec(_this.$location.path(), _this.$location.search());
                    if (newStateParams) {
                        // This transitionTo is a very particular hardReload.
                        // location: false - tell ui-router to not update the location. Well, that's what you'd expect. ui-router
                        //                   will still update the url if the original state's stateParams are different from
                        //                   what's in the current url, but at least ui-router won't obliterate the query string
                        //                   with `location: false`. This is good enough for our purposes.
                        // reload: true - force ui-router to reload the view and controller
                        _this.$state.transitionTo(_this.$state.current.name, newStateParams, { location: false, reload: true });
                    }
                }
            });
        };
        /**
         * Change $location due to a change in a url parameter
         */
        VizService.prototype.updatePath = function ($scope, params) {
            var stateParams = _.extend(params, { siteUrlName: this.server.sessionSiteUrlName() });
            var newLocationPath = this.$state.href(this.$state.current, stateParams);
            // Remove the hash that ui-router puts on the front of the url
            newLocationPath = newLocationPath.replace(/^#/, '');
            // Decode because ui-router encodes the slashes in the url. This is safe to decode because
            // the vizPath cannot contain characters that need to be url encoded
            newLocationPath = decodeURIComponent(newLocationPath);
            // Don't change location if path is unchanged
            if (newLocationPath === this.$location.path()) {
                return;
            }
            this.dontReloadNextLocationChange($scope);
            this.$location.replace().path(newLocationPath);
        };
        VizService.prototype.updateInstanceId = function ($scope, instanceId) {
            this.dontReloadNextLocationChange($scope);
            this.$location.replace().search(VizService.InstanceIdKey, instanceId);
        };
        VizService.prototype.updateExplicitOriginalViz = function ($scope, explicitOriginalViz) {
            this.dontReloadNextLocationChange($scope);
            this.$location.replace().search(VizService.ExplicitOriginalVizParamKey, explicitOriginalViz ? 'y' : null);
        };
        VizService.prototype.getIsExplicitOriginalViz = function () {
            return Helpers.BooleanQueryParamRegex.test(this.getExplicitLocationSearchValue(VizService.ExplicitOriginalVizParamKey));
        };
        VizService.prototype.getInstanceId = function () {
            return this.getExplicitLocationSearchValue(VizService.InstanceIdKey);
        };
        // Returns query parameter value, or null if there is no explicit value.
        // e.g. "?:embed" returns null, ":embed=blah" returns "blah"
        // Using $location.search() directly will give boolean true for keys that
        // are present with no value.
        VizService.prototype.getExplicitLocationSearchValue = function (key) {
            var value = this.$location.search()[key];
            return _.isString(value) ? value : null;
        };
        VizService.prototype.getVizParams = function () {
            // Remove the instance id param, as it is only used on the frontend
            return _.omit(this.$location.search(), VizService.InstanceIdKey);
        };
        VizService.prototype.getIsExplicitOriginalVizFromUrl = function (url) {
            // TODO: we should parse a viz object from a url instead of having several of these
            // one-off functions to get individual parts of the url. Can copy angular's url parsing code
            var match = decodeURIComponent(url).match(/[&\?]:original_view=([^&#$]+)/);
            return !!(match && match[1] && Helpers.BooleanQueryParamRegex.test(match[1]));
        };
        /**
         * Gets the viz path from a full url. For example, url:
         *
         * uri:     http://localhost/vizportal/#/views/sizetabs/auto/workgroupadmin@tsi.lan/noiceland?blah
         * returns: sizetabs/auto/workgroupadmin@tsi.lan/noiceland
         */
        VizService.prototype.getPath = function (uri) {
            var match = uri.match(/[^/]\/views\/([^?#]*)/);
            return match && match[1] || null;
        };
        /**
         * Build a JS-API-ready uri from a viz object
         */
        VizService.prototype.getUri = function (viz) {
            var pathList = [this.WindowLocationService.getOrigin()];
            if (viz.isAdminViz) {
                pathList = pathList.concat(['vizql', 'showadminview']);
            }
            else {
                if (viz.siteUrlName) {
                    pathList = pathList.concat(['t', viz.siteUrlName]);
                }
                pathList.push('views');
            }
            pathList.push(viz.path);
            return pathList.join('/');
        };
        /**
         * returns true if embed search param is on in url
         * Example: ?:embed=yes
         */
        VizService.prototype.isEmbedParamOn = function () {
            return Helpers.BooleanQueryParamRegex.test(this.getExplicitLocationSearchValue(VizService.EmbedParamKey));
        };
        /**
         * returns true if the end of the location path has a viz export file type.
         * Example: /workbook/view.png
         */
        VizService.prototype.pathHasExportableFileType = function () {
            return VizService.VizExportFileTypeRegex.test(this.$location.path());
        };
        /**
         * Go to embedded version of the current url
         */
        VizService.prototype.getEmbeddedVizqlUrl = function (options) {
            if (options === void 0) { options = {}; }
            if (options.isFromGuest) {
                this.$location.search(VizService.IsGuestRedirectFromVizPortalParamKey, 'y');
            }
            if (!this.isEmbedParamOn()) {
                this.$location.search(VizService.EmbedParamKey, 'y');
            }
            return this.getVizqlUrl();
        };
        VizService.prototype.getVizqlUrl = function () {
            return this.$location.url().replace(/^\/site/, '/t');
        };
        VizService.prototype.dontReloadNextLocationChange = function ($scope) {
            var _this = this;
            // (myork 2014-10-7) We want to change the $location, but we don't want ui-router to reload
            // the state. To do this we set this $state to `reloadOnSearch: false` until after the
            // location change is successful. This is disgusting for three reasons:
            //  1. It changes state configuration at runtime.
            //  2. It relies on `reloadOnSearch: false` not reloading the state when path parameters change.
            //     This is a bug in ui-router and we are relying on it. Once ui-router's dynamic parameters
            //     feature is implemented, we should be able to use that:
            //     https://github.com/angular-ui/ui-router/issues/1079
            //  3. We rely on this $locationChangeSuccess firing after ui-router's own $locationChangeSuccess
            //     listener. If this $locationChangeSuccess fired before ui-router's then we'd set
            //     `reloadOnSearch: true` before the $stateChangeStart, so we wouldn't get the no-reload
            //     behavior we're shooting for. I did not find a guarantee of this ordering in the docs,
            //     but in the code the events fire in the order they are registered:
            //     $on: https://github.com/angular/angular.js/blob/v1.2.x/src/ng/rootScope.js#L965
            //     $broadcast: https://github.com/angular/angular.js/blob/v1.2.x/src/ng/rootScope.js#L1077
            var removeEventListener = $scope.$on('$locationChangeSuccess', function () {
                _this.$state.current.reloadOnSearch = true;
                removeEventListener();
            });
            this.$state.current.reloadOnSearch = false;
        };
        VizService.$inject = [
            '$state',
            '$location',
            'WindowLocationService',
            'ServerService',
            'BrowserSupportService'
        ];
        VizService.ExplicitOriginalVizParamKey = ':original_view';
        VizService.EmbedParamKey = ':embed';
        VizService.InstanceIdKey = ':iid';
        VizService.IsGuestRedirectFromVizPortalParamKey = ':isGuestRedirectFromVizportal';
        VizService.VizExportFileTypeRegex = /\.(pdf|csv|png)$/;
        return VizService;
    })();
    VizPortal.VizService = VizService;
    VizPortal.Module.instance().service('VizService', VizService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../models/Viz.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/BrowserTitleService.ts" />
/// <reference path="../services/VizService.ts" />
var VizPortal;
(function (VizPortal) {
    var AdminVizViewerCtrl = (function () {
        function AdminVizViewerCtrl($scope, $stateParams, $location, $state, $translate, BrowserTitleService, vizService, workbookUrlId) {
            var _this = this;
            this.sheetUrlId = $stateParams.sheetUrlId;
            $scope.viz = {
                path: workbookUrlId + '/' + this.sheetUrlId,
                isAdminViz: true,
                params: $location.search()
            };
            vizService.reloadOnLocationChange($scope);
            $scope.$watch('viz.path', function (newPath) {
                _this.sheetUrlId = newPath.split('/')[1];
                vizService.updatePath($scope, { sheetUrlId: _this.sheetUrlId });
                BrowserTitleService.setVizTitle($scope.viewName(), $translate.instant($scope.isServerAnalysis() ? 'serverStatus' : 'siteStatus'));
            });
            $scope.isServerAnalysis = function () { return $state.includes('**.server.**'); };
            $scope.viewName = function () { return $translate.instant(AdminVizViewerCtrl.ViewNameLocKeyDict[_this.sheetUrlId]); };
        }
        // We can't get admin view names from the Views service, so we use hardcoded loc strings
        AdminVizViewerCtrl.ViewNameLocKeyDict = {
            'ActionsbyAllUsers': 'actionsByAllUsersTitle',
            'ActionsbySpecificUser': 'actionsByASpecificUserTitle',
            'ActionsbyRecentUsers': 'actionsByRecentlySignedInUsersTitle',
            'BackgroundTasksforExtracts': 'backgroundTasksExtractsTitle',
            'BackgroundTasksforNonExtracts': 'backgroundTasksNonExtractsTitle',
            'StatsforLoadTimes': 'statsLoadTimesTitle',
            'StatsforSpaceUsage': 'statsSpaceUsageTitle',
            'TraffictoDataSources': 'trafficToDataSourcesTitle',
            'TraffictoViews': 'trafficToViewsTitle'
        };
        AdminVizViewerCtrl.$inject = [
            '$scope',
            '$stateParams',
            '$location',
            '$state',
            '$translate',
            'BrowserTitleService',
            'VizService',
            'workbookUrlId'
        ];
        return AdminVizViewerCtrl;
    })();
    VizPortal.AdminVizViewerCtrl = AdminVizViewerCtrl;
    VizPortal.Module.instance().controller('AdminVizViewerCtrl', AdminVizViewerCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var ConnectionAuthService = (function () {
        function ConnectionAuthService($http) {
            this.$http = $http;
        }
        ConnectionAuthService.prototype.authenticate = function (path, data) {
            return this.$http({
                method: 'POST',
                url: path,
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                data: $.param(data)
            });
        };
        ConnectionAuthService.$inject = [
            '$http',
            '$window',
            'WindowLocationService'
        ];
        return ConnectionAuthService;
    })();
    VizPortal.ConnectionAuthService = ConnectionAuthService;
    VizPortal.Module.instance().service('ConnectionAuthService', ConnectionAuthService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    /**
     * Contains window.location behavior not covered by angular's $location service.
     *
     * Why? The browser's window.location cannot be mocked. This adds one level of
     * indirection between app code and window.location so we can mock for testing.
     */
    var WindowLocationService = (function () {
        function WindowLocationService($window) {
            this.$window = $window;
        }
        // Download the file at the uri
        WindowLocationService.prototype.download = function (uri) {
            this.navigateTo(uri);
        };
        WindowLocationService.prototype.formatWindowOpenSpecs = function (specs) {
            return _.map(specs, function (val, key) { return (key + '=' + val); }).join(',');
        };
        // Open the given uri in a new window
        WindowLocationService.prototype.open = function (uri, windowName, specs) {
            if (windowName === void 0) { windowName = '_blank'; }
            return this.$window.open(uri, windowName, this.formatWindowOpenSpecs(specs));
        };
        /**
         * Sets the location to the given uri
         */
        WindowLocationService.prototype.navigateTo = function (uri) {
            this.$window.location.href = uri;
        };
        /**
         * Set the location of the given iframe
         */
        WindowLocationService.prototype.navigateIFrameTo = function (iframe, uri) {
            iframe.contentWindow.location.href = uri;
        };
        WindowLocationService.prototype.navigateToWithoutAddingToHistory = function (uri) {
            this.$window.location.replace(uri);
        };
        /**
         * Cross-browser method for getting window.location.origin. Example:
         * window.location.href : 'scheme://domain:port/path?query_string#fragment_id'
         * return value         : 'scheme://domain:port'
         */
        WindowLocationService.prototype.getOrigin = function () {
            return this.$window.location.protocol + '//' + this.$window.location.host;
        };
        /**
         * Get everything after the host in a url.  Example:
         *
         *    window.location.href : 'scheme://domain:port/path?query_string#fragment_id'
         *    return value         : '/path?query_string#fragment_id'
         */
        WindowLocationService.prototype.getPathQueryFragment = function () {
            return this.$window.location.href.split(this.$window.location.host)[1];
        };
        /**
         * Get path and query components of url.  Example:
         *
         *    window.location.href : 'scheme://domain:port/path?query_string#fragment_id'
         *    return value         : '/path?query_string'
         */
        WindowLocationService.prototype.getPathQuery = function () {
            return this.getPathQueryFragment().replace(this.$window.location.hash, '');
        };
        /**
         * Set everything after the host in a url. Example:
         *
         *    pathQueryFragment    : '/path?query_string#fragment_id'
         *    window.location.href : 'scheme://domain:port/path?query_string#fragment_id'
         */
        WindowLocationService.prototype.setPathQueryFragment = function (pathQueryFragment) {
            this.$window.location.href = this.getOrigin() + (/^\//.test(pathQueryFragment) ? '' : '/') + pathQueryFragment;
        };
        WindowLocationService.prototype.reload = function () {
            this.$window.location.reload();
        };
        WindowLocationService.$inject = ['$window'];
        return WindowLocationService;
    })();
    VizPortal.WindowLocationService = WindowLocationService;
    VizPortal.Module.instance().service('WindowLocationService', WindowLocationService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/ServerService.ts" />
var VizPortal;
(function (VizPortal) {
    var WindowPopupService = (function () {
        function WindowPopupService($location, $stateParams, $window) {
            this.$location = $location;
            this.$stateParams = $stateParams;
            this.$window = $window;
        }
        WindowPopupService.prototype.safelyCallFunction = function (func) {
            try {
                func();
            }
            catch (e) {
                console.error(e);
            }
        };
        WindowPopupService.prototype.maybeNotifyAndClose = function () {
            var closePopupWhenDone = Helpers.BooleanQueryParamRegex.test(this.$location.search()[VizPortal.UrlParamKeys.ClosePopupWhenDone]);
            var openerPage = this.$window.opener;
            if (openerPage && closePopupWhenDone) {
                if (openerPage.tableauPopupComplete) {
                    this.safelyCallFunction(function () { return openerPage.tableauPopupComplete(); });
                }
                if (openerPage.tab && openerPage.tab.LogOnView) {
                    this.safelyCallFunction(function () { return openerPage.tab.LogOnView.fireLogOnComplete(); });
                }
                this.$window.close();
                return true;
            }
        };
        WindowPopupService.$inject = [
            '$location',
            '$stateParams',
            '$window'
        ];
        return WindowPopupService;
    })();
    VizPortal.WindowPopupService = WindowPopupService;
    VizPortal.Module.instance().service('WindowPopupService', WindowPopupService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/ConnectionAuthService.ts" />
/// <reference path="../services/ServerService.ts" />
/// <reference path="../services/WindowLocationService.ts" />
/// <reference path="../services/WindowPopupService.ts" />
/// <reference path="../ServerApi/types/IDataConnectionAuthInfo.ts" />
var VizPortal;
(function (VizPortal) {
    var AuthenticateConnectionCtrl = (function () {
        function AuthenticateConnectionCtrl($scope, $stateParams, connectionAuthService, windowLocationService, authInfo, windowPopupService) {
            var _this = this;
            this.$scope = $scope;
            this.$stateParams = $stateParams;
            this.connectionAuthService = connectionAuthService;
            this.windowLocationService = windowLocationService;
            this.authInfo = authInfo;
            this.windowPopupService = windowPopupService;
            $scope.authVM = {};
            $scope.authVM.username = authInfo.defaultUsername;
            $scope.focusOnPassword = !!authInfo.defaultUsername;
            $scope.doneWithWindow = false;
            $scope.rememberPasswordsForever = authInfo.rememberPasswordsForever;
            // If there is 1 allowedAuthenticationMode, then try to get the friendly name if it exists.
            // If there are 2 or more allowedAuthenticationModes then list the options for the user.
            var authModeFriendlyName; // Localized authentication mode for the current authentication mode
            if (authInfo.allowedAuthenticationModes) {
                if (authInfo.allowedAuthenticationModes.length === 1) {
                    authModeFriendlyName = authInfo.allowedAuthenticationModes[0].modeFriendlyName;
                }
                else if (authInfo.allowedAuthenticationModes.length >= 2) {
                    $scope.authModeOptions = authInfo.allowedAuthenticationModes;
                }
            }
            $scope.authVM.selectedAuthMode = authInfo.authenticationMode;
            $scope.connectionProperties = [];
            var cp = $scope.connectionProperties; // Alias for readability
            if (authInfo.connectionType)
                cp.push({ translate: 'authConnectionConnectionType', value: authInfo.connectionTypeDisplayName });
            if (authModeFriendlyName)
                cp.push({ translate: 'authConnectionAuthentication', value: authModeFriendlyName, tbTestId: 'auth-connection-fixed-auth-mode' });
            if (authInfo.databaseServer)
                cp.push({ translate: 'authConnectionServer', value: authInfo.databaseServer });
            if (authInfo.databaseName)
                cp.push({ translate: 'authConnectionDatabase', value: authInfo.databaseName });
            if (authInfo.databaseSchema)
                cp.push({ translate: 'authConnectionSchema', value: authInfo.databaseSchema });
            if (authInfo.databaseFilename)
                cp.push({ translate: 'authConnectionFilename', value: authInfo.databaseFilename });
            $scope.attemptAuth = function () {
                $scope.busy = true;
                // TODO Figure out the correct response from the authenticate method
                connectionAuthService.authenticate(authInfo.actionPath, _this.getAuthenticateDatabaseParams())
                    .then(function () {
                    // Authoring sessions are not opened in a popup window and need to remain open after authenticating
                    if (authInfo.isAuthoringSession || !windowPopupService.maybeNotifyAndClose()) {
                        windowLocationService.navigateTo($stateParams.path);
                    }
                    // toggle a state that shows a 'close me' message (tfsid 389619)
                    $scope.doneWithWindow = true;
                    $scope.busy = false;
                }, function () {
                    // TODO: better error reporting once we figure out what kind of errors to expect
                    $scope.errorMessageKey = 'errorUnknown';
                    $scope.busy = false;
                });
            };
            $scope.isPreview = Helpers.BooleanQueryParamRegex.test($stateParams.isPreview);
        }
        AuthenticateConnectionCtrl.prototype.getAuthenticateDatabaseParams = function () {
            var authParams = {
                authentication: this.$scope.authVM.selectedAuthMode,
                username: this.$scope.authVM.username,
                crypted: rsa.encrypt(this.$scope.authVM.password, { n: this.authInfo.modulus, e: this.authInfo.exponent }),
                connection: this.authInfo.connection,
                path: this.$stateParams.path,
                oauthrequest: false // BUGZID: 408070 Set oauthrequest to false for all non-OAuth scenarios
            };
            if (this.$scope.authVM.rememberPassword) {
                if (this.authInfo.rememberPasswordsForever)
                    authParams.reuse_forever = true;
                if (!this.authInfo.rememberPasswordsForever)
                    authParams.reuse = true;
            }
            return authParams;
        };
        AuthenticateConnectionCtrl.$inject = [
            '$scope',
            '$stateParams',
            'ConnectionAuthService',
            'WindowLocationService',
            'authInfo',
            'WindowPopupService'
        ];
        return AuthenticateConnectionCtrl;
    })();
    VizPortal.AuthenticateConnectionCtrl = AuthenticateConnectionCtrl;
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../libs.ts" />
/// <reference path="../ServerApi/types/IOrderClause.ts" />
var VizPortal;
(function (VizPortal) {
    var Order;
    (function (Order) {
        Order.MaxLength = 3;
        function clauseFromInput(input) {
            var parts = input.split(':');
            if (parts.length === 2) {
                return {
                    field: parts[0],
                    ascending: parts[1] === 'asc'
                };
            }
            else {
                return null;
            }
        }
        // If possibleOrderKeys does not exist then allow all keys
        function isValidOrderField(field, possibleOrderKeys) {
            return _.isUndefined(possibleOrderKeys) ? true : _(possibleOrderKeys).contains(field);
        }
        function fromInput(input, possibleOrderKeys) {
            var clauses = [];
            if (_.isString(input)) {
                _.each(input.split(','), function (clauseString) {
                    var clause = clauseFromInput(clauseString);
                    if (clause && isValidOrderField(clause.field, possibleOrderKeys) && clauses.length < Order.MaxLength) {
                        clauses.push(clause);
                    }
                });
            }
            return _.isEmpty(clauses) ? null : clauses;
        }
        Order.fromInput = fromInput;
        function startsWithField(clauses, field) {
            return clauses.length > 0 && clauses[0].field === field;
        }
        Order.startsWithField = startsWithField;
        function withFirstClauseToggled(clauses) {
            var newClauses = _.map(clauses, _.clone);
            if (newClauses.length > 0) {
                newClauses[0].ascending = !newClauses[0].ascending;
            }
            return newClauses;
        }
        Order.withFirstClauseToggled = withFirstClauseToggled;
        function withClausePrepended(clauses, newClause) {
            var newClauses;
            if (newClause) {
                // remove any existing clauses for the given field (note that reject returns a copy)
                newClauses = _.reject(clauses, function (clause) { return clause.field === newClause.field; });
                // prepend the given clause
                newClauses.unshift(newClause);
                // enforce the maximum length
                if (newClauses.length > Order.MaxLength) {
                    newClauses.length = Order.MaxLength;
                }
            }
            else {
                newClauses = _.clone(clauses);
            }
            return newClauses;
        }
        Order.withClausePrepended = withClausePrepended;
        function asc(field) {
            return { field: field, ascending: true };
        }
        Order.asc = asc;
        function desc(field) {
            return { field: field, ascending: false };
        }
        Order.desc = desc;
        function withoutField(order, field) {
            if (!field)
                return order;
            return _.reject(order, function (orderClause) { return orderClause.field === field; });
        }
        Order.withoutField = withoutField;
        /**
         * Finds the order clause for the field in the order. Returns undefined if no clause is found.
         */
        function findOrderClauseForField(order, field) {
            return _.findWhere(order, { field: field });
        }
        Order.findOrderClauseForField = findOrderClauseForField;
        function serialize(order) {
            return _.map(order, serializeOrderClause).join(',');
        }
        Order.serialize = serialize;
        function serializeOrderClause(clause) {
            return clause.field + ':' + (clause.ascending ? 'asc' : 'desc');
        }
    })(Order = VizPortal.Order || (VizPortal.Order = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.OrderKeys = {
        adminCount: 'adminCount',
        authoringEnabled: 'authoringEnabled',
        availability: 'availability',
        connectionTypeDisplayName: 'connectionTypeDisplayName',
        currentLoggedInUserCount: 'currentLoggedInUserCount',
        createdAt: 'createdAt',
        datasourceCount: 'datasourceCount',
        definition: 'definition',
        displayName: 'displayName',
        domainName: 'domainName',
        favoritesTotal: 'favoritesTotal',
        groupCount: 'groupCount',
        hasAlert: 'hasAlert',
        hasExtracts: 'hasExtracts',
        hitsTotal: 'hitsTotal',
        hitsLastDayTotal: 'hitsLastDayTotal',
        hitsLastMonthTotal: 'hitsLastMonthTotal',
        hitsLastTwoWeeksTotal: 'hitsLastTwoWeeksTotal',
        index: 'index',
        lastRefreshedAt: 'lastRefreshedAt',
        lastRunAt: 'lastRunAt',
        lastSentAt: 'lastSentAt',
        lastSignIn: 'lastSignIn',
        liveDBConnectionsWhitelistEnabled: 'liveDBConnectionsWhitelistEnabled',
        maxSiteRole: "maxSiteRole",
        metricsEnabled: 'metricsEnabled',
        minimumSiteRole: 'minimumSiteRole',
        name: 'name',
        numSheets: 'numSheets',
        ownerName: 'ownerName',
        parentName: 'parentName',
        priority: 'priority',
        projectName: 'projectName',
        refreshType: 'refreshType',
        relevancy: 'relevancy',
        runNextAt: 'runNextAt',
        scheduleName: 'scheduleName',
        siteAdminsCanAddUsers: 'siteAdminsCanAddUsers',
        siteCount: 'siteCount',
        siteName: 'siteName',
        siteRole: 'siteRole',
        size: 'size',
        sheetImageEnabled: 'sheetImageEnabled',
        storageQuotaBytes: 'storageQuotaBytes',
        storageQuotaPercentUsed: 'storageQuotaPercentUsed',
        storageUsedBytes: 'storageUsedBytes',
        subject: 'subject',
        targetName: 'targetName',
        type: 'type',
        updatedAt: 'updatedAt',
        urlName: 'urlName',
        userCount: 'userCount',
        userName: 'userName',
        username: 'username',
        userQuota: 'userQuota',
        versionNumber: 'versionNumber',
        viewCount: 'viewCount',
        workbookCount: 'workbookCount',
        workbookName: 'workbookName'
    };
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/Order.ts" />
/// <reference path="../models/ContentFilters.ts" />
/// <reference path="../models/OrderKeys.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.ProjectContentType = {
        name: 'project',
        filterKeys: [
            VizPortal.ContentFiltersKeys.search,
            VizPortal.ContentFiltersKeys.owner,
            VizPortal.ContentFiltersKeys.createdAfter,
            VizPortal.ContentFiltersKeys.createdBefore
        ],
        orderKeys: [
            VizPortal.OrderKeys.createdAt,
            VizPortal.OrderKeys.datasourceCount,
            VizPortal.OrderKeys.name,
            VizPortal.OrderKeys.ownerName,
            VizPortal.OrderKeys.viewCount,
            VizPortal.OrderKeys.workbookCount
        ],
        defaultOrder: [VizPortal.Order.asc(VizPortal.OrderKeys.name)]
    };
    VizPortal.WorkbookContentType = {
        name: 'workbook',
        filterKeys: [
            VizPortal.ContentFiltersKeys.search,
            VizPortal.ContentFiltersKeys.favorite,
            VizPortal.ContentFiltersKeys.recent,
            VizPortal.ContentFiltersKeys.hasAlert,
            VizPortal.ContentFiltersKeys.project,
            VizPortal.ContentFiltersKeys.owner,
            VizPortal.ContentFiltersKeys.tag,
            VizPortal.ContentFiltersKeys.modifiedAfter,
            VizPortal.ContentFiltersKeys.modifiedBefore
        ],
        orderKeys: [
            VizPortal.OrderKeys.name,
            VizPortal.OrderKeys.favoritesTotal,
            VizPortal.OrderKeys.hitsTotal,
            VizPortal.OrderKeys.hitsLastDayTotal,
            VizPortal.OrderKeys.hitsLastMonthTotal,
            VizPortal.OrderKeys.hitsLastTwoWeeksTotal,
            VizPortal.OrderKeys.numSheets,
            VizPortal.OrderKeys.ownerName,
            VizPortal.OrderKeys.projectName,
            VizPortal.OrderKeys.size,
            VizPortal.OrderKeys.updatedAt,
            VizPortal.OrderKeys.hasAlert
        ],
        extraQueryParams: {
            statFields: [VizPortal.OrderKeys.hitsTotal, VizPortal.OrderKeys.favoritesTotal, VizPortal.OrderKeys.hitsLastTwoWeeksTotal]
        },
        defaultOrder: [VizPortal.Order.asc(VizPortal.OrderKeys.name)]
    };
    VizPortal.WorkbookRevisionContentType = {
        name: 'workbookRevision',
        filterKeys: [],
        orderKeys: [
            VizPortal.OrderKeys.versionNumber
        ],
        defaultOrder: [VizPortal.Order.desc(VizPortal.OrderKeys.versionNumber)]
    };
    VizPortal.ViewContentType = {
        name: 'view',
        filterKeys: [
            VizPortal.ContentFiltersKeys.search,
            VizPortal.ContentFiltersKeys.favorite,
            VizPortal.ContentFiltersKeys.recent,
            VizPortal.ContentFiltersKeys.project,
            VizPortal.ContentFiltersKeys.owner,
            VizPortal.ContentFiltersKeys.tag,
            VizPortal.ContentFiltersKeys.modifiedAfter,
            VizPortal.ContentFiltersKeys.modifiedBefore
        ],
        orderKeys: [
            VizPortal.OrderKeys.index,
            VizPortal.OrderKeys.name,
            VizPortal.OrderKeys.ownerName,
            VizPortal.OrderKeys.projectName,
            VizPortal.OrderKeys.updatedAt,
            VizPortal.OrderKeys.workbookName
        ],
        defaultOrder: [VizPortal.Order.asc(VizPortal.OrderKeys.name)]
    };
    VizPortal.ViewInWorkbookContentType = _.extend({}, VizPortal.ViewContentType, {
        defaultOrder: [VizPortal.Order.asc(VizPortal.OrderKeys.index)]
    });
    VizPortal.DatasourceContentType = {
        name: 'datasource',
        filterKeys: [
            VizPortal.ContentFiltersKeys.search,
            VizPortal.ContentFiltersKeys.hasAlert,
            VizPortal.ContentFiltersKeys.project,
            VizPortal.ContentFiltersKeys.owner,
            VizPortal.ContentFiltersKeys.tag,
            VizPortal.ContentFiltersKeys.modifiedAfter,
            VizPortal.ContentFiltersKeys.modifiedBefore,
            VizPortal.ContentFiltersKeys.hasExtracts,
            VizPortal.ContentFiltersKeys.showEmbedded,
            VizPortal.ContentFiltersKeys.connectionType,
            VizPortal.ContentFiltersKeys.serverName,
            VizPortal.ContentFiltersKeys.serverPort,
            VizPortal.ContentFiltersKeys.databaseUsername,
            VizPortal.ContentFiltersKeys.hasPassword
        ],
        orderKeys: [
            VizPortal.OrderKeys.connectionTypeDisplayName,
            VizPortal.OrderKeys.hasExtracts,
            VizPortal.OrderKeys.hasAlert,
            VizPortal.OrderKeys.lastRefreshedAt,
            VizPortal.OrderKeys.name,
            VizPortal.OrderKeys.ownerName,
            VizPortal.OrderKeys.projectName,
            VizPortal.OrderKeys.updatedAt
        ],
        defaultOrder: [VizPortal.Order.asc(VizPortal.OrderKeys.name)]
    };
    VizPortal.SitesContentType = {
        name: 'sites',
        filterKeys: [
            VizPortal.ContentFiltersKeys.search
        ],
        orderKeys: [
            VizPortal.OrderKeys.adminCount,
            VizPortal.OrderKeys.authoringEnabled,
            VizPortal.OrderKeys.availability,
            VizPortal.OrderKeys.createdAt,
            VizPortal.OrderKeys.currentLoggedInUserCount,
            VizPortal.OrderKeys.liveDBConnectionsWhitelistEnabled,
            VizPortal.OrderKeys.metricsEnabled,
            VizPortal.OrderKeys.name,
            VizPortal.OrderKeys.sheetImageEnabled,
            VizPortal.OrderKeys.siteAdminsCanAddUsers,
            VizPortal.OrderKeys.storageUsedBytes,
            VizPortal.OrderKeys.storageQuotaBytes,
            VizPortal.OrderKeys.storageQuotaPercentUsed,
            VizPortal.OrderKeys.urlName,
            VizPortal.OrderKeys.userCount,
            VizPortal.OrderKeys.userQuota
        ],
        defaultOrder: [VizPortal.Order.asc(VizPortal.OrderKeys.name)]
    };
    VizPortal.GroupContentType = {
        name: 'group',
        filterKeys: [
            VizPortal.ContentFiltersKeys.search,
            VizPortal.ContentFiltersKeys.domain,
            VizPortal.ContentFiltersKeys.groupsMinimumSiteRole
        ],
        orderKeys: [
            VizPortal.OrderKeys.name,
            VizPortal.OrderKeys.domainName,
            VizPortal.OrderKeys.userCount,
            VizPortal.OrderKeys.minimumSiteRole
        ],
        defaultOrder: [VizPortal.Order.asc(VizPortal.OrderKeys.name)]
    };
    VizPortal.SiteUserContentType = {
        name: 'siteUser',
        filterKeys: [
            VizPortal.ContentFiltersKeys.search,
            VizPortal.ContentFiltersKeys.siteRole
        ],
        orderKeys: [
            VizPortal.OrderKeys.displayName,
            VizPortal.OrderKeys.domainName,
            VizPortal.OrderKeys.groupCount,
            VizPortal.OrderKeys.lastSignIn,
            VizPortal.OrderKeys.siteRole,
            VizPortal.OrderKeys.username
        ],
        defaultOrder: [VizPortal.Order.asc(VizPortal.OrderKeys.displayName)]
    };
    VizPortal.ScheduleContentType = {
        name: 'schedule',
        filterKeys: [],
        orderKeys: [
            VizPortal.OrderKeys.name,
            'scheduleType',
            'scheduledAction',
            'taskCount',
            'parallel',
            'runNextAt'
        ],
        defaultOrder: [VizPortal.Order.asc(VizPortal.OrderKeys.name)]
    };
    VizPortal.ExtractTaskContentType = {
        name: 'extractTask',
        filterKeys: [],
        orderKeys: [
            VizPortal.OrderKeys.type,
            VizPortal.OrderKeys.targetName,
            VizPortal.OrderKeys.scheduleName,
            VizPortal.OrderKeys.priority,
            VizPortal.OrderKeys.lastRunAt,
            VizPortal.OrderKeys.runNextAt,
            VizPortal.OrderKeys.siteName
        ],
        defaultOrder: [VizPortal.Order.asc(VizPortal.OrderKeys.targetName)]
    };
    VizPortal.RemoteRefreshScheduleContentType = {
        name: 'remoteRefreshSchedule',
        filterKeys: [],
        orderKeys: [
            VizPortal.OrderKeys.refreshType,
            VizPortal.OrderKeys.definition,
            VizPortal.OrderKeys.lastRunAt,
            VizPortal.OrderKeys.runNextAt
        ],
        defaultOrder: [VizPortal.Order.asc(VizPortal.OrderKeys.runNextAt)]
    };
    VizPortal.SubscriptionContentType = {
        name: 'subscription',
        filterKeys: [],
        orderKeys: [
            VizPortal.OrderKeys.userName,
            VizPortal.OrderKeys.subject,
            VizPortal.OrderKeys.scheduleName,
            VizPortal.OrderKeys.lastSentAt,
            VizPortal.OrderKeys.runNextAt,
            VizPortal.OrderKeys.siteName
        ],
        defaultOrder: [VizPortal.Order.asc(VizPortal.OrderKeys.subject)]
    };
    VizPortal.ServerUserContentType = {
        name: 'serverUser',
        filterKeys: [
            VizPortal.ContentFiltersKeys.search,
            VizPortal.ContentFiltersKeys.maxSiteRole
        ],
        orderKeys: [
            VizPortal.OrderKeys.displayName,
            VizPortal.OrderKeys.domainName,
            VizPortal.OrderKeys.siteCount,
            VizPortal.OrderKeys.lastSignIn,
            VizPortal.OrderKeys.maxSiteRole,
            VizPortal.OrderKeys.username
        ],
        defaultOrder: [VizPortal.Order.asc(VizPortal.OrderKeys.displayName)]
    };
    VizPortal.GroupUserContentType = {
        name: 'groupUser',
        filterKeys: [],
        orderKeys: [
            VizPortal.OrderKeys.displayName,
            VizPortal.OrderKeys.siteCount,
            VizPortal.OrderKeys.lastSignIn,
            VizPortal.OrderKeys.siteRole,
            VizPortal.OrderKeys.username
        ],
        defaultOrder: [VizPortal.Order.asc(VizPortal.OrderKeys.displayName)]
    };
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../models/ContentTypes.ts" />
/// <reference path="../ServerApi/types/IOrderClause.ts" />
/// <reference path="../ServerApi/types/resourceParts.ts" />
var VizPortal;
(function (VizPortal) {
    // TODO: these should be removed.
    VizPortal.ContentTypes = {
        project: VizPortal.ProjectContentType.name,
        datasource: VizPortal.DatasourceContentType.name,
        workbook: VizPortal.WorkbookContentType.name,
        view: VizPortal.ViewContentType.name
    };
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ListResult = (function () {
        function ListResult(items, index, total) {
            this.items = items;
            this.index = index || 0;
            this.total = total || (items ? items.length : 0);
        }
        ListResult.empty = function () {
            return new ListResult([], 0, 0);
        };
        return ListResult;
    })();
    VizPortal.ListResult = ListResult;
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        ServerApi.FilterOps = {
            and: 'and',
            eq: 'eq',
            lte: 'lte',
            gte: 'gte',
            has: 'has',
            inArray: 'in',
            matches: 'matches'
        };
        ServerApi.FilterFieldNames = {
            connectionType: 'connectionType',
            createdAt: 'createdAt',
            databaseUsername: 'databaseUsername',
            datasourceId: 'datasourceId',
            domainId: 'domainId',
            groupId: 'groupId',
            groupIds: 'groupIds',
            hasAlert: 'hasAlert',
            hasExtracts: 'hasExtracts',
            hasEmbeddedPassword: 'hasEmbeddedPassword',
            isDefaultPort: 'isDefaultPort',
            isFavorite: 'isFavorite',
            isPublished: 'isPublished',
            isRecent: 'isRecent',
            lastRefreshedAt: 'lastRefreshedAt',
            maxSiteRole: 'maxSiteRole',
            minimumSiteRole: 'minimumSiteRole',
            ownerId: 'ownerId',
            parentId: 'parentId',
            parentType: 'parentType',
            projectId: 'projectId',
            scheduledAction: 'scheduledAction',
            scheduleId: 'scheduleId',
            serverName: 'serverName',
            serverPort: 'serverPort',
            siteId: 'siteId',
            siteRole: 'siteRole',
            tags: 'tags',
            updatedAt: 'updatedAt',
            workbookId: 'workbookId'
        };
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="IFilterClause.ts" />
/// <reference path="IOrderClause.ts" />
/// <reference path="IPage.ts" />
/// <reference path="../libs.ts" />
/// <reference path="ListResult.ts" />
/// <reference path="../ServerApi/types/IGetItemsParams.ts" />
/// <reference path="../libs.ts" />
/// <reference path="../ServerApi/types/IFilterClause.ts" />
var VizPortal;
(function (VizPortal) {
    var Filter;
    (function (Filter) {
        function and(clauses) {
            return {
                operator: VizPortal.ServerApi.FilterOps.and,
                clauses: clauses
            };
        }
        Filter.and = and;
        function search(search) {
            return {
                operator: VizPortal.ServerApi.FilterOps.matches,
                value: search
            };
        }
        Filter.search = search;
        function fieldEq(field, value) {
            return {
                operator: VizPortal.ServerApi.FilterOps.eq,
                field: field,
                value: value
            };
        }
        Filter.fieldEq = fieldEq;
        function stringFieldEq(field, value) {
            return fieldEq(field, value);
        }
        Filter.stringFieldEq = stringFieldEq;
        function numberFieldEq(field, value) {
            return fieldEq(field, value);
        }
        Filter.numberFieldEq = numberFieldEq;
        function stringFieldGte(field, value) {
            return {
                operator: VizPortal.ServerApi.FilterOps.gte,
                field: field,
                value: value
            };
        }
        Filter.stringFieldGte = stringFieldGte;
        function stringFieldLte(field, value) {
            return {
                operator: VizPortal.ServerApi.FilterOps.lte,
                field: field,
                value: value
            };
        }
        Filter.stringFieldLte = stringFieldLte;
        function stringFieldMatches(field, value) {
            return {
                operator: VizPortal.ServerApi.FilterOps.matches,
                field: field,
                value: value
            };
        }
        Filter.stringFieldMatches = stringFieldMatches;
        function stringArrayFieldHas(field, value) {
            return {
                operator: VizPortal.ServerApi.FilterOps.has,
                field: field,
                value: value
            };
        }
        Filter.stringArrayFieldHas = stringArrayFieldHas;
        function stringFieldInArray(field, values) {
            return {
                operator: VizPortal.ServerApi.FilterOps.inArray,
                field: field,
                values: values
            };
        }
        Filter.stringFieldInArray = stringFieldInArray;
        function findFieldFilterClause(field, operator, filter) {
            if (filter && filter.clauses) {
                return _.find(filter.clauses, function (clause) {
                    var fieldClause = clause;
                    return fieldClause.field === field && fieldClause.operator === operator;
                });
            }
            return null;
        }
        Filter.findFieldFilterClause = findFieldFilterClause;
    })(Filter = VizPortal.Filter || (VizPortal.Filter = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../fetchers/ListResult.ts" />
/// <reference path="../libs.ts" />
/// <reference path="../fetchers/IListFetcher.ts" />
/// <reference path="../helpers/Filter.ts" />
/// <reference path="../models/ISliceable.ts" />
/// <reference path="../ServerApi/types/IOrderClause.ts" />
var VizPortal;
(function (VizPortal) {
    var ResourceQuery = (function () {
        function ResourceQuery(fetcher) {
            this.fetcher = fetcher;
            this.filterClauses = [];
            this.order = [];
            this.extraParams = {};
        }
        ResourceQuery.formatFilterClauses = function (filterClauses) {
            return (filterClauses && filterClauses.length > 0) ? VizPortal.Filter.and(filterClauses) : undefined;
        };
        ResourceQuery.getPage = function (start, length) {
            return { startIndex: start, maxItems: length };
        };
        ResourceQuery.prototype.getSlice = function (start, size) {
            return this.fetcher.fetchList(_.extend({
                filter: ResourceQuery.formatFilterClauses(this.filterClauses),
                order: this.order.length > 0 ? this.order : undefined,
                page: ResourceQuery.getPage(start, size)
            }, this.extraParams));
        };
        ResourceQuery.prototype.getFirst = function () {
            return this.getSlice(0, 1).then(function (result) {
                if (result.items && result.items.length > 0) {
                    return result.items[0];
                }
                else {
                    return null;
                }
            });
        };
        ResourceQuery.prototype.getCount = function () {
            return this.getSlice(0, 0).then(function (slice) { return slice.total; });
        };
        // caller should not alter the returned array
        ResourceQuery.prototype.getFilters = function () {
            return this.filterClauses;
        };
        // caller should not alter the returned array
        ResourceQuery.prototype.getOrder = function () {
            return this.order;
        };
        ResourceQuery.prototype.withFiltersAndOrder = function (filterClauses, order) {
            return this.clone().setFilterClauses(filterClauses).setOrder(order);
        };
        ResourceQuery.prototype.withExtraParams = function (extraParams) {
            return extraParams ? this.clone().setExtraParams(extraParams) : this;
        };
        ResourceQuery.prototype.withFilters = function (filterClauses) {
            return this.clone().setFilterClauses(filterClauses);
        };
        ResourceQuery.prototype.addFilter = function (filterClause) {
            return this.withFilters((this.filterClauses || []).concat([filterClause]));
        };
        ResourceQuery.prototype.withOrder = function (order) {
            return this.clone().setOrder(order);
        };
        ResourceQuery.prototype.clone = function () {
            return new ResourceQuery(this.fetcher)
                .setFilterClauses(this.filterClauses)
                .setOrder(this.order);
        };
        ResourceQuery.prototype.setFilterClauses = function (filterClauses) {
            this.filterClauses = filterClauses;
            return this;
        };
        ResourceQuery.prototype.setOrder = function (order) {
            this.order = order;
            return this;
        };
        ResourceQuery.prototype.setExtraParams = function (extraParams) {
            this.extraParams = extraParams;
            return this;
        };
        return ResourceQuery;
    })();
    VizPortal.ResourceQuery = ResourceQuery;
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="IFilterClause.ts" />
/// <reference path="IPage.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        ServerApi.FieldValueResourceType = {
            dataConnection: 'dataConnection',
            datasource: 'datasource',
            project: 'project',
            view: 'view',
            workbook: 'workbook'
        };
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../fetchers/IListFetcher.ts" />
/// <reference path="../helpers/Filter.ts" />
/// <reference path="../models/ISliceable.ts" />
/// <reference path="../ServerApi/types/IFieldValue.ts" />
/// <reference path="../ServerApi/types/IFieldValuesParams.ts" />
/// <reference path="Query.ts" />
var VizPortal;
(function (VizPortal) {
    var FieldValuesQuery = (function () {
        function FieldValuesQuery(fetcher, field, resourceType) {
            this.fetcher = fetcher;
            this.field = field;
            this.resourceType = resourceType;
        }
        // Getters
        FieldValuesQuery.prototype.getSlice = function (start, size) {
            var params = {
                field: this.field,
                labelMatchText: this.matchText,
                page: VizPortal.ResourceQuery.getPage(start, size),
                resourceType: this.resourceType,
                resourceCountFilter: VizPortal.ResourceQuery.formatFilterClauses(this.filterClauses)
            };
            return this.fetcher.fetchList(params);
        };
        FieldValuesQuery.prototype.getFilters = function () {
            return this.filterClauses;
        };
        // Public Clone and Setters
        FieldValuesQuery.prototype.withMatchText = function (matchText) {
            return this.clone().setMatchText(matchText);
        };
        FieldValuesQuery.prototype.withFilters = function (filterClauses) {
            return this.clone().setFilterClauses(filterClauses);
        };
        // Private methods
        FieldValuesQuery.prototype.clone = function () {
            return new FieldValuesQuery(this.fetcher, this.field, this.resourceType)
                .setFilterClauses(this.filterClauses)
                .setMatchText(this.matchText);
        };
        FieldValuesQuery.prototype.setFilterClauses = function (filterClauses) {
            this.filterClauses = filterClauses;
            return this;
        };
        FieldValuesQuery.prototype.setMatchText = function (matchText) {
            this.matchText = matchText;
            return this;
        };
        return FieldValuesQuery;
    })();
    VizPortal.FieldValuesQuery = FieldValuesQuery;
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
///<reference path="../resources/Query.ts" />
///<reference path="../resources/FieldValueQuery.ts" />
/// <reference path="../libs.ts" />
/// <reference path="../models/ContentFilters.ts" />
var VizPortal;
(function (VizPortal) {
    // Converts filters from our model representation (currently a dictionary of filter-keys and values) to
    // the server API representation (an array of filter clauses).
    var ServerFilterClauses;
    (function (ServerFilterClauses) {
        // TODO This value should be defined in a content specific config file,
        // For now, keep in sync with FilterPanelService.ts
        var portDefault = 'default';
        var serverFilterClauses = {
            connectionType: function (connectionType) { return VizPortal.Filter.stringFieldEq(VizPortal.ServerApi.FilterFieldNames.connectionType, connectionType); },
            createdBefore: function (createdBefore) { return VizPortal.Filter.stringFieldLte(VizPortal.ServerApi.FilterFieldNames.createdAt, createdBefore); },
            createdAfter: function (createdAfter) { return VizPortal.Filter.stringFieldGte(VizPortal.ServerApi.FilterFieldNames.createdAt, createdAfter); },
            databaseUsername: function (databaseUsername) { return VizPortal.Filter.stringFieldMatches(VizPortal.ServerApi.FilterFieldNames.databaseUsername, databaseUsername); },
            domain: function (domainId) { return VizPortal.Filter.stringFieldEq(VizPortal.ServerApi.FilterFieldNames.domainId, domainId); },
            forWorkbook: function (workbookId) { return VizPortal.Filter.stringFieldEq(VizPortal.ServerApi.FilterFieldNames.workbookId, workbookId); },
            group: function (groupId) { return VizPortal.Filter.stringFieldEq(VizPortal.ServerApi.FilterFieldNames.groupId, groupId); },
            inGroup: function (groupId) { return VizPortal.Filter.stringArrayFieldHas(VizPortal.ServerApi.FilterFieldNames.groupIds, groupId); },
            hasDatasource: function (datasourceId) { return VizPortal.Filter.stringArrayFieldHas(VizPortal.ServerApi.FilterFieldNames.datasourceId, datasourceId); },
            hasAlert: function (hasAlert) { return VizPortal.Filter.fieldEq(VizPortal.ServerApi.FilterFieldNames.hasAlert, Helpers.toBoolean(hasAlert)); },
            hasExtracts: function (hasExtracts) { return VizPortal.Filter.fieldEq(VizPortal.ServerApi.FilterFieldNames.hasExtracts, Helpers.toBoolean(hasExtracts)); },
            hasPassword: function (hasPassword) { return VizPortal.Filter.fieldEq(VizPortal.ServerApi.FilterFieldNames.hasEmbeddedPassword, Helpers.toBoolean(hasPassword)); },
            lastRefreshedBefore: function (lastRefreshedBefore) { return VizPortal.Filter.stringFieldLte(VizPortal.ServerApi.FilterFieldNames.lastRefreshedAt, lastRefreshedBefore); },
            lastRefreshedAfter: function (lastRefreshedAfter) { return VizPortal.Filter.stringFieldGte(VizPortal.ServerApi.FilterFieldNames.lastRefreshedAt, lastRefreshedAfter); },
            maxSiteRole: function (maxSiteRole) { return VizPortal.Filter.stringFieldEq(VizPortal.ServerApi.FilterFieldNames.maxSiteRole, maxSiteRole); },
            groupsMinimumSiteRole: function (groupsMinimumSiteRole) { return VizPortal.Filter.stringFieldEq(VizPortal.ServerApi.FilterFieldNames.minimumSiteRole, groupsMinimumSiteRole); },
            modifiedBefore: function (modifiedBefore) { return VizPortal.Filter.stringFieldLte(VizPortal.ServerApi.FilterFieldNames.updatedAt, modifiedBefore); },
            modifiedAfter: function (modifiedAfter) { return VizPortal.Filter.stringFieldGte(VizPortal.ServerApi.FilterFieldNames.updatedAt, modifiedAfter); },
            owner: function (ownerId) { return VizPortal.Filter.stringFieldEq(VizPortal.ServerApi.FilterFieldNames.ownerId, ownerId); },
            project: function (projectId) { return VizPortal.Filter.stringFieldEq(VizPortal.ServerApi.FilterFieldNames.projectId, projectId); },
            schedule: function (scheduleId) { return VizPortal.Filter.stringFieldEq(VizPortal.ServerApi.FilterFieldNames.scheduleId, scheduleId); },
            search: function (search) { return VizPortal.Filter.search(search); },
            serverName: function (serverName) { return VizPortal.Filter.stringFieldMatches(VizPortal.ServerApi.FilterFieldNames.serverName, serverName); },
            serverPort: function (serverPort) { return (serverPort === portDefault)
                ? VizPortal.Filter.fieldEq(VizPortal.ServerApi.FilterFieldNames.isDefaultPort, true)
                : VizPortal.Filter.stringFieldEq(VizPortal.ServerApi.FilterFieldNames.serverPort, serverPort); },
            showEmbedded: function (showEmbedded) { return ((showEmbedded + '') === 'true')
                ? null
                : ((showEmbedded + '') === 'only')
                    ? VizPortal.Filter.fieldEq(VizPortal.ServerApi.FilterFieldNames.isPublished, false)
                    : VizPortal.Filter.fieldEq(VizPortal.ServerApi.FilterFieldNames.isPublished, true); },
            siteId: function (siteId) { return VizPortal.Filter.fieldEq(VizPortal.ServerApi.FilterFieldNames.siteId, siteId); },
            siteRole: function (siteRole) { return VizPortal.Filter.stringFieldEq(VizPortal.ServerApi.FilterFieldNames.siteRole, siteRole); },
            tag: function (tag) { return VizPortal.Filter.stringArrayFieldHas(VizPortal.ServerApi.FilterFieldNames.tags, tag); },
            workbook: function (workbookId) { return VizPortal.Filter.stringFieldEq(VizPortal.ServerApi.FilterFieldNames.workbookId, workbookId); },
            datasource: function (datasourceId) { return VizPortal.Filter.stringFieldEq(VizPortal.ServerApi.FilterFieldNames.datasourceId, datasourceId); },
            favorite: function (favorite) { return VizPortal.Filter.fieldEq(VizPortal.ServerApi.FilterFieldNames.isFavorite, Helpers.toBoolean(favorite)); },
            recent: function (recent) { return VizPortal.Filter.fieldEq(VizPortal.ServerApi.FilterFieldNames.isRecent, Helpers.toBoolean(recent)); }
        };
        function create(filterValues) {
            var filterClauses = [];
            _.forEach(filterValues, function (filterValue, filterKey) {
                if (filterValue) {
                    filterClauses.push(serverFilterClauses[filterKey](filterValue));
                }
            });
            return _.compact(filterClauses);
        }
        ServerFilterClauses.create = create;
    })(ServerFilterClauses = VizPortal.ServerFilterClauses || (VizPortal.ServerFilterClauses = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/Order.ts" />
/// <reference path="../helpers/ResourceHelper.ts" />
/// <reference path="../helpers/ServerFilterClauses.ts" />
/// <reference path="../resources/Query.ts" />
/// <reference path="../ServerApi/types/IOrderClause.ts" />
var VizPortal;
(function (VizPortal) {
    var Place = (function () {
        function Place() {
            this.subplaceMap = {};
            this.subplaceList = [];
        }
        Place.prototype.subplace = function (name) {
            return this.subplaceMap[name];
        };
        Place.prototype.subplaces = function () {
            return this.subplaceList;
        };
        Place.prototype.addSubplace = function (subplace) {
            this.subplaceMap[subplace.name] = subplace;
            this.subplaceList.push(subplace);
        };
        return Place;
    })();
    VizPortal.Place = Place;
    var Subplace = (function () {
        function Subplace(name, type, resourceQueryFn, filterValuesQueryFn, resource, defaultFilters, excludeFilters) {
            if (excludeFilters === void 0) { excludeFilters = []; }
            this.name = name;
            this.type = type;
            this.resourceQueryFn = resourceQueryFn;
            this.filterValuesQueryFn = filterValuesQueryFn;
            this.resource = resource;
            this.defaultFilters = defaultFilters;
            this.excludeFilters = excludeFilters;
        }
        Subplace.prototype.filterKeys = function () {
            return _.difference(this.type.filterKeys, this.excludeFilters);
        };
        Subplace.prototype.query = function () {
            return this.resourceQueryFn();
        };
        Subplace.prototype.filterValuesQuery = function (field) {
            return this.filterValuesQueryFn ? this.filterValuesQueryFn(field) : undefined;
        };
        // creates an empty place that never has any content.
        // this is only used on the site users place when we a showing a place for a server admin
        // who is not a site member.
        Subplace.empty = function (name, type, $q) {
            var emptyResource = new VizPortal.ResourceQuery({
                fetchList: function (params) {
                    return $q.when({
                        items: [],
                        index: 0,
                        total: 0
                    });
                }
            });
            return new Subplace(name, type, function () {
                return emptyResource;
            }, undefined, {
                all: function () { return emptyResource; }
            }, {});
        };
        // TODO: refactor this method to use QueryService
        Subplace.create = function (name, type, resource, urlParamsFn, defaultFilters, excludeFilters) {
            if (defaultFilters === void 0) { defaultFilters = {}; }
            if (excludeFilters === void 0) { excludeFilters = []; }
            var getFilterClauses = function (urlParams) {
                return VizPortal.ServerFilterClauses.create(_.defaults(_(urlParams).pick(type.filterKeys), defaultFilters || {}));
            };
            return new Subplace(name, type, function () {
                var urlParams = urlParamsFn();
                var filterClauses = getFilterClauses(urlParams);
                var order = VizPortal.Order.fromInput(urlParams['order'], type.orderKeys) || type.defaultOrder;
                return resource.all().withFiltersAndOrder(filterClauses, order);
            }, (!resource.valuesForField) ? undefined : function (field) {
                // Remove the filter for the field that we're changing so that we don't filter for both values
                var filterClauses = _.reject(getFilterClauses(urlParamsFn()), function (filter) {
                    var fieldFilter = filter;
                    return field && fieldFilter.field === field;
                });
                return resource.valuesForField(field).withFilters(filterClauses);
            }, resource, defaultFilters, excludeFilters);
        };
        return Subplace;
    })();
    VizPortal.Subplace = Subplace;
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    // Key Objects
    //TODO Figure out a way to remove the dependency on these Key variables and then remove it
    VizPortal.NamedItemInfoKeys = {
        id: 'id',
        name: 'name'
    };
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../models/resourceInfoParts.ts" />
/// <reference path="../libs.ts" />
/// <reference path="../models/resourceInfoParts.ts" />
/// <reference path="../libs.ts" />
/// <reference path="../models/IProjectInfo.ts" />
/// <reference path="../models/IWorkbookInfo.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var BreadcrumbsService = (function () {
        function BreadcrumbsService() {
        }
        BreadcrumbsService.prototype.forgetWorkbook = function () {
            this.workbook = null;
            this.workbookUrl = null;
        };
        BreadcrumbsService.prototype.forgetProject = function () {
            this.project = null;
            this.projectUrl = null;
        };
        BreadcrumbsService.prototype.rememberSiteUrl = function (url) {
            this.forgetWorkbook();
            this.forgetProject();
            this.siteUrl = url;
        };
        BreadcrumbsService.prototype.rememberProjectUrl = function (project, url) {
            this.forgetWorkbook();
            this.project = project;
            this.projectUrl = url;
        };
        BreadcrumbsService.prototype.rememberWorkbookUrl = function (workbook, url) {
            this.workbook = workbook;
            this.workbookUrl = url;
            if (this.project && (!workbook || !workbook.project || this.project.id !== workbook.project.id)) {
                this.forgetProject();
            }
        };
        BreadcrumbsService.prototype.workbookChanged = function (workbook) {
            if (this.workbook && (!workbook || this.workbook.id !== workbook.id)) {
                this.forgetWorkbook();
            }
            if (this.project && (!workbook || !workbook.project || this.project.id !== workbook.project.id)) {
                this.forgetProject();
            }
        };
        BreadcrumbsService.prototype.projectChanged = function (project) {
            if (this.project && (!project || this.project.id !== project.id)) {
                this.forgetProject();
            }
        };
        BreadcrumbsService.prototype.rememberGroupsUrl = function (url) {
            this.groupsUrl = url;
        };
        return BreadcrumbsService;
    })();
    VizPortal.BreadcrumbsService = BreadcrumbsService;
    VizPortal.Module.instance().service('BreadcrumbsService', BreadcrumbsService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    /*
      ModalService is modelled on Bootstrap's $modal service: http://angular-ui.github.io/bootstrap/
  
      It has a single method: open(options). The options are:
  
        templateUrl (required) - a path to a template representing the modal's content
        scope - a scope instance to be used for the modal's content. Defaults to $rootScope.
        controller - a controller for a modal instance - it can initialize scope used by modal.
        resolve - members that will be resolved and passed to the controller as locals; it is equivalent
                 of the resolve property for AngularJS routes.
  
      The open method returns a modal instance, an object with the following properties:
  
        close(result) - a method that can be used to close a modal, passing a result
        dismiss(reason) - a method that can be used to dismiss a modal, passing a reason
        result - a promise that is resolved when a modal is closed and rejected when a modal is dismissed
  
      In addition the scope associated with modal's content is augmented with 2 methods:
  
        close(result)
        dismiss(reason)
  
      These methods make it easy to close a modal window without the need to create a dedicated controller.
  
      Example:
  
        var modalInstance = modalService.open({
          templateUrl: 'myModalContent.html',
          controller: ModalInstanceCtrl,
          resolve: {
            items: function () {
              return [ 'item1', 'item2' ];
            }
          }
        });
  
        modalInstance.result.then(
          (closeResult: any) => {
            $log.info('Modal closed with result: ' + closeResult);
          },
          (dismissResult: any) => {
            $log.info('Modal dismissed with result: ' + dismissResult);
          });
  
    */
    // Constants
    var DistanceFromHostElement = 15; // Distance between host element and modal border
    var ArrowWidth = 29; // Width of the base of the modal arrow
    VizPortal.ModalSize = {
        // Add other sizes as required
        medium: '400px',
        fitToContent: 'auto'
    };
    var ModalService = (function () {
        function ModalService($window, $compile, $rootScope, $q, $controller, $injector, $templateCache, $http, StackedElementsService) {
            this.$window = $window;
            this.$compile = $compile;
            this.$rootScope = $rootScope;
            this.$q = $q;
            this.$controller = $controller;
            this.$injector = $injector;
            this.$templateCache = $templateCache;
            this.$http = $http;
            this.StackedElementsService = StackedElementsService;
            this.id = 0;
            this.modalInstances = new VizPortal.Set(function (modalInstance) { return modalInstance._id; });
        }
        /**
         * Creates an instance of IModalPositionOptions that will instruct the modal service to anchor
         * the dialog to the element.
         * @param element
         */
        ModalService.anchoredTo = function (element) {
            return { hostElement: element };
        };
        ModalService.prototype.open = function (options) {
            var _this = this;
            // Verify options
            if (!options.templateUrl) {
                throw new Error('templateUrl option is required.');
            }
            // Default values
            _.defaults(options, {
                size: VizPortal.ModalSize.medium,
                keyboard: true,
                resolve: {},
                scope: this.$rootScope,
                backdrop: true,
                closeX: true,
                tbTestId: 'modal'
            });
            var deferredResult = this.$q.defer();
            var modalStackedElement;
            var backdropStackedElement;
            // Create modal scope
            var modalScope = options.scope.$new();
            var backdrop;
            // TODO: create a service called ModalStack and move open/close logic into there.
            //       see https://github.com/angular-ui/bootstrap/blob/master/src/modal/modal.js
            var modalInstance = {
                result: deferredResult.promise,
                close: function (result) {
                    _this.close(modalInstance, modalStackedElement, backdropStackedElement, backdrop.scope);
                    deferredResult.resolve(result);
                },
                dismiss: function (reason) {
                    _this.close(modalInstance, modalStackedElement, backdropStackedElement, backdrop.scope);
                    deferredResult.reject(reason);
                },
                _id: (this.id++).toString(),
                _scope: modalScope
            };
            this.modalInstances.add(modalInstance);
            var promises = this.getResolvePromises(options.resolve);
            // Pre-load the modal template to avoid flickering/re-layout
            promises.push(this.$http.get(options.templateUrl, { cache: this.$templateCache }));
            this.$q.all(promises).then(function (resolvedValues) {
                var modalElement = $('<tb:modal />');
                if (options.classes) {
                    modalElement.addClass(options.classes);
                }
                backdrop = _this.createBackdrop(modalInstance, options);
                modalScope.options = options;
                // Add close() and dismiss() convenience methods to the scope.
                modalScope.close = modalInstance.close;
                modalScope.dismiss = modalInstance.dismiss;
                // Controller
                if (options.controller) {
                    var ctrlLocals = {
                        $scope: modalScope,
                        modalInstance: modalInstance
                    };
                    var resolveIter = 0;
                    angular.forEach(options.resolve, function (value, key) {
                        ctrlLocals[key] = resolvedValues[resolveIter++];
                    });
                    _this.$controller(options.controller, ctrlLocals);
                }
                _this.$compile(modalElement)(modalScope);
                var fillWindow = function () { return { left: 0, top: 0, right: 0, bottom: 0 }; };
                backdropStackedElement = _this.StackedElementsService.addStackedElement({
                    contentElement: backdrop.element,
                    getContentElementPosition: fillWindow
                });
                // Broadcast changes in modal position
                var lastPosition = undefined;
                modalStackedElement = _this.StackedElementsService.addStackedElement({
                    contentElement: modalElement,
                    getContentElementPosition: function () {
                        var newPosition = _this.position(modalElement, options);
                        if (!_.isEqual(newPosition, lastPosition)) {
                            modalScope.$broadcast('positionChanged', newPosition);
                            lastPosition = newPosition;
                        }
                        return newPosition;
                    }
                });
                _this.attachKeydownHandler(modalInstance, options);
            });
            return modalInstance;
        };
        ModalService.prototype.alert = function (options) {
            var scope = this.$rootScope.$new();
            var modalInstance = this.open({
                scope: angular.extend(scope, options),
                templateUrl: 'alert.html'
            });
            modalInstance.result.fin(function () { return scope.$destroy(); });
            return modalInstance;
        };
        ModalService.prototype.createBackdrop = function (modalInstance, options) {
            var backdropElement = $('<div ng-click="backdropClick()" ng-if="options.backdrop" />').addClass(ModalService.BackdropClass);
            var backdropScope = this.$rootScope.$new();
            // put the entire options object on the scope so we don't have to setup a binding for options.backdrop changing
            backdropScope.options = options;
            if (backdropScope.options.backdropClasses) {
                backdropElement.addClass(backdropScope.options.backdropClasses);
            }
            backdropScope.backdropClick = function () {
                if (options.backdrop && options.backdrop !== 'static') {
                    modalInstance.dismiss();
                }
            };
            this.$compile(backdropElement)(backdropScope);
            return {
                element: backdropElement,
                scope: backdropScope
            };
        };
        ModalService.prototype.attachKeydownHandler = function (modalInstance, options) {
            var _this = this;
            $(this.$window.document).on('keydown.modal' + modalInstance._id, function ($event) {
                if ($event.which === VizPortal.Keys.Escape && options.keyboard) {
                    _this.$rootScope.$apply(function () { return modalInstance.dismiss(); });
                }
            });
        };
        ModalService.prototype.detachKeydownHandler = function (modalInstance) {
            $(this.$window.document).off('.modal' + modalInstance._id);
        };
        ModalService.prototype.getWindowSize = function () {
            var window = $(this.$window);
            return {
                width: window.width(),
                height: window.height()
            };
        };
        ModalService.prototype.position = function (modalElement, options) {
            var minimumSpace = ModalService.MinimumSpaceBetweenDialogAndViewport;
            var reserveHeight = Math.max(modalElement.outerHeight(), (options.position && options.position.reserveHeight) || 0);
            var position = this.positionRelativeToHostElement(modalElement, options, reserveHeight);
            if (!position) {
                // if relative positioning failed, fall back to using centered positioning.
                var window = this.getWindowSize();
                options._showArrow = false;
                position = {
                    left: window.width / 2 - modalElement.outerWidth() / 2,
                    // keep the top of the modal from being positioned above the viewport
                    top: Math.max(window.height / 2 - reserveHeight / 2, minimumSpace)
                };
            }
            return position;
        };
        /**
        * Attempts to position the modal element relative to the host element.
        * First it will attempt to place the modal below the host element.
        * Next it will attempt to place the modal above the host element.
        * If both of these attempts fail, it will return null to signal that positioning failed.
        */
        ModalService.prototype.positionRelativeToHostElement = function (modalElement, options, reserveHeight) {
            // Make sure we have a host element and it is in the DOM
            if (!options.position || !options.position.hostElement || options.position.hostElement.parents('body').length === 0) {
                return null;
            }
            var minimumSpace = ModalService.MinimumSpaceBetweenDialogAndViewport;
            var window = this.getWindowSize();
            var hostElement = options.position.hostElement;
            var hostElementOffset = hostElement.offset();
            // By default, align the dialog's center with the host element's center, and place the dialog beneath
            // the host element.
            var left = hostElementOffset.left + hostElement.outerWidth() / 2 - modalElement.outerWidth() / 2;
            var top = hostElementOffset.top + hostElement.outerHeight() + DistanceFromHostElement;
            // Keep the dialog inside the window: horizontally
            left = Math.min(left, window.width - minimumSpace - modalElement.outerWidth());
            left = Math.max(left, minimumSpace);
            // Keep the dialog inside the window: vertically
            if (top + reserveHeight > window.height - minimumSpace) {
                var spaceAboveHostElement = hostElementOffset.top - DistanceFromHostElement - reserveHeight;
                if (spaceAboveHostElement >= minimumSpace) {
                    // Use actual height instead of reserve height when positioning above the host element.
                    // Otherwise, the element will be positioned too far above the position element since we are assuming that it
                    // is larger than it actually is.
                    top = hostElementOffset.top - modalElement.outerHeight() - DistanceFromHostElement;
                }
                else {
                    // the dialog is too tall to fit above or below the position element.
                    return null;
                }
            }
            options._showArrow = true;
            return {
                left: left,
                top: top
            };
        };
        ModalService.prototype.getResolvePromises = function (resolves) {
            var _this = this;
            var promisesArr = [];
            angular.forEach(resolves, function (value) {
                if (angular.isFunction(value) || angular.isArray(value)) {
                    promisesArr.push(_this.$q.when(_this.$injector.invoke(value)));
                }
            });
            return promisesArr;
        };
        ModalService.prototype.close = function (modalInstance, modalStackedElement, backdropStackedElement, backdropScope) {
            this.detachKeydownHandler(modalInstance);
            modalInstance._scope.$destroy();
            this.StackedElementsService.removeStackedElement(modalStackedElement);
            backdropScope.$destroy();
            this.StackedElementsService.removeStackedElement(backdropStackedElement);
            this.modalInstances.remove(modalInstance);
        };
        ModalService.prototype.dismissAll = function () {
            var _this = this;
            _.each(this.modalInstances.toArray(), function (modalInstance) {
                modalInstance.dismiss();
                _this.modalInstances.remove(modalInstance);
            });
        };
        ModalService.$inject = ['$window', '$compile', '$rootScope', '$q',
            '$controller', '$injector', '$templateCache', '$http', 'StackedElementsService'];
        ModalService.BackdropClass = 'tb-backdrop';
        ModalService.MinimumSpaceBetweenDialogAndViewport = 18;
        return ModalService;
    })();
    VizPortal.ModalService = ModalService;
    VizPortal.Module.instance().service('ModalService', ModalService);
    VizPortal.Module.instance().directive('tbModal', [
        '$window',
        function ($window) {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'modal.html',
                link: function (scope, element) {
                    var window = $($window);
                    scope.showArrow = function () { return !!scope.options._showArrow; };
                    scope.arrowUp = true;
                    scope.arrowLeft = 0;
                    var contentElement = element.find('.tb-modal-content')[0];
                    var modalOffsetTop = 0;
                    // Keep focus inside the dialog
                    // Adapted from code at https://github.com/fnagel/jQuery-Accessible-RIA/issues/30
                    element.on('keydown', function ($event) {
                        if ($event.which !== VizPortal.Keys.Tab) {
                            return;
                        }
                        var tabbables = element.find(':tabbable'), first = tabbables.filter(':first'), last = tabbables.filter(':last');
                        if ($event.target === last[0] && !$event.shiftKey) {
                            $event.preventDefault();
                            first.focus();
                        }
                        else if ($event.target === first[0] && $event.shiftKey) {
                            $event.preventDefault();
                            last.focus();
                        }
                    });
                    scope.$on('positionChanged', function (event, modalPosition) {
                        if (scope.options.position) {
                            var position = scope.options.position;
                            var hostElement = position.hostElement;
                            if (modalPosition && hostElement) {
                                var hostElementPosition = hostElement.offset();
                                scope.arrowUp = modalPosition.top > hostElementPosition.top;
                                modalOffsetTop = modalPosition.top;
                                var midpointOfHostElement = hostElementPosition.left + hostElement.outerWidth() / 2;
                                scope.arrowLeft = midpointOfHostElement - (ArrowWidth / 2) - modalPosition.left;
                            }
                        }
                    });
                    element.css('width', scope.options.size);
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../services/ModalService.ts" />
var VizPortal;
(function (VizPortal) {
    var ActionContext;
    (function (ActionContext) {
        /**
         * Creates an ActionContext from a JQuery event, for example, from a button with a click
         * listener. The returned target element is that on which the event was defined, and the
         * returned scope is that of the target element.
         */
        function fromEvent($event) {
            // Using $event.currentTarget rather than $event.target causes the ActionContext to be
            // attached to the element on which the listener is defined, rather than the element that was
            // clicked (which is likely a child of the element with the listener).
            var targetElement = angular.element($event.currentTarget);
            return {
                scope: targetElement.scope(),
                targetElement: targetElement
            };
        }
        ActionContext.fromEvent = fromEvent;
    })(ActionContext = VizPortal.ActionContext || (VizPortal.ActionContext = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../FeatureFlags.ts" />
var VizPortal;
(function (VizPortal) {
    var MultipleResultNotificationOptions;
    (function (MultipleResultNotificationOptions) {
        function create(result, translator) {
            var options = {};
            if (result.anySucceeded()) {
                options.successSummary = tryTranslate(function () { return translator.describeSuccessSummary(result.successCount); });
            }
            if (result.anyFailed()) {
                options.errorSummary = tryTranslate(function () { return translator.describeErrorSummary(result.errorCount); });
                options.errorDetails = _.compact(_.map(result.errorItems(), function (errorItem) { return tryTranslate(function () { return translator.describeErrorDetail(errorItem); }); }));
            }
            return options;
        }
        MultipleResultNotificationOptions.create = create;
        function tryTranslate(fn) {
            try {
                return fn();
            }
            catch (ex) {
                console.error("Error translation failed", ex);
                return undefined;
            }
        }
    })(MultipleResultNotificationOptions = VizPortal.MultipleResultNotificationOptions || (VizPortal.MultipleResultNotificationOptions = {}));
    var ContentActionNotification = (function () {
        function ContentActionNotification($translate, scope, toaster, modal, SliceableFactory) {
            this.$translate = $translate;
            this.scope = scope;
            this.toaster = toaster;
            this.modal = modal;
            this.SliceableFactory = SliceableFactory;
        }
        ContentActionNotification.prototype.notifyResult = function (items, errors, translations, translationParams) {
            var errorCount = errors ? errors.length : 0;
            var successCount = items.size() - errorCount;
            var notificationLines = [];
            if (successCount) {
                notificationLines.push(this.$translate.instant(translations.successId, angular.extend({ ITEM_COUNT: successCount }, translationParams), VizPortal.L10n.Interpolations.Count));
            }
            if (errorCount) {
                notificationLines.push(this.$translate.instant(translations.errorId, angular.extend({ ERROR_COUNT: errorCount }, translationParams), VizPortal.L10n.Interpolations.Count));
            }
            this.toaster.pop({ type: errorCount ? VizPortal.ToastType.Error : VizPortal.ToastType.Info, text: notificationLines.join('\n') });
        };
        ContentActionNotification.prototype.notify = function (options) {
            if (options.successSummary) {
                this.toaster.pop({ type: VizPortal.ToastType.Info, text: options.successSummary });
            }
            if (options.errorSummary) {
                if (VizPortal.FeatureFlags.reactToasts) {
                    var contentComponent = React.createClass({
                        showDetails: function () {
                            this.props.openModal($(React.findDOMNode(this)));
                        },
                        render: function () {
                            var detailsLink = options.errorDetails.length > 0 ? React.DOM.a({ onClick: this.showDetails }, this.props.detailsLinkText) : null;
                            return React.DOM.div({}, React.DOM.span({}, options.errorSummary + '\u00a0'), detailsLink);
                        }
                    });
                    //create new scope for the error modal dialog
                    var newScope = this.scope.$new();
                    newScope.errorDetailsSliceable = this.SliceableFactory.fromArray(options.errorDetails);
                    //react element passes itself in as an anchor
                    var modal = this.modal;
                    function openModal(anchor) {
                        modal.open({
                            scope: newScope,
                            templateUrl: 'errorDetailsDialog.html',
                            size: VizPortal.ModalSize.fitToContent,
                            position: VizPortal.ModalService.anchoredTo(anchor)
                        }).result.fin(function () { return newScope.$destroy(); });
                        ;
                    }
                    this.toaster.pop({
                        type: VizPortal.ToastType.Error,
                        content: React.createElement(contentComponent, {
                            detailsLinkText: this.$translate.instant('details'),
                            openModal: openModal
                        })
                    });
                }
                else {
                    this.toaster.pop({
                        type: VizPortal.ToastType.Error,
                        templateUrl: 'errorDetailsToast.html',
                        data: options
                    });
                }
            }
        };
        ContentActionNotification.prototype.notifySuccess = function (successMessage) {
            this.toaster.pop({ type: VizPortal.ToastType.Info, text: successMessage });
        };
        ContentActionNotification.prototype.notifyFailure = function (failureMessage) {
            this.toaster.pop({ type: VizPortal.ToastType.Error, text: failureMessage });
        };
        ContentActionNotification.$inject = [
            '$translate',
            '$rootScope',
            'ToasterService',
            'ModalService',
            'SliceableFactory'
        ];
        return ContentActionNotification;
    })();
    VizPortal.ContentActionNotification = ContentActionNotification;
    VizPortal.Module.instance().service('ContentActionNotification', ContentActionNotification);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/ActionContext.ts" />
/// <reference path="../helpers/ErrorCodes.ts" />
/// <reference path="ContentActionNotification.ts" />
var VizPortal;
(function (VizPortal) {
    var AbstractContentAction = (function () {
        function AbstractContentAction(ConfirmActionDialog, ContentActionNotification) {
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.ContentActionNotification = ContentActionNotification;
        }
        AbstractContentAction.prototype.executeFromEvent = function (contentItems, $event) {
            return this.execute(contentItems, VizPortal.ActionContext.fromEvent($event));
        };
        AbstractContentAction.prototype.execute = function (contentItems, actionContext) {
            var _this = this;
            var dialogConfig = this.defaultDialogConfig(actionContext);
            this.configureDialog(dialogConfig, contentItems);
            var dialogInstance = this.ConfirmActionDialog.open(dialogConfig);
            dialogInstance.result.then(function (result) {
                return _this.ContentActionNotification.notifyResult(contentItems, result.errors, _this.notificationTranslationIds(), _this.notificationTranslationValues(dialogConfig.scope));
            });
            dialogInstance.result.fin(function () { return dialogConfig.scope.$destroy(); });
            return dialogInstance.result;
        };
        AbstractContentAction.prototype.defaultDialogConfig = function (actionContext) {
            return {
                scope: actionContext.scope.$new(),
                title: '',
                actionName: "OK",
                action: angular.noop
            };
        };
        // Override in action implementations
        AbstractContentAction.prototype.configureDialog = function (dialogConfig, contentItems) { };
        AbstractContentAction.prototype.notificationTranslationIds = function () {
            throw "notificationTranslationIds() must be implemented in a subclass";
        };
        AbstractContentAction.prototype.notificationTranslationValues = function (dialogScope) {
            return {};
        };
        return AbstractContentAction;
    })();
    VizPortal.AbstractContentAction = AbstractContentAction;
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="AbstractContentAction.ts" />
var VizPortal;
(function (VizPortal) {
    var ActivateSitesAction = (function (_super) {
        __extends(ActivateSitesAction, _super);
        function ActivateSitesAction(ConfirmActionDialog, ContentActionNotification, $translate, Sites) {
            _super.call(this, ConfirmActionDialog, ContentActionNotification);
            this.$translate = $translate;
            this.Sites = Sites;
        }
        ActivateSitesAction.prototype.configureDialog = function (dialogConfig, sites) {
            var _this = this;
            var scope = dialogConfig.scope;
            scope.dialog = {
                siteName: sites.first().settings.name
            };
            dialogConfig.bodyText = this.$translate.instant('confirmActivateSites', {
                SITE_NAME: VizPortal.L10n.elideIfLong(scope.dialog.siteName),
                ITEM_COUNT: sites.size()
            }, VizPortal.L10n.Interpolations.Count);
            dialogConfig.title = this.$translate.instant('activateSites');
            dialogConfig.actionName = this.$translate.instant('activateButtonConfirm', {
                ITEM_COUNT: sites.size()
            }, VizPortal.L10n.Interpolations.Count);
            dialogConfig.action = function () { return _this.Sites.activate(sites.keys()); };
        };
        ActivateSitesAction.prototype.notificationTranslationIds = function () {
            return {
                successId: 'sitesActivateSuccess',
                errorId: 'sitesActivateFailed'
            };
        };
        ActivateSitesAction.prototype.notificationTranslationValues = function (scope) {
            return {
                SITE_NAME: VizPortal.L10n.elideIfLong(scope.dialog.siteName)
            };
        };
        ActivateSitesAction.$inject = ['ConfirmActionDialog', 'ContentActionNotification', '$translate', 'Sites'];
        return ActivateSitesAction;
    })(VizPortal.AbstractContentAction);
    VizPortal.ActivateSitesAction = ActivateSitesAction;
    VizPortal.Module.instance().service('ActivateSitesAction', ActivateSitesAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../fetchers/ListResult.ts" />
/// <reference path="../models/ISliceable.ts" />
/// <reference path="../services/ServerService.ts" />
var VizPortal;
(function (VizPortal) {
    var SliceableHelper;
    (function (SliceableHelper) {
        SliceableHelper.BlockSize = VizPortal.MaxRequestArrayLength;
        // Return true from itemsReceived to cancel.
        function fetchAll(sliceable, itemsReceived) {
            var totalList = [];
            var getBlock = function (blockStartIndex) {
                if (blockStartIndex === void 0) { blockStartIndex = 0; }
                return sliceable.getSlice(blockStartIndex, SliceableHelper.BlockSize).then(function (result) {
                    var cancel = false;
                    if (itemsReceived) {
                        cancel = !!itemsReceived(result.items);
                    }
                    totalList = totalList.concat(result.items);
                    if (!cancel && result.total > totalList.length) {
                        return getBlock(totalList.length);
                    }
                    return new VizPortal.ListResult(totalList);
                });
            };
            return getBlock();
        }
        SliceableHelper.fetchAll = fetchAll;
    })(SliceableHelper = VizPortal.SliceableHelper || (VizPortal.SliceableHelper = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../ServerApi/types/IRequest.ts" />
/// <reference path="../services/ServerService.ts" />
var VizPortal;
(function (VizPortal) {
    var RequestHelper;
    (function (RequestHelper) {
        RequestHelper.DefaultBlockSize = VizPortal.MaxRequestArrayLength;
        function makeBlocks(items, blockSize) {
            if (items.length <= blockSize)
                return [items]; // optimize for common case
            var blocks = [];
            var numBlocks = Math.ceil(items.length / blockSize);
            for (var i = 0; i < numBlocks; i++) {
                blocks[i] = items.slice(i * blockSize, (i + 1) * blockSize);
            }
            return blocks;
        }
        RequestHelper.makeBlocks = makeBlocks;
        function buildRequests(items, buildRequest, blockSize) {
            if (blockSize === void 0) { blockSize = RequestHelper.DefaultBlockSize; }
            var requests = [];
            var blocks = makeBlocks(items, blockSize);
            for (var i = 0, l = blocks.length; i < l; i++) {
                var request = buildRequest(blocks[i]);
                if (!!request)
                    requests.push(request);
            }
            return requests;
        }
        RequestHelper.buildRequests = buildRequests;
        function buildRequests2(items1, items2, buildRequest, blockSize) {
            if (blockSize === void 0) { blockSize = RequestHelper.DefaultBlockSize; }
            var requests = [];
            var blocks1 = makeBlocks(items1, blockSize);
            var blocks2 = makeBlocks(items2, blockSize);
            for (var i1 = 0, l1 = blocks1.length; i1 < l1; i1++) {
                for (var i2 = 0, l2 = blocks2.length; i2 < l2; i2++) {
                    var request = buildRequest(blocks1[i1], blocks2[i2]);
                    if (!!request)
                        requests.push(request);
                }
            }
            return requests;
        }
        RequestHelper.buildRequests2 = buildRequests2;
        function buildRequests3(items1, items2, items3, buildRequest, blockSize) {
            if (blockSize === void 0) { blockSize = RequestHelper.DefaultBlockSize; }
            var requests = [];
            var blocks1 = makeBlocks(items1, blockSize);
            var blocks2 = makeBlocks(items2, blockSize);
            var blocks3 = makeBlocks(items3, blockSize);
            for (var i1 = 0, l1 = blocks1.length; i1 < l1; i1++) {
                for (var i2 = 0, l2 = blocks2.length; i2 < l2; i2++) {
                    for (var i3 = 0, l3 = blocks3.length; i3 < l3; i3++) {
                        var request = buildRequest(blocks1[i1], blocks2[i2], blocks3[i3]);
                        if (!!request)
                            requests.push(request);
                    }
                }
            }
            return requests;
        }
        RequestHelper.buildRequests3 = buildRequests3;
    })(RequestHelper = VizPortal.RequestHelper || (VizPortal.RequestHelper = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var Set = (function () {
        function Set(keyForItem) {
            this.items = {};
            this.keyForItem = keyForItem;
        }
        Set.fromKeyArray = function (keys) {
            var set = new Set(function (item) { return item; });
            set.addItems(keys);
            return set;
        };
        Set.fromIdItemArray = function (items) {
            var set = new Set(function (item) { return item.id; });
            set.addItems(items);
            return set;
        };
        Set.singleton = function (item, keyForItem) {
            var set = new Set(keyForItem);
            set.add(item);
            return set;
        };
        Set.prototype.keyFor = function (item) {
            return this.keyForItem(item);
        };
        Set.prototype.containsKey = function (key) {
            return _.has(this.items, key);
        };
        Set.prototype.contains = function (item) {
            return this.containsKey(this.keyForItem(item));
        };
        Set.prototype.size = function () {
            return _.size(this.items);
        };
        Set.prototype.isEmpty = function () {
            return _.isEmpty(this.items);
        };
        Set.prototype.keys = function () {
            return _.keys(this.items);
        };
        Set.prototype.get = function (itemId) {
            return this.items[itemId];
        };
        Set.prototype.add = function (item) {
            this.items[this.keyForItem(item)] = item;
        };
        Set.prototype.addItems = function (items) {
            var _this = this;
            _.each(items, function (item) {
                _this.add(item);
            });
        };
        // Updates the value of the given item if it is already in the set.
        // This is useful if the value corresponding to some key may have changed.
        Set.prototype.update = function (item) {
            if (this.contains(item)) {
                this.add(item);
            }
        };
        Set.prototype.updateItems = function (items) {
            var _this = this;
            _.each(items, function (item) {
                _this.update(item);
            });
        };
        Set.prototype.remove = function (item) {
            delete this.items[this.keyForItem(item)];
        };
        Set.prototype.removeItems = function (items) {
            var _this = this;
            _.each(items, function (item) {
                _this.remove(item);
            });
        };
        Set.prototype.removeItemsIn = function (set) {
            var _this = this;
            _.each(this.items, function (item, key) {
                if (set.containsKey(key)) {
                    _this.remove(item);
                }
            });
        };
        Set.prototype.removeItemsNotIn = function (set) {
            var _this = this;
            _.each(this.items, function (item, key) {
                if (!set.containsKey(key)) {
                    _this.remove(item);
                }
            });
        };
        Set.prototype.toggle = function (item) {
            if (this.contains(item)) {
                this.remove(item);
                return false;
            }
            else {
                this.add(item);
                return true;
            }
        };
        Set.prototype.toggleItems = function (items) {
            var _this = this;
            _.each(items, function (item) {
                _this.toggle(item);
            });
        };
        Set.prototype.clear = function () {
            this.items = {};
        };
        Set.prototype.toArray = function () {
            return _.values(this.items);
        };
        Set.prototype.each = function (iterator, context) {
            _.each(this.items, iterator, context);
        };
        Set.prototype.find = function (iterator, context) {
            return _.find(this.items, iterator, context);
        };
        Set.prototype.pluck = function (propertyName) {
            return _.pluck(this.toArray(), propertyName);
        };
        Set.prototype.map = function (iterator, context) {
            return _.map(this.items, iterator, context);
        };
        Set.prototype.reduce = function (iterator, memo, context) {
            return _.reduce(this.items, iterator, memo, context);
        };
        Set.prototype.sum = function (iterator) {
            return this.reduce(function (sum, item) { return sum + iterator(item); }, 0);
        };
        Set.prototype.all = function (iterator) {
            return _.all(this.items, iterator);
        };
        Set.prototype.any = function (iterator) {
            return _.any(this.items, iterator);
        };
        Set.prototype.filter = function (filterFunction) {
            var filteredSet = new Set(this.keyForItem);
            this.each(function (item) {
                if (filterFunction(item)) {
                    filteredSet.add(item);
                }
            });
            return filteredSet;
        };
        Set.prototype.clone = function () {
            var clone = new Set(this.keyForItem);
            clone.addItems(this.toArray());
            return clone;
        };
        Set.prototype.first = function () {
            return this.get(this.keys()[0]);
        };
        Set.prototype.getByIndex = function (index) {
            return this.get(this.keys()[index]);
        };
        return Set;
    })();
    VizPortal.Set = Set;
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../models/Set.ts" />
/// <reference path="../ServerApi/types/IResponse.ts" />
/// <reference path="../ServerApi/types/IUser.ts" />
var VizPortal;
(function (VizPortal) {
    var ResultHelper;
    (function (ResultHelper) {
        /**
         * Merges lists of properties from a list of result objects (typically from an action that was
         * split into multiple requests) into a single list of properties.
         * @param results An array of result objects from the server
         * @param getProperty A function that extracts the relevant property from each result item
         * @returns {T[]}
         */
        function combine(results, getProperty) {
            return _.compact(_.flatten(_.map(_.compact(results), getProperty)));
        }
        ResultHelper.combine = combine;
        /**
         * Merge objects from a list of result objects (typically from an action that was split into
         * multiple requests) by combining all the keys into a single object. If the same key appears
         * more than once in the source objects, the later one will take precedence.
         * @param results An array of result objects from the server
         * @param getProperty A function that extracts the relevant property from each result item
         * @returns {any}
         */
        function combineByKey(results, getProperty) {
            var allProperties = _.compact(_.map(_.compact(results), getProperty));
            allProperties.unshift({}); // Create the args array for _.extend
            return _.extend.apply(null, allProperties);
        }
        ResultHelper.combineByKey = combineByKey;
        function combineErrors(results) {
            return combine(results, function (result) { return result.errors; });
        }
        ResultHelper.combineErrors = combineErrors;
        function combineIds(results) {
            return combine(results, function (result) { return result.ids; });
        }
        ResultHelper.combineIds = combineIds;
        function combineUsers(results) {
            return combine(results, function (result) { return result.users; });
        }
        ResultHelper.combineUsers = combineUsers;
        function combineResults(results) {
            return {
                errors: combineErrors(results)
            };
        }
        ResultHelper.combineResults = combineResults;
        function combineCodes(results) {
            return combine(results, function (result) { return result.results; });
        }
        ResultHelper.combineCodes = combineCodes;
        function combineUserResults(results) {
            return {
                errors: combineErrors(results),
                users: combineUsers(results),
                results: combineCodes(results)
            };
        }
        ResultHelper.combineUserResults = combineUserResults;
        function combineImportUserResults(results) {
            return {
                errors: combineErrors(results),
                users: combineUsers(results)
            };
        }
        ResultHelper.combineImportUserResults = combineImportUserResults;
        function hasErrors(result) {
            return !!(result && result.errors) && result.errors.length > 0;
        }
        ResultHelper.hasErrors = hasErrors;
        // Reject a promise if the result returned from the server contains any errors.
        function rejectResultOnError($q) {
            return function (result) {
                return hasErrors(result)
                    ? $q.reject(result)
                    : $q.when(result);
            };
        }
        ResultHelper.rejectResultOnError = rejectResultOnError;
        function getErrorIds(result, options) {
            if (options === void 0) { options = {}; }
            return VizPortal.Set.fromKeyArray(_.compact(_.map(result && result.errors || [], function (error) { return error.code === options.excludeCode ? null : error.id; })));
        }
        ResultHelper.getErrorIds = getErrorIds;
        function getErrorIdsWithCode(result, code) {
            return VizPortal.Set.fromKeyArray(_.compact(_.map(result && result.errors || [], function (error) { return error.code === code ? error.id : null; })));
        }
        ResultHelper.getErrorIdsWithCode = getErrorIdsWithCode;
    })(ResultHelper = VizPortal.ResultHelper || (VizPortal.ResultHelper = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        ServerApi.ScheduleTypes = {
            Hourly: 'Hourly',
            Daily: 'Daily',
            Weekly: 'Weekly',
            Monthly: 'Monthly'
        };
        ServerApi.ScheduleActions = {
            Extract: 'Extract',
            Subscription: 'Subscription'
        };
        ServerApi.ScheduleDaysOfTheWeek = {
            Sun: 'Sun',
            Mon: 'Mon',
            Tue: 'Tue',
            Wed: 'Wed',
            Thu: 'Thu',
            Fri: 'Fri',
            Sat: 'Sat'
        };
        ServerApi.ScheduleLastDayOfMonth = 'Last';
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/ISchedule.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var CreateScheduleRequest = (function (_super) {
            __extends(CreateScheduleRequest, _super);
            function CreateScheduleRequest(params) {
                _super.call(this, 'createSchedule', params);
            }
            return CreateScheduleRequest;
        })(ServerApi.Request);
        ServerApi.CreateScheduleRequest = CreateScheduleRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var DeleteSchedulesRequest = (function (_super) {
            __extends(DeleteSchedulesRequest, _super);
            function DeleteSchedulesRequest(ids) {
                _super.call(this, 'deleteSchedules', { ids: ids });
            }
            return DeleteSchedulesRequest;
        })(ServerApi.Request);
        ServerApi.DeleteSchedulesRequest = DeleteSchedulesRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="IPage.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="../types/IGetItemsParams.ts" />
/// <reference path="../types/IGetItemsResult.ts" />
/// <reference path="../types/ISchedule.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetSchedulesRequest = (function (_super) {
            __extends(GetSchedulesRequest, _super);
            function GetSchedulesRequest(params) {
                _super.call(this, 'getSchedules', params);
            }
            return GetSchedulesRequest;
        })(ServerApi.Request);
        ServerApi.GetSchedulesRequest = GetSchedulesRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var RunServerSchedulesRequest = (function (_super) {
            __extends(RunServerSchedulesRequest, _super);
            function RunServerSchedulesRequest(ids) {
                _super.call(this, 'runServerSchedules', {
                    ids: ids
                });
            }
            return RunServerSchedulesRequest;
        })(ServerApi.Request);
        ServerApi.RunServerSchedulesRequest = RunServerSchedulesRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var RunSchedulesRequest = (function (_super) {
            __extends(RunSchedulesRequest, _super);
            function RunSchedulesRequest(ids) {
                _super.call(this, 'runSchedules', {
                    ids: ids
                });
            }
            return RunSchedulesRequest;
        })(ServerApi.Request);
        ServerApi.RunSchedulesRequest = RunSchedulesRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var SetEnabledStatusForSchedulesRequest = (function (_super) {
            __extends(SetEnabledStatusForSchedulesRequest, _super);
            function SetEnabledStatusForSchedulesRequest(ids, enabled) {
                _super.call(this, 'setEnabledStatusForSchedules', { ids: ids, enabled: enabled });
            }
            return SetEnabledStatusForSchedulesRequest;
        })(ServerApi.Request);
        ServerApi.SetEnabledStatusForSchedulesRequest = SetEnabledStatusForSchedulesRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
/// <reference path="../types/IResponse.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var SetScheduleNameRequest = (function (_super) {
            __extends(SetScheduleNameRequest, _super);
            function SetScheduleNameRequest(id, name) {
                _super.call(this, 'setScheduleName', {
                    id: id,
                    name: name
                });
            }
            return SetScheduleNameRequest;
        })(ServerApi.Request);
        ServerApi.SetScheduleNameRequest = SetScheduleNameRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../fetchers/IListFetcher.ts" />
/// <reference path="../helpers/ResourceHelper.ts" />
/// <reference path="../resources/Query.ts" />
/// <reference path="../ServerApi/types/resourceParts.ts" />
var VizPortal;
(function (VizPortal) {
    var Resource = (function () {
        function Resource(fetcher) {
            this.fetcher = fetcher;
            this.allQuery = new VizPortal.ResourceQuery(this.fetcher);
        }
        Resource.prototype.all = function () {
            return this.allQuery;
        };
        Resource.prototype.getById = function (id, additionalFilterClauses) {
            var query = this.all();
            if (additionalFilterClauses)
                query = query.withFilters(additionalFilterClauses);
            return query.addFilter(VizPortal.Filter.stringFieldEq(VizPortal.ServerApi.NamedItemKeys.id, id))
                .getFirst();
        };
        return Resource;
    })();
    VizPortal.Resource = Resource;
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/RequestHelper.ts" />
/// <reference path="../helpers/ResultHelper.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/CreateScheduleRequest.ts" />
/// <reference path="../ServerApi/requests/DeleteSchedulesRequest.ts" />
/// <reference path="../ServerApi/requests/GetSchedulesRequest.ts" />
/// <reference path="../ServerApi/requests/RunServerSchedulesRequest.ts" />
/// <reference path="../ServerApi/requests/RunSchedulesRequest.ts" />
/// <reference path="../ServerApi/requests/SetEnabledStatusForSchedulesRequest.ts" />
/// <reference path="../ServerApi/requests/SetScheduleNameRequest.ts" />
/// <reference path="../ServerApi/types/ISchedule.ts" />
/// <reference path="../services/ServerService.ts" />
/// <reference path="Resource.ts" />
var VizPortal;
(function (VizPortal) {
    var Schedules = (function (_super) {
        __extends(Schedules, _super);
        function Schedules(ErrorNotifyingServer, FetcherFactory) {
            _super.call(this, FetcherFactory.getServerResourceFetcher(VizPortal.ServerApi.GetSchedulesRequest, function (result) { return result.schedules; }));
            this.ErrorNotifyingServer = ErrorNotifyingServer;
        }
        Schedules.filterByActionType = function (scheduledActionType) {
            return VizPortal.Filter.fieldEq(VizPortal.ServerApi.FilterFieldNames.scheduledAction, scheduledActionType);
        };
        Schedules.prototype.getByIdForSite = function (id, siteId) {
            return this.getById(id, _(siteId).isString() ? [VizPortal.Filter.fieldEq(VizPortal.ServerApi.FilterFieldNames.siteId, siteId)] : []);
        };
        Schedules.prototype.setEnabledStatus = function (ids, status) {
            return this.ErrorNotifyingServer.sendRequests(VizPortal.RequestHelper.buildRequests(ids, function (idsBlock) { return new VizPortal.ServerApi.SetEnabledStatusForSchedulesRequest(idsBlock, status); }), VizPortal.ResultHelper.combineResults);
        };
        Schedules.prototype.disable = function (ids) {
            return this.setEnabledStatus(ids, false);
        };
        Schedules.prototype.enable = function (ids) {
            return this.setEnabledStatus(ids, true);
        };
        Schedules.prototype.del = function (ids) {
            return this.ErrorNotifyingServer.sendRequests(VizPortal.RequestHelper.buildRequests(ids, function (idsBlock) { return new VizPortal.ServerApi.DeleteSchedulesRequest(idsBlock); }), VizPortal.ResultHelper.combineResults);
        };
        Schedules.prototype.runServer = function (ids) {
            return this.ErrorNotifyingServer.sendRequests(VizPortal.RequestHelper.buildRequests(ids, function (idsBlock) { return new VizPortal.ServerApi.RunServerSchedulesRequest(idsBlock); }), VizPortal.ResultHelper.combineResults);
        };
        Schedules.prototype.run = function (ids) {
            return this.ErrorNotifyingServer.sendRequests(VizPortal.RequestHelper.buildRequests(ids, function (idsBlock) { return new VizPortal.ServerApi.RunSchedulesRequest(idsBlock); }), VizPortal.ResultHelper.combineResults);
        };
        Schedules.prototype.create = function (schedule) {
            return this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.CreateScheduleRequest(schedule));
        };
        Schedules.prototype.update = function (schedule) {
            return this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.UpdateScheduleRequest(schedule));
        };
        Schedules.prototype.rename = function (id, newName) {
            return this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.SetScheduleNameRequest(id, newName));
        };
        Schedules.$inject = ['ErrorNotifyingServer', 'FetcherFactory'];
        return Schedules;
    })(VizPortal.Resource);
    VizPortal.Schedules = Schedules;
    VizPortal.Module.instance().service('Schedules', Schedules);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/ErrorCodes.ts" />
/// <reference path="../helpers/SliceableHelper.ts" />
/// <reference path="../resources/Schedules.ts" />
/// <reference path="ContentActionNotification.ts" />
var VizPortal;
(function (VizPortal) {
    (function (CreateExtractTasksMode) {
        CreateExtractTasksMode[CreateExtractTasksMode["AllowRefreshNow"] = 0] = "AllowRefreshNow";
        CreateExtractTasksMode[CreateExtractTasksMode["AllowSchedule"] = 1] = "AllowSchedule";
        CreateExtractTasksMode[CreateExtractTasksMode["AllowBoth"] = 2] = "AllowBoth";
    })(VizPortal.CreateExtractTasksMode || (VizPortal.CreateExtractTasksMode = {}));
    var CreateExtractTasksMode = VizPortal.CreateExtractTasksMode;
    ;
    var DialogMode = {
        RefreshNow: 'RefreshNow',
        ScheduleRefresh: 'ScheduleRefresh'
    };
    var CreateExtractTasksAction = (function () {
        function CreateExtractTasksAction(ConfirmActionDialog, ContentUrl, $translate, Workbooks, Datasources, SearchSuggestionsService, ActionHelpers, ModalService) {
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.ContentUrl = ContentUrl;
            this.$translate = $translate;
            this.Workbooks = Workbooks;
            this.Datasources = Datasources;
            this.SearchSuggestionsService = SearchSuggestionsService;
            this.ActionHelpers = ActionHelpers;
            this.ModalService = ModalService;
            this.notificationTranslationIds = {
                successId: 'extractTasksCreateSuccess',
                errorId: 'extractTasksCreateError'
            };
        }
        // Generic logic
        CreateExtractTasksAction.prototype.createDialogScope = function (parentScope, items, schedulePrompt, allowedMode) {
            var scope = parentScope.$new();
            scope.extractTask = {
                type: VizPortal.ServerApi.ExtractTaskType.RefreshExtract
            };
            scope.schedulePrompt = schedulePrompt;
            scope.scheduleSource = this.SearchSuggestionsService.schedulesSource(VizPortal.ServerApi.ScheduleActions.Extract);
            scope.allowIncremental = _.any(items.toArray(), function (item) { return item.hasIncrementalExtract; });
            if (scope.allowIncremental) {
                scope.extractTaskTypeOptions = [
                    { value: VizPortal.ServerApi.ExtractTaskType.RefreshExtract,
                        labelTranslateKey: 'extractTasksTypeRefreshExtract',
                        tbTestId: 'create-extract-refresh-type-full'
                    },
                    { value: VizPortal.ServerApi.ExtractTaskType.IncrementExtract,
                        labelTranslateKey: 'extractTasksTypeIncrementExtract',
                        tbTestId: 'create-extract-refresh-type-incremental'
                    }
                ];
            }
            scope.dialog = {
                mode: allowedMode === CreateExtractTasksMode.AllowSchedule ? DialogMode.ScheduleRefresh : DialogMode.RefreshNow,
                showModeSelector: allowedMode === CreateExtractTasksMode.AllowBoth
            };
            return scope;
        };
        CreateExtractTasksAction.prototype.execute = function (items, context, schedulePrompt, scheduleRefreshAction, refreshNowPrompt, refreshNowAction, errorDetailFn, allowedMode) {
            var _this = this;
            var scope = this.createDialogScope(context.scope, items, schedulePrompt, allowedMode);
            scope.refreshNowPrompt = refreshNowPrompt;
            // Change the available buttons based on the dialog mode
            var buttons = [];
            scope.$watch(function () { return scope.dialog.mode; }, function () {
                buttons.length = 0;
                if (scope.dialog.mode === DialogMode.ScheduleRefresh) {
                    buttons.push({
                        label: _this.$translate.instant('extractTasksCreateConfirm'),
                        action: function () { return scheduleRefreshAction(items.keys(), scope.extractTask.schedule.id, scope.extractTask.type); },
                        disabled: function () { return !scope.extractTask.schedule || !scope.extractTask.type; }
                    });
                }
                else {
                    buttons.push({
                        label: _this.$translate.instant('fullRefresh'),
                        action: function () { return refreshNowAction(items.keys(), VizPortal.ServerApi.ExtractTaskType.RefreshExtract); }
                    });
                    if (scope.allowIncremental) {
                        buttons.push({
                            label: _this.$translate.instant('incrementalRefresh'),
                            action: function () { return refreshNowAction(items.keys(), VizPortal.ServerApi.ExtractTaskType.IncrementExtract); }
                        });
                    }
                }
            });
            var dialogInstance = this.ConfirmActionDialog.open({
                scope: scope,
                position: { reserveHeight: 550 },
                bodyTemplateUrl: 'confirmActionDialogExtractRefresh.html',
                title: this.dialogTitle(allowedMode),
                buttons: buttons,
                size: '600px' // custom size to fit extra buttons
            });
            dialogInstance.result
                .then(this.ActionHelpers.notifyStandardError(items, this.notificationTranslationIds, function (errorItem) { return errorDetailFn(scope.extractTask.schedule)(errorItem); }))
                .fin(function () { return scope.$destroy(); });
            return dialogInstance.result;
        };
        CreateExtractTasksAction.prototype.dialogTitle = function (allowedMode) {
            switch (allowedMode) {
                case CreateExtractTasksMode.AllowBoth:
                    return this.$translate.instant('extractTasksDialogTitle_AllowBoth');
                case CreateExtractTasksMode.AllowRefreshNow:
                    return this.$translate.instant('extractTasksDialogTitle_AllowRefreshNow');
                case CreateExtractTasksMode.AllowSchedule:
                    return this.$translate.instant('extractTasksDialogTitle_AllowSchedule');
                default:
                    throw "Unknown allowed mode: " + allowedMode;
            }
        };
        CreateExtractTasksAction.prototype.createExtractErrorMessageFor = function (errorItem, schedule) {
            switch (errorItem.error.code) {
                case VizPortal.SchedulingErrorCode.SchedulingScheduleNotFound:
                    return this.$translate.instant('scheduleNotFound', { SCHEDULE: schedule.name });
            }
            return this.$translate.instant('errorUnknown');
        };
        // Workbook specific logic
        CreateExtractTasksAction.prototype.forWorkbook = function (workbook, context, allowedMode) {
            var workbookSet = VizPortal.Set.singleton(workbook, function (wb) { return wb.id; });
            return this.forWorkbooks(workbookSet, context, allowedMode);
        };
        CreateExtractTasksAction.prototype.forWorkbooks = function (workbooks, context, allowedMode) {
            var _this = this;
            var schedulePrompt = (workbooks.size() === 1)
                ? this.$translate.instant('schedulesLabelPromptWorkbook', { WORKBOOK_NAME: VizPortal.L10n.elideIfLong(workbooks.first().name) })
                : this.$translate.instant('schedulesLabelPromptWorkbooks', { COUNT: workbooks.size() }, VizPortal.L10n.Interpolations.Count);
            var refreshNowPrompt = this.$translate.instant('extractTasksRefreshNowOnWorkbooksPrompt', {
                WORKBOOK_COUNT: workbooks.size(),
                WORKBOOK_NAME: VizPortal.L10n.elideIfLong(workbooks.first().name)
            }, VizPortal.L10n.Interpolations.Count);
            return this.execute(workbooks, context, schedulePrompt, function (ids, scheduleId, type) { return _this.Workbooks.createExtractTask(ids, scheduleId, type); }, refreshNowPrompt, function (ids, type) { return _this.Workbooks.refreshExtracts(ids, type); }, function (schedule) { return _this.workbookErrorDetailFactory(schedule); }, allowedMode);
        };
        CreateExtractTasksAction.prototype.workbookErrorDetailFactory = function (schedule) {
            var _this = this;
            return function (errorItem) {
                return {
                    itemName: errorItem.item.name,
                    itemUrl: _this.ContentUrl.forItem(errorItem.item, VizPortal.WorkbookContentType),
                    errorMessage: _this.workbookErrorMessageFor(errorItem, schedule)
                };
            };
        };
        CreateExtractTasksAction.prototype.workbookErrorMessageFor = function (errorItem, schedule) {
            switch (errorItem.error.code) {
                case VizPortal.WebClientErrorCode.TaskTypeRefreshExtractNotAllowed:
                    return this.$translate.instant('extractTasksWorkbookNoExtract');
                case VizPortal.WebClientErrorCode.TaskTypeIncrementExtractNotAllowed:
                    return this.$translate.instant('extractTasksWorkbookNoIncrementalExtract');
                case VizPortal.SchedulingErrorCode.SchedulingExtractTaskExistsForTarget:
                    return this.$translate.instant('extractTasksRefreshAlreadyExistsForWorkbook', {
                        SCHEDULE: schedule.name
                    });
                case VizPortal.CommonErrorCode.CallingUserInsufficientPermissions:
                    return this.$translate.instant('extractTasksWorkbookErrorInsufficientPermissions');
            }
            return this.createExtractErrorMessageFor(errorItem, schedule);
        };
        // Datasource specific logic
        CreateExtractTasksAction.prototype.forDatasource = function (datasource, context, allowedMode) {
            var datasourceSet = VizPortal.Set.singleton(datasource, function (ds) { return ds.id; });
            return this.forDatasources(datasourceSet, context, allowedMode);
        };
        CreateExtractTasksAction.prototype.forDatasources = function (datasources, context, allowedMode) {
            var _this = this;
            if (!this.anyRefreshableDatasources(datasources)) {
                return this.showCannotRefreshErrorAlert(datasources);
            }
            var schedulePrompt = (datasources.size() === 1)
                ? this.$translate.instant('schedulesLabelPromptDatasource', { DATASOURCE_NAME: VizPortal.L10n.elideIfLong(datasources.first().name) })
                : this.$translate.instant('schedulesLabelPromptDatasources', { COUNT: datasources.size() }, VizPortal.L10n.Interpolations.Count);
            var refreshNowPrompt = this.$translate.instant('extractTasksRefreshNowOnDatasourcesPrompt', {
                DATASOURCE_COUNT: datasources.size(),
                DATASOURCE_NAME: VizPortal.L10n.elideIfLong(datasources.first().name)
            }, VizPortal.L10n.Interpolations.Count);
            return this.execute(datasources, context, schedulePrompt, function (ids, scheduleId, type) { return _this.Datasources.createExtractTask(ids, scheduleId, type); }, refreshNowPrompt, function (ids, type) { return _this.Datasources.refreshExtracts(ids, type); }, function (schedule) { return _this.datasourceErrorDetailFactory(schedule); }, allowedMode);
        };
        CreateExtractTasksAction.prototype.anyRefreshableDatasources = function (datasources) {
            var _this = this;
            return _.any(datasources.toArray(), function (ds) { return _this.isRefreshableDatasource(ds); });
        };
        CreateExtractTasksAction.prototype.isRefreshableDatasource = function (datasource) {
            // To be refreshable, a datasource must be:
            //   1. Not embedded in a workbook
            //   2. Have an extract
            // Embedded datasources are not refreshable
            if (_.isObject(datasource.workbook)) {
                return false;
            }
            // Live datasources are not refreshable
            if (!datasource.hasExtracts) {
                return false;
            }
            return true;
        };
        CreateExtractTasksAction.prototype.showCannotRefreshErrorAlert = function (datasources) {
            // Determine which message to display
            var allEmbedded = datasources.all(function (ds) { return _.isObject(ds.workbook); });
            var anyEmbedded = datasources.any(function (ds) { return _.isObject(ds.workbook); });
            var messageId = 'refreshExtracts_cannotRefreshAlertMessage_allLive';
            if (allEmbedded) {
                messageId = 'refreshExtracts_cannotRefreshAlertMessage_allEmbedded';
            }
            else if (anyEmbedded) {
                messageId = 'refreshExtracts_cannotRefreshAlertMessage_mixedEmbeddedAndLive';
            }
            // Show alert
            return this.ModalService.alert({
                titleId: 'refreshExtracts_cannotRefreshAlertTitle',
                messageId: messageId
            }).result;
        };
        CreateExtractTasksAction.prototype.datasourceErrorDetailFactory = function (schedule) {
            var _this = this;
            return function (errorItem) {
                return {
                    itemName: errorItem.item.name,
                    itemUrl: _this.ContentUrl.forItem(errorItem.item, VizPortal.DatasourceContentType),
                    errorMessage: _this.datasourceErrorMessageFor(errorItem, schedule)
                };
            };
        };
        CreateExtractTasksAction.prototype.datasourceErrorMessageFor = function (errorItem, schedule) {
            switch (errorItem.error.code) {
                case VizPortal.WebClientErrorCode.TaskTypeRefreshExtractNotAllowed:
                    return this.$translate.instant('extractTasksDatasourceNoExtract');
                case VizPortal.WebClientErrorCode.TaskTypeIncrementExtractNotAllowed:
                    return this.$translate.instant('extractTasksDatasourceNoIncrementalExtract');
                case VizPortal.SchedulingErrorCode.SchedulingExtractTaskExistsForTarget:
                    return this.$translate.instant('extractTasksRefreshAlreadyExistsForDatasource', {
                        SCHEDULE: schedule.name
                    });
                case VizPortal.CommonErrorCode.CallingUserInsufficientPermissions:
                    return this.$translate.instant('extractTasksDatasourceErrorInsufficientPermissions');
                case VizPortal.UnifiedDatasourceErrorCode.OperationOnlySupportedForPublishedDatasource:
                    return this.$translate.instant('errorOperationOnlySupportedForPublishedDatasource');
            }
            return this.createExtractErrorMessageFor(errorItem, schedule);
        };
        CreateExtractTasksAction.$inject = [
            'ConfirmActionDialog',
            'ContentUrl',
            '$translate',
            'Workbooks',
            'DataSources',
            'SearchSuggestionsService',
            'ActionHelpers',
            'ModalService'
        ];
        return CreateExtractTasksAction;
    })();
    VizPortal.CreateExtractTasksAction = CreateExtractTasksAction;
    VizPortal.Module.instance().service('CreateExtractTasksAction', CreateExtractTasksAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="AbstractContentAction.ts" />
var VizPortal;
(function (VizPortal) {
    var ChangeDatasourceOwnerAction = (function () {
        function ChangeDatasourceOwnerAction(DataSourceErrors, ActionHelpers, ConfirmActionDialog, $translate, DataSources, suggestions, ModalService) {
            this.DataSourceErrors = DataSourceErrors;
            this.ActionHelpers = ActionHelpers;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.$translate = $translate;
            this.DataSources = DataSources;
            this.suggestions = suggestions;
            this.ModalService = ModalService;
        }
        ChangeDatasourceOwnerAction.prototype.confirmChangeOwner = function (datasources, context) {
            var _this = this;
            // Disallow change owner if all selected datasources are embedded.
            if (datasources.all(function (ds) { return _.isObject(ds.workbook); })) {
                return this.ModalService.alert({
                    titleId: 'changeOwnerDatasources_cannotChangeOwnerAlertTitle',
                    messageId: 'changeOwnerDatasources_cannotChangeOwnerAlertMessage'
                }).result;
            }
            var ownerPicker = {
                prompt: datasources.size() === 1
                    ? this.$translate.instant('changeOwnerDatasourcePrompt', { NAME: VizPortal.L10n.elideIfLong(datasources.first().name) })
                    : this.$translate.instant('changeOwnerDatasourcesPrompt', { COUNT: datasources.size() }, VizPortal.L10n.Interpolations.Count),
                ownerQuery: function (matchText) { return _this.suggestions.usersWithoutGuest(matchText); },
                targetOwner: null
            };
            var newDialogScope = context.scope.$new();
            newDialogScope.ownerPicker = ownerPicker;
            var currentOwnerId = datasources.first().owner.id;
            if (_.any(datasources.toArray(), function (ds) { return (ds.owner.id !== currentOwnerId); })) {
                currentOwnerId = null;
            }
            return this.ConfirmActionDialog.open({
                scope: newDialogScope,
                title: this.$translate.instant('changeOwner'),
                bodyTemplateUrl: 'changeOwnerDialog.html',
                actionName: this.$translate.instant('changeOwnerConfirm', { COUNT: datasources.size() }, VizPortal.L10n.Interpolations.Count),
                action: function (dialogInstance) {
                    return _this.DataSources.setOwner(datasources.keys(), ownerPicker.targetOwner.id)
                        .then(function (result) { return _this.notifyResult(datasources, result); });
                },
                confirmDisabled: function () { return !ownerPicker.targetOwner || ownerPicker.targetOwner.id === currentOwnerId; }
            }).result.fin(function () { return newDialogScope.$destroy(); });
        };
        ChangeDatasourceOwnerAction.prototype.notifyResult = function (datasources, result) {
            var _this = this;
            this.ActionHelpers.notifyStandardError(datasources, {
                successId: 'changeOwnerDatasourcesSuccess',
                errorId: 'changeOwnerDatasourcesError'
            }, function (errorItem) { return _this.DataSourceErrors.errorDetailsFor(errorItem); })(result);
        };
        ChangeDatasourceOwnerAction.$inject = ['DataSourceErrors', 'ActionHelpers', 'ConfirmActionDialog', '$translate', 'DataSources', 'SearchSuggestionsService', 'ModalService'];
        return ChangeDatasourceOwnerAction;
    })();
    VizPortal.ChangeDatasourceOwnerAction = ChangeDatasourceOwnerAction;
    VizPortal.Module.instance().service('ChangeDatasourceOwnerAction', ChangeDatasourceOwnerAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var TagsHelper;
    (function (TagsHelper) {
        function tagsListFromTaggedItemSet(taggedSet) {
            var tagCounts = {};
            taggedSet.each(function (taggedItem) {
                _.forEach(taggedItem.tags, function (tagName) {
                    tagCounts[tagName] = (tagCounts[tagName] || 0) + 1;
                });
            });
            var tagList = _.map(tagCounts, function (count, tagName) {
                var tagWithCount = {
                    name: tagName
                };
                if (taggedSet.size() > count)
                    tagWithCount.count = count;
                return tagWithCount;
            });
            return _(tagList).sortBy(function (tag) { return tag.name.toLowerCase(); });
        }
        TagsHelper.tagsListFromTaggedItemSet = tagsListFromTaggedItemSet;
        function tagSetFromTagsList(tagList) {
            var tagSet = new VizPortal.Set(function (tag) { return tag.name; });
            tagSet.addItems(tagList);
            return tagSet;
        }
        TagsHelper.tagSetFromTagsList = tagSetFromTagsList;
        function getTagsChange(previousTagSet, newTagsList) {
            var changeTags = {
                addTags: [],
                removeTags: []
            };
            var keepTag = {};
            _.forEach(newTagsList, function (tag) {
                if (tag.added)
                    changeTags.addTags.push(tag.name);
                // A user can re-tag an item.  This is useful if a non-admin wants to add their own tagging to an item
                var tagName = tag.name;
                var previousTag = previousTagSet.get(tagName) || previousTagSet.get(unquote(tagName));
                if (previousTag)
                    keepTag[previousTag.name] = true;
            });
            changeTags.removeTags = _.filter(previousTagSet.keys(), function (previousTagName) { return !keepTag[previousTagName]; });
            return changeTags;
        }
        TagsHelper.getTagsChange = getTagsChange;
        function parseTagString(tagString) {
            var tagList = [];
            tagString = tagString.replace(/"[^"]*?"/g, function (quotedTag) {
                tagList.push(quotedTag);
                return '';
            });
            var splitTags = _.flatten(_.map(tagString.split(','), function (commaSplitTag) { return commaSplitTag.split(' '); }));
            return _.union(tagList, splitTags);
        }
        TagsHelper.parseTagString = parseTagString;
        function quote(tag) {
            return _(tag).contains('"') ? tag : ('"' + tag + '"');
        }
        TagsHelper.quote = quote;
        function unquote(tag) {
            return tag.replace(/^"([^"]*)"$/, "$1");
        }
        TagsHelper.unquote = unquote;
        function displayTagHtml(tag) {
            return _.escape(unquote(tag)).replace(/ /g, '&nbsp;');
        }
        TagsHelper.displayTagHtml = displayTagHtml;
    })(TagsHelper = VizPortal.TagsHelper || (VizPortal.TagsHelper = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/TagsInputHelper.ts" />
/// <reference path="../Module.ts" />
/// <reference path="AbstractContentAction.ts" />
var VizPortal;
(function (VizPortal) {
    var ChangeTagsActionHelperService = (function () {
        function ChangeTagsActionHelperService(ConfirmActionDialog, ActionHelpers, $translate) {
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.ActionHelpers = ActionHelpers;
            this.$translate = $translate;
        }
        ChangeTagsActionHelperService.prototype.createExecuteFn = function (params) {
            var _this = this;
            return function (itemSet, context) {
                var scope = _this.configureScope(context.scope, itemSet, params.getDescription);
                var previousTagSet = VizPortal.TagsHelper.tagSetFromTagsList(scope.tags.model);
                var dialogConfig = {
                    scope: scope,
                    bodyTemplateUrl: 'confirmActionDialogTags.html',
                    title: _this.$translate.instant('changeTags'),
                    actionName: _this.$translate.instant('changeTagsConfirm'),
                    action: function () {
                        var editTags = VizPortal.TagsHelper.getTagsChange(previousTagSet, scope.tags.model);
                        return params.changeTagsAction(itemSet.keys(), editTags.addTags, editTags.removeTags);
                    },
                    position: { reserveHeight: 450 }
                };
                var dialogInstance = _this.ConfirmActionDialog.open(dialogConfig);
                dialogInstance.result
                    .then(_this.ActionHelpers.notifyStandardError(itemSet, params.notificationIds, params.errorDetailFn))
                    .fin(function () { return scope.$destroy(); });
                return dialogInstance.result;
            };
        };
        ChangeTagsActionHelperService.prototype.configureScope = function (parentScope, itemSet, getDescription) {
            var scope = parentScope.$new();
            scope.description = getDescription(itemSet);
            scope.tags = {
                model: VizPortal.TagsHelper.tagsListFromTaggedItemSet(itemSet)
            };
            return scope;
        };
        ChangeTagsActionHelperService.prototype.errorMessageFor = function (errorItem) {
            switch (errorItem.error.code) {
                case VizPortal.CommonErrorCode.CallingUserInsufficientPermissions:
                    return this.$translate.instant('changeTagsErrorNoPermission');
                case VizPortal.TagErrorCode.TagNameTooLong:
                    return this.$translate.instant('changeTagsErrorNameTooLong');
                default:
                    return this.$translate.instant('errorUnknown');
            }
        };
        ChangeTagsActionHelperService.$inject = ['ConfirmActionDialog', 'ActionHelpers', '$translate', 'DataSources'];
        return ChangeTagsActionHelperService;
    })();
    VizPortal.ChangeTagsActionHelperService = ChangeTagsActionHelperService;
    VizPortal.Module.instance().service('ChangeTagsActionHelperService', ChangeTagsActionHelperService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/TagsInputHelper.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="ChangeTagsActionHelper.ts" />
var VizPortal;
(function (VizPortal) {
    var ChangeDatasourcesTagsAction = (function () {
        function ChangeDatasourcesTagsAction(ChangeTagsActionHelper, $translate, DataSources, ContentUrl, ModalService) {
            var _this = this;
            this.ChangeTagsActionHelper = ChangeTagsActionHelper;
            this.$translate = $translate;
            this.DataSources = DataSources;
            this.ContentUrl = ContentUrl;
            this.ModalService = ModalService;
            this.execute = ChangeTagsActionHelper.createExecuteFn({
                changeTagsAction: function (ids, addTags, removeTags) { return _this.DataSources.changeTags(ids, addTags, removeTags); },
                getDescription: function (datasources) { return _this.getDescription(datasources); },
                notificationIds: ChangeDatasourcesTagsAction.notificationTranslationIds,
                errorDetailFn: function (errorItem) { return _this.changeTagsErrorDetail(errorItem); }
            });
        }
        ChangeDatasourcesTagsAction.prototype.getDescription = function (datasources) {
            return (datasources.size() === 1)
                ? this.$translate.instant('changeTagsDatasourceDescription', { NAME: VizPortal.L10n.elideIfLong(datasources.first().name) })
                : this.$translate.instant('changeTagsDatasourcesDescription', { COUNT: datasources.size() }, VizPortal.L10n.Interpolations.Count);
        };
        ChangeDatasourcesTagsAction.prototype.showChangeTagsDialog = function (datasources, actionContext) {
            // Disallow changing tags if all selected datasources are embedded.
            if (datasources.all(function (ds) { return _.isObject(ds.workbook); })) {
                return this.ModalService.alert({
                    titleId: 'changeTagsDatasource_cannotTagAlertTitle',
                    messageId: 'changeTagsDatasource_cannotTagAlertMessage'
                }).result;
            }
            return this.execute(datasources, actionContext);
        };
        ChangeDatasourcesTagsAction.prototype.changeTagsErrorDetail = function (errorItem) {
            return {
                itemName: errorItem.item.name,
                itemUrl: this.ContentUrl.forItem(errorItem.item, VizPortal.DatasourceContentType),
                errorMessage: this.ChangeTagsActionHelper.errorMessageFor(errorItem)
            };
        };
        ChangeDatasourcesTagsAction.notificationTranslationIds = {
            successId: 'changeTagsDatasourcesSuccess',
            errorId: 'changeTagsDatasourcesError'
        };
        ChangeDatasourcesTagsAction.$inject = ['ChangeTagsActionHelperService', '$translate', 'DataSources', 'ContentUrl', 'ModalService'];
        return ChangeDatasourcesTagsAction;
    })();
    VizPortal.ChangeDatasourcesTagsAction = ChangeDatasourcesTagsAction;
    VizPortal.Module.instance().service('ChangeDatasourcesTagsAction', ChangeDatasourcesTagsAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var ChangeProjectOwnerAction = (function () {
        function ChangeProjectOwnerAction(ProjectErrors, ActionHelpers, ConfirmActionDialog, $translate, Projects, suggestions) {
            this.ProjectErrors = ProjectErrors;
            this.ActionHelpers = ActionHelpers;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.$translate = $translate;
            this.Projects = Projects;
            this.suggestions = suggestions;
        }
        ChangeProjectOwnerAction.prototype.confirmChangeOwner = function (projects, context) {
            var _this = this;
            var ownerPicker = {
                prompt: projects.size() === 1
                    ? this.$translate.instant('changeOwnerProjectPrompt', { NAME: VizPortal.L10n.elideIfLong(projects.first().name) })
                    : this.$translate.instant('changeOwnerProjectsPrompt', { COUNT: projects.size() }, VizPortal.L10n.Interpolations.Count),
                ownerQuery: function (matchText) { return _this.suggestions.adminUsers(matchText); },
                targetOwner: null
            };
            var newDialogScope = context.scope.$new();
            newDialogScope.ownerPicker = ownerPicker;
            return this.ConfirmActionDialog.open({
                scope: newDialogScope,
                title: this.$translate.instant('changeOwner'),
                bodyTemplateUrl: 'changeOwnerDialog.html',
                actionName: this.$translate.instant('changeOwnerConfirm', { COUNT: projects.size() }, VizPortal.L10n.Interpolations.Count),
                action: function (dialogInstance) {
                    return _this.Projects.setOwner(projects.keys(), ownerPicker.targetOwner.id)
                        .then(function (result) { return _this.notifyResult(projects, result); });
                },
                confirmDisabled: function () { return !ownerPicker.targetOwner || !ownerPicker.targetOwner.id; }
            }).result.fin(function () { return newDialogScope.$destroy(); });
        };
        ChangeProjectOwnerAction.prototype.notifyResult = function (projects, result) {
            var _this = this;
            this.ActionHelpers.notifyStandardError(projects, {
                successId: 'changeOwnerProjectsSuccess',
                errorId: 'changeOwnerProjectsError'
            }, function (errorItem) { return _this.ProjectErrors.errorDetailsFor(errorItem); })(result);
        };
        ChangeProjectOwnerAction.$inject = ['ProjectErrors', 'ActionHelpers', 'ConfirmActionDialog', '$translate', 'Projects', 'SearchSuggestionsService'];
        return ChangeProjectOwnerAction;
    })();
    VizPortal.ChangeProjectOwnerAction = ChangeProjectOwnerAction;
    VizPortal.Module.instance().service('ChangeProjectOwnerAction', ChangeProjectOwnerAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../helpers/TagsInputHelper.ts" />
/// <reference path="../Module.ts" />
/// <reference path="ChangeTagsActionHelper.ts" />
var VizPortal;
(function (VizPortal) {
    var ChangeViewTagsAction = (function () {
        function ChangeViewTagsAction(ChangeTagsActionHelper, $translate, Views, ContentUrl) {
            var _this = this;
            this.ChangeTagsActionHelper = ChangeTagsActionHelper;
            this.$translate = $translate;
            this.Views = Views;
            this.ContentUrl = ContentUrl;
            /*
             changeTagsAction: (ids: string[], addTags: string[], removeTags: string[]) => ng.IPromise<ServerApi.IResult>;
             getDescription: (itemSet: Set<T>) => string;
             notificationIds: INotificationTranslationIds;
             errorDetailFn: (errorItem: IErrorItem<T>) => IErrorDetail;
             */
            this.execute = ChangeTagsActionHelper.createExecuteFn({
                changeTagsAction: function (ids, addTags, removeTags) { return _this.Views.changeTags(ids, addTags, removeTags); },
                getDescription: function (views) { return _this.getDescription(views); },
                notificationIds: ChangeViewTagsAction.notificationTranslationIds,
                errorDetailFn: function (errorItem) { return _this.changeTagsErrorDetail(errorItem); }
            });
        }
        ChangeViewTagsAction.prototype.getDescription = function (views) {
            return (views.size() === 1)
                ? this.$translate.instant('changeTagsViewDescription', { NAME: VizPortal.L10n.elideIfLong(views.first().name) })
                : this.$translate.instant('changeTagsViewsDescription', { COUNT: views.size() }, VizPortal.L10n.Interpolations.Count);
        };
        ChangeViewTagsAction.prototype.changeTagsErrorDetail = function (errorItem) {
            return {
                itemName: errorItem.item.name,
                itemUrl: this.ContentUrl.forItem(errorItem.item, VizPortal.ViewContentType),
                errorMessage: this.ChangeTagsActionHelper.errorMessageFor(errorItem)
            };
        };
        ChangeViewTagsAction.notificationTranslationIds = {
            successId: 'changeTagsViewsSuccess',
            errorId: 'changeTagsViewsError'
        };
        ChangeViewTagsAction.$inject = ['ChangeTagsActionHelperService', '$translate', 'Views', 'ContentUrl'];
        return ChangeViewTagsAction;
    })();
    VizPortal.ChangeViewTagsAction = ChangeViewTagsAction;
    VizPortal.Module.instance().service('ChangeViewTagsAction', ChangeViewTagsAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="AbstractContentAction.ts" />
var VizPortal;
(function (VizPortal) {
    var ChangeWorkbookOwnerAction = (function () {
        function ChangeWorkbookOwnerAction(WorkbookErrors, ActionHelpers, ConfirmActionDialog, $translate, Workbooks, suggestions) {
            this.WorkbookErrors = WorkbookErrors;
            this.ActionHelpers = ActionHelpers;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.$translate = $translate;
            this.Workbooks = Workbooks;
            this.suggestions = suggestions;
        }
        ChangeWorkbookOwnerAction.prototype.confirmChangeOwner = function (workbooks, context) {
            var _this = this;
            var ownerPicker = {
                prompt: workbooks.size() === 1
                    ? this.$translate.instant('changeOwnerWorkbookPrompt', { NAME: VizPortal.L10n.elideIfLong(workbooks.first().name) })
                    : this.$translate.instant('changeOwnerWorkbooksPrompt', { COUNT: workbooks.size() }, VizPortal.L10n.Interpolations.Count),
                ownerQuery: function (matchText) { return _this.suggestions.usersWithoutGuest(matchText); },
                targetOwner: null
            };
            var newDialogScope = context.scope.$new();
            newDialogScope.ownerPicker = ownerPicker;
            return this.ConfirmActionDialog.open({
                scope: newDialogScope,
                title: this.$translate.instant('changeOwner'),
                bodyTemplateUrl: 'changeOwnerDialog.html',
                actionName: this.$translate.instant('changeOwnerConfirm', { COUNT: workbooks.size() }, VizPortal.L10n.Interpolations.Count),
                action: function (dialogInstance) {
                    return _this.Workbooks.setOwner(workbooks.keys(), ownerPicker.targetOwner.id)
                        .then(function (result) { return _this.notifyResult(workbooks, result); });
                },
                confirmDisabled: function () { return !ownerPicker.targetOwner || !ownerPicker.targetOwner.id; }
            }).result.fin(function () { return newDialogScope.$destroy(); });
        };
        ChangeWorkbookOwnerAction.prototype.notifyResult = function (workbooks, result) {
            var _this = this;
            this.ActionHelpers.notifyStandardError(workbooks, {
                successId: 'changeOwnerWorkbooksSuccess',
                errorId: 'changeOwnerWorkbooksError'
            }, function (errorItem) { return _this.WorkbookErrors.errorDetailsFor(errorItem); })(result);
        };
        ChangeWorkbookOwnerAction.$inject = ['WorkbookErrors', 'ActionHelpers', 'ConfirmActionDialog', '$translate', 'Workbooks', 'SearchSuggestionsService'];
        return ChangeWorkbookOwnerAction;
    })();
    VizPortal.ChangeWorkbookOwnerAction = ChangeWorkbookOwnerAction;
    VizPortal.Module.instance().service('ChangeWorkbookOwnerAction', ChangeWorkbookOwnerAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../helpers/TagsInputHelper.ts" />
/// <reference path="../Module.ts" />
/// <reference path="ChangeTagsActionHelper.ts" />
var VizPortal;
(function (VizPortal) {
    var ChangeWorkbooksTagsAction = (function () {
        function ChangeWorkbooksTagsAction(ChangeTagsActionHelper, $translate, Workbooks, ContentUrl) {
            var _this = this;
            this.ChangeTagsActionHelper = ChangeTagsActionHelper;
            this.$translate = $translate;
            this.Workbooks = Workbooks;
            this.ContentUrl = ContentUrl;
            this.execute = ChangeTagsActionHelper.createExecuteFn({
                changeTagsAction: function (ids, addTags, removeTags) { return _this.Workbooks.changeTags(ids, addTags, removeTags); },
                getDescription: function (workbooks) { return _this.getDescription(workbooks); },
                notificationIds: ChangeWorkbooksTagsAction.notificationTranslationIds,
                errorDetailFn: function (errorItem) { return _this.changeTagsErrorDetail(errorItem); }
            });
        }
        ChangeWorkbooksTagsAction.prototype.getDescription = function (workbooks) {
            return (workbooks.size() === 1)
                ? this.$translate.instant('changeTagsWorkbookDescription', { NAME: VizPortal.L10n.elideIfLong(workbooks.first().name) })
                : this.$translate.instant('changeTagsWorkbooksDescription', { COUNT: workbooks.size() }, VizPortal.L10n.Interpolations.Count);
        };
        ChangeWorkbooksTagsAction.prototype.changeTagsErrorDetail = function (errorItem) {
            return {
                itemName: errorItem.item.name,
                itemUrl: this.ContentUrl.forItem(errorItem.item, VizPortal.WorkbookContentType),
                errorMessage: this.ChangeTagsActionHelper.errorMessageFor(errorItem)
            };
        };
        ChangeWorkbooksTagsAction.notificationTranslationIds = {
            successId: 'changeTagsWorkbooksSuccess',
            errorId: 'changeTagsWorkbooksError'
        };
        ChangeWorkbooksTagsAction.$inject = ['ChangeTagsActionHelperService', '$translate', 'Workbooks', 'ContentUrl'];
        return ChangeWorkbooksTagsAction;
    })();
    VizPortal.ChangeWorkbooksTagsAction = ChangeWorkbooksTagsAction;
    VizPortal.Module.instance().service('ChangeWorkbooksTagsAction', ChangeWorkbooksTagsAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/ErrorCodes.ts" />
/// <reference path="ContentActionNotification.ts" />
var VizPortal;
(function (VizPortal) {
    var CreateProjectAction = (function () {
        function CreateProjectAction(ConfirmActionDialog, $translate, toaster, Projects) {
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.$translate = $translate;
            this.toaster = toaster;
            this.Projects = Projects;
        }
        CreateProjectAction.prototype.execute = function (actionContext) {
            var _this = this;
            var dialogScope = actionContext.scope.$new();
            dialogScope.dialog = {
                name: '',
                description: ''
            };
            return this.ConfirmActionDialog.open({
                scope: dialogScope,
                title: this.$translate.instant('createProjectDialogTitle'),
                bodyTemplateUrl: "createProjectDialog.html",
                position: { reserveHeight: 750 },
                actionName: this.$translate.instant('createProjectDialogSubmit'),
                action: function (dialogInstance) {
                    return _this.Projects.create(dialogScope.dialog.name, dialogScope.dialog.description).then(function (result) {
                        if (result.errors && result.errors.length) {
                            dialogInstance.showErrorMessage(_this.errorMessage(result.errors));
                        }
                        else {
                            _this.toaster.pop({
                                type: VizPortal.ToastType.Info,
                                text: _this.$translate.instant('createProjectSuccess', {
                                    PROJECT_NAME: VizPortal.L10n.elideIfLong(dialogScope.dialog.name)
                                })
                            });
                        }
                        return result;
                    });
                }
            }).result.fin(function () { return dialogScope.$destroy(); });
        };
        CreateProjectAction.prototype.errorMessage = function (errors) {
            switch (errors[0].code) {
                case VizPortal.ProjectErrorCode.ProjectNameAlreadyExists:
                    return this.$translate.instant('errorProjectNameAlreadyExists');
                default:
                    return this.$translate.instant('createProjectFailed');
            }
        };
        CreateProjectAction.$inject = ['ConfirmActionDialog', '$translate', 'ToasterService', 'Projects'];
        return CreateProjectAction;
    })();
    VizPortal.CreateProjectAction = CreateProjectAction;
    VizPortal.Module.instance().service('CreateProjectAction', CreateProjectAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var DeleteDatasourcesAction = (function () {
        function DeleteDatasourcesAction(DataSourceErrors, ActionHelpers, ConfirmActionDialog, $translate, DataSources, ModalService) {
            this.DataSourceErrors = DataSourceErrors;
            this.ActionHelpers = ActionHelpers;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.$translate = $translate;
            this.DataSources = DataSources;
            this.ModalService = ModalService;
        }
        DeleteDatasourcesAction.prototype.confirmDeleteDatasource = function (datasource, context) {
            return this.confirmDeleteDatasources(VizPortal.Set.singleton(datasource, function (ds) { return ds.id; }), context);
        };
        DeleteDatasourcesAction.prototype.confirmDeleteDatasources = function (datasources, context) {
            var _this = this;
            // Disallow delete if all selected datasources are embedded.
            if (datasources.all(function (ds) { return _.isObject(ds.workbook); })) {
                return this.ModalService.alert({
                    titleId: 'deleteDatasources_cannotDeleteAlertTitle',
                    messageId: 'deleteDatasources_cannotDeleteAlertMessage'
                }).result.then(function () {
                    return {
                        allowed: false
                    };
                });
            }
            var dialogBody = datasources.size() === 1
                ? this.$translate.instant('confirmDeleteDatasource', { DATASOURCE_NAME: VizPortal.L10n.elideIfLong(datasources.first().name) })
                : this.$translate.instant('confirmDeleteDatasources', { DATASOURCE_COUNT: datasources.size() }, VizPortal.L10n.Interpolations.Count);
            return this.ConfirmActionDialog.open({
                scope: context.scope,
                title: this.$translate.instant('delete'),
                bodyText: dialogBody,
                actionName: this.$translate.instant('confirmDeleteButton', {
                    ITEM_COUNT: datasources.size()
                }, VizPortal.L10n.Interpolations.Count),
                isDeleteAction: true,
                action: function (dialogInstance) {
                    return _this.DataSources.del(datasources.keys()).then(function (result) { return _this.notifyResult(datasources, result); });
                }
            }).result.then(function (serverResult) {
                return {
                    allowed: true,
                    serverResult: serverResult
                };
            });
        };
        DeleteDatasourcesAction.prototype.notifyResult = function (datasources, result) {
            var _this = this;
            this.ActionHelpers.notifyStandardError(datasources, {
                successId: 'deleteDatasourcesSuccess',
                errorId: 'deleteDatasourcesError'
            }, function (errorItem) { return _this.DataSourceErrors.errorDetailsFor(errorItem); })(result);
        };
        DeleteDatasourcesAction.$inject = ['DataSourceErrors', 'ActionHelpers', 'ConfirmActionDialog', '$translate', 'DataSources', 'ModalService'];
        return DeleteDatasourcesAction;
    })();
    VizPortal.DeleteDatasourcesAction = DeleteDatasourcesAction;
    VizPortal.Module.instance().service('DeleteDatasourcesAction', DeleteDatasourcesAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var DeleteProjectsAction = (function () {
        function DeleteProjectsAction(ProjectErrors, ActionHelpers, ConfirmActionDialog, $translate, Projects) {
            this.ProjectErrors = ProjectErrors;
            this.ActionHelpers = ActionHelpers;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.$translate = $translate;
            this.Projects = Projects;
        }
        DeleteProjectsAction.prototype.confirmDeleteProjects = function (projects, context) {
            var _this = this;
            var workbookCount = projects.sum(function (p) { return p.workbookCount; });
            var datasourceCount = projects.sum(function (p) { return p.datasourceCount; });
            var dialogBody = projects.size() === 1
                ? this.$translate.instant('confirmDeleteProject', {
                    PROJECT_NAME: VizPortal.L10n.elideIfLong(projects.first().name),
                    WORKBOOK_COUNT: workbookCount,
                    DATASOURCE_COUNT: datasourceCount
                }, VizPortal.L10n.Interpolations.Count)
                : this.$translate.instant('confirmDeleteProjects', {
                    PROJECT_COUNT: projects.size(),
                    WORKBOOK_COUNT: workbookCount,
                    DATASOURCE_COUNT: datasourceCount
                }, VizPortal.L10n.Interpolations.Count);
            return this.ConfirmActionDialog.open({
                scope: context.scope,
                title: this.$translate.instant('delete'),
                bodyText: dialogBody,
                actionName: this.$translate.instant('confirmDeleteButton', {
                    ITEM_COUNT: projects.size()
                }, VizPortal.L10n.Interpolations.Count),
                isDeleteAction: true,
                action: function (dialogInstance) {
                    return _this.Projects.del(projects.keys()).then(function (result) { return _this.notifyResult(projects, result); });
                }
            }).result;
        };
        DeleteProjectsAction.prototype.notifyResult = function (projects, result) {
            var _this = this;
            this.ActionHelpers.notifyStandardError(projects, {
                successId: 'deleteProjectsSuccess',
                errorId: 'deleteProjectsError'
            }, function (errorItem) { return _this.ProjectErrors.errorDetailsFor(errorItem); })(result);
        };
        DeleteProjectsAction.$inject = ['ProjectErrors', 'ActionHelpers', 'ConfirmActionDialog', '$translate', 'Projects'];
        return DeleteProjectsAction;
    })();
    VizPortal.DeleteProjectsAction = DeleteProjectsAction;
    VizPortal.Module.instance().service('DeleteProjectsAction', DeleteProjectsAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="AbstractContentAction.ts" />
var VizPortal;
(function (VizPortal) {
    var DeleteSitesAction = (function () {
        function DeleteSitesAction($translate, $state, server, SiteSwitchService, ConfirmActionDialog, Sites, ToasterService) {
            this.$translate = $translate;
            this.$state = $state;
            this.server = server;
            this.SiteSwitchService = SiteSwitchService;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.Sites = Sites;
            this.ToasterService = ToasterService;
        }
        DeleteSitesAction.prototype.execute = function (sites, actionContext) {
            var _this = this;
            return this.ConfirmActionDialog.open({
                title: this.$translate.instant('delete'),
                bodyText: this.$translate.instant('confirmDeleteSites', {
                    ITEM_COUNT: sites.size(),
                    ITEM_NAME: VizPortal.L10n.elideIfLong(sites.first().settings.name)
                }, VizPortal.L10n.Interpolations.Count),
                actionName: this.$translate.instant('confirmDeleteButton', {
                    ITEM_COUNT: sites.size()
                }, VizPortal.L10n.Interpolations.Count),
                isDeleteAction: true,
                action: function (confirmActionDialogInstance) {
                    _this.sites = sites;
                    _this.confirmActionDialogInstance = confirmActionDialogInstance;
                    var isAttemptingToDeleteCurrentSite = _this.server.sessionSiteUrlName() !== ''
                        && !_.isUndefined(_this.sites.find(function (site) { return _this.server.isCurrentSiteUrlName(site.settings.urlName); }));
                    if (isAttemptingToDeleteCurrentSite) {
                        return _this.SiteSwitchService.switchIfNeededNoFeedback('')
                            .then(function () { return _this.deleteSites(); }, function () { return _this.deleteSites().then(function () { return _this.$state.go('login.authenticate'); }); });
                    }
                    else {
                        return _this.deleteSites();
                    }
                }
            }).result;
        };
        DeleteSitesAction.prototype.deleteSites = function () {
            var _this = this;
            return this.Sites.del(this.sites.keys()).then(function (actionResult) { return _this.onComplete(actionResult); }, function (errors) { return _this.onFail(errors); }, function (action) { return _this.onNotify(action); });
        };
        DeleteSitesAction.prototype.onComplete = function (actionResult) {
            if (actionResult && actionResult.succeeded === false) {
                this.onFail(actionResult.response && actionResult.response.errors);
            }
            else {
                this.confirmActionDialogInstance.setProgress(100);
                this.ToasterService.pop({
                    type: VizPortal.ToastType.Info,
                    text: this.$translate.instant('deleteSitesSuccess', {
                        ITEM_COUNT: this.sites.size()
                    }, VizPortal.L10n.Interpolations.Count)
                });
                // Refresh session info in case we switched from multi-site to single-site
                this.server.refreshSessionInfo();
            }
        };
        DeleteSitesAction.prototype.onFail = function (errors) {
            var successCount = this.sites.size();
            this.confirmActionDialogInstance.setProgress(undefined);
            if (errors && errors.length) {
                successCount -= errors.length;
                var attemptedToDeleteDefaultSiteError = _.find(errors, function (e) { return e.code === VizPortal.SiteSettingsErrorCode.AttemptedToDeleteDefaultSite; });
                // Error toast if attempted to delete default site
                if (attemptedToDeleteDefaultSiteError) {
                    this.ToasterService.pop({ type: VizPortal.ToastType.Error, text: this.$translate.instant('siteSettingsFailedAttemptedToDeleteDefaultSite') });
                }
                // Inline error message if there are errors besides attempting to delete default site
                if (errors.length > 1 || !attemptedToDeleteDefaultSiteError) {
                    this.confirmActionDialogInstance.showErrorMessage(this.$translate.instant('deleteSitesFailed', {
                        ITEM_COUNT: errors.length
                    }, VizPortal.L10n.Interpolations.Count));
                }
                // If there was a partial success, display it in a success toast
                if (successCount > 0) {
                    this.ToasterService.pop({
                        type: VizPortal.ToastType.Info,
                        text: this.$translate.instant('deleteSitesSuccess', {
                            ITEM_COUNT: successCount
                        }, VizPortal.L10n.Interpolations.Count)
                    });
                    // Refresh session info in case we switched from multi-site to single-site
                    this.server.refreshSessionInfo();
                }
            }
            else {
                // If we have a failure with no errors, assume all delete actions failed
                this.confirmActionDialogInstance.showErrorMessage(this.$translate.instant('deleteSitesFailed', {
                    ITEM_COUNT: this.sites.size()
                }, VizPortal.L10n.Interpolations.Count));
            }
        };
        DeleteSitesAction.prototype.onNotify = function (action) {
            this.confirmActionDialogInstance.setProgress(action.percentComplete);
        };
        DeleteSitesAction.$inject = [
            '$translate',
            '$state',
            'ServerService',
            'SiteSwitchService',
            'ConfirmActionDialog',
            'Sites',
            'ToasterService'
        ];
        return DeleteSitesAction;
    })();
    VizPortal.DeleteSitesAction = DeleteSitesAction;
    VizPortal.Module.instance().service('DeleteSitesAction', DeleteSitesAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var DeleteWorkbooksAction = (function () {
        function DeleteWorkbooksAction(WorkbookErrors, ActionHelpers, ConfirmActionDialog, $translate, Workbooks) {
            this.WorkbookErrors = WorkbookErrors;
            this.ActionHelpers = ActionHelpers;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.$translate = $translate;
            this.Workbooks = Workbooks;
        }
        DeleteWorkbooksAction.prototype.confirmDeleteWorkbooks = function (workbooks, context) {
            var _this = this;
            var viewCount = workbooks.sum(function (w) { return w.numSheets; });
            var dialogBody = workbooks.size() === 1
                ? this.$translate.instant('confirmDeleteWorkbook', {
                    WORKBOOK_NAME: VizPortal.L10n.elideIfLong(workbooks.first().name),
                    VIEW_COUNT: viewCount
                }, VizPortal.L10n.Interpolations.Count)
                : this.$translate.instant('confirmDeleteWorkbooks', {
                    WORKBOOK_COUNT: workbooks.size(),
                    VIEW_COUNT: viewCount
                }, VizPortal.L10n.Interpolations.Count);
            return this.ConfirmActionDialog.open({
                scope: context.scope,
                title: this.$translate.instant('delete'),
                bodyText: dialogBody,
                actionName: this.$translate.instant('confirmDeleteButton', {
                    ITEM_COUNT: workbooks.size()
                }, VizPortal.L10n.Interpolations.Count),
                isDeleteAction: true,
                action: function (dialogInstance) {
                    return _this.Workbooks.del(workbooks.keys()).then(function (result) { return _this.notifyResult(workbooks, result); });
                }
            }).result;
        };
        DeleteWorkbooksAction.prototype.notifyResult = function (workbooks, result) {
            var _this = this;
            this.ActionHelpers.notifyStandardError(workbooks, {
                successId: 'deleteWorkbooksSuccess',
                errorId: 'deleteWorkbooksError'
            }, function (errorItem) { return _this.WorkbookErrors.errorDetailsFor(errorItem); })(result);
        };
        DeleteWorkbooksAction.$inject = ['WorkbookErrors', 'ActionHelpers', 'ConfirmActionDialog', '$translate', 'Workbooks'];
        return DeleteWorkbooksAction;
    })();
    VizPortal.DeleteWorkbooksAction = DeleteWorkbooksAction;
    VizPortal.Module.instance().service('DeleteWorkbooksAction', DeleteWorkbooksAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="resourceParts.ts" />
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/ErrorCodes.ts" />
/// <reference path="../ServerApi/types/IWorkbookRevision.ts" />
var VizPortal;
(function (VizPortal) {
    var DownloadActions = (function () {
        function DownloadActions($translate, $q, toaster, windowLocationService, Workbooks, DataSources) {
            this.$translate = $translate;
            this.$q = $q;
            this.toaster = toaster;
            this.windowLocationService = windowLocationService;
            this.Workbooks = Workbooks;
            this.DataSources = DataSources;
        }
        DownloadActions.prototype.download = function (downloadItem) {
            if (!downloadItem.downloadUrl)
                return false;
            this.windowLocationService.download(downloadItem.downloadUrl);
            return true;
        };
        DownloadActions.prototype.downloadWorkbook = function (workbook) {
            var _this = this;
            return this.Workbooks
                .getById(workbook.id)
                .then(function (workbook) {
                var success = _this.download(workbook);
                if (!success) {
                    _this.toaster.pop({
                        type: VizPortal.ToastType.Error,
                        text: _this.$translate.instant('downloadDatasourceError', { NAME: VizPortal.L10n.elideIfLong(workbook.name) })
                    });
                }
                return workbook;
            })
                .fail(function (result) {
                _this.toaster.pop({
                    type: VizPortal.ToastType.Error,
                    text: _this.$translate.instant('downloadWorkbookError', { NAME: VizPortal.L10n.elideIfLong(workbook.name) })
                });
                return _this.$q.reject(result);
            });
        };
        DownloadActions.prototype.downloadDatasource = function (datasource) {
            var _this = this;
            return this.DataSources
                .getById(datasource.id)
                .then(function (datasource) {
                var success = _this.download(datasource);
                if (!success) {
                    _this.toaster.pop({
                        type: VizPortal.ToastType.Error,
                        text: _this.$translate.instant('downloadDatasourceError', { NAME: VizPortal.L10n.elideIfLong(datasource.name) })
                    });
                }
                return datasource;
            })
                .fail(function (result) {
                _this.toaster.pop({
                    type: VizPortal.ToastType.Error,
                    text: _this.$translate.instant('downloadDatasourceError', { NAME: VizPortal.L10n.elideIfLong(datasource.name) })
                });
                return _this.$q.reject(result);
            });
        };
        DownloadActions.prototype.downloadWorkbookRevision = function (revision) {
            var success = this.download(revision);
            if (!success) {
                this.toaster.pop({ type: VizPortal.ToastType.Error, text: this.$translate.instant('downloadRevisionError') });
            }
        };
        DownloadActions.$inject = [
            '$translate',
            '$q',
            'ToasterService',
            'WindowLocationService',
            'Workbooks',
            'DataSources'
        ];
        return DownloadActions;
    })();
    VizPortal.DownloadActions = DownloadActions;
    VizPortal.Module.instance().service('DownloadActions', DownloadActions);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/ErrorCodes.ts" />
var VizPortal;
(function (VizPortal) {
    var EditSiteAction = (function () {
        function EditSiteAction(ConfirmActionDialog, $translate, $timeout, $window, $q, toaster, server) {
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.$translate = $translate;
            this.$timeout = $timeout;
            this.$window = $window;
            this.$q = $q;
            this.toaster = toaster;
            this.server = server;
        }
        EditSiteAction.prototype.execute = function (site, actionContext) {
            var _this = this;
            var dialogScope = actionContext.scope.$new();
            // TODO: pass these scope properties down explicitly in directive
            // instead of using implicit scope inheritance
            dialogScope.siteSettingsForServerAdminFormState = {};
            dialogScope.siteSettingsForSiteAdminFormState = {};
            dialogScope.siteSettingsForServerAdmin = angular.copy(site);
            dialogScope.siteSettingsForSiteAdmin = {
                id: site.id,
                siteAdminSettings: angular.copy(site.siteAdminSettings)
            };
            dialogScope.isDefaultSite = site.settings.urlName === '';
            dialogScope.liveDBAvailable = this.server.isLiveDBAvailable();
            return this.ConfirmActionDialog.open({
                scope: dialogScope,
                title: this.$translate.instant('editSiteSettings'),
                bodyTemplateUrl: 'siteDialog.html',
                actionName: this.$translate.instant('save'),
                confirmDisabled: function () { return _.isEmpty(dialogScope.siteSettingsForServerAdminFormState) || (dialogScope.siteSettingsForServerAdminFormState.isFormUnchanged() && dialogScope.siteSettingsForSiteAdminFormState.isFormUnchanged()) || !dialogScope.siteSettingsForServerAdminFormState.isValid(); },
                action: function () {
                    return _this.$q.all([
                        dialogScope.siteSettingsForServerAdminFormState.save(),
                        dialogScope.siteSettingsForSiteAdminFormState.save()])
                        .then(function () { return _this.$timeout(function () {
                        _this.toaster.pop({
                            type: VizPortal.ToastType.Info,
                            text: _this.$translate.instant('settingsUpdateSuccess')
                        });
                        _.extend(site, dialogScope.siteSettingsForServerAdmin);
                        _.extend(site.siteAdminSettings, dialogScope.siteSettingsForSiteAdmin.siteAdminSettings);
                    }, VizPortal.ErrorNotifyingServer.ResponseDelay); });
                },
                size: VizPortal.ModalSize.fitToContent
            }).result.fin(function () { return dialogScope.$destroy(); });
        };
        EditSiteAction.$inject = [
            'ConfirmActionDialog',
            '$translate',
            '$timeout',
            '$window',
            '$q',
            'ToasterService',
            'ServerService'
        ];
        return EditSiteAction;
    })();
    VizPortal.EditSiteAction = EditSiteAction;
    VizPortal.Module.instance().service('EditSiteAction', EditSiteAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var MultipleItemResult = (function () {
        function MultipleItemResult(items, serverResult) {
            this.items = items;
            this.serverResult = serverResult;
            this.errorCount = serverResult.errors ? serverResult.errors.length : 0;
            this.successCount = items.size() - this.errorCount;
        }
        MultipleItemResult.prototype.anySucceeded = function () {
            return this.successCount > 0;
        };
        MultipleItemResult.prototype.anyFailed = function () {
            return this.errorCount > 0;
        };
        MultipleItemResult.prototype.errorItems = function () {
            var _this = this;
            return _.map(this.serverResult.errors, function (error) {
                return {
                    error: error,
                    item: _this.items.get(error.id)
                };
            });
        };
        MultipleItemResult.prototype.firstSuccessfulItem = function () {
            var _this = this;
            if (this.successCount === 0) {
                return null;
            }
            return _.once(function () {
                var errorIds = _.map(_this.serverResult.errors, function (error) { return error.id; });
                var successIds = _.difference(_this.items.keys(), errorIds);
                return _this.items.get(successIds[0]);
            })();
        };
        return MultipleItemResult;
    })();
    VizPortal.MultipleItemResult = MultipleItemResult;
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/ResultHelper.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../models/MultipleItemResult.ts" />
/// <reference path="../models/Set.ts" />
var VizPortal;
(function (VizPortal) {
    var ActionHelpers = (function () {
        function ActionHelpers($translate, ContentActionNotification) {
            this.$translate = $translate;
            this.ContentActionNotification = ContentActionNotification;
        }
        ActionHelpers.prototype.standardErrorDetails = function (result, urlFn, errorMessageFn, itemNameFn) {
            if (itemNameFn === void 0) { itemNameFn = ActionHelpers.DefaultItemNameFn; }
            // Default item name function just uses 'item.name'
            itemNameFn = itemNameFn || (function (item) { return item.name; });
            return _.map(result.errorItems(), function (errorItem) {
                return {
                    itemName: itemNameFn(errorItem.item),
                    itemUrl: urlFn(errorItem.item),
                    errorMessage: errorMessageFn(errorItem)
                };
            });
        };
        ActionHelpers.prototype.standardErrorNotification = function (result, translations, describeErrorDetail, itemNameFn) {
            var _this = this;
            if (itemNameFn === void 0) { itemNameFn = ActionHelpers.DefaultItemNameFn; }
            var firstErrorItem = result.anyFailed() ? result.errorItems()[0] : undefined;
            var firstErrorItemName = firstErrorItem && firstErrorItem.item ? itemNameFn(firstErrorItem.item) : "";
            return VizPortal.MultipleResultNotificationOptions.create(result, {
                describeSuccessSummary: function (successCount) {
                    return _this.$translate.instant(translations.successId, {
                        ITEM_COUNT: successCount,
                        ITEM_NAME: VizPortal.L10n.elideIfLong(itemNameFn(result.firstSuccessfulItem()))
                    }, VizPortal.L10n.Interpolations.Count);
                },
                describeErrorSummary: function (errorCount) {
                    return _this.$translate.instant(translations.errorId, {
                        ERROR_COUNT: errorCount,
                        ITEM_NAME: VizPortal.L10n.elideIfLong(firstErrorItemName)
                    }, VizPortal.L10n.Interpolations.Count);
                },
                describeErrorDetail: describeErrorDetail
            });
        };
        ActionHelpers.prototype.notifyStandardError = function (items, translations, describeErrorDetail) {
            var _this = this;
            return function (result) {
                var itemResult = new VizPortal.MultipleItemResult(items, result);
                var errorNotificationOptions = _this.standardErrorNotification(itemResult, translations, describeErrorDetail);
                _this.ContentActionNotification.notify(errorNotificationOptions);
                return result; // to allow promise chaining
            };
        };
        // static
        // Remove any items that resulted in a NotFound error code.
        ActionHelpers.deselectNotFound = function (selectedItems, result, notFoundCode) {
            selectedItems.removeItemsIn(VizPortal.ResultHelper.getErrorIdsWithCode(result, notFoundCode));
        };
        // Remove all items from the selection except those that resulted in an error code other than NotFound.
        ActionHelpers.deselectAllExceptErrors = function (selectedItems, result, notFoundCode) {
            selectedItems.removeItemsNotIn(VizPortal.ResultHelper.getErrorIds(result, { excludeCode: notFoundCode }));
        };
        ActionHelpers.$inject = ['$translate', 'ContentActionNotification'];
        ActionHelpers.DefaultItemNameFn = function (item) { return item.name; };
        return ActionHelpers;
    })();
    VizPortal.ActionHelpers = ActionHelpers;
    VizPortal.Module.instance().service('ActionHelpers', ActionHelpers);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/ErrorCodes.ts" />
/// <reference path="ActionHelpers.ts" />
/// <reference path="ContentActionNotification.ts" />
var VizPortal;
(function (VizPortal) {
    var MoveToProjectAction = (function () {
        function MoveToProjectAction(ConfirmActionDialog, $translate, ContentActionNotification, suggestions, Workbooks, WorkbookErrors, DataSources, DataSourceErrors, ModalService) {
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.$translate = $translate;
            this.ContentActionNotification = ContentActionNotification;
            this.suggestions = suggestions;
            this.Workbooks = Workbooks;
            this.WorkbookErrors = WorkbookErrors;
            this.DataSources = DataSources;
            this.DataSourceErrors = DataSourceErrors;
            this.ModalService = ModalService;
        }
        MoveToProjectAction.prototype.moveWorkbooks = function (workbooks, actionContext) {
            var _this = this;
            return this.move({
                promptId: 'selectProjectForWorkbooks',
                successId: 'moveWorkbooksToProjectSuccess',
                errorId: 'moveWorkbooksToProjectError'
            }, workbooks, VizPortal.WorkbookContentType, function (projectId) { return _this.Workbooks.moveToProject(projectId, workbooks.keys()); }, actionContext);
        };
        MoveToProjectAction.prototype.moveDatasources = function (datasources, actionContext) {
            var _this = this;
            // Disallow move if all selected datasources are embedded.
            if (datasources.all(function (ds) { return _.isObject(ds.workbook); })) {
                return this.ModalService.alert({
                    titleId: 'moveDatasourcesToProject_cannotMoveAlertTitle',
                    messageId: 'moveDatasourcesToProject_cannotMoveAlertMessage'
                }).result;
            }
            return this.move({
                promptId: 'selectProjectForDatasources',
                successId: 'moveDatasourcesToProjectSuccess',
                errorId: 'moveDatasourcesToProjectError'
            }, datasources, VizPortal.DatasourceContentType, function (projectId) { return _this.DataSources.moveToProject(projectId, datasources.keys()); }, actionContext);
        };
        MoveToProjectAction.prototype.move = function (translations, items, itemType, moveFn, actionContext) {
            var _this = this;
            var projectPicker = {
                prompt: this.$translate.instant(translations.promptId, {
                    ITEM_COUNT: items.size(),
                    ITEM_NAME: VizPortal.L10n.elideIfLong(items.first().name)
                }, VizPortal.L10n.Interpolations.Count),
                projectsQuery: function (query) { return _this.suggestions.projects(query); },
                targetProject: null
            };
            var newDialogScope = actionContext.scope.$new();
            newDialogScope.projectPicker = projectPicker;
            var dialogInstance = this.ConfirmActionDialog.open({
                scope: newDialogScope,
                title: this.$translate.instant('moveToProject'),
                bodyTemplateUrl: "moveToProjectDialog.html",
                actionName: this.$translate.instant('confirmMoveToProject', {
                    ITEM_COUNT: items.size()
                }, VizPortal.L10n.Interpolations.Count),
                action: function () { return moveFn(projectPicker.targetProject.id); },
                confirmDisabled: function () { return !projectPicker.targetProject; }
            });
            dialogInstance.result.then(function (result) {
                _this.ContentActionNotification.notify(_this.notification(new VizPortal.MultipleItemResult(items, result), translations, itemType, projectPicker.targetProject.name));
            });
            return dialogInstance.result.fin(function () { return newDialogScope.$destroy(); });
        };
        MoveToProjectAction.prototype.notification = function (result, translations, itemType, projectName) {
            var _this = this;
            return VizPortal.MultipleResultNotificationOptions.create(result, {
                describeSuccessSummary: function (successCount) {
                    return _this.$translate.instant(translations.successId, {
                        ITEM_COUNT: successCount,
                        PROJECT_NAME: VizPortal.L10n.elideIfLong(projectName)
                    }, VizPortal.L10n.Interpolations.Count);
                },
                describeErrorSummary: function (errorCount) {
                    return _this.$translate.instant(translations.errorId, {
                        ERROR_COUNT: errorCount,
                        PROJECT_NAME: VizPortal.L10n.elideIfLong(projectName)
                    }, VizPortal.L10n.Interpolations.Count);
                },
                describeErrorDetail: function (errorItem) {
                    if (itemType === VizPortal.DatasourceContentType) {
                        return _this.DataSourceErrors.errorDetailsFor(errorItem);
                    }
                    else {
                        return _this.WorkbookErrors.errorDetailsFor(errorItem);
                    }
                }
            });
        };
        MoveToProjectAction.$inject = [
            'ConfirmActionDialog',
            '$translate',
            'ContentActionNotification',
            'SearchSuggestionsService',
            'Workbooks',
            'WorkbookErrors',
            'DataSources',
            'DataSourceErrors',
            'ModalService'
        ];
        return MoveToProjectAction;
    })();
    VizPortal.MoveToProjectAction = MoveToProjectAction;
    VizPortal.Module.instance().service('MoveToProjectAction', MoveToProjectAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/ErrorCodes.ts" />
/// <reference path="ContentActionNotification.ts" />
var VizPortal;
(function (VizPortal) {
    var RenameProjectAction = (function () {
        function RenameProjectAction(ConfirmActionDialog, $translate, toaster, Projects) {
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.$translate = $translate;
            this.toaster = toaster;
            this.Projects = Projects;
        }
        RenameProjectAction.prototype.execute = function (project, actionContext) {
            var _this = this;
            var scope = actionContext.scope.$new();
            scope.description = this.$translate.instant('confirmRenameProject', {
                PROJECT_NAME: VizPortal.L10n.elideIfLong(project.name)
            });
            scope.input = {
                text: project.name,
                maxLength: 255
            };
            return this.ConfirmActionDialog.open({
                title: this.$translate.instant('rename'),
                bodyTemplateUrl: 'confirmActionDialogInput.html',
                scope: scope,
                actionName: this.$translate.instant('rename'),
                action: function (dialogInstance) {
                    return _this.Projects.rename(project.id, scope.input.text).then(function (result) {
                        if (result.errors && result.errors.length) {
                            dialogInstance.showErrorMessage(_this.getErrorMessage(result.errors[0], project));
                        }
                        else {
                            _this.toaster.pop({
                                type: VizPortal.ToastType.Info,
                                text: _this.$translate.instant('projectRenamed', {
                                    PROJECT_NAME: VizPortal.L10n.elideIfLong(scope.input.text)
                                })
                            });
                            project.name = scope.input.text;
                        }
                        return result;
                    });
                }
            }).result.fin(function () { return scope.$destroy(); });
        };
        RenameProjectAction.prototype.executeInPlace = function (project, newName) {
            var _this = this;
            return this.Projects.rename(project.id, newName).then(function (result) {
                if (result.errors && result.errors.length) {
                    _this.toaster.pop({ type: VizPortal.ToastType.Error, text: _this.getErrorMessage(result.errors[0], project) });
                }
                else {
                    project.name = newName;
                }
                return result;
            });
        };
        RenameProjectAction.prototype.getErrorMessage = function (error, project) {
            switch (error.code) {
                case VizPortal.ProjectErrorCode.ProjectNameAlreadyExists:
                    return this.$translate.instant('errorProjectNameAlreadyExists');
                default:
                    return this.$translate.instant('projectRenameError', {
                        PROJECT_NAME: VizPortal.L10n.elideIfLong(project.name)
                    });
            }
        };
        RenameProjectAction.$inject = ['ConfirmActionDialog', '$translate', 'ToasterService', 'Projects'];
        return RenameProjectAction;
    })();
    VizPortal.RenameProjectAction = RenameProjectAction;
    VizPortal.Module.instance().service('RenameProjectAction', RenameProjectAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var WorkbookErrors = (function () {
        function WorkbookErrors($state, $translate) {
            this.$state = $state;
            this.$translate = $translate;
        }
        WorkbookErrors.prototype.errorDetailsFor = function (workbookErrorItem) {
            return {
                itemName: workbookErrorItem.item.name,
                itemUrl: workbookErrorItem.error.code === VizPortal.CommonErrorCode.WorkbookNotFound
                    ? null
                    : this.workbookUrl(workbookErrorItem.item),
                errorMessage: this.errorMessageFor(workbookErrorItem)
            };
        };
        WorkbookErrors.prototype.workbookUrl = function (workbook) {
            return this.$state.href('main.site.content.workbook.details', { id: workbook.id });
        };
        WorkbookErrors.prototype.errorMessageFor = function (errorItem) {
            var workbook = errorItem.item;
            switch (errorItem.error.code) {
                case VizPortal.WorkbookErrorCode.WorkbookDescriptionTooLong:
                    return this.$translate.instant('errorWorkbookDescriptionTooLong');
                case VizPortal.CommonErrorCode.WorkbookNotFound:
                    return this.$translate.instant('errorWorkbookNotFound', { WORKBOOK_NAME: VizPortal.L10n.elideIfLong(workbook.name) });
                case VizPortal.WorkbookErrorCode.WorkbookDisabled:
                    return this.$translate.instant('errorWorkbookDisabled', { WORKBOOK_NAME: VizPortal.L10n.elideIfLong(workbook.name) });
                case VizPortal.WorkbookErrorCode.WorkbookNameAlreadyExistsInDestinationProject:
                    return this.$translate.instant('errorWorkbookNameAlreadyExistsInDestinationProject');
                case VizPortal.WorkbookErrorCode.WorkbookDestinationProjectNotFound:
                    return this.$translate.instant('errorWorkbookDestinationProjectNotFound');
                // Permissions errors
                // TODO: Do we want specific error messages for each of these cases?
                case VizPortal.WorkbookErrorCode.WorkbookMoveInsufficientPermissionsOnDestinationProject:
                case VizPortal.WorkbookErrorCode.WorkbookMoveInsufficientPermissionsOnSourceProject:
                case VizPortal.WorkbookErrorCode.WorkbookMoveInsufficientPermissionsOnWorkbook:
                    return this.$translate.instant('errorWorkbookMoveInsufficientPermissions');
                case VizPortal.CommonErrorCode.CallingUserInsufficientPermissions:
                    return this.$translate.instant('errorWorkbookInsufficientPermissions');
                default:
                    return this.$translate.instant('errorUnknown');
            }
        };
        WorkbookErrors.$inject = ['$state', '$translate'];
        return WorkbookErrors;
    })();
    VizPortal.WorkbookErrors = WorkbookErrors;
    VizPortal.Module.instance().service('WorkbookErrors', WorkbookErrors);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/WorkbookErrors.ts" />
var VizPortal;
(function (VizPortal) {
    var SetDisplayTabsAction = (function () {
        function SetDisplayTabsAction(ConfirmActionDialog, $translate, Workbooks, WorkbookErrors, ActionHelpers) {
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.$translate = $translate;
            this.Workbooks = Workbooks;
            this.WorkbookErrors = WorkbookErrors;
            this.ActionHelpers = ActionHelpers;
        }
        SetDisplayTabsAction.prototype.setDisplayTabs = function (workbook, displayTabs) {
            return this.setDisplayTabsAction(VizPortal.Set.singleton(workbook, function (wb) { return wb.id; }), displayTabs)();
        };
        SetDisplayTabsAction.prototype.confirmSetDisplayTabs = function (workbooks, context) {
            var workbookArray = workbooks.toArray();
            var anyTabsEnabled = _.any(workbookArray, function (wb) { return wb.displayTabs; });
            var anyTabsDisabled = _.any(workbookArray, function (wb) { return !wb.displayTabs; });
            return this.ConfirmActionDialog.open({
                scope: context.scope,
                title: this.$translate.instant('confirmSetDisplayTabsTitle'),
                bodyText: this.$translate.instant('confirmSetDisplayTabsPrompt', {
                    ITEM_COUNT: workbooks.size(),
                    ITEM_NAME: VizPortal.L10n.elideIfLong(workbooks.first().name)
                }, VizPortal.L10n.Interpolations.Count),
                buttons: [
                    {
                        label: this.$translate.instant('confirmSetDisplayTabsShowButton'),
                        testId: 'confirm-show-tabs',
                        action: this.setDisplayTabsAction(workbooks, true),
                        disabled: function () { return !anyTabsDisabled; }
                    },
                    {
                        label: this.$translate.instant('confirmSetDisplayTabsHideButton'),
                        testId: 'confirm-hide-tabs',
                        action: this.setDisplayTabsAction(workbooks, false),
                        disabled: function () { return !anyTabsEnabled; }
                    }
                ],
                size: '600px' // custom size to fix extra buttons
            }).result;
        };
        SetDisplayTabsAction.prototype.setDisplayTabsAction = function (workbooks, displayTabs) {
            var _this = this;
            return function () { return _this.Workbooks.setDisplayTabs(workbooks.keys(), displayTabs)
                .then(function (result) { return _this.notifyResult(displayTabs, workbooks, result); }); };
        };
        SetDisplayTabsAction.prototype.notifyResult = function (displayTabs, workbooks, result) {
            var _this = this;
            this.ActionHelpers.notifyStandardError(workbooks, {
                successId: displayTabs ? 'setDisplayTabsShowSuccess' : 'setDisplayTabsHideSuccess',
                errorId: displayTabs ? 'setDisplayTabsShowError' : 'setDisplayTabsHideError'
            }, function (errorItem) { return _this.WorkbookErrors.errorDetailsFor(errorItem); })(result);
        };
        SetDisplayTabsAction.$inject = ['ConfirmActionDialog', '$translate', 'Workbooks', 'WorkbookErrors', 'ActionHelpers'];
        return SetDisplayTabsAction;
    })();
    VizPortal.SetDisplayTabsAction = SetDisplayTabsAction;
    VizPortal.Module.instance().service('SetDisplayTabsAction', SetDisplayTabsAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="ActivateSitesAction.ts" />
var VizPortal;
(function (VizPortal) {
    var SuspendSitesAction = (function () {
        function SuspendSitesAction(ConfirmActionDialog, $translate, toaster, Sites) {
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.$translate = $translate;
            this.toaster = toaster;
            this.Sites = Sites;
        }
        SuspendSitesAction.prototype.execute = function (sites, actionContext) {
            var _this = this;
            return this.ConfirmActionDialog.open({
                title: this.$translate.instant('suspendSites'),
                bodyText: this.$translate.instant('confirmSuspendSites', {
                    SITE_NAME: VizPortal.L10n.elideIfLong(sites.first().settings.name),
                    ITEM_COUNT: sites.size()
                }, VizPortal.L10n.Interpolations.Count),
                actionName: this.$translate.instant('suspendButtonConfirm', {
                    ITEM_COUNT: sites.size()
                }, VizPortal.L10n.Interpolations.Count),
                isDeleteAction: true,
                action: function (dialogInstance) {
                    return _this.Sites.suspend(sites.keys()).then(function (result) {
                        if (result.errors && result.errors.length) {
                            if (result.errors.length === 1 && result.errors[0].code === VizPortal.SiteSettingsErrorCode.AttemptedToSuspendDefaultSite) {
                                _this.toaster.pop({ type: VizPortal.ToastType.Error, text: _this.$translate.instant('siteSettingsFailedAttemptedToSuspendDefaultSite') });
                                _this.toaster.pop({
                                    type: VizPortal.ToastType.Info,
                                    text: _this.$translate.instant('sitesSuspendSuccess', {
                                        ITEM_COUNT: sites.size() - 1
                                    }, VizPortal.L10n.Interpolations.Count)
                                });
                            }
                            else {
                                dialogInstance.showErrorMessage(_this.$translate.instant('sitesSuspendFailed'));
                            }
                        }
                        else {
                            _this.toaster.pop({
                                type: VizPortal.ToastType.Info,
                                text: _this.$translate.instant('sitesSuspendSuccess', {
                                    ITEM_COUNT: sites.size()
                                }, VizPortal.L10n.Interpolations.Count)
                            });
                        }
                        return result;
                    });
                }
            }).result;
        };
        SuspendSitesAction.$inject = ['ConfirmActionDialog', '$translate', 'ToasterService', 'Sites'];
        return SuspendSitesAction;
    })();
    VizPortal.SuspendSitesAction = SuspendSitesAction;
    VizPortal.Module.instance().service('SuspendSitesAction', SuspendSitesAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/ErrorCodes.ts" />
/// <reference path="ActivateSitesAction.ts" />
/// <reference path="CreateExtractTasksAction.ts" />
/// <reference path="ChangeDatasourceOwnerAction.ts" />
/// <reference path="ChangeDatasourcesTagsAction.ts" />
/// <reference path="ChangeProjectOwnerAction.ts" />
/// <reference path="ChangeViewTagsAction.ts" />
/// <reference path="ChangeWorkbookOwnerAction.ts" />
/// <reference path="ChangeWorkbooksTagsAction.ts" />
/// <reference path="CreateProjectAction.ts" />
/// <reference path="DeleteDatasourcesAction.ts" />
/// <reference path="DeleteProjectsAction.ts" />
/// <reference path="DeleteSitesAction.ts" />
/// <reference path="DeleteWorkbooksAction.ts" />
/// <reference path="DownloadActions.ts" />
/// <reference path="EditSiteAction.ts" />
/// <reference path="MoveToProjectAction.ts" />
/// <reference path="RenameProjectAction.ts" />
/// <reference path="SetDisplayTabsAction.ts" />
/// <reference path="SuspendSitesAction.ts" />
var VizPortal;
(function (VizPortal) {
    var ContentActions = (function () {
        function ContentActions(windowLocationService, contentActionNotification, ActionHelpers, Projects, Workbooks, DataSources, Views, ChangeDatasourceOwnerAction, ChangeProjectOwnerAction, ChangeWorkbookOwnerAction, MoveToProjectAction, DeleteDatasourcesAction, DeleteProjectsAction, DeleteWorkbooksAction, CreateProjectAction, RenameProjectAction, ChangeViewTagsAction, ChangeWorkbooksTagsAction, ChangeDatasourcesTagsAction, SuspendSitesAction, ActivateSitesAction, DeleteSitesAction, EditSiteAction, CreateExtractTasksAction, DownloadActions) {
            this.windowLocationService = windowLocationService;
            this.contentActionNotification = contentActionNotification;
            this.ActionHelpers = ActionHelpers;
            this.Projects = Projects;
            this.Workbooks = Workbooks;
            this.DataSources = DataSources;
            this.Views = Views;
            this.ChangeDatasourceOwnerAction = ChangeDatasourceOwnerAction;
            this.ChangeProjectOwnerAction = ChangeProjectOwnerAction;
            this.ChangeWorkbookOwnerAction = ChangeWorkbookOwnerAction;
            this.MoveToProjectAction = MoveToProjectAction;
            this.DeleteDatasourcesAction = DeleteDatasourcesAction;
            this.DeleteProjectsAction = DeleteProjectsAction;
            this.DeleteWorkbooksAction = DeleteWorkbooksAction;
            this.CreateProjectAction = CreateProjectAction;
            this.RenameProjectAction = RenameProjectAction;
            this.ChangeViewTagsAction = ChangeViewTagsAction;
            this.ChangeWorkbooksTagsAction = ChangeWorkbooksTagsAction;
            this.ChangeDatasourcesTagsAction = ChangeDatasourcesTagsAction;
            this.SuspendSitesAction = SuspendSitesAction;
            this.ActivateSitesAction = ActivateSitesAction;
            this.DeleteSitesAction = DeleteSitesAction;
            this.EditSiteAction = EditSiteAction;
            this.CreateExtractTasksAction = CreateExtractTasksAction;
            this.DownloadActions = DownloadActions;
        }
        // Delete actions
        ContentActions.prototype.deleteProject = function (projectDetail, actionContext) {
            var _this = this;
            return this.Projects.all()
                .withFilters([VizPortal.Filter.fieldEq("id", projectDetail.id)])
                .getFirst()
                .then(function (projectInfo) {
                return _this.deleteProjects(_this.singleton(projectInfo), actionContext);
            });
        };
        ContentActions.prototype.deleteProjects = function (projects, actionContext) {
            return this.DeleteProjectsAction.confirmDeleteProjects(projects, actionContext);
        };
        ContentActions.prototype.deleteWorkbook = function (workbookDetail, actionContext) {
            var _this = this;
            return this.Workbooks.all()
                .withFilters([VizPortal.Filter.fieldEq("id", workbookDetail.id)])
                .getFirst()
                .then(function (workbookInfo) {
                return _this.deleteWorkbooks(_this.singleton(workbookInfo), actionContext);
            });
        };
        ContentActions.prototype.deleteWorkbooks = function (workbooks, actionContext) {
            return this.DeleteWorkbooksAction.confirmDeleteWorkbooks(workbooks, actionContext);
        };
        // Move to Project
        ContentActions.prototype.moveWorkbooksToProject = function (workbooks, actionContext) {
            return this.MoveToProjectAction.moveWorkbooks(workbooks, actionContext);
        };
        ContentActions.prototype.moveDatasourcesToProject = function (datasources, actionContext) {
            return this.MoveToProjectAction.moveDatasources(datasources, actionContext);
        };
        // Create project
        // Returns the new project id
        ContentActions.prototype.createProject = function (actionContext) {
            return this.CreateProjectAction.execute(actionContext);
        };
        // Helpers
        ContentActions.prototype.singleton = function (item) {
            return VizPortal.Set.singleton(item, function (item) { return item.id; });
        };
        // Rename
        ContentActions.prototype.renameProjectPopup = function (project, actionContext) {
            return this.RenameProjectAction.execute(project, actionContext);
        };
        ContentActions.prototype.renameProject = function (project, newName) {
            return this.RenameProjectAction.executeInPlace(project, newName);
        };
        // Download
        ContentActions.prototype.downloadWorkbook = function (workbook) {
            return this.DownloadActions.downloadWorkbook(workbook);
        };
        ContentActions.prototype.downloadDatasource = function (datasource) {
            return this.DownloadActions.downloadDatasource(datasource);
        };
        // Change Owner
        ContentActions.prototype.changeOwnerOnDatasources = function (datasources, actionContext) {
            return this.ChangeDatasourceOwnerAction.confirmChangeOwner(datasources, actionContext);
        };
        ContentActions.prototype.changeOwnerOnProjects = function (projects, actionContext) {
            return this.ChangeProjectOwnerAction.confirmChangeOwner(projects, actionContext);
        };
        ContentActions.prototype.changeOwnerOnWorkbooks = function (workbooks, actionContext) {
            return this.ChangeWorkbookOwnerAction.confirmChangeOwner(workbooks, actionContext);
        };
        // Update Site Availability
        ContentActions.prototype.suspendSite = function (sites, actionContext) {
            return this.SuspendSitesAction.execute(sites, actionContext);
        };
        ContentActions.prototype.activateSite = function (sites, actionContext) {
            return this.ActivateSitesAction.execute(sites, actionContext);
        };
        // Edit Site Settings
        ContentActions.prototype.editSite = function (site, actionContext) {
            return this.EditSiteAction.execute(site, actionContext);
        };
        // Delete Sites
        ContentActions.prototype.deleteSites = function (sites, actionContext) {
            return this.DeleteSitesAction.execute(sites, actionContext);
        };
        // Authoring
        ContentActions.prototype.authoring = function (authoringUrl) {
            this.windowLocationService.open(authoringUrl);
        };
        ContentActions.prototype.editWorkbook = function (workbook) {
            this.authoring(workbook.editUrl);
        };
        ContentActions.prototype.editView = function (view) {
            this.authoring(view.editUrl);
        };
        ContentActions.prototype.newWorkbook = function (datasource) {
            this.authoring(datasource.newWorkbookUrl);
        };
        // Change Tags
        ContentActions.prototype.handleSingleItemResponse = function (item, translations) {
            var _this = this;
            return function (result) {
                var itemSet = VizPortal.Set.singleton(item, function (item) { return item.id; });
                _this.contentActionNotification.notifyResult(itemSet, result.errors, translations);
                return result; //For chaining
            };
        };
        ContentActions.prototype.setTagsOnViews = function (views, actionContext) {
            return this.ChangeViewTagsAction.execute(views, actionContext);
        };
        ContentActions.prototype.setTagsOnView = function (view, newTagsList) {
            var _this = this;
            var tagsToAdd = _.difference(newTagsList, view.tags);
            var tagsToRemove = _.difference(view.tags, newTagsList);
            return this.Views.changeTags([view.id], tagsToAdd, tagsToRemove)
                .then(this.ActionHelpers.notifyStandardError(VizPortal.Set.fromIdItemArray([view]), VizPortal.ChangeViewTagsAction.notificationTranslationIds, function (errorItem) { return _this.ChangeViewTagsAction.changeTagsErrorDetail(errorItem); }));
        };
        ContentActions.prototype.setTagsOnWorkbook = function (workbook, newTagsList) {
            var _this = this;
            var tagsToAdd = _.difference(newTagsList, workbook.tags);
            var tagsToRemove = _.difference(workbook.tags, newTagsList);
            return this.Workbooks.changeTags([workbook.id], tagsToAdd, tagsToRemove)
                .then(this.ActionHelpers.notifyStandardError(VizPortal.Set.fromIdItemArray([workbook]), VizPortal.ChangeWorkbooksTagsAction.notificationTranslationIds, function (errorItem) { return _this.ChangeWorkbooksTagsAction.changeTagsErrorDetail(errorItem); }));
        };
        ContentActions.prototype.setTagsOnWorkbooks = function (workbooks, actionContext) {
            return this.ChangeWorkbooksTagsAction.execute(workbooks, actionContext);
        };
        ContentActions.prototype.setTagsOnDatasource = function (datasource, newTagsList) {
            var _this = this;
            var tagsToAdd = _.difference(newTagsList, datasource.tags);
            var tagsToRemove = _.difference(datasource.tags, newTagsList);
            return this.DataSources.changeTags([datasource.id], tagsToAdd, tagsToRemove)
                .then(this.ActionHelpers.notifyStandardError(VizPortal.Set.fromIdItemArray([datasource]), VizPortal.ChangeDatasourcesTagsAction.notificationTranslationIds, function (errorItem) { return _this.ChangeDatasourcesTagsAction.changeTagsErrorDetail(errorItem); }));
        };
        ContentActions.prototype.setTagsOnDatasources = function (datasources, actionContext) {
            return this.ChangeDatasourcesTagsAction.showChangeTagsDialog(datasources, actionContext);
        };
        ContentActions.$inject = [
            'WindowLocationService',
            'ContentActionNotification',
            'ActionHelpers',
            'Projects',
            'Workbooks',
            'DataSources',
            'Views',
            'ChangeDatasourceOwnerAction',
            'ChangeProjectOwnerAction',
            'ChangeWorkbookOwnerAction',
            'MoveToProjectAction',
            'DeleteDatasourcesAction',
            'DeleteProjectsAction',
            'DeleteWorkbooksAction',
            'CreateProjectAction',
            'RenameProjectAction',
            'ChangeViewTagsAction',
            'ChangeWorkbooksTagsAction',
            'ChangeDatasourcesTagsAction',
            'SuspendSitesAction',
            'ActivateSitesAction',
            'DeleteSitesAction',
            'EditSiteAction',
            'CreateExtractTasksAction',
            'DownloadActions'
        ];
        return ContentActions;
    })();
    VizPortal.ContentActions = ContentActions;
    VizPortal.Module.instance().service('ContentActions', ContentActions);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/ErrorCodes.ts" />
var VizPortal;
(function (VizPortal) {
    var ChangeDatasourceDescriptionAction = (function () {
        function ChangeDatasourceDescriptionAction($translate, toaster, DataSources) {
            this.$translate = $translate;
            this.toaster = toaster;
            this.DataSources = DataSources;
        }
        ChangeDatasourceDescriptionAction.prototype.execute = function (datasource, newDescription) {
            var _this = this;
            return this.DataSources.setDescription(datasource.id, newDescription).then(function (result) {
                if (result.errors && result.errors.length) {
                    _this.toaster.pop({ type: VizPortal.ToastType.Error, text: _this.errorMessageFor(result.errors[0], datasource) });
                }
                return result;
            });
        };
        ChangeDatasourceDescriptionAction.prototype.errorMessageFor = function (error, datasource) {
            switch (error.code) {
                case VizPortal.DatasourceErrorCode.DatasourceDescriptionGreaterThanMaxLength:
                    return this.$translate.instant('errorDatasourceDescriptionTooLong');
                case VizPortal.CommonErrorCode.DatasourceNotFound:
                    return this.$translate.instant('errorDatasourceNotFound', { DATASOURCE_NAME: VizPortal.L10n.elideIfLong(datasource.name) });
                default:
                    return this.$translate.instant('errorUnknown');
            }
        };
        ChangeDatasourceDescriptionAction.$inject = ['$translate', 'ToasterService', 'DataSources'];
        return ChangeDatasourceDescriptionAction;
    })();
    VizPortal.ChangeDatasourceDescriptionAction = ChangeDatasourceDescriptionAction;
    VizPortal.Module.instance().service('ChangeDatasourceDescriptionAction', ChangeDatasourceDescriptionAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/ErrorCodes.ts" />
var VizPortal;
(function (VizPortal) {
    var ChangeProjectDescriptionAction = (function () {
        function ChangeProjectDescriptionAction($translate, toaster, Projects) {
            this.$translate = $translate;
            this.toaster = toaster;
            this.Projects = Projects;
        }
        ChangeProjectDescriptionAction.prototype.execute = function (project, newDescription) {
            var _this = this;
            return this.Projects.setDescription(project.id, newDescription).then(function (result) {
                if (result.errors && result.errors.length) {
                    _this.toaster.pop({ type: VizPortal.ToastType.Error, text: _this.errorMessageFor(result.errors[0], project) });
                }
                return result;
            });
        };
        ChangeProjectDescriptionAction.prototype.errorMessageFor = function (error, project) {
            switch (error.code) {
                case VizPortal.ProjectErrorCode.ProjectDescriptionGreaterThanMaxLength:
                    return this.$translate.instant('errorProjectDescriptionTooLong');
                case VizPortal.CommonErrorCode.ProjectNotFound:
                    return this.$translate.instant('errorProjectNotFound', { PROJECT_NAME: VizPortal.L10n.elideIfLong(project.name) });
                default:
                    return this.$translate.instant('errorUnknown');
            }
        };
        ChangeProjectDescriptionAction.$inject = ['$translate', 'ToasterService', 'Projects'];
        return ChangeProjectDescriptionAction;
    })();
    VizPortal.ChangeProjectDescriptionAction = ChangeProjectDescriptionAction;
    VizPortal.Module.instance().service('ChangeProjectDescriptionAction', ChangeProjectDescriptionAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/ErrorCodes.ts" />
var VizPortal;
(function (VizPortal) {
    var ChangeWorkbookDescriptionAction = (function () {
        function ChangeWorkbookDescriptionAction($translate, toaster, Workbooks, WorkbookErrors) {
            this.$translate = $translate;
            this.toaster = toaster;
            this.Workbooks = Workbooks;
            this.WorkbookErrors = WorkbookErrors;
        }
        ChangeWorkbookDescriptionAction.prototype.execute = function (workbook, newDescription) {
            var _this = this;
            return this.Workbooks.setDescription(workbook.id, newDescription).then(function (result) {
                if (result.errors && result.errors.length) {
                    _this.toaster.pop({
                        type: VizPortal.ToastType.Error,
                        text: _this.WorkbookErrors.errorMessageFor({ item: workbook, error: result.errors[0] })
                    });
                }
                return result;
            });
        };
        ChangeWorkbookDescriptionAction.$inject = ['$translate', 'ToasterService', 'Workbooks', 'WorkbookErrors'];
        return ChangeWorkbookDescriptionAction;
    })();
    VizPortal.ChangeWorkbookDescriptionAction = ChangeWorkbookDescriptionAction;
    VizPortal.Module.instance().service('ChangeWorkbookDescriptionAction', ChangeWorkbookDescriptionAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/ResultHelper.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var RevisionHistoryAction = (function () {
        function RevisionHistoryAction($translate, $q, $rootScope, ConfirmActionDialog, toaster, Workbooks) {
            this.$translate = $translate;
            this.$q = $q;
            this.$rootScope = $rootScope;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.toaster = toaster;
            this.Workbooks = Workbooks;
        }
        RevisionHistoryAction.prototype.showRevisionHistory = function (workbook) {
            var _this = this;
            var scope = this.$rootScope.$new(true);
            scope.workbookId = workbook.id;
            scope.selectedItems = new VizPortal.Set(function (revision) { return revision.id; });
            scope.prompt = this.$translate.instant('revisionHistoryDialogDescription', {
                NAME: VizPortal.L10n.elideIfLong(workbook.name)
            });
            var revisionHistoryAction = function () {
                return _this.Workbooks.revertWorkbook(scope.workbookId, scope.selectedItems.first().versionNumber)
                    .then(function (result) {
                    if (VizPortal.ResultHelper.hasErrors(result)) {
                        _this.toaster.pop({ type: VizPortal.ToastType.Error, text: _this.$translate.instant('revisionHistoryActionError') });
                    }
                    else {
                        _this.toaster.pop({ type: VizPortal.ToastType.Info, text: _this.$translate.instant('revisionHistoryActionSuccess') });
                    }
                });
            };
            var dialogInstance = this.ConfirmActionDialog.open({
                scope: scope,
                title: this.$translate.instant('revisionHistoryDialogTitle'),
                bodyTemplateUrl: 'revisionHistoryDialog.html',
                actionName: this.$translate.instant('revisionHistoryDialogSubmit'),
                action: revisionHistoryAction,
                confirmDisabled: function () {
                    return scope.selectedItems && scope.selectedItems.size() != 1;
                },
                size: '600px'
            });
            return dialogInstance.result.fin(function () { return scope.$destroy(); });
        };
        RevisionHistoryAction.$inject = [
            '$translate',
            '$q',
            '$rootScope',
            'ConfirmActionDialog',
            'ToasterService',
            'Workbooks'];
        return RevisionHistoryAction;
    })();
    VizPortal.RevisionHistoryAction = RevisionHistoryAction;
    VizPortal.Module.instance().service('RevisionHistoryAction', RevisionHistoryAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../config.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../models/Content.ts" />
/// <reference path="../models/IPlace.ts" />
/// <reference path="../models/IProjectInfo.ts" />
/// <reference path="../ServerApi/types/IFilterClause.ts" />
/// <reference path="../ServerApi/types/IResponse.ts" />
/// <reference path="../services/BreadcrumbsService.ts" />
/// <reference path="../services/BrowserTitleService.ts" />
/// <reference path="../services/ContentActions.ts" />
/// <reference path="../services/ChangeDatasourceDescriptionAction.ts" />
/// <reference path="../services/ChangeProjectDescriptionAction.ts" />
/// <reference path="../services/ChangeWorkbookDescriptionAction.ts" />
/// <reference path="../services/DownloadActions.ts" />
/// <reference path="../services/ModalService.ts" />
/// <reference path="../services/RevisionHistoryAction.ts" />
/// <reference path="../services/ServerService.ts" />
var VizPortal;
(function (VizPortal) {
    var SitePlaceCtrl = (function () {
        function SitePlaceCtrl($location, $scope, $state, breadcrumbs, contentActions, place, server) {
            $scope.place = 'site';
            VizPortal.SubplaceCountsHelper.keepSubplaceCountsUpdated($scope, place);
            VizPortal.SubplaceTabsHelper.refreshWhenCurrentTabClicked($scope, $state);
            breadcrumbs.rememberSiteUrl($location.url());
            $scope.$on('$locationChangeSuccess', function () {
                var path = $location.path();
                if (/^(\/site\/[^\/]+)?\/(projects|workbooks|views|datasources)(\/)?$/.test(path)) {
                    breadcrumbs.rememberSiteUrl($location.url());
                }
            });
        }
        SitePlaceCtrl.$inject = [
            '$location',
            '$scope',
            '$state',
            'BreadcrumbsService',
            'ContentActions',
            'place',
            'ServerService'
        ];
        return SitePlaceCtrl;
    })();
    VizPortal.SitePlaceCtrl = SitePlaceCtrl;
    var ProjectPlaceCtrl = (function () {
        function ProjectPlaceCtrl($location, $q, $scope, $state, breadcrumbs, BrowserTitleService, ContentActions, ChangeProjectDescriptionAction, place, project, projectActions) {
            var _this = this;
            this.$q = $q;
            $scope.place = VizPortal.ContentTypes.project;
            $scope.objectName = project.name;
            $scope.project = project;
            $scope.projectSet = VizPortal.Set.singleton(project, function (project) { return project.id; });
            VizPortal.SubplaceCountsHelper.keepSubplaceCountsUpdated($scope, place);
            VizPortal.SubplaceTabsHelper.refreshWhenCurrentTabClicked($scope, $state);
            $scope.allowedAction = function (actionName) { return (!!projectActions && projectActions[actionName]); };
            $scope.del = function ($event) {
                ContentActions.deleteProject(project, VizPortal.ActionContext.fromEvent($event))
                    .then(function () { return $state.go('main.site.content.site.projects'); });
            };
            $scope.changeDescription = function (newDescription) {
                return ChangeProjectDescriptionAction.execute(project, newDescription).then(VizPortal.ResultHelper.rejectResultOnError(_this.$q));
            };
            $scope.changeOwner = function ($event) {
                return ContentActions.changeOwnerOnProjects($scope.projectSet, VizPortal.ActionContext.fromEvent($event))
                    .then(function () { return $state.hardReload(); });
            };
            $scope.rename = function ($event) {
                return ContentActions.renameProjectPopup(project, VizPortal.ActionContext.fromEvent($event))
                    .then(function () { return $state.hardReload(); });
            };
            $scope.contentBreadcrumbUrl = function () { return breadcrumbs.siteUrl
                ? '#' + breadcrumbs.siteUrl
                : $state.href('main.site.content.site.projects'); };
            breadcrumbs.rememberProjectUrl(project, $location.url());
            $scope.$on('$locationChangeSuccess', function () {
                var path = $location.path();
                if (/^(\/site\/[^\/]+)?\/projects\/[^\/]+\/(workbooks|views|datasources|permissions|details)(\/)?$/.test(path)) {
                    breadcrumbs.rememberProjectUrl(project, $location.url());
                }
            });
        }
        ProjectPlaceCtrl.$inject = [
            '$location',
            '$q',
            '$scope',
            '$state',
            'BreadcrumbsService',
            'BrowserTitleService',
            'ContentActions',
            'ChangeProjectDescriptionAction',
            'place',
            'project',
            'projectActions'
        ];
        return ProjectPlaceCtrl;
    })();
    VizPortal.ProjectPlaceCtrl = ProjectPlaceCtrl;
    VizPortal.Module.instance().controller('ProjectPlaceCtrl', ProjectPlaceCtrl);
    var WorkbookPlaceCtrl = (function () {
        function WorkbookPlaceCtrl($location, $q, $scope, $state, $translate, breadcrumbs, ContentActions, ChangeWorkbookDescriptionAction, SetDisplayTabsAction, DownloadActions, CreateExtractTasksAction, Favorites, place, workbook, workbookActions, Workbooks, RevisionHistoryAction) {
            var _this = this;
            this.$q = $q;
            $scope.place = VizPortal.ContentTypes.workbook;
            var setWorkbook = function (newWorkbook) {
                workbook = newWorkbook;
                $scope.objectName = workbook.name;
                $scope.workbook = workbook;
                $scope.workbookSet = VizPortal.Set.singleton(workbook, function (workbook) { return workbook.id; });
                $scope.ownerId = workbook.owner.id;
                if (!VizPortal.FeatureFlags.projectControlledPermissionsEnabled) {
                    // The info message is displayed on the permissions dialog for a few special cases when
                    // workboks have tabbed views hidden. This is the only case that is applicable on the
                    // permissions subplace, because it displays permissions for only one workbook at a time.
                    // TODO: Move the info message into the permissions panel controller
                    $scope.permissionsInfoMessage = workbook.displayTabs ? null :
                        $translate.instant('permissions_workbooksWithTabsDisabledMessage');
                }
            };
            setWorkbook(workbook);
            Workbooks.markRecentlyViewed(workbook.id);
            VizPortal.SubplaceCountsHelper.keepSubplaceCountsUpdated($scope, place);
            VizPortal.SubplaceTabsHelper.refreshWhenCurrentTabClicked($scope, $state);
            $scope.del = function ($event) {
                ContentActions.deleteWorkbook(workbook, VizPortal.ActionContext.fromEvent($event))
                    .then(function () { return $state.go('main.site.content.project.workbooks', { id: workbook.project.id }); });
            };
            $scope.changeDescription = function (newDescription) {
                return ChangeWorkbookDescriptionAction.execute(workbook, newDescription).then(VizPortal.ResultHelper.rejectResultOnError(_this.$q));
            };
            $scope.download = function ($event) {
                DownloadActions
                    .downloadWorkbook(workbook)
                    .then(setWorkbook) // We have new information about the workbook, let's update our models
                    .fail(function () { return $state.hardReload(); }); // This may have failed because our model is out of date, let's update it
                $event.preventDefault();
            };
            $scope.changeOwner = function ($event) {
                return ContentActions.changeOwnerOnWorkbooks($scope.workbookSet, VizPortal.ActionContext.fromEvent($event))
                    .then(function () { return $state.hardReload(); });
            };
            $scope.moveToProject = function ($event) {
                return ContentActions.moveWorkbooksToProject($scope.workbookSet, VizPortal.ActionContext.fromEvent($event))
                    .then(function () { return $state.hardReload(); });
            };
            $scope.showRevisionHistory = function () {
                return RevisionHistoryAction.showRevisionHistory(workbook)
                    .then(function () { return $state.hardReload(); });
            };
            $scope.editWorkbook = function ($event) {
                ContentActions.editWorkbook($scope.workbook);
                $event.preventDefault();
            };
            $scope.$watch('workbook.displayTabs', function (newVal, oldVal) {
                if (newVal !== oldVal) {
                    SetDisplayTabsAction.setDisplayTabs(workbook, newVal)
                        .then(function () { return $state.hardReload(); });
                }
            });
            $scope.changeTags = function (newTagsList) {
                return ContentActions.setTagsOnWorkbook($scope.workbook, newTagsList)
                    .then(VizPortal.ResultHelper.rejectResultOnError(_this.$q))
                    .then(function () { return $state.hardReload(); });
            };
            $scope.refreshNow = function ($event) {
                CreateExtractTasksAction.forWorkbook($scope.workbook, VizPortal.ActionContext.fromEvent($event), VizPortal.CreateExtractTasksMode.AllowRefreshNow)
                    .then(function () { return $state.hardReload(); });
            };
            $scope.addFavorite = function () { return Favorites.addWorkbook($scope.workbook); };
            $scope.removeFavorite = function () { return Favorites.removeWorkbook($scope.workbook); };
            $scope.allowedAction = function (actionName) { return (!!workbookActions && workbookActions[actionName]); };
            $scope.contentBreadcrumbUrl = function () { return breadcrumbs.siteUrl
                ? '#' + breadcrumbs.siteUrl
                : $state.href('main.site.content.site.projects'); };
            $scope.projectBreadcrumbUrl = function () { return breadcrumbs.projectUrl
                ? '#' + breadcrumbs.projectUrl
                : $state.href('main.site.content.project.workbooks', { id: workbook.project.id }); };
            breadcrumbs.rememberWorkbookUrl(workbook, $location.url());
            $scope.$on('$locationChangeSuccess', function () {
                var path = $location.path();
                if (/^(\/site\/[^\/]+)?\/workbooks\/[^\/]+\/(views|datasources|permissions|details)(\/)?$/.test(path)) {
                    breadcrumbs.rememberWorkbookUrl(workbook, $location.url());
                }
            });
            $scope.isWorkbookRevisionHistoryEnabled = VizPortal.FeatureFlags.workbookVersionHistoryEnabled;
        }
        WorkbookPlaceCtrl.$inject = [
            '$location',
            '$q',
            '$scope',
            '$state',
            '$translate',
            'BreadcrumbsService',
            'ContentActions',
            'ChangeWorkbookDescriptionAction',
            'SetDisplayTabsAction',
            'DownloadActions',
            'CreateExtractTasksAction',
            'Favorites',
            'place',
            'workbook',
            'workbookActions',
            'Workbooks',
            'RevisionHistoryAction'
        ];
        return WorkbookPlaceCtrl;
    })();
    VizPortal.WorkbookPlaceCtrl = WorkbookPlaceCtrl;
    VizPortal.Module.instance().controller('WorkbookPlaceCtrl', WorkbookPlaceCtrl);
    var DatasourcePlaceCtrl = (function () {
        function DatasourcePlaceCtrl($q, $scope, $state, breadcrumbs, server, ContentActions, ChangeDatasourceDescriptionAction, DownloadActions, DeleteDatasourcesAction, datasource, datasourceActions, place) {
            var _this = this;
            this.$q = $q;
            this.server = server;
            this.DeleteDatasourcesAction = DeleteDatasourcesAction;
            this.datasource = datasource;
            $scope.place = VizPortal.ContentTypes.datasource;
            var setDatasource = function (newDatasource) {
                datasource = newDatasource;
                $scope.objectName = datasource.name;
                $scope.datasource = datasource;
                $scope.datasourceSet = VizPortal.Set.singleton(datasource, function (datasource) { return datasource.id; });
                $scope.ownerId = datasource.owner.id;
            };
            setDatasource(datasource);
            VizPortal.SubplaceCountsHelper.keepSubplaceCountsUpdated($scope, place);
            VizPortal.SubplaceTabsHelper.refreshWhenCurrentTabClicked($scope, $state);
            $scope.del = function ($event) {
                _this.DeleteDatasourcesAction.confirmDeleteDatasource(datasource, VizPortal.ActionContext.fromEvent($event))
                    .then(function (result) {
                    if (result.allowed) {
                        $state.go('main.site.content.project.datasources', { id: datasource.project.id });
                    }
                });
            };
            $scope.changeDescription = function (newDescription) {
                return ChangeDatasourceDescriptionAction.execute(datasource, newDescription).then(VizPortal.ResultHelper.rejectResultOnError(_this.$q));
            };
            $scope.download = function ($event) {
                DownloadActions
                    .downloadDatasource(datasource)
                    .then(setDatasource) // We have new information about the data source, let's update our models
                    .fail(function () { return $state.hardReload(); }); // May have failed because our model is out of date, let's update it
                $event.preventDefault();
            };
            $scope.changeOwner = function ($event) {
                return ContentActions.changeOwnerOnDatasources($scope.datasourceSet, VizPortal.ActionContext.fromEvent($event))
                    .then(function () { return $state.hardReload(); });
            };
            $scope.moveToProject = function ($event) {
                return ContentActions.moveDatasourcesToProject($scope.datasourceSet, VizPortal.ActionContext.fromEvent($event))
                    .then(function () { return $state.hardReload(); });
            };
            $scope.newWorkbook = function ($event) {
                ContentActions.newWorkbook($scope.datasource);
                $event.preventDefault();
            };
            $scope.changeTags = function (newTagsList) {
                return ContentActions.setTagsOnDatasource($scope.datasource, newTagsList)
                    .then(VizPortal.ResultHelper.rejectResultOnError(_this.$q))
                    .then(function () { return $state.hardReload(); });
            };
            $scope.allowedAction = function (actionName) { return (!!datasourceActions && datasourceActions[actionName]); };
            // Breadcrumbs
            breadcrumbs.projectChanged(datasource.project);
            $scope.contentBreadcrumbUrl = function () { return breadcrumbs.siteUrl
                ? '#' + breadcrumbs.siteUrl
                : $state.href('main.site.content.site.projects'); };
            $scope.projectBreadcrumbUrl = function () { return breadcrumbs.projectUrl
                ? '#' + breadcrumbs.projectUrl
                : $state.href('main.site.content.project.datasources', { id: datasource.project.id }); };
            $scope.refreshModeIsRemote = function () {
                return _this.remoteRefreshesEnabled() &&
                    datasource.refreshMode === VizPortal.ServerApi.RefreshModeTypes.Remote;
            };
            $scope.refreshModeIsServer = function () {
                return _this.datasource.hasExtracts && !$scope.refreshModeIsRemote();
            };
        }
        DatasourcePlaceCtrl.prototype.remoteRefreshesEnabled = function () {
            return this.server.featureFlags().dataSyncEnabled && this.datasource.hasExtracts;
        };
        DatasourcePlaceCtrl.$inject = [
            '$q',
            '$scope',
            '$state',
            'BreadcrumbsService',
            'ServerService',
            'ContentActions',
            'ChangeDatasourceDescriptionAction',
            'DownloadActions',
            'DeleteDatasourcesAction',
            'datasource',
            'datasourceActions',
            'place'
        ];
        return DatasourcePlaceCtrl;
    })();
    VizPortal.DatasourcePlaceCtrl = DatasourcePlaceCtrl;
    VizPortal.Module.instance().controller('DatasourcePlaceCtrl', DatasourcePlaceCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/Filter.ts" />
/// <reference path="../helpers/ServerFilterClauses.ts" />
/// <reference path="../ServerApi/types/IFilterClause.ts" />
/// <reference path="../ServerApi/types/resourceParts.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var ContentFilterService = (function () {
        function ContentFilterService($location) {
            this.$location = $location;
        }
        ContentFilterService.prototype.getFilter = function (explicitFilterKeys, implicitFilters) {
            return VizPortal.Filter.and(this.getFilterClauses(explicitFilterKeys, implicitFilters));
        };
        ContentFilterService.prototype.getFilterClauses = function (explicitFilterKeys, implicitFilters) {
            var explicitFilters = _(this.$location.search()).pick(explicitFilterKeys);
            var filterValues = _.extend(explicitFilters, implicitFilters);
            return VizPortal.ServerFilterClauses.create(filterValues);
        };
        ContentFilterService.$inject = ['$location'];
        return ContentFilterService;
    })();
    VizPortal.ContentFilterService = ContentFilterService;
    VizPortal.Module.instance().service('ContentFilterService', ContentFilterService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var SiteRoleFilterHelper;
    (function (SiteRoleFilterHelper) {
        SiteRoleFilterHelper.AnyRole = 'Any';
        function siteRoleOptions(roles, userCountsByRole) {
            if (!userCountsByRole) {
                userCountsByRole = {};
            }
            var options = [
                {
                    value: SiteRoleFilterHelper.AnyRole,
                    translate: 'siteRole_Any',
                    count: userCountsByRole[SiteRoleFilterHelper.AnyRole]
                }
            ];
            _.each(roles, function (role) {
                options.push({
                    value: role,
                    translate: 'siteRole_' + role,
                    count: userCountsByRole[role]
                });
            });
            return options;
        }
        SiteRoleFilterHelper.siteRoleOptions = siteRoleOptions;
    })(SiteRoleFilterHelper = VizPortal.SiteRoleFilterHelper || (VizPortal.SiteRoleFilterHelper = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/SiteRoleFilterHelper.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.FilterCategories = {
        general: 'general',
        datasource: 'datasource'
    };
    (function (PasswordStatus) {
        PasswordStatus[PasswordStatus["Any"] = 0] = "Any";
        PasswordStatus[PasswordStatus["Embedded"] = 1] = "Embedded";
        PasswordStatus[PasswordStatus["NotEmbedded"] = 2] = "NotEmbedded";
    })(VizPortal.PasswordStatus || (VizPortal.PasswordStatus = {}));
    var PasswordStatus = VizPortal.PasswordStatus;
    (function (DatasourceType) {
        DatasourceType[DatasourceType["All"] = 1] = "All";
        DatasourceType[DatasourceType["Embedded"] = 2] = "Embedded";
        DatasourceType[DatasourceType["Published"] = 3] = "Published";
    })(VizPortal.DatasourceType || (VizPortal.DatasourceType = {}));
    var DatasourceType = VizPortal.DatasourceType;
    // TODO This value should be defined in a content specific config file,
    // For now, keep in sync with ContentFilterService.ts
    var portDefault = 'default';
    var FilterPanelService = (function () {
        function FilterPanelService(suggestions, $q) {
            this.suggestions = suggestions;
            this.$q = $q;
            this.createFilterDefinitions();
        }
        FilterPanelService.prototype.createFilterDefinitions = function () {
            var _this = this;
            this.filterDefinitions = _.indexBy([
                // General Filters
                {
                    name: 'project',
                    type: 'typeahead',
                    category: VizPortal.FilterCategories.general,
                    field: VizPortal.ServerApi.FilterFieldNames.projectId,
                    valueFromParams: this.fromSingleParam('project', function (paramValue) { return _this.suggestions.project(paramValue); }),
                    valueToParams: this.toSingleParam('project', function (fieldValue) { return fieldValue.value; }),
                    matchPrefixesOnly: false
                },
                {
                    name: 'owner',
                    type: 'typeahead',
                    category: VizPortal.FilterCategories.general,
                    field: VizPortal.ServerApi.FilterFieldNames.ownerId,
                    valueFromParams: this.fromSingleParam('owner', function (paramValue) { return _this.suggestions.user(paramValue); }),
                    valueToParams: this.toSingleParam('owner', function (fieldValue) { return fieldValue.value; }),
                    matchPrefixesOnly: true
                },
                {
                    name: 'tag',
                    type: 'typeahead',
                    category: VizPortal.FilterCategories.general,
                    field: VizPortal.ServerApi.FilterFieldNames.tags,
                    valueFromParams: this.fromSingleParam('tag', function (paramValue) { return _this.$q.when({ value: paramValue, label: paramValue, count: 0 }); }),
                    valueToParams: this.toSingleParam('tag', function (fieldValue) { return fieldValue.value; }),
                    matchPrefixesOnly: false
                },
                this.siteRoleFilterDefinition(),
                this.groupsMinimumSiteRoleDefinition(),
                this.maxSiteRoleDefinition(),
                this.afterDateFilterDefinition('createdAfter', VizPortal.FilterCategories.general),
                this.beforeDateFilterDefinition('createdBefore', VizPortal.FilterCategories.general),
                this.afterDateFilterDefinition('modifiedAfter', VizPortal.FilterCategories.general),
                this.beforeDateFilterDefinition('modifiedBefore', VizPortal.FilterCategories.general),
                this.booleanFilterDefinition('favorite', VizPortal.FilterCategories.general),
                this.booleanFilterDefinition('recent', VizPortal.FilterCategories.general),
                this.booleanFilterDefinition('hasAlert', VizPortal.FilterCategories.general),
                // Data Source Filters
                this.selectFilterDefinition('showEmbedded', {
                    '': DatasourceType.Published,
                    'true': DatasourceType.All,
                    'only': DatasourceType.Embedded
                }, [
                    { value: DatasourceType.All, translate: 'datasourceTypeAll' },
                    { value: DatasourceType.Published, translate: 'datasourceTypePublishedOnly' },
                    { value: DatasourceType.Embedded, translate: 'datasourceTypeEmbeddedOnly' }
                ], VizPortal.FilterCategories.datasource),
                {
                    name: 'connectionType',
                    type: 'typeahead',
                    category: VizPortal.FilterCategories.datasource,
                    field: VizPortal.ServerApi.FilterFieldNames.connectionType,
                    valueFromParams: this.fromSingleParam('connectionType', function (paramValue) { return _this.suggestions.dataConnectionType(paramValue); }),
                    valueToParams: this.toSingleParam('connectionType', function (fieldValue) { return fieldValue.value; }),
                    matchPrefixesOnly: true
                },
                this.textFilterDefinition('serverName', VizPortal.FilterCategories.datasource),
                this.textDropdownFilterDefinition('serverPort', [
                    { value: null, translate: 'serverPortAny' },
                    { value: 'default', translate: 'serverPortDefault' }
                ], function (val) { return (val === portDefault || (/^\d*$/.exec(val) && parseInt(val, 10) <= 65535)); }, VizPortal.FilterCategories.datasource),
                this.textFilterDefinition('databaseUsername', VizPortal.FilterCategories.datasource),
                this.selectFilterDefinition('hasPassword', {
                    '': PasswordStatus.Any,
                    'true': PasswordStatus.Embedded,
                    'false': PasswordStatus.NotEmbedded
                }, [
                    { value: PasswordStatus.Any, translate: 'hasPasswordAny' },
                    { value: PasswordStatus.Embedded, translate: 'hasPasswordEmbedded' },
                    { value: PasswordStatus.NotEmbedded, translate: 'hasPasswordNotEmbedded' }
                ], VizPortal.FilterCategories.datasource),
                this.booleanFilterDefinition('hasExtracts', VizPortal.FilterCategories.datasource)
            ], 'name');
        };
        FilterPanelService.prototype.siteRoleFilterDefinition = function () {
            return this.siteRoleSelectFilterDefinition('siteRole', VizPortal.SiteRoles.WithoutGuest);
        };
        FilterPanelService.prototype.groupsMinimumSiteRoleDefinition = function () {
            return this.siteRoleSelectFilterDefinition('groupsMinimumSiteRole', VizPortal.SiteRoles.WithoutGuestOrServerAdmin);
        };
        FilterPanelService.prototype.maxSiteRoleDefinition = function () {
            return this.siteRoleSelectFilterDefinition('maxSiteRole', VizPortal.SiteRoles.WithoutGuest);
        };
        FilterPanelService.prototype.siteRoleSelectFilterDefinition = function (name, roles) {
            return this.selectFilterDefinition(name, 
            // param key values mapped to value states
            // Map '' to "any role"
            _.extend({}, VizPortal.ServerApi.SiteRoles, { '': VizPortal.SiteRoleFilterHelper.AnyRole }), VizPortal.SiteRoleFilterHelper.siteRoleOptions(roles), VizPortal.FilterCategories.general);
        };
        FilterPanelService.prototype.selectFilterDefinition = function (name, paramToValueMap, options, category) {
            var _this = this;
            var valueToParamMap = Helpers.swapDict(paramToValueMap);
            return {
                name: name,
                type: 'select',
                category: category,
                valueFromParams: function (params) { return _this.$q.when(paramToValueMap[params[name]] || paramToValueMap['']); },
                valueToParams: this.toSingleParam(name, function (val) { return (valueToParamMap[val + ''] || null); }),
                options: options
            };
        };
        FilterPanelService.prototype.booleanFilterDefinition = function (name, category) {
            var _this = this;
            return {
                name: name,
                type: 'boolean',
                category: category,
                valueFromParams: this.fromSingleParam(name, function (paramValue) { return _this.$q.when(Helpers.toBoolean(paramValue)); }),
                valueToParams: this.toSingleParam(name, function (value) { return '' + value; })
            };
        };
        FilterPanelService.prototype.textFilterDefinition = function (name, category) {
            var _this = this;
            return {
                name: name,
                type: 'text',
                category: category,
                valueFromParams: this.fromSingleParam(name, function (paramValue) { return _this.$q.when(paramValue); }),
                valueToParams: this.toSingleParam(name, function (text) { return text; })
            };
        };
        FilterPanelService.prototype.textDropdownFilterDefinition = function (name, options, isValid, category) {
            var _this = this;
            return {
                name: name,
                type: 'textDropdown',
                category: category,
                valueFromParams: this.fromSingleParam(name, function (paramValue) { return _this.$q.when(isValid(paramValue) ? paramValue : null); }),
                valueToParams: this.toSingleParam(name, function (text) { return text; }),
                options: options,
                isValid: isValid
            };
        };
        FilterPanelService.prototype.afterDateFilterDefinition = function (name, category) {
            var _this = this;
            return {
                name: name,
                type: 'date',
                category: category,
                valueFromParams: this.fromSingleParam(name, function (paramValue) { return _this.dateFromISOString(paramValue); }),
                valueToParams: this.toSingleParam(name, function (date) { return VizPortal.DateHelpers.toISOString(date); })
            };
        };
        FilterPanelService.prototype.beforeDateFilterDefinition = function (name, category) {
            var _this = this;
            return {
                name: name,
                type: 'date',
                category: category,
                valueFromParams: this.fromSingleParam(name, function (paramValue) { return _this.dateFromISOString(paramValue); }),
                valueToParams: this.toSingleParam(name, function (date) { return VizPortal.DateHelpers.toISOString(VizPortal.DateHelpers.endOfDay(date)); })
            };
        };
        FilterPanelService.prototype.dateFromISOString = function (paramValue) {
            return this.$q.when(VizPortal.DateHelpers.midnight(VizPortal.DateHelpers.fromISOString(paramValue)));
        };
        FilterPanelService.prototype.fromSingleParam = function (paramName, valueFn) {
            var _this = this;
            return function (params) { return params[paramName] ? valueFn(params[paramName]) : _this.$q.when(null); };
        };
        FilterPanelService.prototype.toSingleParam = function (paramName, paramValueFn) {
            return function (value) {
                var params = {};
                params[paramName] = value ? paramValueFn(value) : null;
                return params;
            };
        };
        FilterPanelService.prototype.getFilterDefinitions = function (filterNames) {
            var _this = this;
            var defns = _.map(filterNames, function (filterName) { return _this.filterDefinitions[filterName]; });
            return _.filter(defns, function (defn) { return defn != null; });
        };
        FilterPanelService.$inject = ['SearchSuggestionsService', '$q'];
        return FilterPanelService;
    })();
    VizPortal.FilterPanelService = FilterPanelService;
    VizPortal.Module.instance().service('FilterPanelService', FilterPanelService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../models/ContentFilters.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/BrowserSupportService.ts" />
/// <reference path="../services/ContentFilterService.ts" />
/// <reference path="../services/FilterPanelService.ts" />
var VizPortal;
(function (VizPortal) {
    var FilterPanelCtrl = (function () {
        function FilterPanelCtrl($scope, $location, BrowserSupportService) {
            var filterDefinitions = $scope.filterDefinitions;
            $scope.filters = _.map(filterDefinitions, function (defn) {
                return { definition: defn, ready: false, value: undefined };
            });
            var isGeneral = function (filter) { return filter.definition.category === VizPortal.FilterCategories.general; };
            var isDatasource = function (filter) { return filter.definition.category === VizPortal.FilterCategories.datasource; };
            var isCheckbox = function (filter) { return filter.definition.type === 'boolean'; };
            $scope.anyGeneralFilters = function () { return _.some($scope.filters, isGeneral); };
            $scope.anyDatasourceFilters = function () { return _.some($scope.filters, isDatasource); };
            $scope.generalFilter = function (filter) { return isGeneral(filter) && !isCheckbox(filter); };
            $scope.generalCheckbox = function (filter) { return isGeneral(filter) && isCheckbox(filter); };
            $scope.datasourceFilter = function (filter) { return isDatasource(filter) && !isCheckbox(filter); };
            $scope.datasourceCheckbox = function (filter) { return isDatasource(filter) && isCheckbox(filter); };
            $scope.filterControls.clearAllFilters = function () {
                var urlParams = $location.search();
                _.each(_.keys(urlParams), function (key) {
                    if (_.has(VizPortal.ContentFiltersKeys, key)) {
                        $location.search(key, null);
                    }
                });
                _.each($scope.filters, function (filterControl) {
                    if (filterControl.clear) {
                        filterControl.clear();
                    }
                });
            };
            $scope.submitSearch = function (searchText, $event) {
                $location.search(VizPortal.ContentFiltersKeys.search, searchText || null);
                if (BrowserSupportService.isTouch() && $event) {
                    $($event.target).blur();
                }
            };
            // Update location when filter selection changes
            _.each($scope.filters, function (filterControl) {
                $scope.$watch(function () { return filterControl.value; }, function () {
                    if (filterControl.ready) {
                        var params = filterControl.definition.valueToParams(filterControl.value);
                        _.each(params, function (value, key) {
                            $location.search(key, value);
                        });
                    }
                });
            });
            var updateModelFromURL = function () {
                var urlParams = $location.search();
                $scope.anyFiltersActive = _.some(_.keys(urlParams), function (key) {
                    return _.has(VizPortal.ContentFiltersKeys, key);
                });
                $scope.searchText = urlParams.search || '';
                _.each($scope.filters, function (filterControl) {
                    filterControl.ready = false;
                    filterControl.definition.valueFromParams(urlParams).then(function (value) {
                        filterControl.ready = true;
                        filterControl.value = value;
                    });
                });
            };
            updateModelFromURL();
            $scope.$on("$locationChangeSuccess", function () {
                updateModelFromURL();
            });
        }
        FilterPanelCtrl.$inject = ['$scope', '$location', 'BrowserSupportService'];
        return FilterPanelCtrl;
    })();
    VizPortal.FilterPanelCtrl = FilterPanelCtrl;
    VizPortal.Module.instance().controller('FilterPanelCtrl', FilterPanelCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/SliceableHelper.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../models/Set.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.SelectionEvent = {
        SelectionStarted: 'selectionStartedEvent',
        SelectionEnded: 'selectionEndedEvent'
    };
    VizPortal.Module.instance().directive('tbSelectionMenu', function () {
        return {
            restrict: 'E',
            replace: true,
            templateUrl: 'selectionMenu.html',
            scope: {
                selection: '=',
                sliceable: '='
            },
            link: function ($scope) {
                var cancelSelectAll = false;
                $scope.$on('$destroy', function () {
                    cancelSelectAll = true;
                });
                $scope.selectAll = function () {
                    $scope.$emit(VizPortal.SelectionEvent.SelectionStarted);
                    $scope.selecting = true;
                    VizPortal.SliceableHelper.fetchAll($scope.sliceable, function (items) {
                        $scope.selection.addItems(items);
                        return cancelSelectAll;
                    }).fin(function () {
                        $scope.$emit(VizPortal.SelectionEvent.SelectionEnded);
                        $scope.selecting = false;
                    });
                };
            }
        };
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var DropdownHelper = (function () {
        function DropdownHelper() {
        }
        DropdownHelper.setupDropdownScope = function (scope, $timeout, focusElement, rowToModel) {
            // State transitions (edit, cancel, select, etc.)
            scope.currentRow = {
                index: 0,
                object: null
            };
            function reset() {
                scope.editMode = false;
                scope.textValue = '';
                scope.currentRow.index = -1;
            }
            reset();
            scope.select = function (item) {
                try {
                    scope.model = rowToModel(item);
                }
                catch (e) {
                    return;
                }
                reset();
            };
            scope.cancel = function () {
                reset();
            };
            scope.clear = function () {
                scope.model = null;
                reset();
            };
            scope.edit = function () {
                scope.editMode = true;
                focus();
            };
            function focus() {
                $timeout(function () { return focusElement.focus(); });
            }
            // Close if the user clicks outside the dropdown
            scope.mousedownOutside = function ($event) {
                if ($($event.target).closest(focusElement).length === 0) {
                    scope.cancel();
                }
            };
            // Keyboard handling
            scope.handleKeyEvent = function ($event) {
                switch ($event.which) {
                    case VizPortal.Keys.ArrowDown:
                        scope.currentRow.index++;
                        break;
                    case VizPortal.Keys.ArrowUp:
                        // Don't let the index go below 0 on arrow up
                        scope.currentRow.index = Math.max(scope.currentRow.index - 1, 0);
                        break;
                    case VizPortal.Keys.Enter:
                    case VizPortal.Keys.Tab:
                        $event.preventDefault();
                        scope.select(scope.currentRow.object);
                        break;
                    case VizPortal.Keys.Escape:
                        $event.preventDefault();
                        scope.cancel();
                        break;
                }
            };
        };
        return DropdownHelper;
    })();
    VizPortal.DropdownHelper = DropdownHelper;
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/DropdownHelper.ts" />
var VizPortal;
(function (VizPortal) {
    var TypeaheadColumnWidths = (function () {
        function TypeaheadColumnWidths(widths) {
            if (widths === void 0) { widths = []; }
            this.widths = widths;
        }
        TypeaheadColumnWidths.prototype.getActual = function (index) {
            return this.widths[index];
        };
        //Assumes 1 or 2 columns, expands the first cell to fill the total remaining space
        TypeaheadColumnWidths.prototype.setWidths = function (widths, totalWidth) {
            var firstCellWidth = totalWidth - (widths[1] || 0);
            this.widths = [firstCellWidth].concat(widths.slice(1));
        };
        return TypeaheadColumnWidths;
    })();
    VizPortal.Module.instance().directive('tbTypeahead', [
        '$timeout', '$parse',
        function ($timeout, $parse) {
            return {
                restrict: 'E',
                templateUrl: 'typeahead.html',
                replace: true,
                // Commented properties are read from directive attributes and added to the scope in the link function
                scope: {
                    model: '=ngModel',
                    autoEdit: '=',
                    typeaheadItemText: '@'
                },
                link: {
                    pre: function (scope, element, attributes) {
                        scope.placeholder = $parse(attributes.typeaheadPlaceholder)(scope.$parent);
                        scope.matchPrefixesOnly = attributes.typeaheadMatchPrefixesOnly === 'true';
                        scope.withCounts = attributes.typeaheadWithCounts === 'true';
                        scope.typeaheadSource = $parse(attributes.typeaheadSource)(scope.$parent);
                    },
                    post: function (scope, element, attributes) {
                        scope.itemText = function (model) {
                            return model ? model[scope.typeaheadItemText] : (scope.placeholder || '');
                        };
                        var rowToModel = function (row) {
                            if (!row)
                                throw new Error('No row is selected');
                            return row;
                        };
                        VizPortal.DropdownHelper.setupDropdownScope(scope, $timeout, element.find("input"), rowToModel);
                        scope.$watch('textValue', function (value) {
                            if (scope.editMode) {
                                scope.items = scope.typeaheadSource(value);
                                if (value) {
                                    scope.currentRow.index = 0;
                                }
                                else {
                                    scope.currentRow.index = -1;
                                }
                            }
                        });
                        scope.$watch('editMode', function (editMode) {
                            if (editMode) {
                                scope.width = element.width();
                                scope.items = scope.typeaheadSource(scope.textValue);
                                scope.columnWidths = new TypeaheadColumnWidths();
                            }
                        });
                        scope.$watch('autoEdit', function (autoEdit) {
                            if (autoEdit) {
                                scope.edit();
                            }
                        });
                    }
                }
            };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var ByteSizeConversionFactor = (function () {
        function ByteSizeConversionFactor() {
        }
        ByteSizeConversionFactor.ONE_KB = 1000;
        ByteSizeConversionFactor.ONE_MB = 1000000;
        ByteSizeConversionFactor.ONE_GB = 1000000000;
        return ByteSizeConversionFactor;
    })();
    VizPortal.ByteSizeConversionFactor = ByteSizeConversionFactor;
    VizPortal.Module.instance().filter('size', [
        '$translate',
        function ($translate) {
            // For details, see http://stackoverflow.com/questions/10015027/javascript-tofixed-not-rounding
            function roundToPrecision(f, precision) {
                var multiplier = Math.pow(10, precision + 1), wholeNumber = Math.floor(f * multiplier);
                return (Math.round(wholeNumber / 10) * 10 / multiplier);
            }
            return function (sizeInBytes) {
                if (!_.isFinite(sizeInBytes) || sizeInBytes < 0) {
                    return '';
                }
                if (sizeInBytes >= ByteSizeConversionFactor.ONE_GB) {
                    return $translate.instant(VizPortal.L10n.Keys.sizeInGB, {
                        SIZE: roundToPrecision(sizeInBytes / ByteSizeConversionFactor.ONE_GB, 1)
                    }, VizPortal.L10n.Interpolations.Float);
                }
                if (sizeInBytes >= ByteSizeConversionFactor.ONE_MB) {
                    return $translate.instant(VizPortal.L10n.Keys.sizeInMB, {
                        SIZE: roundToPrecision(sizeInBytes / ByteSizeConversionFactor.ONE_MB, 1)
                    }, VizPortal.L10n.Interpolations.Float);
                }
                if (sizeInBytes >= ByteSizeConversionFactor.ONE_KB) {
                    return $translate.instant(VizPortal.L10n.Keys.sizeInKB, {
                        SIZE: roundToPrecision(sizeInBytes / ByteSizeConversionFactor.ONE_KB, 1)
                    }, VizPortal.L10n.Interpolations.Float);
                }
                return $translate.instant(VizPortal.L10n.Keys.sizeInBytes, {
                    SIZE: roundToPrecision(sizeInBytes, 0)
                }, VizPortal.L10n.Interpolations.Count);
            };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../libs.ts" />
/// <reference path="../models/ISize.ts" />
/// <reference path="../libs.ts" />
/// <reference path="../FeatureFlags.ts" />
/// <reference path="../models/ILayout.ts" />
/// <reference path="../models/ISize.ts" />
var VizPortal;
(function (VizPortal) {
    var ListLayout = (function () {
        function ListLayout(rowHeight) {
            if (rowHeight === void 0) { rowHeight = ListLayout.DefaultRowHeight; }
            this.rowHeight = rowHeight;
        }
        ListLayout.prototype.metrics = function (dimensions) {
            return {
                numberOfRows: Math.max(Math.ceil(dimensions.height / this.rowHeight), 1),
                numberOfCols: 1,
                heightOfRowInPx: this.rowHeight
            };
        };
        ListLayout.DefaultRowHeight = VizPortal.FeatureFlags.useTallerRowHeight ? 38 : 28; // should match $dataGridRowHeight in sizes.styl
        return ListLayout;
    })();
    VizPortal.ListLayout = ListLayout;
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var CheckConnectionRequest = (function (_super) {
            __extends(CheckConnectionRequest, _super);
            function CheckConnectionRequest(params) {
                _super.call(this, 'checkConnection', params);
            }
            return CheckConnectionRequest;
        })(ServerApi.Request);
        ServerApi.CheckConnectionRequest = CheckConnectionRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var UpdateConnectionsRequest = (function (_super) {
            __extends(UpdateConnectionsRequest, _super);
            function UpdateConnectionsRequest(params) {
                _super.call(this, 'updateConnections', params);
            }
            return UpdateConnectionsRequest;
        })(ServerApi.Request);
        ServerApi.UpdateConnectionsRequest = UpdateConnectionsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/ErrorCodes.ts" />
/// <reference path="../ServerApi/requests/CheckConnectionRequest.ts" />
/// <reference path="../ServerApi/requests/UpdateConnectionsRequest.ts" />
/// <reference path="ContentActionNotification.ts" />
var VizPortal;
(function (VizPortal) {
    // A sentinel credential id to mean "Add new OAuth credential"
    var AddNewOAuthCredentialOptionId = "__ADD_NEW_OAUTH_CREDENTIAL";
    VizPortal.PasswordUnchanged = null;
    var CredentialOptions = {
        none: 'none',
        oauth: 'oauth',
        password: 'password' // for Salesforce
    };
    var MixedCredentialOptions = 'mixed';
    var DialogReserveHeight = 450;
    var EditConnectionAction = (function () {
        function EditConnectionAction(ConfirmActionDialog, $translate, ContentActionNotification, ModalService, DataConnections, OAuthCredentials, AddOAuthCredentialAction) {
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.$translate = $translate;
            this.ContentActionNotification = ContentActionNotification;
            this.ModalService = ModalService;
            this.DataConnections = DataConnections;
            this.OAuthCredentials = OAuthCredentials;
            this.AddOAuthCredentialAction = AddOAuthCredentialAction;
        }
        EditConnectionAction.prototype.confirmEditConnections = function (dataSources, context) {
            var datasourceArray = dataSources.toArray();
            if (!this.haveSameConnectionType(datasourceArray)) {
                return this.ModalService.alert({
                    titleId: 'editDataConnections_mixedConnectionTypesTitle',
                    messageId: 'editDataConnections_mixedConnectionTypesMessage'
                }).result;
            }
            if (!this.areEditable(datasourceArray)) {
                return this.ModalService.alert({
                    titleId: 'editDataConnections_nonEditableTitle',
                    messageId: 'editDataConnections_nonEditableMessage'
                }).result;
            }
            if (dataSources.first().connectionOAuth) {
                return this.confirmEditOAuthConnections(dataSources, context);
            }
            else {
                return this.confirmEditDatabaseConnections(dataSources, context);
            }
        };
        EditConnectionAction.prototype.haveSameConnectionType = function (datasources) {
            var uniqueConnectionTypes = _.uniq(_.map(datasources, function (ds) { return ds.connectionType; }));
            return uniqueConnectionTypes.length === 1;
        };
        EditConnectionAction.prototype.areEditable = function (datasources) {
            return _.all(datasources, function (ds) { return ds.connectionTypeEditable; });
        };
        EditConnectionAction.prototype.confirmEditDatabaseConnections = function (dataSources, context) {
            var _this = this;
            var datasource = dataSources.first();
            var datasourceArray = dataSources.toArray();
            var dialogScope = context.scope.$new();
            dialogScope.prompt = this.makePrompt(dataSources);
            dialogScope.editModel = {
                serverName: this.uniqueValueOrMixed(datasourceArray, function (ds) { return ds.connectionDetails.serverName; }),
                serverPort: this.uniqueValueOrMixed(datasourceArray, function (ds) { return ds.connectionDetails.serverPort; }),
                username: this.uniqueValueOrMixed(datasourceArray, function (ds) { return ds.connectionDetails.databaseUsername; }),
                password: {
                    isEmbedded: this.uniqueValueOrUndefined(datasourceArray, function (ds) { return ds.connectionDetails.hasEmbeddedPassword; }),
                    newPassword: VizPortal.PasswordUnchanged
                }
            };
            dialogScope.showTestConnection = dataSources.size() === 1;
            dialogScope.testConnection = function () {
                dialogScope.testConnectionResult = _this.checkEditedConnection(datasource.id, dialogScope.editModel);
            };
            return this.ConfirmActionDialog.open({
                scope: dialogScope,
                title: this.$translate.instant('editConnection'),
                bodyTemplateUrl: "editConnectionDialog.html",
                position: { reserveHeight: DialogReserveHeight },
                actionName: this.$translate.instant('save'),
                action: function (dialogInstance) {
                    return _this.applyConnectionEdits(dataSources, dialogScope.editModel);
                }
            }).result.fin(function () { return dialogScope.$destroy(); });
        };
        EditConnectionAction.prototype.makePrompt = function (datasources) {
            return this.$translate.instant('editDataConnections_prompt', {
                ITEM_COUNT: datasources.size(),
                ITEM_NAME: VizPortal.L10n.elideIfLong(datasources.first().name)
            }, VizPortal.L10n.Interpolations.Count);
        };
        EditConnectionAction.prototype.configureEditOAuthScope = function (scope, dataSources) {
            var _this = this;
            var connectionType = dataSources.first().connectionType;
            scope.allowOAuthWithPassword = connectionType === EditConnectionAction.SalesforceConnectionType;
            // Prompts
            scope.promptEmbedCredential = this.$translate.instant('editDataConnections_' + connectionType + '_embedCredential');
            scope.promptNoCredential = this.$translate.instant('editDataConnections_' + connectionType + '_noCredential');
            scope.describeEmbedCredential = this.$translate.instant('editDataConnections_' + connectionType + '_describeEmbedCredential');
            scope.describeNoCredential = this.$translate.instant('editDataConnections_' + connectionType + '_describeNoCredential');
            scope.connectionTypeDisplayName = dataSources.first().connectionTypeDisplayName;
            scope.oauthEditModel = this.createOAuthEditModel(dataSources);
            var refreshCredentials = function () {
                return VizPortal.SliceableHelper.fetchAll(_this.OAuthCredentials.all().addFilter(VizPortal.Filter.fieldEq("type", connectionType)))
                    .then(function (credentialsListResult) {
                    scope.credentials = credentialsListResult.items;
                    return credentialsListResult; // For chaining
                });
            };
            refreshCredentials();
            if (this.OAuthCredentials.canAddForConnectionType(connectionType)) {
                scope.addNewOAuthCredentialOptionValue = AddNewOAuthCredentialOptionId;
            }
            scope.$watch(function () { return scope.oauthEditModel.credentialId; }, function (credentialId) {
                if (credentialId === AddNewOAuthCredentialOptionId) {
                    scope.oauthEditModel.credentialId = undefined;
                    _this.AddOAuthCredentialAction.attemptAuth(connectionType).then(function (credentialId) {
                        refreshCredentials().then(function (credentialsListResult) {
                            // Set the credentialId if it exists in the list
                            if (_.find(credentialsListResult.items, function (credential) { return credential.id === credentialId; })) {
                                scope.oauthEditModel.credentialId = credentialId;
                            }
                        });
                    });
                }
            });
            scope.showTestConnection = dataSources.size() === 1;
            scope.testConnection = function () {
                scope.testConnectionResult =
                    scope.oauthEditModel.credentialOption === CredentialOptions.password
                        ? _this.checkEditedConnection(dataSources.first().id, scope.oauthEditModel.usernamePassword)
                        : _this.checkOAuthConnection(scope.oauthEditModel.credentialId);
            };
            scope.testConnectionDisabled = function () {
                return scope.testConnectionResult && scope.testConnectionResult.isPending
                    || scope.oauthEditModel.credentialOption === MixedCredentialOptions
                    || (scope.oauthEditModel.credentialOption === CredentialOptions.password && !scope.oauthEditModel.usernamePassword.username)
                    || (scope.oauthEditModel.credentialOption === CredentialOptions.oauth && !scope.oauthEditModel.credentialId)
                    || (scope.oauthEditModel.credentialOption === CredentialOptions.none);
            };
        };
        EditConnectionAction.prototype.confirmEditOAuthConnections = function (dataSources, context) {
            var _this = this;
            var dialogScope = context.scope.$new();
            this.configureEditOAuthScope(dialogScope, dataSources);
            dialogScope.prompt = this.makePrompt(dataSources);
            dialogScope.withAuthenticationSubHeader = true;
            return this.ConfirmActionDialog.open({
                scope: dialogScope,
                title: this.$translate.instant('editConnection'),
                size: VizPortal.ModalSize.medium,
                bodyTemplateUrl: dialogScope.allowOAuthWithPassword ? "editSalesforceConnectionDialog.html" : "editOAuthConnectionDialog.html",
                position: { reserveHeight: DialogReserveHeight },
                actionName: this.$translate.instant('save'),
                action: function (dialogInstance) {
                    return _this.updateOAuthConnections(dataSources, dialogScope.oauthEditModel);
                }
            }).result.fin(function () { return dialogScope.$destroy(); });
        };
        EditConnectionAction.prototype.createOAuthEditModel = function (datasources) {
            var editModel = {
                credentialOption: MixedCredentialOptions,
                credentialId: undefined,
                credentialNoValueOptionText: undefined,
                usernamePassword: {
                    username: '',
                    password: { isEmbedded: false, newPassword: '' }
                }
            };
            this.OAuthCredentials.commonCredentialForDatasources(datasources.keys())
                .then(function (result) {
                var numAuthenticationTypes = 0;
                if (result.hasEmbeddedPassword)
                    numAuthenticationTypes++;
                if (result.hasManagedKeychain)
                    numAuthenticationTypes++;
                if (result.hasOAuthCredential)
                    numAuthenticationTypes++;
                if (result.hasNone)
                    numAuthenticationTypes++;
                // If all connections have the same authentication type then select the proper option and fill in common details
                if (numAuthenticationTypes === 1) {
                    if (result.hasEmbeddedPassword) {
                        editModel.credentialOption = CredentialOptions.password;
                        editModel.usernamePassword = {
                            username: result.commonUsername,
                            password: { isEmbedded: true, newPassword: VizPortal.PasswordUnchanged }
                        };
                    }
                    else if (result.hasManagedKeychain || result.hasOAuthCredential) {
                        editModel.credentialOption = CredentialOptions.oauth;
                        if (result.oauthCredentialId) {
                            editModel.credentialId = result.oauthCredentialId;
                        }
                        else {
                            // This user can see the credential but does not own it.  This displays it as an option with no value
                            editModel.credentialNoValueOptionText = result.commonUsername;
                        }
                    }
                    else if (result.hasNone) {
                        editModel.credentialOption = CredentialOptions.none;
                    }
                }
            });
            return editModel;
        };
        EditConnectionAction.prototype.updateOAuthConnections = function (dataSources, editModel) {
            var _this = this;
            var updateRequest;
            switch (editModel.credentialOption) {
                case CredentialOptions.password:
                    updateRequest = this.updateConnections(dataSources, editModel.usernamePassword);
                    break;
                case CredentialOptions.oauth:
                    updateRequest = this.DataConnections.updateConnectionsOAuth(dataSources.keys(), editModel.credentialId);
                    break;
                case CredentialOptions.none:
                    updateRequest = this.DataConnections.updateConnectionsOAuth(dataSources.keys());
                    break;
                default:
                    throw "Unexpected credential option: " + editModel.credentialOption;
            }
            return updateRequest.then(function (result) {
                _this.notifyResult(result, dataSources);
                return result;
            });
        };
        EditConnectionAction.prototype.uniqueValueOrMixed = function (items, iterator) {
            var values = _.map(items, iterator);
            var first = values[0];
            return _.all(values, function (val) { return val === first; }) ? first : VizPortal.TextBoxMixedValues;
        };
        EditConnectionAction.prototype.uniqueValueOrUndefined = function (items, iterator) {
            var values = _.map(items, iterator);
            var first = values[0];
            return _.all(values, function (val) { return val === first; }) ? first : undefined;
        };
        EditConnectionAction.prototype.applyConnectionEdits = function (datasources, editModel) {
            var _this = this;
            return this.updateConnections(datasources, editModel)
                .then(function (result) {
                _this.notifyResult(result, datasources);
                return result;
            });
        };
        EditConnectionAction.prototype.updateConnections = function (datasources, editModel) {
            return this.DataConnections.updateConnections(datasources.keys(), this.editModelToConnectionUpdate(editModel));
        };
        EditConnectionAction.prototype.editModelToConnectionUpdate = function (editModel) {
            return {
                server: editModel.serverName === VizPortal.TextBoxMixedValues ? undefined : editModel.serverName,
                port: editModel.serverPort === VizPortal.TextBoxMixedValues ? undefined : editModel.serverPort,
                username: editModel.username === VizPortal.TextBoxMixedValues ? undefined : editModel.username,
                passwordUpdate: _.isUndefined(editModel.password.isEmbedded) ? undefined : editModel.password
            };
        };
        EditConnectionAction.prototype.notifyResult = function (result, datasources) {
            // Edit connection does not have partial success - it is all-or-nothing
            // So, if any errors are reported, notify complete failure (with the first error message)
            if (result && result.errors && result.errors.length) {
                this.ContentActionNotification.notifyFailure(this.errorMessage(result.errors[0]));
            }
            else {
                this.ContentActionNotification.notifySuccess(this.$translate.instant('updateConnectionsSuccess', {
                    ITEM_COUNT: datasources.size(),
                    ITEM_NAME: VizPortal.L10n.elideIfLong(datasources.first().name)
                }, VizPortal.L10n.Interpolations.Count));
            }
        };
        EditConnectionAction.prototype.errorMessage = function (error) {
            switch (error.code) {
                case VizPortal.CommonErrorCode.DatasourceNotFound:
                case VizPortal.CommonErrorCode.DataConnectionNotFound:
                    return this.$translate.instant('updateConnectionsError_datasourceNotFound');
                case VizPortal.CommonErrorCode.CallingUserInsufficientPermissions:
                    return this.$translate.instant('updateConnectionsError_insufficientPermissions');
                case VizPortal.DataConnectionErrorCode.UpdateConnectionsInvalidPort:
                    return this.$translate.instant('updateConnectionsError_invalidPort');
                default:
                    return this.$translate.instant('errorUnknown');
            }
        };
        EditConnectionAction.prototype.checkEditedConnection = function (datasourceId, editModel) {
            var _this = this;
            var testConnectionResult = { isPending: true };
            this.DataConnections.checkConnection(datasourceId, this.editModelToConnectionUpdate(editModel)).then(function (result) { return _this.updateTestConnectionResult(testConnectionResult, result); });
            return testConnectionResult;
        };
        EditConnectionAction.prototype.checkExistingConnection = function (datasourceId) {
            var _this = this;
            var testConnectionResult = { isPending: true };
            this.DataConnections.checkExistingConnection(datasourceId).then(function (result) { return _this.updateTestConnectionResult(testConnectionResult, result); });
            return testConnectionResult;
        };
        EditConnectionAction.prototype.updateTestConnectionResult = function (testConnectionResult, serverResponse) {
            testConnectionResult.isPending = false;
            testConnectionResult.succeeded = serverResponse.succeeded;
            testConnectionResult.messages = serverResponse.messages;
        };
        EditConnectionAction.prototype.checkOAuthConnection = function (oauthCredentialId) {
            var testConnectionResult = { isPending: true };
            var handleTestResult = function (success) {
                testConnectionResult.succeeded = success;
                testConnectionResult.isPending = false;
            };
            this.OAuthCredentials.test(oauthCredentialId).then(handleTestResult, function () { return handleTestResult(false); });
            return testConnectionResult;
        };
        EditConnectionAction.SalesforceConnectionType = 'salesforce'; // Maybe move to ServerApi
        EditConnectionAction.$inject = [
            'ConfirmActionDialog',
            '$translate',
            'ContentActionNotification',
            'ModalService',
            'DataConnections',
            'OAuthCredentials',
            'AddOAuthCredentialAction'
        ];
        return EditConnectionAction;
    })();
    VizPortal.EditConnectionAction = EditConnectionAction;
    VizPortal.Module.instance().service('EditConnectionAction', EditConnectionAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ColumnWidths = (function () {
        function ColumnWidths() {
            this.resizer = new ColumnWidthsResizer(this);
            this.actualWidths = [];
        }
        ColumnWidths.prototype.getTotal = function () {
            return this.totalActualWidth || null;
        };
        ColumnWidths.prototype.updateTotal = function () {
            this.totalActualWidth = _.reduce(this.actualWidths, function (total, width) { return total + width; }, 0);
        };
        ColumnWidths.prototype.getActual = function (index) {
            return this.actualWidths[index];
        };
        ColumnWidths.prototype.setActual = function (index, width) {
            this.actualWidths[index] = width;
        };
        ColumnWidths.prototype.resetActual = function () {
            this.actualWidths = [];
        };
        ColumnWidths.prototype.getMin = function (index) {
            return this.minWidths && this.minWidths[index];
        };
        ColumnWidths.prototype.setMinWidths = function (minWidths) {
            this.minWidths = minWidths;
            this.maybeExpand();
        };
        ColumnWidths.prototype.hasMinWidths = function () {
            return !!this.minWidths;
        };
        // Minimum overrides preferred.
        ColumnWidths.prototype.getPreferred = function (index) {
            var preferred = this.preferredWidths && this.preferredWidths[index];
            var min = this.getMin(index);
            return _.isNumber(preferred)
                ? (_.isNumber(min) ? Math.max(preferred, min) : preferred)
                : min;
        };
        // The given maximum overrides preferred.  Minimum overrides both.
        ColumnWidths.prototype.getPreferredWithMax = function (index, max) {
            var preferred = this.preferredWidths && this.preferredWidths[index];
            var min = this.getMin(index);
            if (_.isNumber(preferred)) {
                var maxPreferred = Math.min(preferred, max);
                return _.isNumber(min) ? Math.max(maxPreferred, min) : maxPreferred;
            }
            else {
                return min;
            }
        };
        ColumnWidths.prototype.setPreferredWidths = function (preferredWidths, containerWidth) {
            this.preferredWidths = preferredWidths;
            this.containerWidth = containerWidth;
            this.maybeExpand();
        };
        ColumnWidths.prototype.hasPreferredWidths = function () {
            return !!this.preferredWidths;
        };
        ColumnWidths.prototype.setContainerWidth = function (containerWidth) {
            this.containerWidth = containerWidth;
            this.maybeExpand();
        };
        ColumnWidths.prototype.hasContainerWidth = function () {
            return !!this.containerWidth;
        };
        ColumnWidths.prototype.maybeExpand = function () {
            if (this.hasMinWidths() && this.hasPreferredWidths() && this.hasContainerWidth()) {
                this.expandToFill(this.containerWidth);
            }
        };
        ColumnWidths.prototype.expandToFill = function (availableWidth) {
            var _this = this;
            // First, set the widths to the preferred, subject to the minimum widths and maximum starting width.
            var numColumns = Math.max(this.minWidths && this.minWidths.length || 0, this.preferredWidths && this.preferredWidths.length || 0);
            var totalWidth = 0;
            _.times(numColumns, function (index) {
                var width = _this.getPreferredWithMax(index, ColumnWidths.MaxStartWidth);
                _this.setActual(index, width);
                totalWidth += width;
            });
            // Then, distribute any extra width in left-to-right order.
            var extraWidth = availableWidth - totalWidth;
            if (extraWidth > 0) {
                _.each(this.actualWidths, function (actualWidth, index) {
                    var preferredWidth = _this.getPreferred(index);
                    if (extraWidth > 0 && actualWidth < preferredWidth) {
                        var usedWidth = Math.min(preferredWidth - actualWidth, extraWidth);
                        _this.setActual(index, actualWidth + usedWidth);
                        extraWidth -= usedWidth;
                    }
                });
            }
            this.updateTotal();
        };
        ColumnWidths.MaxStartWidth = 200;
        return ColumnWidths;
    })();
    VizPortal.ColumnWidths = ColumnWidths;
    var ColumnWidthsResizer = (function () {
        function ColumnWidthsResizer(widths) {
            this.widths = widths;
        }
        ColumnWidthsResizer.prototype.startResize = function (index, x) {
            this.index = index;
            this.startX = x;
            this.startWidth = this.widths.getActual(index) || 0;
            this.minWidth = this.widths.getMin(index) || 0;
        };
        ColumnWidthsResizer.prototype.continueResize = function (x) {
            var dx = x - this.startX;
            // Ensure column width stays greater than its minimum width.
            if (this.startWidth + dx < this.minWidth) {
                dx = this.minWidth - this.startWidth;
            }
            this.widths.setActual(this.index, this.startWidth + dx);
            this.widths.updateTotal();
        };
        return ColumnWidthsResizer;
    })();
    VizPortal.ColumnWidthsResizer = ColumnWidthsResizer;
})(VizPortal || (VizPortal = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../ts/FeatureFlags.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var CommonStyles;
    (function (CommonStyles) {
        var Colors;
        (function (Colors) {
            Colors.White = "rgb(255,255,255)";
            Colors.Black = "rgb(0,0,0)";
            Colors.Grey40 = "rgb(40,40,40)";
            Colors.Grey68 = "rgb(68,68,68)";
            Colors.Grey89 = "rgb(89,89,89)";
            Colors.Grey102 = "rgb(102,102,102)";
            Colors.Grey136 = "rgb(136,136,136)";
            Colors.Grey153 = "rgb(153,153,153)";
            Colors.Grey178 = "rgb(178,178,178)";
            Colors.Grey218 = "rgb(218,218,218)";
            Colors.Grey224 = "rgb(224,224,224)";
            Colors.Grey230 = "rgb(230,230,230)";
            Colors.Grey245 = "rgb(245,245,245)";
            Colors.Grey250 = "rgb(250,250,250)";
            Colors.BlueHighlight = "rgb(212,225,237)";
            Colors.BorderColor = Colors.Grey178;
            Colors.GreyTextColor = Colors.Grey153;
            Colors.NormalTextColor = Colors.Grey102;
            Colors.DisabledTextColor = Colors.Grey218;
            Colors.ActionOrange = "rgb(235,143,80)";
            Colors.ActionOrangeDark = "rgb(209,107,54)";
        })(Colors = CommonStyles.Colors || (CommonStyles.Colors = {}));
        var Sizes;
        (function (Sizes) {
            Sizes.MinSupportedAppWidth = 1000;
            Sizes.TextBoxPadding = 4;
            Sizes.TextBoxBorderSize = 1;
            Sizes.LineWidth = 1;
            Sizes.SmallSpace = 3;
            Sizes.DefaultSpace = 6;
            Sizes.LineHeight = 16;
            Sizes.LargeSpace = 18;
            Sizes.RowHeight = 23;
            Sizes.XLargeSpace = 35;
            Sizes.SmallFontSize = 11;
            Sizes.NormalFontSize = 12;
            Sizes.HeaderFontSize = VizPortal.FeatureFlags.useUpdatedFontStyles ? 13 : 12;
            Sizes.SmallIconSize = 17;
            Sizes.NormalIconSize = 19;
            Sizes.DataGridHeaderHeight = VizPortal.FeatureFlags.useTallerRowHeight ? 37 : Sizes.XLargeSpace;
            Sizes.DropdownOffset = 3; // Dropdown menus appear detached below their buttons by this many pixels
        })(Sizes = CommonStyles.Sizes || (CommonStyles.Sizes = {}));
        var Fonts;
        (function (Fonts) {
            Fonts.BodyFont = VizPortal.FeatureFlags.useUpdatedFontStyles
                ? "BentonSans-Book, Verdana, Geneva, sans-serif"
                : "Verdana, Geneva, sans-serif";
            Fonts.HeaderFont = VizPortal.FeatureFlags.useUpdatedFontStyles
                ? "BentonSans-Book, Arial, Verdana, Geneva, sans-serif"
                : "Arial, Verdana, Geneva, sans-serif";
        })(Fonts = CommonStyles.Fonts || (CommonStyles.Fonts = {}));
        var IconUrls;
        (function (IconUrls) {
            IconUrls.Workbook = 'img/workbook_content_type_small.png';
            IconUrls.View = 'img/view_content_type_small.png';
        })(IconUrls = CommonStyles.IconUrls || (CommonStyles.IconUrls = {}));
        var Helpers;
        (function (Helpers) {
            function Edges(distanceToEdge) {
                return {
                    position: 'absolute',
                    left: distanceToEdge,
                    right: distanceToEdge,
                    top: distanceToEdge,
                    bottom: distanceToEdge
                };
            }
            Helpers.Edges = Edges;
        })(Helpers = CommonStyles.Helpers || (CommonStyles.Helpers = {}));
    })(CommonStyles = VizPortalReact.CommonStyles || (VizPortalReact.CommonStyles = {}));
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../libs.ts" />
/// <reference path="../FeatureFlags.ts" />
/// <reference path="ColumnWidths.ts" />
/// <reference path="ListLayout.ts" />
/// <reference path="../../common/react/CommonStyles.ts" />
var VizPortal;
(function (VizPortal) {
    var PermissionsPanelLayoutValues;
    (function (PermissionsPanelLayoutValues) {
        // Keep this column width in sync with $permissionsGridCellWidth in permissions.styl,
        // as well as capabilityColumnWidth in permissionsCellTemplates.jade
        PermissionsPanelLayoutValues.CapabilityColumnWidth = 30;
        PermissionsPanelLayoutValues.MinDialogWidth = 703; // the header of the permissions dialog requires at least this much space.
        PermissionsPanelLayoutValues.MinColumnWidthsByField = {
            granteeName: 200,
            permissionRole: 64
        };
        PermissionsPanelLayoutValues.DefaultColumnWidthsByField = {
            granteeName: 200,
            // Wide enough to fit the section header lock text in all languages
            permissionRole: 180
        };
        var ProjectColumnIndices = {
            granteeName: [0],
            permissionRole: [2, 5, 10]
        };
        var NonProjectColumnIndices = {
            granteeName: [0],
            permissionRole: [2]
        };
        PermissionsPanelLayoutValues.ColumnIndicesByContentType = {
            project: ProjectColumnIndices,
            workbook: NonProjectColumnIndices,
            datasource: NonProjectColumnIndices,
            view: NonProjectColumnIndices
        };
    })(PermissionsPanelLayoutValues || (PermissionsPanelLayoutValues = {}));
    function getPermissionsPanelColumnWidths(contentType) {
        if (VizPortal.FeatureFlags.projectPermissionsTemplatesEnabled) {
            return new PermissionsPanelColumnWidthsImpl(contentType, PermissionsPanelLayoutValues.MinColumnWidthsByField, PermissionsPanelLayoutValues.DefaultColumnWidthsByField, PermissionsPanelLayoutValues.ColumnIndicesByContentType, PermissionsPanelLayoutValues.CapabilityColumnWidth, PermissionsPanelLayoutValues.MinDialogWidth);
        }
        else {
            return new PermissionsPanelColumnWidthsDeprecated(contentType);
        }
    }
    VizPortal.getPermissionsPanelColumnWidths = getPermissionsPanelColumnWidths;
    var PermissionsPanelColumnWidthsImpl = (function (_super) {
        __extends(PermissionsPanelColumnWidthsImpl, _super);
        function PermissionsPanelColumnWidthsImpl(contentType, MinColumnWidthsByField, DefaultColumnWidthsByField, ColumnIndicesByContentType, CapabilityColumnWidth, MinDialogWidth) {
            _super.call(this);
            this.contentType = contentType;
            this.MinColumnWidthsByField = MinColumnWidthsByField;
            this.DefaultColumnWidthsByField = DefaultColumnWidthsByField;
            this.ColumnIndicesByContentType = ColumnIndicesByContentType;
            this.CapabilityColumnWidth = CapabilityColumnWidth;
            this.MinDialogWidth = MinDialogWidth;
            var minWidths = this.orderedWidthsFromFieldNames(this.MinColumnWidthsByField);
            this.setMinWidths(minWidths);
        }
        PermissionsPanelColumnWidthsImpl.prototype.orderedWidthsFromFieldNames = function (widthsByField) {
            var widths = [];
            var columnIndices = this.ColumnIndicesByContentType[this.contentType];
            _.each(widthsByField, function (width, fieldName) {
                _.each(columnIndices[fieldName], function (index) {
                    widths[index] = width;
                });
            });
            return widths;
        };
        /**
         * Sets the preferred widths for each field type to the maximum of the measured widths for that
         * field and its default width (overrides superclass method)
         */
        PermissionsPanelColumnWidthsImpl.prototype.setPreferredWidths = function (measuredWidths, containerWidth) {
            var preferredColumnWidths = this.getPreferredColumnWidths(measuredWidths);
            _super.prototype.setPreferredWidths.call(this, preferredColumnWidths, containerWidth);
        };
        PermissionsPanelColumnWidthsImpl.prototype.getPreferredColumnWidths = function (measuredWidths) {
            var _this = this;
            var preferredWidthsByField = {};
            var columnIndicesByField = this.ColumnIndicesByContentType[this.contentType];
            _.each(columnIndicesByField, function (indices, fieldName) {
                var measuredWidthValues = _.map(indices, function (index) { return measuredWidths[index]; });
                var preferredWidth = _.max(measuredWidthValues.concat(_this.DefaultColumnWidthsByField[fieldName]));
                preferredWidthsByField[fieldName] = preferredWidth;
            });
            return this.orderedWidthsFromFieldNames(preferredWidthsByField);
        };
        PermissionsPanelColumnWidthsImpl.prototype.getPermissionsDialogWidth = function (viewportWidth) {
            var widthsByContentType = this.calculatePermissionsDialogWidths();
            var padding = 2 * VizPortalReact.CommonStyles.Sizes.LargeSpace;
            var effectiveViewportWidth = Math.max(viewportWidth, VizPortalReact.CommonStyles.Sizes.MinSupportedAppWidth) - padding;
            return Math.min(Math.max(widthsByContentType[this.contentType], this.MinDialogWidth), effectiveViewportWidth);
        };
        PermissionsPanelColumnWidthsImpl.prototype.calculatePermissionsDialogWidths = function () {
            var capabilitySectionSpacing = 15;
            var scrollBarWidth = 20;
            var fixedColumnsTotalWidth = sum(this.DefaultColumnWidthsByField) + scrollBarWidth;
            return {
                // The project permissions size equals the workbook permissions (the largest section), plus two extra role columns
                project: (14 * this.CapabilityColumnWidth) + (3 * capabilitySectionSpacing) + fixedColumnsTotalWidth +
                    (2 * this.DefaultColumnWidthsByField['permissionRole']),
                workbook: (14 * this.CapabilityColumnWidth) + (3 * capabilitySectionSpacing) + fixedColumnsTotalWidth,
                view: (11 * this.CapabilityColumnWidth) + (3 * capabilitySectionSpacing) + fixedColumnsTotalWidth,
                datasource: (6 * this.CapabilityColumnWidth) + (2 * capabilitySectionSpacing) + fixedColumnsTotalWidth
            };
        };
        return PermissionsPanelColumnWidthsImpl;
    })(VizPortal.ColumnWidths);
    VizPortal.PermissionsPanelColumnWidthsImpl = PermissionsPanelColumnWidthsImpl;
    /**
     * This implementation is for when the feature flag is off. Since it's deprecated, there were/are
     * no unit tests, so it's okay to hardcode the logic inside the class definition.
     */
    var PermissionsPanelColumnWidthsDeprecated = (function (_super) {
        __extends(PermissionsPanelColumnWidthsDeprecated, _super);
        function PermissionsPanelColumnWidthsDeprecated(contentType) {
            _super.call(this);
            this.contentType = contentType;
            this.CapabilityColumnWidth = 28;
            this.MinDialogWidth = 703; // the header of the permissions dialog requires at least this much space.
            this.MinColumnWidths = {
                granteeName: 234,
                permissionRole: 100,
                editRuleButton: this.CapabilityColumnWidth,
                deleteRuleButton: this.CapabilityColumnWidth
            };
            this.setMinWidths(this.getMinColumnWidths());
        }
        PermissionsPanelColumnWidthsDeprecated.prototype.getMinColumnWidths = function () {
            return [
                this.MinColumnWidths.granteeName,
                this.MinColumnWidths.permissionRole,
                this.MinColumnWidths.editRuleButton,
                this.MinColumnWidths.deleteRuleButton
            ];
        };
        PermissionsPanelColumnWidthsDeprecated.prototype.getPermissionsDialogWidth = function (viewportWidth) {
            var widthsByContentType = this.calculatePermissionsDialogWidths();
            return widthsByContentType[this.contentType];
        };
        PermissionsPanelColumnWidthsDeprecated.prototype.calculatePermissionsDialogWidths = function () {
            var capabilitySectionSpacing = 15;
            var scrollBarWidth = 20;
            var fixedColumnsTotalWidth = sum(this.MinColumnWidths) + scrollBarWidth;
            return {
                project: Math.max((16 * this.CapabilityColumnWidth) + (3 * capabilitySectionSpacing) + fixedColumnsTotalWidth, this.MinDialogWidth),
                workbook: Math.max((14 * this.CapabilityColumnWidth) + (3 * capabilitySectionSpacing) + fixedColumnsTotalWidth, this.MinDialogWidth),
                view: Math.max((11 * this.CapabilityColumnWidth) + (3 * capabilitySectionSpacing) + fixedColumnsTotalWidth, this.MinDialogWidth),
                datasource: Math.max((6 * this.CapabilityColumnWidth) + (2 * capabilitySectionSpacing) + fixedColumnsTotalWidth, this.MinDialogWidth)
            };
        };
        return PermissionsPanelColumnWidthsDeprecated;
    })(VizPortal.ColumnWidths);
    function sum(values) {
        return _.reduce(values, function (memo, num) { return memo + num; });
    }
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var DateHelpers;
    (function (DateHelpers) {
        function fromISOString(dateString) {
            if (dateString) {
                // ISO 8601 date-time format. both Z and +/-00:00 formats, though the latter is ignored
                var matches = /(\d\d\d\d)-(\d\d)-(\d\d)T(\d\d):(\d\d):(\d\d)(?:(?:\.|,)(\d\d\d))?((Z)|([+-]\d\d(:?\d\d)?))?/.exec(dateString);
                var year = parseInt(matches[1], 10);
                var month = parseInt(matches[2], 10) - 1;
                var day = parseInt(matches[3], 10);
                var hours = parseInt(matches[4], 10);
                var minutes = parseInt(matches[5], 10);
                var seconds = parseInt(matches[6], 10);
                var milliseconds = matches[7] ? parseInt(matches[7], 10) : null;
                return new Date(Date.UTC(year, month, day, hours, minutes, seconds, milliseconds));
            }
            else {
                return undefined;
            }
        }
        DateHelpers.fromISOString = fromISOString;
        // Serialize to ISO-8601 format
        // Implementation based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
        function toISOString(date) {
            if (!date) {
                return undefined;
            }
            function pad(number) {
                if (number < 10) {
                    return '0' + number;
                }
                return '' + number;
            }
            return date.getUTCFullYear() +
                '-' + pad(date.getUTCMonth() + 1) +
                '-' + pad(date.getUTCDate()) +
                'T' + pad(date.getUTCHours()) +
                ':' + pad(date.getUTCMinutes()) +
                ':' + pad(date.getUTCSeconds()) +
                '.' + (date.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) +
                'Z';
        }
        DateHelpers.toISOString = toISOString;
        function midnight(date) {
            return new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0, 0);
        }
        DateHelpers.midnight = midnight;
        function endOfDay(date) {
            return new Date(date.getFullYear(), date.getMonth(), date.getDate(), 23, 59, 59, 999);
        }
        DateHelpers.endOfDay = endOfDay;
    })(DateHelpers = VizPortal.DateHelpers || (VizPortal.DateHelpers = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/DateHelpers.ts" />
var VizPortal;
(function (VizPortal) {
    var MapperHelper;
    (function (MapperHelper) {
        function toNumber(value) {
            // Return numbers and null/undefined without conversion
            if (_.isNumber(value) || _.isNull(value) || _.isUndefined(value))
                return value;
            // Otherwise, attempt to parse the value
            return parseInt(value, 10);
        }
        MapperHelper.toNumber = toNumber;
        function toDate(value) {
            return VizPortal.DateHelpers.fromISOString(value);
        }
        MapperHelper.toDate = toDate;
        function arrayToMap(values) {
            return _.object(values, values);
        }
        MapperHelper.arrayToMap = arrayToMap;
        function sortTags(tags) {
            return _(tags).sortBy(function (tagName) { return tagName.toLowerCase(); });
        }
        MapperHelper.sortTags = sortTags;
    })(MapperHelper = VizPortal.MapperHelper || (VizPortal.MapperHelper = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../models/resourceInfoParts.ts" />
/// <reference path="../libs.ts" />
/// <reference path="MapperHelper.ts" />
/// <reference path="../models/IExtractTaskInfo.ts" />
var VizPortal;
(function (VizPortal) {
    var AlertListMapper;
    (function (AlertListMapper) {
        var M = VizPortal.MapperHelper;
        function map(total, alerts, workbooks, datasources) {
            return {
                total: total,
                alerts: _.map(alerts, function (alert) {
                    return {
                        id: alert.id,
                        statusCode: M.toNumber(alert.statusCode),
                        taskId: alert.taskId,
                        mostRecentFailureAt: M.toDate(alert.mostRecentFailureAt),
                        lastSuccessAt: M.toDate(alert.lastSuccessAt),
                        workbooks: _.map(alert.affectedWorkbookIds, function (id) { return workbooks[id]; }),
                        datasource: datasources[alert.datasourceId],
                        alertType: alert.alertType,
                        suspended: alert.suspended,
                        consecutiveFailureCount: alert.consecutiveFailureCount
                    };
                })
            };
        }
        AlertListMapper.map = map;
    })(AlertListMapper = VizPortal.AlertListMapper || (VizPortal.AlertListMapper = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../models/resourceInfoParts.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="resourceParts.ts" />
/// <reference path="../libs.ts" />
/// <reference path="MapperHelper.ts" />
/// <reference path="../models/ICommentInfo.ts" />
/// <reference path="../ServerApi/types/IComment.ts" />
var VizPortal;
(function (VizPortal) {
    var CommentMapper;
    (function (CommentMapper) {
        var M = VizPortal.MapperHelper;
        function map(comments, users) {
            return _.map(comments, function (comment) {
                return {
                    id: comment.id,
                    text: comment.text,
                    owner: users[comment.ownerId],
                    createdAt: M.toDate(comment.createdAt),
                    updatedAt: M.toDate(comment.updatedAt)
                };
            });
        }
        CommentMapper.map = map;
    })(CommentMapper = VizPortal.CommentMapper || (VizPortal.CommentMapper = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="MapperHelper.ts" />
var VizPortal;
(function (VizPortal) {
    var DatasourceMapper;
    (function (DatasourceMapper) {
        var M = VizPortal.MapperHelper;
        function map(serverApiDatasources, users, projects, workbooks, favoriteDatasources) {
            if (projects === void 0) { projects = {}; }
            if (workbooks === void 0) { workbooks = {}; }
            if (favoriteDatasources === void 0) { favoriteDatasources = {}; }
            return _.map(serverApiDatasources, function (ds) {
                return {
                    downloadUrl: ds.downloadUrl,
                    favorite: !!favoriteDatasources[ds.id],
                    hasExtracts: ds.hasExtracts,
                    hasAlert: ds.hasAlert,
                    hasIncrementalExtract: ds.hasIncrementalExtract,
                    lastRefreshedAt: M.toDate(ds.lastRefreshedAt),
                    id: ds.id,
                    name: ds.name,
                    owner: users[ds.ownerId],
                    project: projects[ds.projectId],
                    updatedAt: M.toDate(ds.updatedAt),
                    tags: M.sortTags(ds.tags),
                    refreshMode: ds.refreshMode,
                    remoteAgentName: ds.remoteAgentName,
                    remoteRunNextAt: ds.remoteRunNextAt,
                    connectionType: ds.connectionType,
                    connectionTypeDisplayName: ds.connectionTypeDisplayName,
                    connectionDetails: mapConnectionDetails(ds.connectionDetails),
                    connectionTypeEditable: ds.connectionTypeEditable,
                    connectionOAuth: ds.connectionOAuth,
                    workbook: workbooks[ds.workbookId]
                };
            });
        }
        DatasourceMapper.map = map;
        function mapDetail(ds) {
            var owner = VizPortal.UserMapper.mapOne(ds.owner);
            var project = VizPortal.ProjectMapper.mapName(ds.project);
            var dsInfo = {
                createdAt: M.toDate(ds.createdAt),
                description: ds.description,
                downloadUrl: ds.downloadUrl,
                favorite: ds.favorite,
                hasExtracts: ds.hasExtracts,
                hasAlert: ds.hasAlert,
                hasIncrementalExtract: ds.hasIncrementalExtract,
                lastRefreshedAt: M.toDate(ds.lastRefreshedAt),
                id: ds.id,
                name: ds.name,
                tags: M.sortTags(ds.tags),
                updatedAt: M.toDate(ds.updatedAt),
                newWorkbookUrl: ds.newWorkbookUrl,
                refreshMode: ds.refreshMode,
                remoteAgentName: ds.remoteAgentName,
                remoteRunNextAt: ds.remoteRunNextAt,
                connectionType: ds.connectionType,
                connectionTypeDisplayName: ds.connectionTypeDisplayName,
                connectionDetails: mapConnectionDetails(ds.connectionDetails),
                connectionTypeEditable: ds.connectionTypeEditable,
                connectionOAuth: ds.connectionOAuth,
                owner: owner,
                project: project
            };
            if (ds.workbook)
                dsInfo.workbook = VizPortal.WorkbookMapper.mapOne(ds.workbook, owner, project);
            return dsInfo;
        }
        DatasourceMapper.mapDetail = mapDetail;
        var BASENAME_REGEXP = /[/\\]([^/\\]*)$/;
        var filePathToBasename = function (file) {
            var basenameMatch = file && file.match(BASENAME_REGEXP);
            return basenameMatch ? basenameMatch[1] : file;
        };
        function mapConnectionDetails(serverConnectionDetails) {
            var connectionDetails = _.clone(serverConnectionDetails);
            // BUGZID 148921: The server sends the full file path but client should only display the file base name
            if (connectionDetails.type === VizPortal.ServerApi.ConnectionDetailType.File) {
                var fileConnectionDetails = connectionDetails; //Used for type safety
                fileConnectionDetails.fileName = filePathToBasename(fileConnectionDetails.fileName);
            }
            return connectionDetails;
        }
    })(DatasourceMapper = VizPortal.DatasourceMapper || (VizPortal.DatasourceMapper = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="MapperHelper.ts" />
/// <reference path="../models/IExtractTaskInfo.ts" />
var VizPortal;
(function (VizPortal) {
    var ExtractTaskMapper;
    (function (ExtractTaskMapper) {
        var M = VizPortal.MapperHelper;
        function map(dcs, schedule, site, workbooks, datasources) {
            return _.map(dcs, function (et) {
                var targetWorkbook = et.targetType === VizPortal.ServerApi.ExtractTaskTargetType.Workbook ? workbooks[et.targetId] : undefined;
                var targetDatasource = et.targetType === VizPortal.ServerApi.ExtractTaskTargetType.Datasource ? datasources[et.targetId] : undefined;
                return {
                    id: et.id,
                    priority: et.priority,
                    type: et.type,
                    lastRunAt: M.toDate(et.lastRunAt),
                    runNextAt: M.toDate(et.runNextAt),
                    schedule: schedule[et.scheduleId],
                    site: site[et.siteId],
                    workbook: targetWorkbook,
                    datasource: targetDatasource
                };
            });
        }
        ExtractTaskMapper.map = map;
    })(ExtractTaskMapper = VizPortal.ExtractTaskMapper || (VizPortal.ExtractTaskMapper = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="MapperHelper.ts" />
var VizPortal;
(function (VizPortal) {
    var ProjectMapper;
    (function (ProjectMapper) {
        var M = VizPortal.MapperHelper;
        function map(serverApiProjects, users) {
            return _.map(serverApiProjects, function (p) { return mapOne(p, users[p.ownerId]); });
        }
        ProjectMapper.map = map;
        function mapOne(p, owner) {
            return {
                createdAt: M.toDate(p.createdAt),
                datasourceCount: M.toNumber(p.datasourceCount),
                description: p.description,
                id: p.id,
                name: p.name,
                owner: owner,
                viewCount: M.toNumber(p.viewCount),
                workbookCount: M.toNumber(p.workbookCount),
                controlledPermissionsEnabled: p.controlledPermissionsEnabled
            };
        }
        ProjectMapper.mapOne = mapOne;
        function mapDetail(p) {
            return {
                createdAt: M.toDate(p.createdAt),
                description: p.description,
                id: p.id,
                name: p.name,
                owner: VizPortal.UserMapper.mapOne(p.owner),
                controlledPermissionsEnabled: p.controlledPermissionsEnabled
            };
        }
        ProjectMapper.mapDetail = mapDetail;
        function mapName(p) {
            return {
                id: p.id,
                name: p.name
            };
        }
        ProjectMapper.mapName = mapName;
        function mapNames(serverApiProjects) {
            return _.map(serverApiProjects, mapName);
        }
        ProjectMapper.mapNames = mapNames;
    })(ProjectMapper = VizPortal.ProjectMapper || (VizPortal.ProjectMapper = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="MapperHelper.ts" />
var VizPortal;
(function (VizPortal) {
    var RemoteRefreshAgentMapper;
    (function (RemoteRefreshAgentMapper) {
        var M = VizPortal.MapperHelper;
        function mapToResource(agents) {
            return _.map(agents, function (agent) {
                var content = new VizPortal.Set(function (item) { return item.id; });
                content.addItems(agent.content);
                return {
                    id: agent.id,
                    name: agent.name,
                    ownerId: agent.ownerId,
                    content: content
                };
            });
        }
        RemoteRefreshAgentMapper.mapToResource = mapToResource;
    })(RemoteRefreshAgentMapper = VizPortal.RemoteRefreshAgentMapper || (VizPortal.RemoteRefreshAgentMapper = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../models/resourceInfoParts.ts" />
/// <reference path="../libs.ts" />
/// <reference path="../helpers/DateHelpers.ts" />
/// <reference path="../models/IRemoteRefreshScheduleInfo.ts" />
var VizPortal;
(function (VizPortal) {
    var RemoteRefreshScheduleMapper;
    (function (RemoteRefreshScheduleMapper) {
        var dateHelpers = VizPortal.DateHelpers;
        function mapToResource(schedules) {
            return _.map(schedules, function (schedule) {
                return {
                    definition: schedule.definition,
                    refreshType: schedule.refreshType,
                    runNextAt: schedule.runNextAt,
                    lastRunAt: schedule.lastRunAt
                };
            });
        }
        RemoteRefreshScheduleMapper.mapToResource = mapToResource;
        function mapToApi(schedules) {
            var _this = this;
            return _.map(schedules, function (schedule) {
                return _this.mapSingleToApi(schedule);
            });
        }
        RemoteRefreshScheduleMapper.mapToApi = mapToApi;
        function mapSingleToApi(schedule) {
            return {
                definition: schedule.definition,
                refreshType: schedule.refreshType
            };
        }
        RemoteRefreshScheduleMapper.mapSingleToApi = mapSingleToApi;
    })(RemoteRefreshScheduleMapper = VizPortal.RemoteRefreshScheduleMapper || (VizPortal.RemoteRefreshScheduleMapper = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../models/resourceInfoParts.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.SubscriptionTargetTypes = {
        view: 'view',
        workbook: 'workbook'
    };
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="MapperHelper.ts" />
/// <reference path="../models/ISubscriptionInfo.ts" />
var VizPortal;
(function (VizPortal) {
    var SubscriptionMapper;
    (function (SubscriptionMapper) {
        var M = VizPortal.MapperHelper;
        function map(subscriptions, schedules, sites, users) {
            return _.map(subscriptions, function (sub) {
                return {
                    id: sub.id,
                    subject: sub.subject,
                    targetId: sub.targetId,
                    targetName: sub.targetName,
                    targetType: sub.targetType.toLowerCase(),
                    targetPath: sub.targetPath,
                    lastSentAt: M.toDate(sub.lastSentAt),
                    runNextAt: M.toDate(sub.runNextAt),
                    schedule: schedules[sub.scheduleId],
                    site: sites[sub.siteId],
                    user: users[sub.userId]
                };
            });
        }
        SubscriptionMapper.map = map;
    })(SubscriptionMapper = VizPortal.SubscriptionMapper || (VizPortal.SubscriptionMapper = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var UserMapper;
    (function (UserMapper) {
        function map(serverApiUsers) {
            return _.map(serverApiUsers, mapOne);
        }
        UserMapper.map = map;
        function mapOne(u) {
            return {
                id: u.id,
                authId: u.authId,
                displayName: u.displayName,
                username: u.username,
                domainName: u.domainName,
                readOnly: u.readOnly
            };
        }
        UserMapper.mapOne = mapOne;
    })(UserMapper = VizPortal.UserMapper || (VizPortal.UserMapper = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="MapperHelper.ts" />
var VizPortal;
(function (VizPortal) {
    var ViewMapper;
    (function (ViewMapper) {
        var M = VizPortal.MapperHelper;
        function map(serverApiViews, workbooks, favoriteViews) {
            if (favoriteViews === void 0) { favoriteViews = {}; }
            return _.map(serverApiViews, function (v) {
                return {
                    favorite: !!favoriteViews[v.id],
                    id: v.id,
                    index: M.toNumber(v.index),
                    name: v.name,
                    path: v.path,
                    tags: M.sortTags(v.tags),
                    thumbnailUrl: v.thumbnailUrl,
                    updatedAt: M.toDate(v.updatedAt),
                    workbook: workbooks[v.workbookId],
                    hitsTotal: v.hitsTotal,
                    favoritesTotal: v.favoritesTotal
                };
            });
        }
        ViewMapper.map = map;
        function mapDetail(v) {
            return {
                createdAt: M.toDate(v.createdAt),
                favorite: v.favorite,
                id: v.id,
                index: M.toNumber(v.index),
                name: v.name,
                path: v.path,
                tags: M.sortTags(v.tags),
                thumbnailUrl: v.thumbnailUrl,
                updatedAt: M.toDate(v.updatedAt),
                editUrl: v.editUrl,
                workbook: VizPortal.WorkbookMapper.mapParent(v.workbook, VizPortal.UserMapper.mapOne(v.owner), VizPortal.ProjectMapper.mapName(v.project))
            };
        }
        ViewMapper.mapDetail = mapDetail;
    })(ViewMapper = VizPortal.ViewMapper || (VizPortal.ViewMapper = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="MapperHelper.ts" />
var VizPortal;
(function (VizPortal) {
    var WorkbookMapper;
    (function (WorkbookMapper) {
        var M = VizPortal.MapperHelper;
        function map(serverApiWorkbooks, users, projects, workbooksStatisticsMax, favoriteWorkbooks) {
            if (favoriteWorkbooks === void 0) { favoriteWorkbooks = {}; }
            return _.map(serverApiWorkbooks, function (w) {
                return mapOne(w, users[w.ownerId], projects[w.projectId], workbooksStatisticsMax, !!favoriteWorkbooks[w.id]);
            });
        }
        WorkbookMapper.map = map;
        function mapOne(w, owner, project, workbooksStatisticsMax, favorite) {
            return {
                defaultViewId: w.defaultViewId,
                displayTabs: w.displayTabs,
                downloadUrl: w.downloadUrl,
                favorite: favorite,
                id: w.id,
                name: w.name,
                numSheets: M.toNumber(w.sheetCount),
                owner: owner,
                project: project,
                repositoryUrl: w.repositoryUrl,
                size: M.toNumber(w.size),
                tags: M.sortTags(w.tags),
                thumbnailUrl: w.thumbnailUrl,
                updatedAt: M.toDate(w.updatedAt),
                hasAlert: w.hasAlert,
                hasExtracts: w.hasExtracts,
                hasIncrementalExtract: w.hasIncrementalExtract,
                hitsTotal: w.hitsTotal,
                hitsLastTwoWeeksTotal: w.hitsLastTwoWeeksTotal,
                favoritesTotal: w.favoritesTotal,
                maxStatValues: workbooksStatisticsMax
            };
        }
        WorkbookMapper.mapOne = mapOne;
        function mapDetail(w) {
            return {
                createdAt: M.toDate(w.createdAt),
                description: w.description,
                displayTabs: w.displayTabs,
                downloadUrl: w.downloadUrl,
                favorite: w.favorite,
                id: w.id,
                name: w.name,
                owner: VizPortal.UserMapper.mapOne(w.owner),
                project: VizPortal.ProjectMapper.mapName(w.project),
                size: M.toNumber(w.size),
                tags: M.sortTags(w.tags),
                thumbnailUrl: w.thumbnailUrl,
                updatedAt: M.toDate(w.updatedAt),
                editUrl: w.editUrl,
                hasAlert: w.hasAlert,
                hasExtracts: w.hasExtracts,
                hasIncrementalExtract: w.hasIncrementalExtract,
                hitsTimeSeries: w.hitsTimeSeries
            };
        }
        WorkbookMapper.mapDetail = mapDetail;
        function mapParents(serverApiWorkbooks, users, projects, favoriteWorkbooks) {
            if (projects === void 0) { projects = {}; }
            if (favoriteWorkbooks === void 0) { favoriteWorkbooks = {}; }
            return _.map(serverApiWorkbooks, function (w) {
                return mapParent(w, users[w.ownerId], projects[w.projectId], !!favoriteWorkbooks[w.id]);
            });
        }
        WorkbookMapper.mapParents = mapParents;
        function mapParent(w, owner, project, favorite) {
            return {
                favorite: favorite,
                id: w.id,
                name: w.name,
                numSheets: M.toNumber(w.sheetCount),
                displayTabs: w.displayTabs,
                owner: owner,
                project: project
            };
        }
        WorkbookMapper.mapParent = mapParent;
    })(WorkbookMapper = VizPortal.WorkbookMapper || (VizPortal.WorkbookMapper = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../models/resourceInfoParts.ts" />
/// <reference path="../libs.ts" />
/// <reference path="../models/resourceInfoParts.ts" />
/// <reference path="../libs.ts" />
/// <reference path="../models/resourceInfoParts.ts" />
/// <reference path="../models/IRemoteRefreshPropertiesInfo.ts" />
/// <reference path="../libs.ts" />
/// <reference path="../models/resourceInfoParts.ts" />
/// <reference path="../libs.ts" />
/// <reference path="../models/resourceInfoParts.ts" />
/// <reference path="../libs.ts" />
/// <reference path="../models/IWorkbookInfo.ts" />
/// <reference path="../models/resourceInfoParts.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetCommentsRequest = (function (_super) {
            __extends(GetCommentsRequest, _super);
            function GetCommentsRequest(params) {
                _super.call(this, 'getComments', params);
            }
            return GetCommentsRequest;
        })(ServerApi.Request);
        ServerApi.GetCommentsRequest = GetCommentsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        //TODO Figure out a way to remove the dependency on this variable and then remove it
        ServerApi.DataConnectionTypeKeys = {
            connectionTypeDisplayName: 'connectionTypeDisplayName',
            connectionType: 'connectionType'
        };
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="IDataConnectionType.ts" />
/// <reference path="resourceParts.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        ServerApi.ConnectionDetailType = {
            Database: 'database',
            TableauServer: 'tableauserver',
            File: 'file'
        };
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="resourceParts.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        //TODO Figure out a way to remove the dependency on this variable and then remove it
        ServerApi.ProjectKeys = ServerApi.NamedItemKeys;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../types/IDataSource.ts" />
/// <reference path="../types/IGetItemsParams.ts" />
/// <reference path="../types/IGetItemsResult.ts" />
/// <reference path="../types/IProject.ts" />
/// <reference path="../types/IUser.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetDatasourcesRequest = (function (_super) {
            __extends(GetDatasourcesRequest, _super);
            function GetDatasourcesRequest(params) {
                _super.call(this, 'getDatasources', params);
            }
            return GetDatasourcesRequest;
        })(ServerApi.Request);
        ServerApi.GetDatasourcesRequest = GetDatasourcesRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../types/IGetItemsParams.ts" />
/// <reference path="../types/IGetItemsResult.ts" />
/// <reference path="../types/IProject.ts" />
/// <reference path="../types/IUser.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetProjectsRequest = (function (_super) {
            __extends(GetProjectsRequest, _super);
            function GetProjectsRequest(params) {
                _super.call(this, 'getProjects', params);
            }
            return GetProjectsRequest;
        })(ServerApi.Request);
        ServerApi.GetProjectsRequest = GetProjectsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../types/IGetItemsParams.ts" />
/// <reference path="../types/IGetItemsResult.ts" />
/// <reference path="../types/IUser.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetUsersRequest = (function (_super) {
            __extends(GetUsersRequest, _super);
            function GetUsersRequest(params) {
                _super.call(this, 'getUsers', params);
            }
            return GetUsersRequest;
        })(ServerApi.Request);
        ServerApi.GetUsersRequest = GetUsersRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="resourceParts.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="resourceParts.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="../types/IGetItemsParams.ts" />
/// <reference path="../types/IGetItemsResult.ts" />
/// <reference path="../types/IProject.ts" />
/// <reference path="../types/IUser.ts" />
/// <reference path="../types/IView.ts" />
/// <reference path="../types/IWorkbook.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetViewsRequest = (function (_super) {
            __extends(GetViewsRequest, _super);
            function GetViewsRequest(params) {
                _super.call(this, 'getViews', params);
            }
            return GetViewsRequest;
        })(ServerApi.Request);
        ServerApi.GetViewsRequest = GetViewsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../types/IGetItemsParams.ts" />
/// <reference path="../types/IGetItemsResult.ts" />
/// <reference path="../types/IProject.ts" />
/// <reference path="../types/IUser.ts" />
/// <reference path="../types/IWorkbook.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetWorkbooksRequest = (function (_super) {
            __extends(GetWorkbooksRequest, _super);
            function GetWorkbooksRequest(params) {
                _super.call(this, 'getWorkbooks', params);
            }
            return GetWorkbooksRequest;
        })(ServerApi.Request);
        ServerApi.GetWorkbooksRequest = GetWorkbooksRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        ServerApi.RefreshModeTypes = {
            Server: 'Server',
            Remote: 'Remote' // data is refreshed by an end-user's computer
        };
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../mappers/AlertMapper.ts" />
/// <reference path="../mappers/CommentMapper.ts" />
/// <reference path="../mappers/DatasourceMapper.ts" />
/// <reference path="../mappers/ExtractTaskMapper.ts" />
/// <reference path="../mappers/ProjectMapper.ts" />
/// <reference path="../mappers/RemoteRefreshAgentMapper.ts" />
/// <reference path="../mappers/RemoteRefreshScheduleMapper.ts" />
/// <reference path="../mappers/SubscriptionMapper.ts" />
/// <reference path="../mappers/UserMapper.ts" />
/// <reference path="../mappers/ViewMapper.ts" />
/// <reference path="../mappers/WorkbookMapper.ts" />
/// <reference path="../models/IAlertInfo.ts" />
/// <reference path="../models/IDataSourceInfo.ts" />
/// <reference path="../models/IRemoteRefreshAgentInfo.ts" />
/// <reference path="../models/IUserInfo.ts" />
/// <reference path="../models/IViewInfo.ts" />
/// <reference path="../models/IWorkbookInfo.ts" />
/// <reference path="../ServerApi/requests/GetCommentsRequest.ts" />
/// <reference path="../ServerApi/requests/GetDatasourcesRequest.ts" />
/// <reference path="../ServerApi/requests/GetProjectsRequest.ts" />
/// <reference path="../ServerApi/requests/GetUsersRequest.ts" />
/// <reference path="../ServerApi/requests/GetViewsRequest.ts" />
/// <reference path="../ServerApi/requests/GetWorkbooksRequest.ts" />
/// <reference path="../ServerApi/types/IDataSource.ts" />
/// <reference path="../ServerApi/types/IProject.ts" />
/// <reference path="../ServerApi/types/IRemoteRefreshProperties.ts" />
/// <reference path="../ServerApi/types/IUser.ts" />
/// <reference path="../ServerApi/types/IView.ts" />
/// <reference path="../ServerApi/types/IWorkbook.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApiMapper;
    (function (ServerApiMapper) {
        function projects(projectResult) {
            if (!projectResult.projects || projectResult.projects.length <= 0)
                return [];
            var users = index(VizPortal.UserMapper.map(projectResult.users));
            return VizPortal.ProjectMapper.map(projectResult.projects, users);
        }
        ServerApiMapper.projects = projects;
        function dataSources(dataSourcesResult) {
            if (!dataSourcesResult.datasources || dataSourcesResult.datasources.length <= 0)
                return [];
            var users = index(VizPortal.UserMapper.map(dataSourcesResult.users));
            var projects = index(VizPortal.ProjectMapper.mapNames(dataSourcesResult.projects));
            var workbooks = index(VizPortal.WorkbookMapper.map(dataSourcesResult.workbooks, users, projects));
            return VizPortal.DatasourceMapper.map(dataSourcesResult.datasources, users, projects, workbooks, favorites(dataSourcesResult.favorites));
        }
        ServerApiMapper.dataSources = dataSources;
        function workbooks(workbooksResult) {
            if (!workbooksResult.workbooks || workbooksResult.workbooks.length <= 0)
                return [];
            var users = index(VizPortal.UserMapper.map(workbooksResult.users));
            var projects = index(VizPortal.ProjectMapper.mapNames(workbooksResult.projects));
            return VizPortal.WorkbookMapper.map(workbooksResult.workbooks, users, projects, workbooksResult.stats, favorites(workbooksResult.favorites));
        }
        ServerApiMapper.workbooks = workbooks;
        function views(viewResult) {
            if (!viewResult.views || viewResult.views.length <= 0)
                return [];
            var users = index(VizPortal.UserMapper.map(viewResult.users));
            var projects = index(VizPortal.ProjectMapper.mapNames(viewResult.projects));
            var workbooks = index(VizPortal.WorkbookMapper.mapParents(viewResult.workbooks, users, projects));
            return VizPortal.ViewMapper.map(viewResult.views, workbooks, favorites(viewResult.favorites));
        }
        ServerApiMapper.views = views;
        function alertList(alertList) {
            if (!(alertList && alertList.alerts && alertList.alerts.length > 0))
                return { total: 0, alerts: [] };
            var workbooks = index(alertList.workbooks);
            var datasources = index(alertList.datasources);
            return VizPortal.AlertListMapper.map(alertList.totalCount, alertList.alerts, workbooks, datasources);
        }
        ServerApiMapper.alertList = alertList;
        function comments(commentResult) {
            if (_.size(commentResult.comments) <= 0)
                return [];
            var users = index(commentResult.users);
            return VizPortal.CommentMapper.map(commentResult.comments, users);
        }
        ServerApiMapper.comments = comments;
        function extractTasks(extractTaskResult) {
            if (_.size(extractTaskResult.tasks) <= 0)
                return [];
            var schedules = index(extractTaskResult.schedules);
            var sites = index(extractTaskResult.sites);
            var workbooks = index(extractTaskResult.workbooks);
            var datasources = index(extractTaskResult.datasources);
            return VizPortal.ExtractTaskMapper.map(extractTaskResult.tasks, schedules, sites, workbooks, datasources);
        }
        ServerApiMapper.extractTasks = extractTasks;
        function remoteRefreshSchedules(remoteRefreshSchedulesResult) {
            if (_.size(remoteRefreshSchedulesResult.schedules) <= 0)
                return [];
            return VizPortal.RemoteRefreshScheduleMapper.mapToResource(remoteRefreshSchedulesResult.schedules);
        }
        ServerApiMapper.remoteRefreshSchedules = remoteRefreshSchedules;
        function remoteRefreshAgents(remoteRefreshAgentsResult) {
            if (_.size(remoteRefreshAgentsResult.agents) <= 0)
                return [];
            return VizPortal.RemoteRefreshAgentMapper.mapToResource(remoteRefreshAgentsResult.agents);
        }
        ServerApiMapper.remoteRefreshAgents = remoteRefreshAgents;
        function subscriptions(subscriptionResult) {
            if (_.size(subscriptionResult.subscriptions) <= 0)
                return [];
            return VizPortal.SubscriptionMapper.map(subscriptionResult.subscriptions, index(subscriptionResult.schedules), index(subscriptionResult.sites), index(subscriptionResult.users));
        }
        ServerApiMapper.subscriptions = subscriptions;
        function fieldValues(fieldValueResult) {
            return fieldValueResult.fieldValues;
        }
        ServerApiMapper.fieldValues = fieldValues;
        function favorites(ids) {
            return _.indexBy(ids, _.identity);
        }
        function index(items) {
            return _.indexBy(items, VizPortal.NamedItemInfoKeys.id);
        }
    })(ServerApiMapper = VizPortal.ServerApiMapper || (VizPortal.ServerApiMapper = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var AddTagsToWorkbooksRequest = (function (_super) {
            __extends(AddTagsToWorkbooksRequest, _super);
            function AddTagsToWorkbooksRequest(ids, tags) {
                _super.call(this, 'addTagsToWorkbooks', {
                    ids: ids,
                    tags: tags
                });
            }
            return AddTagsToWorkbooksRequest;
        })(ServerApi.Request);
        ServerApi.AddTagsToWorkbooksRequest = AddTagsToWorkbooksRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="resourceParts.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        ServerApi.ExtractTaskTargetType = {
            Workbook: 'Workbook',
            Datasource: 'Datasource'
        };
        ServerApi.ExtractTaskType = {
            RefreshExtract: 'RefreshExtract',
            IncrementExtract: 'IncrementExtract'
        };
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/IExtractTask.ts" />
/// <reference path="../types/IResponse.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var CreateExtractTasksRequest = (function (_super) {
            __extends(CreateExtractTasksRequest, _super);
            function CreateExtractTasksRequest(params) {
                _super.call(this, 'createExtractTasks', params);
            }
            return CreateExtractTasksRequest;
        })(ServerApi.Request);
        ServerApi.CreateExtractTasksRequest = CreateExtractTasksRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var DeleteWorkbooksRequest = (function (_super) {
            __extends(DeleteWorkbooksRequest, _super);
            function DeleteWorkbooksRequest(ids) {
                _super.call(this, 'deleteWorkbooks', { ids: ids });
            }
            return DeleteWorkbooksRequest;
        })(ServerApi.Request);
        ServerApi.DeleteWorkbooksRequest = DeleteWorkbooksRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="actionNames.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="../types/actionParams.ts" />
/// <reference path="../types/IWorkbookActions.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetWorkbookActionsRequest = (function (_super) {
            __extends(GetWorkbookActionsRequest, _super);
            function GetWorkbookActionsRequest(id) {
                _super.call(this, 'getWorkbookActions', { id: id });
            }
            return GetWorkbookActionsRequest;
        })(ServerApi.Request);
        ServerApi.GetWorkbookActionsRequest = GetWorkbookActionsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        ServerApi.RecentlyViewedObjectType = {
            View: 'view',
            Workbook: 'workbook'
        };
        var MarkRecentlyViewedRequest = (function (_super) {
            __extends(MarkRecentlyViewedRequest, _super);
            function MarkRecentlyViewedRequest(params) {
                _super.call(this, 'markRecentlyViewed', params);
            }
            return MarkRecentlyViewedRequest;
        })(ServerApi.Request);
        ServerApi.MarkRecentlyViewedRequest = MarkRecentlyViewedRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts"/>
/// <reference path="../types/IMoveToProjectParams.ts"/>
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var MoveWorkbooksToProjectRequest = (function (_super) {
            __extends(MoveWorkbooksToProjectRequest, _super);
            function MoveWorkbooksToProjectRequest(params) {
                _super.call(this, 'moveWorkbooksToProject', params);
            }
            return MoveWorkbooksToProjectRequest;
        })(ServerApi.Request);
        ServerApi.MoveWorkbooksToProjectRequest = MoveWorkbooksToProjectRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var RemoveTagsFromWorkbooksRequest = (function (_super) {
            __extends(RemoveTagsFromWorkbooksRequest, _super);
            function RemoveTagsFromWorkbooksRequest(ids, tags) {
                // The server returns quoted tags unquoted.  This re-adds the double quotes if needed
                var tagsList = _.map(tags, function (tag) { return VizPortal.TagsHelper.quote(tag); });
                _super.call(this, 'removeTagsFromWorkbooks', {
                    ids: ids,
                    tags: tagsList
                });
            }
            return RemoveTagsFromWorkbooksRequest;
        })(ServerApi.Request);
        ServerApi.RemoveTagsFromWorkbooksRequest = RemoveTagsFromWorkbooksRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var RevertWorkbookRequest = (function (_super) {
            __extends(RevertWorkbookRequest, _super);
            function RevertWorkbookRequest(params) {
                _super.call(this, 'revertWorkbook', params);
            }
            return RevertWorkbookRequest;
        })(ServerApi.Request);
        ServerApi.RevertWorkbookRequest = RevertWorkbookRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var RunExtractRefreshesOnWorkbooksRequest = (function (_super) {
            __extends(RunExtractRefreshesOnWorkbooksRequest, _super);
            // type must be from ServerApi.ExtractTaskType
            function RunExtractRefreshesOnWorkbooksRequest(ids, type) {
                _super.call(this, 'runExtractRefreshesOnWorkbooks', {
                    ids: ids,
                    type: type
                });
            }
            return RunExtractRefreshesOnWorkbooksRequest;
        })(ServerApi.Request);
        ServerApi.RunExtractRefreshesOnWorkbooksRequest = RunExtractRefreshesOnWorkbooksRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var SetDisplayTabsRequest = (function (_super) {
            __extends(SetDisplayTabsRequest, _super);
            function SetDisplayTabsRequest(params) {
                _super.call(this, 'setDisplayTabs', params);
            }
            return SetDisplayTabsRequest;
        })(ServerApi.Request);
        ServerApi.SetDisplayTabsRequest = SetDisplayTabsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
/// <reference path="../types/IResponse.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var SetWorkbookDescriptionRequest = (function (_super) {
            __extends(SetWorkbookDescriptionRequest, _super);
            function SetWorkbookDescriptionRequest(id, description) {
                _super.call(this, 'setWorkbookDescription', {
                    id: id,
                    description: description
                });
            }
            return SetWorkbookDescriptionRequest;
        })(ServerApi.Request);
        ServerApi.SetWorkbookDescriptionRequest = SetWorkbookDescriptionRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var SetWorkbooksOwnerRequest = (function (_super) {
            __extends(SetWorkbooksOwnerRequest, _super);
            function SetWorkbooksOwnerRequest(ids, ownerId) {
                _super.call(this, 'setWorkbooksOwner', {
                    ids: ids,
                    ownerId: ownerId
                });
            }
            return SetWorkbooksOwnerRequest;
        })(ServerApi.Request);
        ServerApi.SetWorkbooksOwnerRequest = SetWorkbooksOwnerRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/RequestHelper.ts" />
/// <reference path="../helpers/ResourceHelper.ts" />
/// <reference path="../helpers/ResultHelper.ts" />
/// <reference path="../helpers/ServerModelHelper.ts" />
/// <reference path="../models/IWorkbookInfo.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/AddTagsToWorkbooksRequest.ts" />
/// <reference path="../ServerApi/requests/CreateExtractTasksRequest.ts" />
/// <reference path="../ServerApi/requests/DeleteWorkbooksRequest.ts" />
/// <reference path="../ServerApi/requests/GetWorkbookActionsRequest.ts" />
/// <reference path="../ServerApi/requests/GetWorkbooksRequest.ts" />
/// <reference path="../ServerApi/requests/MarkRecentlyViewedRequest.ts" />
/// <reference path="../ServerApi/requests/MoveWorkbooksToProjectRequest.ts" />
/// <reference path="../ServerApi/requests/RemoveTagsFromWorkbooksRequest.ts" />
/// <reference path="../ServerApi/requests/RevertWorkbookRequest.ts" />
/// <reference path="../ServerApi/requests/RunExtractRefreshesOnWorkbooksRequest.ts" />
/// <reference path="../ServerApi/requests/SetDisplayTabsRequest.ts" />
/// <reference path="../ServerApi/requests/SetWorkbookDescriptionRequest.ts" />
/// <reference path="../ServerApi/requests/SetWorkbooksOwnerRequest.ts" />
/// <reference path="../services/ServerService.ts" />
var VizPortal;
(function (VizPortal) {
    var Workbooks = (function () {
        function Workbooks($q, ErrorNotifyingServer, FetcherFactory) {
            this.$q = $q;
            this.ErrorNotifyingServer = ErrorNotifyingServer;
            this.server = ErrorNotifyingServer.getServerService();
            this.listFetcher = FetcherFactory.getServerResourceFetcher(VizPortal.ServerApi.GetWorkbooksRequest, VizPortal.ServerApiMapper.workbooks);
            this.allQuery = new VizPortal.ResourceQuery(this.listFetcher);
            this.detailFetcher = FetcherFactory.getServerDetailFetcher('getWorkbook', VizPortal.WorkbookMapper.mapDetail);
            this.fieldValuesFetcher = FetcherFactory.getServerResourceFetcher(VizPortal.ServerApi.GetFieldValuesRequest, VizPortal.ServerApiMapper.fieldValues);
        }
        Workbooks.prototype.all = function () {
            return this.allQuery;
        };
        Workbooks.prototype.getById = function (id) {
            return this.detailFetcher.fetchById(id);
        };
        Workbooks.prototype.valuesForField = function (field) {
            return new VizPortal.FieldValuesQuery(this.fieldValuesFetcher, field, VizPortal.ServerApi.FieldValueResourceType.workbook);
        };
        // Actions
        Workbooks.prototype.actions = function (id) {
            return this.server.sendRequest(new VizPortal.ServerApi.GetWorkbookActionsRequest(id));
        };
        Workbooks.prototype.del = function (ids) {
            return this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests(ids, function (idsBlock) { return new VizPortal.ServerApi.DeleteWorkbooksRequest(idsBlock); }), VizPortal.ResultHelper.combineResults);
        };
        Workbooks.prototype.setDescription = function (id, description) {
            return this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.SetWorkbookDescriptionRequest(id, description));
        };
        Workbooks.prototype.setOwner = function (ids, ownerId) {
            return this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests(ids, function (idsBlock) { return new VizPortal.ServerApi.SetWorkbooksOwnerRequest(idsBlock, ownerId); }), VizPortal.ResultHelper.combineResults);
        };
        Workbooks.prototype.moveToProject = function (targetProjectId, workbookIds) {
            return this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests(workbookIds, function (idsBlock) { return new VizPortal.ServerApi.MoveWorkbooksToProjectRequest({
                ids: idsBlock,
                projectId: targetProjectId
            }); }), VizPortal.ResultHelper.combineResults);
        };
        Workbooks.prototype.setDisplayTabs = function (ids, displayTabs) {
            return this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests(ids, function (idsBlock) { return new VizPortal.ServerApi.SetDisplayTabsRequest({
                ids: idsBlock,
                displayTabs: displayTabs
            }); }), VizPortal.ResultHelper.combineResults);
        };
        Workbooks.prototype.addTags = function (ids, tags) {
            return (tags.length > 0)
                ? this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests2(ids, tags, function (idsBlock, tagsBlock) { return new VizPortal.ServerApi.AddTagsToWorkbooksRequest(idsBlock, tagsBlock); }), VizPortal.ResultHelper.combineResults)
                : this.$q.when({});
        };
        Workbooks.prototype.removeTags = function (ids, tags) {
            return (tags.length > 0)
                ? this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests2(ids, tags, function (idsBlock, tagsBlock) { return new VizPortal.ServerApi.RemoveTagsFromWorkbooksRequest(idsBlock, tagsBlock); }), VizPortal.ResultHelper.combineResults)
                : this.$q.when({});
        };
        Workbooks.prototype.revertWorkbook = function (workbookId, versionNum) {
            var request = new VizPortal.ServerApi.RevertWorkbookRequest({ id: workbookId, version: versionNum });
            return this.ErrorNotifyingServer.sendRequest(request);
        };
        Workbooks.prototype.changeTags = function (ids, tagsToAdd, tagsToRemove) {
            var _this = this;
            return this.removeTags(ids, tagsToRemove)
                .then(function (result) { return VizPortal.ResultHelper.hasErrors(result) ? result : _this.addTags(ids, tagsToAdd); });
        };
        Workbooks.prototype.createExtractTask = function (ids, scheduleId, extractType) {
            return this.ErrorNotifyingServer.sendRequests(VizPortal.RequestHelper.buildRequests(ids, function (idsBlock) { return new VizPortal.ServerApi.CreateExtractTasksRequest({
                targetType: VizPortal.ServerApi.ExtractTaskTargetType.Workbook,
                targetIds: idsBlock,
                scheduleId: scheduleId,
                type: extractType // ServerApi.ExtractTaskType
            }); }), VizPortal.ResultHelper.combineResults);
        };
        Workbooks.prototype.refreshExtracts = function (ids, extractType) {
            return this.ErrorNotifyingServer.sendRequests(VizPortal.RequestHelper.buildRequests(ids, function (idsBlock) {
                return new VizPortal.ServerApi.RunExtractRefreshesOnWorkbooksRequest(idsBlock, extractType);
            }), VizPortal.ResultHelper.combineResults);
        };
        Workbooks.prototype.markRecentlyViewed = function (id) {
            return this.server.sendRequest(new VizPortal.ServerApi.MarkRecentlyViewedRequest({
                objectId: id,
                objectType: VizPortal.ServerApi.RecentlyViewedObjectType.Workbook
            }));
        };
        Workbooks.$inject = [
            '$q',
            'ErrorNotifyingServer',
            'FetcherFactory'
        ];
        return Workbooks;
    })();
    VizPortal.Workbooks = Workbooks;
    VizPortal.Module.instance().service('Workbooks', Workbooks);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../models/ContentTypes.ts" />
/// <reference path="../models/IWorkbookInfo.ts" />
/// <reference path="../models/ListLayout.ts" />
/// <reference path="../models/PermissionsPanelColumnWidths.ts" />
/// <reference path="../models/Set.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../resources/Workbooks.ts" />
/// <reference path="../services/ModalService.ts" />
/// <reference path="../services/ToasterService.ts" />
var VizPortal;
(function (VizPortal) {
    var EditPermissionsAction = (function () {
        function EditPermissionsAction(modalService, $q, $window, $translate, getActionableObjectsForAction) {
            this.modalService = modalService;
            this.$q = $q;
            this.$window = $window;
            this.$translate = $translate;
            this.getActionableObjectsForAction = getActionableObjectsForAction;
        }
        EditPermissionsAction.prototype.showEditPermissionsDialog = function (actionContext) {
            var _this = this;
            // Create new scope inherited from parent.
            // We need things like selectedItems.
            var scope = actionContext.scope.$new();
            if (scope.contentType === VizPortal.DatasourceContentType.name && this.areAnyEmbeddedDatasourcesSelected(scope.selectedItems)) {
                return this.$q.when(this.alertCantShowPermissions({
                    translatedMessage: this.$translate.instant('permissions_notShowingEmbeddedAndPublishedDataSources', { ITEM_COUNT: scope.selectedItems.size() }, VizPortal.L10n.Interpolations.Count)
                }));
            }
            return this.getActionableObjectsForAction.editPermissions({
                type: scope.contentType,
                ids: scope.selectedItems.keys()
            }).then(function (result) {
                var ids = result.ids;
                var unactionableItems = scope.selectedItems.clone();
                scope.actionableItems = new VizPortal.Set(function (item) { return item.id; });
                _.each(ids, function (id) {
                    var item = scope.selectedItems.get(id);
                    scope.actionableItems.add(item);
                    unactionableItems.remove(item);
                });
                // if there are any items in the section that the user isn't allowed to set permissions on,
                // we don't show the permissions panel
                if (unactionableItems.size() > 0) {
                    return _this.alertCantShowPermissions({
                        translatedMessage: _this.getCannotViewAllSelectedMessage(scope.contentType, scope.selectedItems)
                    }).result;
                }
                if (VizPortal.FeatureFlags.projectControlledPermissionsEnabled) {
                    scope.authorizables = scope.actionableItems.clone();
                    scope.authorizableType = scope.contentType;
                    scope.templateType = scope.contentType;
                    var widthLayout = VizPortal.getPermissionsPanelColumnWidths(scope.templateType);
                    scope.permissionsContainerWidth = widthLayout.getPermissionsDialogWidth($(_this.$window).width());
                    scope.permissionsPanelHeight = _this.calculatePermissionsPanelHeight();
                }
                else {
                    _this.determineInfoMessageFromAuthorizables(scope); // also sets scope.readOnly
                    if (scope.readOnly) {
                        var tabbedWorkbookSet = new VizPortal.Set(function (workbook) { return workbook.id; });
                        scope.actionableItems.each(function (view) {
                            if (view.workbook.displayTabs) {
                                tabbedWorkbookSet.add(view.workbook);
                            }
                        });
                        scope.authorizables = tabbedWorkbookSet;
                        scope.authorizableType = VizPortal.WorkbookContentType.name;
                        scope.templateType = VizPortal.ViewContentType.name;
                    }
                    else {
                        scope.authorizables = scope.actionableItems.clone();
                        scope.authorizableType = scope.contentType;
                        scope.templateType = scope.contentType;
                    }
                    var headerWidth = _this.headerWidth(scope.authorizableType, scope.readOnly);
                    var widthLayout = VizPortal.getPermissionsPanelColumnWidths(scope.templateType);
                    scope.permissionsContainerWidth = Math.max(widthLayout.getPermissionsDialogWidth($(_this.$window).width()), headerWidth);
                    // Setup description of the dialog.
                    // These may change depending on whether read only mode is on or not.
                    _this.setupDescriptionOnScope(scope, scope.readOnly);
                    scope.permissionsPanelHeight = _this.calculatePermissionsPanelHeightWithoutPCP(!!scope.permissionsInfoMessage);
                }
                return _this.openPermissionsDialog(scope).result;
            }).fin(function () { return scope.$destroy(); });
        };
        EditPermissionsAction.prototype.determineInfoMessageFromAuthorizables = function (scope) {
            if (scope.contentType === VizPortal.ViewContentType.name) {
                // SPECIAL CASES handling of the permission dialog for views (see BUGZID: 128688)
                // We have a special case when user tries to view permissions of Views that are contained in
                // tabbed Workbooks. In this case, it's the Workbooks permissions that determines the permissions
                // for the selected views. So, we need to:
                // (1) Inform the users about this.
                // (2) Display the permissions of those containing workbooks in read only mode.
                // (3) If views selection has both tabbed and untabbed workbooks, don't show permissions and notify users.
                // count number of tabbed workbooks and untabbed workbooks
                var tabbedCount = 0;
                var untabbedCount = 0;
                scope.actionableItems.each(function (view) {
                    view.workbook.displayTabs ? ++tabbedCount : ++untabbedCount;
                });
                if (tabbedCount > 0 && untabbedCount > 0) {
                    // See the SPECIAL CASES comment above.
                    // We can't show permissions when the workbook tabbed settings are mixed.
                    return this.alertCantShowPermissions({
                        translatedMessage: this.$translate.instant('mixedTabbedWorkbookMessage', { ITEM_COUNT: scope.selectedItems.size() }, VizPortal.L10n.Interpolations.Count)
                    }).result;
                }
                else if (tabbedCount === scope.actionableItems.size()) {
                    // if all the workbooks are tabbed, we will open the permissions panel in readonly mode
                    scope.readOnly = true;
                    this.setupPermissionsInfoMessageForTabbedViewsOnScope(scope, scope.actionableItems);
                }
            }
            else if (scope.contentType === VizPortal.WorkbookContentType.name) {
                // if any of the selected workbooks have tabs disabled, we show a notice in the dialog to edit the permissions of the individual views.
                this.setupPermissionsInfoMessageForWorkbooksOnScope(scope, scope.actionableItems);
            }
        };
        EditPermissionsAction.prototype.openPermissionsDialog = function (scope) {
            return this.modalService.open({
                scope: scope,
                templateUrl: VizPortal.FeatureFlags.projectControlledPermissionsEnabled
                    ? 'permissionsDialog.html'
                    : 'permissionsDialogWithoutPCP.html',
                size: VizPortal.ModalSize.fitToContent
            });
        };
        EditPermissionsAction.prototype.alertCantShowPermissions = function (message) {
            return this.modalService.alert(_.extend({
                titleId: 'permissions_cannotViewPermissions'
            }, message));
        };
        /**
        * Calculates the width required by the header
        * TODO: remove this when the projectControlledPermissionsEnabled feature flag dies.
        * Equivalent functionality exists in PermissionsPanelColumnWidths.ts
        */
        EditPermissionsAction.prototype.headerWidth = function (authorizableType, readOnly) {
            var assignPermissionsToContentsWidth = 0;
            if (!readOnly && (authorizableType === VizPortal.ProjectContentType.name || authorizableType === VizPortal.WorkbookContentType.name)) {
                assignPermissionsToContentsWidth = 250 + 6; // 6 px padding
            }
            return 18 // margin
                + 450 // permissions summary
                + 35 // margin
                + 200 // effective permissions search box
                + assignPermissionsToContentsWidth;
        };
        /**
        * Calculates a height to make the permissions panel fit in smaller screen sizes.
        * TODO: refactor the layout of the permissions panel so this isn't needed.
        */
        EditPermissionsAction.prototype.calculatePermissionsPanelHeightWithoutPCP = function (hasInfoMessage) {
            var modalDialog = 28 + 12 + 2; // top padding, bottom padding, border (.tb-modal)
            var modalDialogTitle = 21 + 12; // height, bottom margin (.tb-dialog-title)
            var modalDialogDescription = 16 + 12; // height, bottom margin (.tb-dialog-description)
            if (hasInfoMessage) {
                // if we aren't showing the permissions for all selected items, an extra description is present that we need to account for.
                modalDialogDescription *= 2;
                modalDialogDescription += 16 + 1; // two lines + 1px because icon is 17px
            }
            var availableHeight = $(this.$window).height();
            return availableHeight - (modalDialog + modalDialogTitle + modalDialogDescription + VizPortal.ModalService.MinimumSpaceBetweenDialogAndViewport);
        };
        /**
         * Calculates a height to make the permissions panel fit in smaller screen sizes.
         * TODO: refactor the layout of the permissions panel so this isn't needed.
         */
        EditPermissionsAction.prototype.calculatePermissionsPanelHeight = function () {
            var modalDialog = 24 + 18 + 2; // top padding, bottom padding, border (.tb-modal)
            var modalDialogTitle = 21 + 18; // height, bottom margin (.tb-dialog-title)
            var availableHeight = $(this.$window).height();
            return availableHeight - (modalDialog + modalDialogTitle + VizPortal.ModalService.MinimumSpaceBetweenDialogAndViewport);
        };
        EditPermissionsAction.prototype.setupDescriptionOnScope = function (scope, readOnly) {
            var itemCount = scope.actionableItems.size();
            var itemName = (itemCount > 0) ? scope.authorizables.first().name : "";
            var stringId;
            if (readOnly) {
                stringId = 'readonlyViewPermissionsDescription';
            }
            else {
                stringId = EditPermissionsAction.descriptionStringIdMap[scope.contentType];
            }
            scope.editPermissionsDescription = this.$translate.instant(stringId, {
                ITEM_NAME: VizPortal.L10n.elideIfLong(itemName),
                ITEM_COUNT: itemCount
            }, VizPortal.L10n.Interpolations.Count);
        };
        /**
        * If any of the workbooks have tabs disabled, puts a translated message on the scope explaining that view permissions
        * are set on the individual views.
        */
        EditPermissionsAction.prototype.setupPermissionsInfoMessageForWorkbooksOnScope = function (scope, workbooks) {
            var tabbedCount = 0;
            var untabbedCount = 0;
            workbooks.each(function (workbook) {
                workbook.displayTabs ? ++tabbedCount : ++untabbedCount;
            });
            if (tabbedCount === 0) {
                // all workbooks have disabled
                scope.permissionsInfoMessage = this.$translate.instant('permissionsLongMessage_workbooksAllWithIndependentViews');
            }
            else if (untabbedCount > 0) {
                // mixed selection: some workbooks have tabs and some don't
                scope.permissionsInfoMessage = this.$translate.instant('permissionsLongMessage_workbooksSomeWithIndependentViews');
            }
        };
        /**
        * Puts a translated message on the scope explaining that tabbed view permissions are controlled by the parent workbook
        */
        EditPermissionsAction.prototype.setupPermissionsInfoMessageForTabbedViewsOnScope = function (scope, views) {
            var numWorkbooks = _.uniq(views.map(function (view) { return view.workbook.id; })).length;
            if (numWorkbooks === 1) {
                var workbook = views.first().workbook;
                var workbookName = workbook.name;
            }
            scope.permissionsInfoMessage = this.$translate.instant('permissions_tabbedViewsMessage', {
                VIEW_COUNT: views.size(),
                WORKBOOK_COUNT: numWorkbooks,
                WORKBOOK_NAME: VizPortal.L10n.elideIfLong(workbookName)
            }, VizPortal.L10n.Interpolations.Count);
        };
        EditPermissionsAction.prototype.getCannotViewAllSelectedMessage = function (authorizableType, unactionableItems) {
            return this.$translate.instant(EditPermissionsAction.cannotViewAllSelectedMessageIdMap[authorizableType], {
                ITEM_NAME: VizPortal.L10n.elideIfLong(unactionableItems.first().name),
                ITEM_COUNT: unactionableItems.size()
            }, VizPortal.L10n.Interpolations.Count);
        };
        EditPermissionsAction.prototype.areAnyEmbeddedDatasourcesSelected = function (datasources) {
            return !!datasources.find(function (datasource) { return !!datasource.workbook; });
        };
        EditPermissionsAction.$inject = [
            'ModalService',
            '$q',
            '$window',
            '$translate',
            'GetActionableObjectsForAction'];
        EditPermissionsAction.descriptionStringIdMap = (function () {
            var map = {};
            map[VizPortal.ProjectContentType.name] = 'editProjectPermissionsDescription';
            map[VizPortal.WorkbookContentType.name] = 'editWorkbookPermissionsDescription';
            map[VizPortal.ViewContentType.name] = 'editViewPermissionsDescription';
            map[VizPortal.DatasourceContentType.name] = 'editDatasourcePermissionsDescription';
            return map;
        })();
        EditPermissionsAction.cannotViewAllSelectedMessageIdMap = (function () {
            var map = {};
            map[VizPortal.ProjectContentType.name] = 'permissions_cannotViewSelectedProjects';
            map[VizPortal.WorkbookContentType.name] = 'permissions_cannotViewSelectedWorkbooks';
            map[VizPortal.ViewContentType.name] = 'permissions_cannotViewSelectedViews';
            map[VizPortal.DatasourceContentType.name] = 'permissions_cannotViewSelectedDataSources';
            return map;
        })();
        return EditPermissionsAction;
    })();
    VizPortal.EditPermissionsAction = EditPermissionsAction;
    VizPortal.Module.instance().service('EditPermissionsAction', EditPermissionsAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="AbstractContentAction.ts" />
var VizPortal;
(function (VizPortal) {
    var HideViewsAction = (function () {
        function HideViewsAction(ViewErrors, ActionHelpers, ConfirmActionDialog, $translate, Views) {
            this.ViewErrors = ViewErrors;
            this.ActionHelpers = ActionHelpers;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.$translate = $translate;
            this.Views = Views;
        }
        HideViewsAction.prototype.confirmDeleteViews = function (views, context) {
            var _this = this;
            var scope = context.scope;
            var workbooksToDelete = this.workbooksWithNoViews(views);
            scope.deleteViewsConfirmation = this.$translate.instant('confirmDeleteViews', {
                VIEW_COUNT: views.size(),
                VIEW_NAME: VizPortal.L10n.elideIfLong(views.first().name)
            }, VizPortal.L10n.Interpolations.Count);
            scope.deleteWorkbooksConfirmation = workbooksToDelete.length > 0
                ? this.$translate.instant('confirmDeleteViewsWorkbookWarning', {
                    WORKBOOK_COUNT: workbooksToDelete.length,
                    WORKBOOK_NAME: VizPortal.L10n.elideIfLong(workbooksToDelete[0].name)
                }, VizPortal.L10n.Interpolations.Count)
                : null;
            return this.ConfirmActionDialog.open({
                scope: context.scope,
                title: this.$translate.instant('delete'),
                bodyTemplateUrl: "confirmDeleteViews.html",
                actionName: this.$translate.instant('confirmDeleteButton', {
                    ITEM_COUNT: views.size()
                }, VizPortal.L10n.Interpolations.Count),
                isDeleteAction: true,
                action: function (dialogInstance) {
                    return _this.Views.hide(views.keys()).then(function (result) { return _this.notifyResult(views, result); });
                }
            }).result;
        };
        // Determine if any workbooks will be deleted as a result of deleting the selected views
        HideViewsAction.prototype.workbooksWithNoViews = function (views) {
            var workbooksToDelete = [];
            var workbookViewCount = {};
            views.each(function (view) {
                var viewCount = workbookViewCount[view.workbook.id] || 0;
                viewCount++;
                if (viewCount === view.workbook.numSheets) {
                    workbooksToDelete.push(view.workbook);
                }
                workbookViewCount[view.workbook.id] = viewCount;
            });
            return workbooksToDelete;
        };
        HideViewsAction.prototype.notifyResult = function (views, result) {
            var _this = this;
            this.ActionHelpers.notifyStandardError(views, {
                successId: 'deleteViewsSuccess',
                errorId: 'deleteViewsError'
            }, function (errorItem) { return _this.ViewErrors.errorDetailsFor(errorItem); })(result);
        };
        HideViewsAction.$inject = ['ViewErrors', 'ActionHelpers', 'ConfirmActionDialog', '$translate', 'Views'];
        return HideViewsAction;
    })();
    VizPortal.HideViewsAction = HideViewsAction;
    VizPortal.Module.instance().service('HideViewsAction', HideViewsAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/ActionContext.ts" />
/// <reference path="../models/ListLayout.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/ContentActions.ts" />
/// <reference path="../services/EditConnectionAction.ts" />
/// <reference path="../services/EditPermissionsAction.ts" />
/// <reference path="../services/HideViewsAction.ts" />
/// <reference path="../services/RevisionHistoryAction.ts" />
var VizPortal;
(function (VizPortal) {
    var ActionPanelService = (function () {
        function ActionPanelService($state, ServerService, contentActions, EditConnectionAction, EditPermissionsAction, HideViewsAction, SetDisplayTabsAction, CreateExtractTasksAction, DeleteDatasourcesAction, RevisionHistoryAction) {
            this.$state = $state;
            this.ServerService = ServerService;
            this.contentActions = contentActions;
            this.EditConnectionAction = EditConnectionAction;
            this.EditPermissionsAction = EditPermissionsAction;
            this.HideViewsAction = HideViewsAction;
            this.SetDisplayTabsAction = SetDisplayTabsAction;
            this.CreateExtractTasksAction = CreateExtractTasksAction;
            this.DeleteDatasourcesAction = DeleteDatasourcesAction;
            this.RevisionHistoryAction = RevisionHistoryAction;
            this.contentActionDefinitions = {
                'project': [
                    this.permissionsAction(),
                    this.renameAction(this.bind(contentActions.renameProjectPopup)),
                    this.changeOwnerAction(this.bind(contentActions.changeOwnerOnProjects), VizPortal.CommonErrorCode.ProjectNotFound),
                    this.deleteProjectsAction()
                ],
                'datasource': [
                    this.newWorkbookAction(),
                    this.downloadDatasourceAction(),
                    this.setTagsOnDatasourcesAction(),
                    this.datasourcePermissionsAction(),
                    this.moveDatasourcesToProjectAction(),
                    this.changeOwnerOnDatasourcesAction(),
                    this.createExtractRefreshForDatasourcesAction(),
                    this.editConnectionAction(),
                    this.deleteDatasourcesAction()
                ],
                'workbook': [
                    this.editAction(this.bind(contentActions.editWorkbook), 'editWorkbook_action'),
                    this.downloadWorkbookAction(),
                    this.changeTags(this.bind(contentActions.setTagsOnWorkbooks), VizPortal.CommonErrorCode.WorkbookNotFound),
                    this.permissionsAction(),
                    this.moveWorkbooksToProjectAction(),
                    this.changeOwnerAction(this.bind(contentActions.changeOwnerOnWorkbooks), VizPortal.CommonErrorCode.WorkbookNotFound),
                    this.createExtractRefreshForWorkbooksAction(),
                    this.setDisplayTabsAction(),
                    this.viewWorkbookRevisionHistoryAction(),
                    this.deleteWorkbooksAction()
                ],
                'view': [
                    this.editAction(this.bind(contentActions.editView), 'editView_action'),
                    this.changeTags(this.bind(contentActions.setTagsOnViews), VizPortal.CommonErrorCode.ViewNotFound),
                    this.permissionsAction(),
                    this.deleteViewsAction()
                ],
                'sites': [
                    this.activateSiteAction(this.bind(contentActions.activateSite)),
                    this.suspendSiteAction(this.bind(contentActions.suspendSite)),
                    this.editSiteSettingsAction(this.bind(contentActions.editSite)),
                    this.deleteSitesAction(this.bind(contentActions.deleteSites))
                ]
            };
        }
        ActionPanelService.prototype.bind = function (fn) {
            return angular.bind(this.contentActions, fn);
        };
        // Helper functions
        ActionPanelService.anySelected = function (items) {
            return items.size() > 0;
        };
        ActionPanelService.oneSelected = function (items) {
            return items.size() === 1;
        };
        ActionPanelService.oneSelectedEmbeddedDatasource = function (items) {
            return ActionPanelService.oneSelected(items) && !!items.first().workbook;
        };
        ActionPanelService.prototype.oneSelectedUnrefreshableItem = function (items) {
            if (ActionPanelService.oneSelected(items)) {
                var item = items.first();
                return !item.hasExtracts || !this.isAdminOrOwner(item.owner.id);
            }
            else {
                return false;
            }
        };
        ActionPanelService.prototype.oneSelectedUnrefreshableDatasource = function (datasources) {
            if (ActionPanelService.oneSelected(datasources)) {
                var datasource = datasources.first();
                return !this.CreateExtractTasksAction.isRefreshableDatasource(datasource)
                    || !this.isAdminOrOwner(datasource.owner.id);
            }
            else {
                return false;
            }
        };
        ActionPanelService.prototype.isAdminOrOwner = function (ownerId) {
            return this.ServerService.isSessionSiteOrServerAdmin() || ownerId === this.ServerService.sessionUserId();
        };
        ActionPanelService.prototype.getUpdateSiteAvailabilityDisabledFn = function (toAvailabilityStateName) {
            return function (items) {
                if (items.size() === 1) {
                    // Check if default site or if the action will not change availability
                    var item = items.first();
                    return item.settings.urlName === ''
                        || item.availability === toAvailabilityStateName
                        || item.availability === VizPortal.SiteAvailabilityState.LOCKED;
                }
                else {
                    return false;
                }
            };
        };
        // Action Button factory functions
        ActionPanelService.prototype.moveDatasourcesToProjectAction = function () {
            var _this = this;
            return {
                name: 'move',
                translate: 'move_action',
                isAvailable: ActionPanelService.anySelected,
                isDisabled: function (items, detailedItem, allowedActions) {
                    return (!!allowedActions && !allowedActions.setProject) || ActionPanelService.oneSelectedEmbeddedDatasource(items);
                },
                execute: function (items, context) {
                    var scope = context.scope;
                    _this.contentActions.moveDatasourcesToProject(items, context)
                        .then(function (result) {
                        if (scope.place === 'project') {
                            VizPortal.ActionHelpers.deselectAllExceptErrors(scope.selectedItems, result, VizPortal.CommonErrorCode.DatasourceNotFound);
                        }
                        else {
                            VizPortal.ActionHelpers.deselectNotFound(scope.selectedItems, result, VizPortal.CommonErrorCode.DatasourceNotFound);
                        }
                        scope.refreshContent();
                    });
                }
            };
        };
        ActionPanelService.prototype.moveWorkbooksToProjectAction = function () {
            var _this = this;
            return {
                name: 'move',
                translate: 'move_action',
                isAvailable: ActionPanelService.anySelected,
                isDisabled: function (items, detailedItem, allowedActions) {
                    return (!!allowedActions && !allowedActions.setProject);
                },
                execute: function (items, context) {
                    var scope = context.scope;
                    _this.contentActions.moveWorkbooksToProject(items, context)
                        .then(function (result) {
                        if (scope.place === 'project') {
                            VizPortal.ActionHelpers.deselectAllExceptErrors(scope.selectedItems, result, VizPortal.CommonErrorCode.WorkbookNotFound);
                        }
                        else {
                            VizPortal.ActionHelpers.deselectNotFound(scope.selectedItems, result, VizPortal.CommonErrorCode.WorkbookNotFound);
                        }
                        scope.refreshContent();
                    });
                }
            };
        };
        ActionPanelService.prototype.deleteProjectsAction = function () {
            var _this = this;
            return {
                name: 'delete',
                translate: 'delete_action',
                isAvailable: ActionPanelService.anySelected,
                isDisabled: function (items, detailedItem, allowedActions) {
                    return (!!allowedActions && !allowedActions.del);
                },
                execute: function (items, context) {
                    var scope = context.scope;
                    _this.contentActions.deleteProjects(items, context)
                        .then(function (result) {
                        VizPortal.ActionHelpers.deselectAllExceptErrors(scope.selectedItems, result, VizPortal.CommonErrorCode.ProjectNotFound);
                        scope.refreshContent();
                    });
                }
            };
        };
        ActionPanelService.prototype.deleteDatasourcesAction = function () {
            var _this = this;
            return {
                name: 'delete',
                translate: 'delete_action',
                isAvailable: ActionPanelService.anySelected,
                isDisabled: function (items, detailedItem, allowedActions) {
                    return (!!allowedActions && !allowedActions.del) || ActionPanelService.oneSelectedEmbeddedDatasource(items);
                },
                execute: function (items, context) {
                    var scope = context.scope;
                    _this.DeleteDatasourcesAction.confirmDeleteDatasources(items, context)
                        .then(function (result) {
                        if (result.allowed) {
                            VizPortal.ActionHelpers.deselectAllExceptErrors(scope.selectedItems, result.serverResult, VizPortal.CommonErrorCode.DatasourceNotFound);
                            scope.refreshContent();
                        }
                    });
                }
            };
        };
        ActionPanelService.prototype.deleteWorkbooksAction = function () {
            var _this = this;
            return {
                name: 'delete',
                translate: 'delete_action',
                isAvailable: ActionPanelService.anySelected,
                isDisabled: function (items, detailedItem, allowedActions) {
                    return (!!allowedActions && !allowedActions.del);
                },
                execute: function (items, context) {
                    var scope = context.scope;
                    _this.contentActions.deleteWorkbooks(items, context)
                        .then(function (result) {
                        VizPortal.ActionHelpers.deselectAllExceptErrors(scope.selectedItems, result, VizPortal.CommonErrorCode.WorkbookNotFound);
                        scope.refreshContent();
                    });
                }
            };
        };
        ActionPanelService.prototype.deleteViewsAction = function () {
            var _this = this;
            return {
                name: 'delete',
                translate: 'delete_action',
                isAvailable: ActionPanelService.anySelected,
                isDisabled: function (views, detailedItem, allowedActions) {
                    return !!allowedActions && !allowedActions.del;
                },
                execute: function (items, context) {
                    var scope = context.scope;
                    _this.HideViewsAction.confirmDeleteViews(items, context)
                        .then(function (result) {
                        var allViewsSelected = items.size() === scope.subplaceCounts['views'];
                        // If we're in a workbook place, then deleting views will have deleted
                        // the containing workbook, so redirect to the project place.
                        if (scope.place === VizPortal.ContentTypes.workbook && allViewsSelected) {
                            _this.$state.go('main.site.content.project.workbooks', {
                                id: context.scope.workbook.project.id
                            });
                        }
                        else {
                            VizPortal.ActionHelpers.deselectAllExceptErrors(scope.selectedItems, result, VizPortal.CommonErrorCode.ViewNotFound);
                            scope.refreshContent();
                        }
                    });
                }
            };
        };
        ActionPanelService.prototype.viewWorkbookRevisionHistoryAction = function () {
            var _this = this;
            return {
                name: 'view-revision-history',
                translate: 'revisionHistory_action',
                isAvailable: function () { return ActionPanelService.anySelected && VizPortal.FeatureFlags.workbookVersionHistoryEnabled; },
                isDisabled: function () { return false; },
                execute: function (items) {
                    _this.RevisionHistoryAction.showRevisionHistory(items.first());
                }
            };
        };
        ActionPanelService.prototype.renameAction = function (renameAction) {
            return {
                name: 'rename',
                translate: 'rename_action',
                isAvailable: ActionPanelService.anySelected,
                isDisabled: function (items, detailedItem, allowedActions) {
                    return (!!allowedActions && !allowedActions.setName) || !ActionPanelService.oneSelected(items);
                },
                execute: function (items, context) {
                    var scope = context.scope;
                    renameAction(items.first(), context)
                        .then(function () { return scope.refreshContent(); });
                }
            };
        };
        ActionPanelService.prototype.downloadDatasourceAction = function () {
            var _this = this;
            return {
                name: 'download',
                isAvailable: ActionPanelService.anySelected,
                isDisabled: function (items, detailedItem, allowedActions) {
                    return (!!allowedActions && !allowedActions.download) || !ActionPanelService.oneSelected(items)
                        || ActionPanelService.oneSelectedEmbeddedDatasource(items);
                },
                execute: function (items, context) {
                    var scope = context.scope;
                    _this.contentActions.downloadDatasource(items.first())
                        .fail(function () { return scope.refreshContent(); }); // May have failed this action was taken on stale information
                }
            };
        };
        ActionPanelService.prototype.downloadWorkbookAction = function () {
            var _this = this;
            return {
                name: 'download',
                isAvailable: ActionPanelService.anySelected,
                isDisabled: function (items, detailedItem, allowedActions) {
                    return (!!allowedActions && !allowedActions.download) || !ActionPanelService.oneSelected(items);
                },
                execute: function (items, context, detailedItem) {
                    var workbook = detailedItem || items.first();
                    var scope = context.scope;
                    _this.contentActions.downloadWorkbook(workbook)
                        .fail(function () { return scope.refreshContent(); }); // May have failed this action was taken on stale information
                }
            };
        };
        ActionPanelService.prototype.permissionsAction = function () {
            var _this = this;
            return {
                name: 'permissions',
                translate: 'permissions_action',
                isAvailable: ActionPanelService.anySelected,
                isDisabled: function (items, detailedItem, allowedActions) {
                    return (allowedActions && !allowedActions.setPermissions);
                },
                execute: function (items, context) {
                    _this.EditPermissionsAction.showEditPermissionsDialog(context);
                }
            };
        };
        ActionPanelService.prototype.datasourcePermissionsAction = function () {
            var _this = this;
            return {
                name: 'permissions',
                translate: 'permissions_action',
                isAvailable: ActionPanelService.anySelected,
                isDisabled: function (items, detailedItem, allowedActions) {
                    return (allowedActions && !allowedActions.setPermissions) || ActionPanelService.oneSelectedEmbeddedDatasource(items);
                },
                execute: function (items, context) {
                    _this.EditPermissionsAction.showEditPermissionsDialog(context);
                }
            };
        };
        ActionPanelService.prototype.changeOwnerAction = function (changeOwnerAction, notFoundCode) {
            return {
                name: 'change-owner',
                translate: 'changeOwner_action',
                isAvailable: ActionPanelService.anySelected,
                isDisabled: function (items, detailedItem, allowedActions) {
                    return (!!allowedActions && !allowedActions.setOwner);
                },
                execute: function (items, context) {
                    var scope = context.scope;
                    var siteUserScope = context.scope;
                    changeOwnerAction(items, context)
                        .then(function (result) {
                        if (siteUserScope.user) {
                            VizPortal.ActionHelpers.deselectAllExceptErrors(scope.selectedItems, result, notFoundCode);
                        }
                        else {
                            VizPortal.ActionHelpers.deselectNotFound(scope.selectedItems, result, notFoundCode);
                        }
                        scope.refreshContent();
                    });
                }
            };
        };
        ActionPanelService.prototype.changeOwnerOnDatasourcesAction = function () {
            var _this = this;
            return {
                name: 'change-owner',
                translate: 'changeOwner_action',
                isDisabled: function (items, detailedItem, allowedActions) {
                    return (!!allowedActions && !allowedActions.setOwner) || ActionPanelService.oneSelectedEmbeddedDatasource(items);
                },
                isAvailable: ActionPanelService.anySelected,
                execute: function (items, context) {
                    var scope = context.scope;
                    var siteUserScope = context.scope;
                    _this.contentActions.changeOwnerOnDatasources(items, context)
                        .then(function (result) {
                        if (siteUserScope.user) {
                            VizPortal.ActionHelpers.deselectAllExceptErrors(scope.selectedItems, result, VizPortal.CommonErrorCode.DatasourceNotFound);
                        }
                        else {
                            VizPortal.ActionHelpers.deselectNotFound(scope.selectedItems, result, VizPortal.CommonErrorCode.DatasourceNotFound);
                        }
                        scope.refreshContent();
                    });
                }
            };
        };
        ActionPanelService.prototype.suspendSiteAction = function (suspendSiteAction) {
            return {
                name: 'suspend-site',
                translate: 'suspend_action',
                isAvailable: ActionPanelService.anySelected,
                isDisabled: this.getUpdateSiteAvailabilityDisabledFn(VizPortal.SiteAvailabilityState.SUSPENDED),
                execute: function (items, context) {
                    var scope = context.scope;
                    suspendSiteAction(items, context)
                        .then(function (result) {
                        VizPortal.ActionHelpers.deselectNotFound(scope.selectedItems, result, VizPortal.CommonErrorCode.SiteNotFound);
                        scope.refreshContent();
                    });
                }
            };
        };
        ActionPanelService.prototype.activateSiteAction = function (activateSiteAction) {
            return {
                name: 'activate-site',
                translate: 'activate_action',
                isAvailable: ActionPanelService.anySelected,
                isDisabled: this.getUpdateSiteAvailabilityDisabledFn(VizPortal.SiteAvailabilityState.ACTIVE),
                execute: function (items, context) {
                    var scope = context.scope;
                    activateSiteAction(items, context)
                        .then(function (result) {
                        VizPortal.ActionHelpers.deselectNotFound(scope.selectedItems, result, VizPortal.CommonErrorCode.SiteNotFound);
                        scope.refreshContent();
                    });
                }
            };
        };
        ActionPanelService.prototype.editSiteSettingsAction = function (editSiteAction) {
            return {
                name: 'edit-site-settings',
                translate: 'editSiteSettings_action',
                isAvailable: ActionPanelService.anySelected,
                isDisabled: function (items) { return !ActionPanelService.oneSelected(items); },
                execute: function (items, context) {
                    var scope = context.scope;
                    editSiteAction(items.first(), context)
                        .then(function () { return scope.refreshContent(); });
                }
            };
        };
        ActionPanelService.prototype.deleteSitesAction = function (deleteSitesAction) {
            return {
                name: 'delete',
                translate: 'delete_action',
                isAvailable: ActionPanelService.anySelected,
                isDisabled: function (items) {
                    return items.size() === 1 && items.first().settings.urlName === '';
                },
                execute: function (items, context) {
                    var scope = context.scope;
                    deleteSitesAction(items, context)
                        .then(function (result) {
                        VizPortal.ActionHelpers.deselectAllExceptErrors(scope.selectedItems, result, VizPortal.CommonErrorCode.SiteNotFound);
                        scope.refreshContent();
                    });
                }
            };
        };
        ActionPanelService.prototype.editAction = function (editAction, translate) {
            return {
                name: 'edit-workbook',
                translate: translate,
                isAvailable: ActionPanelService.anySelected,
                isDisabled: function (items, detailedItem, allowedActions) {
                    return !detailedItem
                        || !detailedItem.editUrl
                        || (!!allowedActions && !allowedActions.launchWebAuthoring);
                },
                execute: function (items, context, detailedItem) {
                    detailedItem && editAction(detailedItem);
                }
            };
        };
        ActionPanelService.prototype.newWorkbookAction = function () {
            var _this = this;
            return {
                name: 'new-workbook',
                translate: 'newWorkbook',
                isAvailable: ActionPanelService.anySelected,
                isDisabled: function (items, detailedItem, allowedActions) {
                    return !detailedItem
                        || !detailedItem.newWorkbookUrl
                        || (!!allowedActions && !allowedActions.launchWebAuthoring);
                },
                execute: function (items, context, detailedItem) {
                    detailedItem && _this.contentActions.newWorkbook(detailedItem);
                }
            };
        };
        ActionPanelService.prototype.changeTags = function (changeTags, notFoundCode) {
            return {
                name: 'change-tags',
                translate: 'tag_action',
                isAvailable: ActionPanelService.anySelected,
                execute: function (items, context) {
                    var scope = context.scope;
                    changeTags(items, context)
                        .then(function (result) {
                        VizPortal.ActionHelpers.deselectNotFound(scope.selectedItems, result, notFoundCode);
                        scope.refreshContent();
                    });
                }
            };
        };
        ActionPanelService.prototype.setTagsOnDatasourcesAction = function () {
            var _this = this;
            return {
                name: 'change-tags',
                translate: 'tag_action',
                isAvailable: ActionPanelService.anySelected,
                isDisabled: function (items) { return ActionPanelService.oneSelectedEmbeddedDatasource(items); },
                execute: function (items, context) {
                    var scope = context.scope;
                    _this.contentActions.setTagsOnDatasources(items, context)
                        .then(function (result) {
                        VizPortal.ActionHelpers.deselectNotFound(scope.selectedItems, result, VizPortal.CommonErrorCode.DatasourceNotFound);
                        scope.refreshContent();
                    });
                }
            };
        };
        ActionPanelService.prototype.createExtractRefreshForDatasourcesAction = function () {
            var _this = this;
            return {
                name: 'create-extract-refresh',
                translate: 'extractTasks_action',
                isAvailable: ActionPanelService.anySelected,
                isDisabled: function (datasources) { return _this.oneSelectedUnrefreshableDatasource(datasources); },
                execute: function (datasources, context) {
                    var scope = context.scope;
                    _this.CreateExtractTasksAction.forDatasources(datasources, context, VizPortal.CreateExtractTasksMode.AllowBoth)
                        .then(function (result) {
                        VizPortal.ActionHelpers.deselectNotFound(scope.selectedItems, result, VizPortal.CommonErrorCode.DatasourceNotFound);
                        scope.refreshContent();
                    });
                }
            };
        };
        ActionPanelService.prototype.createExtractRefreshForWorkbooksAction = function () {
            var _this = this;
            return {
                name: 'create-extract-refresh',
                translate: 'extractTasks_action',
                isAvailable: ActionPanelService.anySelected,
                isDisabled: function (items, detailedItem) {
                    return _this.oneSelectedUnrefreshableItem(items);
                },
                execute: function (workbooks, context) {
                    var scope = context.scope;
                    _this.CreateExtractTasksAction.forWorkbooks(workbooks, context, VizPortal.CreateExtractTasksMode.AllowBoth)
                        .then(function (result) {
                        VizPortal.ActionHelpers.deselectNotFound(scope.selectedItems, result, VizPortal.CommonErrorCode.WorkbookNotFound);
                        scope.refreshContent();
                    });
                }
            };
        };
        ActionPanelService.prototype.editConnectionAction = function () {
            var _this = this;
            return {
                name: 'edit-connection',
                translate: 'editConnection_action',
                isAvailable: ActionPanelService.anySelected,
                isDisabled: function (dataSources) {
                    return dataSources.size() === 1 && !_this.isConnectionEditable(dataSources.first());
                },
                execute: function (dataSources, context) {
                    var scope = context.scope;
                    _this.EditConnectionAction.confirmEditConnections(dataSources, context)
                        .then(function (result) {
                        VizPortal.ActionHelpers.deselectNotFound(scope.selectedItems, result, VizPortal.CommonErrorCode.DatasourceNotFound);
                        scope.refreshContent();
                    });
                }
            };
        };
        ActionPanelService.prototype.setDisplayTabsAction = function () {
            var _this = this;
            return {
                name: 'setDisplayTabs',
                translate: 'setDisplayTabs_action',
                isAvailable: ActionPanelService.anySelected,
                isDisabled: function (workbooks, detail, allowedActions) {
                    return !!allowedActions && !allowedActions.setDisplayTabs;
                },
                execute: function (workbooks, context) {
                    var scope = context.scope;
                    _this.SetDisplayTabsAction.confirmSetDisplayTabs(workbooks, context)
                        .then(function (result) {
                        VizPortal.ActionHelpers.deselectNotFound(scope.selectedItems, result, VizPortal.CommonErrorCode.WorkbookNotFound);
                        scope.refreshContent();
                    });
                }
            };
        };
        ActionPanelService.prototype.isConnectionEditable = function (datasource) {
            return datasource.connectionTypeEditable && this.isAdminOrOwner(datasource.owner.id);
        };
        ActionPanelService.prototype.getContentActionButtons = function (contentType, place) {
            // Special case for embedded data sources in a workbook
            if (place === VizPortal.WorkbookContentType.name && contentType === VizPortal.DatasourceContentType.name) {
                return [
                    this.editConnectionAction()
                ];
            }
            else {
                return this.contentActionDefinitions[contentType];
            }
        };
        ActionPanelService.$inject = [
            '$state',
            'ServerService',
            'ContentActions',
            'EditConnectionAction',
            'EditPermissionsAction',
            'HideViewsAction',
            'SetDisplayTabsAction',
            'CreateExtractTasksAction',
            'DeleteDatasourcesAction',
            'RevisionHistoryAction'
        ];
        return ActionPanelService;
    })();
    VizPortal.ActionPanelService = ActionPanelService;
    VizPortal.Module.instance().service('ActionPanelService', ActionPanelService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/ActionContext.ts" />
/// <reference path="../services/ActionPanelService.ts" />
var VizPortal;
(function (VizPortal) {
    var ActionButtonsHelper;
    (function (ActionButtonsHelper) {
        function setupActionButtons(scope, actionButtons) {
            scope.menuActions = actionButtons;
            scope.showActionMenu = function () { return _.any(scope.menuActions, scope.availableAction); };
            scope.actionButtonContext = VizPortal.ActionContext.fromEvent;
            scope.actionMenuContext = function (menuButton) {
                return {
                    scope: scope
                };
            };
        }
        ActionButtonsHelper.setupActionButtons = setupActionButtons;
    })(ActionButtonsHelper = VizPortal.ActionButtonsHelper || (VizPortal.ActionButtonsHelper = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../models/IPlace.ts" />
/// <reference path="../ServerApi/types/IFilterClause.ts" />
var VizPortal;
(function (VizPortal) {
    var SubplaceEvents = (function () {
        function SubplaceEvents() {
        }
        SubplaceEvents.Refresh = 'Refresh';
        SubplaceEvents.RefreshCounts = 'RefreshCounts';
        return SubplaceEvents;
    })();
    VizPortal.SubplaceEvents = SubplaceEvents;
    var SubplaceTabsHelper;
    (function (SubplaceTabsHelper) {
        function refreshWhenCurrentTabClicked($scope, $state) {
            $scope.subplaceTabClicked = function (name) {
                var currentTab = $state.includes('**.' + name + '.**');
                if (currentTab) {
                    $scope.$broadcast(SubplaceEvents.Refresh);
                }
                else {
                    $scope.$broadcast(SubplaceEvents.RefreshCounts, name);
                }
            };
        }
        SubplaceTabsHelper.refreshWhenCurrentTabClicked = refreshWhenCurrentTabClicked;
    })(SubplaceTabsHelper = VizPortal.SubplaceTabsHelper || (VizPortal.SubplaceTabsHelper = {}));
    var SubplaceCountsHelper;
    (function (SubplaceCountsHelper) {
        function updateCountsFromSubplace($scope, subplace, count) {
            $scope.subplaceCounts[subplace.name] = count;
        }
        SubplaceCountsHelper.updateCountsFromSubplace = updateCountsFromSubplace;
        function keepSubplaceCountsUpdated($scope, place) {
            var subplaceFilters = {};
            $scope.subplaceCounts = $scope.subplaceCounts || {};
            var refreshCounts = function (force) {
                _.each(place.subplaces(), function (subplace) {
                    var name = subplace.name;
                    var query = subplace.query();
                    var newFilters = query.getFilters();
                    if (force || !_.isEqual(newFilters, subplaceFilters[name])) {
                        subplaceFilters[name] = newFilters;
                        query.getCount().then(function (count) {
                            $scope.subplaceCounts[subplace.name] = count;
                        });
                    }
                });
            };
            $scope.$on('$locationChangeSuccess', function () {
                refreshCounts();
            });
            $scope.$on(SubplaceEvents.RefreshCounts, function () {
                refreshCounts(true);
            });
            refreshCounts();
        }
        SubplaceCountsHelper.keepSubplaceCountsUpdated = keepSubplaceCountsUpdated;
    })(SubplaceCountsHelper = VizPortal.SubplaceCountsHelper || (VizPortal.SubplaceCountsHelper = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../models/ILayout.ts" />
/// <reference path="../models/ISize.ts" />
var VizPortal;
(function (VizPortal) {
    var FlowLayout = (function () {
        function FlowLayout(itemWidth, itemHeight) {
            this.itemWidth = itemWidth;
            this.itemHeight = itemHeight;
        }
        FlowLayout.prototype.metrics = function (dimensions) {
            return {
                numberOfRows: Math.max(Math.ceil(dimensions.height / this.itemHeight), 1),
                numberOfCols: Math.max(Math.floor(dimensions.width / this.itemWidth), 1),
                heightOfRowInPx: this.itemHeight
            };
        };
        return FlowLayout;
    })();
    VizPortal.FlowLayout = FlowLayout;
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/ServerService.ts" />
var VizPortal;
(function (VizPortal) {
    var HelpService = (function () {
        function HelpService($window, server) {
            this.$window = $window;
            this.server = server;
        }
        HelpService.prototype.search = function (searchText) {
            searchText = encodeURIComponent(searchText);
            if (this.server.offlineHelpEnabled()) {
                // Example: http://localhost/offline_help/en_us/help.htm#search-workbooks
                this.$window.open(this.offlineHelpRoute('search-') + searchText, '_blank');
            }
            else {
                // Example: http://www.tableau.com/search/support/workbooks
                this.$window.open(this.supportUrlPrefix() + '/search/support/' + searchText, '_blank');
            }
        };
        HelpService.prototype.getServerHelpUrlByCategory = function (category) {
            if (this.server.offlineHelpEnabled()) {
                return this.offlineHelpRoute(HelpService.ONLINE_TOKEN_OFFLINE_PAGE_DICT[category]);
            }
            else {
                var lang = this.helpUrlLanguage();
                // Params must be ordered: edition, lang, version
                var query = $.param({
                    'edition': this.server.helpEdition(),
                    'lang': lang,
                    'version': this.externalVersion()
                });
                // Example: http://www.tableau.com/en-us/app/server-views1?edition=server&lang=en-us&version=9.0
                return HelpService.tableauUrl + '/' + lang + '/app/' + 'server-' + (category ? category : 'help1') + '?' + query;
            }
        };
        HelpService.prototype.getGeneralSupportUrl = function () {
            if (this.server.helpEdition() !== 'online') {
                return this.supportUrlPrefix() + '/support';
            }
            // Open a support request (i.e., Zeus support form)
            return 'https://' + this.server.sessionSupportHost() + this.server.sessionSupportPath() +
                '?' + $.param({
                'uid': this.server.sessionAuthUserId(),
                'serverSiteUserId': this.server.sessionUserId(),
                'serverSiteId': this.server.sessionSiteLuid(),
                'serverInstanceId': this.server.sessionServerId()
            });
        };
        HelpService.prototype.getDatasourceHelpUrl = function () {
            var datasourceHelpUrl = this.server.datasourceHelpUrl();
            if (!datasourceHelpUrl) {
                return '';
            }
            var queryConnector = (datasourceHelpUrl.indexOf('?') >= 0) ? '&' : '?';
            var query = $.param({
                'lang': this.helpUrlLanguage(),
                'version': this.externalVersion()
            });
            return datasourceHelpUrl + queryConnector + query;
        };
        HelpService.prototype.getHelpLinkLocKey = function () {
            return this.server.helpEdition() === 'online' ? 'onlineHelp' : 'serverHelp';
        };
        // Helpers
        HelpService.prototype.supportUrlPrefix = function () {
            var lang = this.helpUrlLanguage();
            return HelpService.tableauUrl + (lang === 'en-us' ? '' : '/' + lang);
        };
        HelpService.prototype.offlineHelpRoute = function (page) {
            var lang = this.helpUrlLanguage().replace('-', '_');
            return 'offline_help/' + lang + '/help.htm' + (page ? '#' + page : '');
        };
        HelpService.prototype.externalVersion = function () {
            var version = this.server.sessionServerVersion().externalVersion;
            var intRegExp = /^\d+$/;
            if (intRegExp.test(version.major) && intRegExp.test(version.minor)) {
                return version.major + '.' + version.minor;
            }
            else {
                return '0.0';
            }
        };
        HelpService.prototype.helpUrlLanguage = function () {
            switch (this.server.sessionLanguage()) {
                case "de": return "de-de";
                case "en": return "en-us";
                case "es": return "es-es";
                case "fr": return "fr-fr";
                case "ja": return "ja-jp";
                case "ko": return "ko-kr";
                case "pt": return "pt-br";
                case "zh": return "zh-cn";
                default: return 'en-us';
            }
        };
        // Needed for offline help, see wgapp/app/mixins/help_support.rb
        HelpService.ONLINE_TOKEN_OFFLINE_PAGE_DICT = {
            'adminusers2': 'csvguidelines.htm',
            'status1': 'service_viewstatus.htm',
            'settings-adsync1': 'groups_globalsync.htm'
        };
        HelpService.tableauUrl = 'http://www.tableau.com';
        HelpService.$inject = [
            '$window',
            'ServerService'
        ];
        return HelpService;
    })();
    VizPortal.HelpService = HelpService;
    VizPortal.Module.instance().service('HelpService', HelpService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../ts/libs.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var Dispatcher;
    (function (Dispatcher) {
        Dispatcher.instance = new Flux.Dispatcher();
    })(Dispatcher = VizPortalReact.Dispatcher || (VizPortalReact.Dispatcher = {}));
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../ts/ServerApi/types/IOrderClause.ts" />
/// <reference path="Dispatcher.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    function SetOrderAction(order) {
        var payload = {
            actionType: SetOrderAction.Type,
            order: order
        };
        VizPortalReact.Dispatcher.instance.dispatch(payload);
    }
    VizPortalReact.SetOrderAction = SetOrderAction;
    var SetOrderAction;
    (function (SetOrderAction) {
        SetOrderAction.Type = 'set-order';
    })(SetOrderAction = VizPortalReact.SetOrderAction || (VizPortalReact.SetOrderAction = {}));
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    /**
    * TODO: use Event Emitter?
    */
    var Store = (function () {
        function Store() {
            this.changeListeners = [];
        }
        Store.prototype.addChangeListener = function (cb) {
            this.changeListeners = this.changeListeners.concat(cb);
        };
        Store.prototype.removeChangeListener = function (cb) {
            this.changeListeners = _.without(this.changeListeners, cb);
        };
        Store.prototype.broadcast = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            this.changeListeners.map(function (cb) {
                // Note: change listeners should be pre-bound to the correct value of 'this'.
                cb.apply(null, args);
            });
        };
        return Store;
    })();
    VizPortalReact.Store = Store;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../ts/ServerApi/types/IOrderClause.ts" />
/// <reference path="Dispatcher.ts" />
/// <reference path="OrderActions.ts" />
/// <reference path="Store.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var OrderStore = (function (_super) {
        __extends(OrderStore, _super);
        function OrderStore(order) {
            var _this = this;
            _super.call(this);
            this.order = order;
            VizPortalReact.Dispatcher.instance.register(function (payload) {
                switch (payload.actionType) {
                    case VizPortalReact.SetOrderAction.Type:
                        _this.order = payload.order;
                        _this.broadcast();
                }
            });
        }
        OrderStore.prototype.getOrderClauses = function () {
            return this.order;
        };
        return OrderStore;
    })(VizPortalReact.Store);
    VizPortalReact.OrderStore = OrderStore;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/Order.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/types/IOrderClause.ts" />
/// <reference path="../../common/react/OrderStore.ts" />
/// <reference path="../../common/react/OrderActions.ts" />
var VizPortal;
(function (VizPortal) {
    var SorterFactory = (function () {
        function SorterFactory($location) {
            this.$location = $location;
        }
        SorterFactory.prototype.create = function (defaultOrder) {
            return new Sorter(this.$location, defaultOrder);
        };
        SorterFactory.$inject = ['$location'];
        return SorterFactory;
    })();
    VizPortal.SorterFactory = SorterFactory;
    var Sorter = (function () {
        function Sorter($location, defaultOrder) {
            this.$location = $location;
            this.defaultOrder = defaultOrder;
            this.orderStore = new VizPortalReact.OrderStore(defaultOrder);
        }
        Sorter.prototype.setPrimary = function (field, direction) {
            if (!field) {
                return;
            }
            var order = this.orderStore.getOrderClauses();
            if (VizPortal.Order.startsWithField(order, field)) {
                if (_.isEqual(order, this.defaultOrder) && order.length > 0) {
                    // keep the first clause of the default order
                    order = order.slice(0, 1);
                }
                order = VizPortal.Order.withFirstClauseToggled(order);
            }
            else {
                if (_.isEqual(order, this.defaultOrder)) {
                    // clear the order so that default order clauses don't get inserted into the URL
                    order = [];
                }
                order = VizPortal.Order.withClausePrepended(order, { field: field, ascending: direction === 'asc' });
            }
            VizPortalReact.SetOrderAction(order);
            this.updateOrder();
        };
        Sorter.prototype.removeFieldFromOrder = function (field) {
            var order = this.orderStore.getOrderClauses();
            order = VizPortal.Order.withoutField(order, field);
            if (!order.length) {
                // if the order is now empty, revert back to the default.
                order = this.defaultOrder;
            }
            VizPortalReact.SetOrderAction(order);
            this.updateOrder();
        };
        Sorter.prototype.setOrder = function (order) {
            VizPortalReact.SetOrderAction(order);
            this.updateOrder();
        };
        Sorter.prototype.getOrderClauses = function () {
            return this.orderStore.getOrderClauses();
        };
        Sorter.prototype.isSortAscending = function () {
            var order = this.orderStore.getOrderClauses();
            return order[0].ascending;
        };
        Sorter.prototype.selectedColumnKey = function () {
            var order = this.orderStore.getOrderClauses();
            return order.length > 0 ? order[0].field : '';
        };
        Sorter.prototype.isSortAscendingBy = function (key) {
            return this.selectedColumnKey() === key && this.isSortAscending();
        };
        Sorter.prototype.isSortDescendingBy = function (key) {
            return this.selectedColumnKey() === key && !this.isSortAscending();
        };
        /**
         * Returns the order store so that react components can be notified when the order changes.
         * TODO: Refactor this so that the OrderStore is a dependency that is injected to the Sorter's constructor.
         *       Then this method can be removed.
         */
        Sorter.prototype.getOrderStore = function () {
            return this.orderStore;
        };
        Sorter.prototype.updateOrder = function () {
            var order = this.orderStore.getOrderClauses();
            if (order && order.length > 0) {
                // If the new order is the same as the default, just clear the URL parameter.
                this.$location.search('order', _.isEqual(order, this.defaultOrder) ? null : VizPortal.Order.serialize(order));
            }
        };
        return Sorter;
    })();
    VizPortal.Sorter = Sorter;
    VizPortal.Module.instance().service('SorterFactory', SorterFactory);
})(VizPortal || (VizPortal = {}));
/// <reference path="../ts/libs.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    /*
     * Constructs urls for site pages, given the site name and query string.
     *
     * e.g.
     *
     *   var siteUrls = new SiteUrls({ siteUrlName: 'mysite', queryString: 'foo=bar' });
     *
     *   siteUrls.projectUrl(12);    // returns '/?foo=bar#/site/mysite/projects/12'
     *
     */
    var SiteUrls = (function () {
        function SiteUrls(config) {
            // Sanitize inputs and calculate prefix
            var queryString = _.isString(config.queryString) ? config.queryString : '';
            // Insert a '?' if necessary
            if (queryString && queryString.length > 0 && queryString[0] !== '?') {
                queryString = '?' + queryString;
            }
            var siteUrlFragment = _.isString(config.siteUrlName) && config.siteUrlName.length > 0
                ? '/site/' + config.siteUrlName
                : '';
            this.prefix = '/' + queryString + '#' + siteUrlFragment;
            this.queryString = queryString;
        }
        // Returns a copy of SiteUrls modified for a different siteUrlName
        SiteUrls.prototype.forSiteUrlName = function (siteUrlName) {
            return new SiteUrls({
                siteUrlName: siteUrlName,
                queryString: this.queryString
            });
        };
        // Home
        SiteUrls.prototype.home = function () {
            return this.prefix + '/home';
        };
        // Projects
        SiteUrls.prototype.projectUrl = function (projectId) {
            return this.prefix + '/projects/' + projectId;
        };
        SiteUrls.prototype.projectViewsUrl = function (projectId) {
            return this.projectUrl(projectId) + '/views';
        };
        SiteUrls.prototype.projectsUrl = function () {
            return this.prefix + '/projects';
        };
        // Workbooks
        SiteUrls.prototype.workbookUrl = function (workbookId) {
            return this.prefix + '/workbooks/' + workbookId;
        };
        SiteUrls.prototype.workbookViewsUrl = function (workbookId) {
            return this.workbookUrl(workbookId) + '/views';
        };
        SiteUrls.prototype.workbookDatasourcesUrl = function (workbookId) {
            return this.workbookUrl(workbookId) + '/datasources';
        };
        SiteUrls.prototype.favoriteWorkbook = function (workbookId) {
            return this.workbookUrl(workbookId);
        };
        // Views
        SiteUrls.prototype.viewUrl = function (viewPath) {
            return this.prefix + '/views/' + viewPath;
        };
        SiteUrls.prototype.favoriteView = function (viewId) {
            return this.prefix + '/redirect_to_view/' + viewId;
        };
        // Users
        SiteUrls.prototype.usersUrl = function () {
            return this.prefix + '/users';
        };
        SiteUrls.prototype.userContentUrl = function (user) {
            return this.prefix + '/user/' + user.domainName + '/' + user.username + '/workbooks';
        };
        SiteUrls.prototype.userSettingsUrl = function (user) {
            return this.prefix + '/user/' + user.domainName + '/' + user.username + '/settings';
        };
        // Data sources
        SiteUrls.prototype.datasourceUrl = function (datasourceId) {
            return this.prefix + '/datasources/' + datasourceId;
        };
        SiteUrls.prototype.datasourceDetailsUrl = function (datasourceId) {
            return this.datasourceUrl(datasourceId) + '/details';
        };
        SiteUrls.prototype.datasourceDataConnectionUrl = function (datasourceId) {
            return this.datasourceUrl(datasourceId) + '/dataConnection';
        };
        // Groups
        SiteUrls.prototype.groupsUrl = function () {
            return this.prefix + '/groups';
        };
        SiteUrls.prototype.group = function (groupId) {
            return this.prefix + '/groups/' + groupId;
        };
        // Schedules
        SiteUrls.prototype.schedule = function (scheduleId, scheduledAction) {
            return this.prefix + '/schedules/' + scheduleId + '/' +
                (scheduledAction === VizPortal.ServerApi.ScheduleActions.Extract ? 'extractRefreshes' : 'subscriptions');
        };
        SiteUrls.prototype.schedulesUrl = function () {
            return this.prefix + '/schedules';
        };
        // Others
        SiteUrls.prototype.settingsUrl = function () {
            return this.prefix + '/settings';
        };
        SiteUrls.prototype.statusUrl = function () {
            return this.prefix + '/status';
        };
        SiteUrls.prototype.tasksUrl = function () {
            return this.prefix + '/tasks';
        };
        return SiteUrls;
    })();
    VizPortalReact.SiteUrls = SiteUrls;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../libs.ts" />
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    /**
    * This class is used as a facade for react components to communicate back with the angular world.
    * TODO: rename this file to AngularContextFactory
    */
    var AngularContext = (function () {
        function AngularContext($scope, $injector, $compile) {
            this.$scope = $scope;
            this.$injector = $injector;
            this.$compile = $compile;
        }
        AngularContext.prototype.compileElement = function (element, setupScope) {
            var $scope = setupScope ? setupScope(this.$scope) : this.$scope;
            this.$compile(element)($scope);
            return element;
        };
        AngularContext.prototype.getService = function (name) {
            return this.$injector.get(name);
        };
        AngularContext.prototype.enqueueDigest = function () {
            // we can't call $digest directly because we might already be in a digest cycle and that would cause angular to throw.
            // instead, schedule another digest to run later.
            this.$scope.$evalAsync(angular.noop);
        };
        AngularContext.prototype.evalAsync = function (fn) {
            this.$scope.$evalAsync(fn);
        };
        return AngularContext;
    })();
    VizPortal.AngularContext = AngularContext;
    VizPortal.Module.instance().factory('AngularContextFactory', ['$injector', '$compile',
        function ($injector, $compile) {
            return {
                create: function ($scope) { return new AngularContext($scope, $injector, $compile); }
            };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../../../ts/libs.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var DataGridFavoriteToggle = (function (_super) {
        __extends(DataGridFavoriteToggle, _super);
        function DataGridFavoriteToggle() {
            _super.apply(this, arguments);
        }
        DataGridFavoriteToggle.prototype.shouldComponentUpdate = function (nextProps, nextState) {
            return React.addons.PureRenderMixin.shouldComponentUpdate.call(this, nextProps, nextState);
        };
        DataGridFavoriteToggle.prototype.render = function () {
            var _this = this;
            var classes = ['tb-favorite-button'];
            if (this.props.isFavorite) {
                classes.push('tb-selected');
            }
            return React.DOM.span({
                className: 'tb-favorite-button-cell',
                onClick: function (event) { return _this.handleClick(event); },
                'data-tb-test-id': this.props.testId
            }, React.DOM.span({
                className: classes.join(' ')
            }));
        };
        DataGridFavoriteToggle.prototype.handleClick = function (event) {
            if (this.props.onSetFavorite) {
                this.props.onSetFavorite(!this.props.isFavorite);
            }
            event.preventDefault();
            event.stopPropagation();
        };
        DataGridFavoriteToggle.displayName = 'DataGridFavoriteToggle';
        DataGridFavoriteToggle.element = React.createFactory(DataGridFavoriteToggle);
        return DataGridFavoriteToggle;
    })(React.Component);
    VizPortalReact.DataGridFavoriteToggle = DataGridFavoriteToggle;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../../../ts/libs.ts" />
/// <reference path="../../../../ts/models/IListScope.ts" />
/// <reference path="../../../../ts/controllers/AngularCtrl.ts" />
/// <reference path="../../CommonStyles.ts" />
/// <reference path="DataGridFavoriteToggle.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var DataGridCells;
    (function (DataGridCells) {
        //TODO - make cells subclasses of React.Component
        function CheckboxCell(options) {
            return React.createFactory(React.createClass({
                handleClick: function (event) {
                    var props = this.props;
                    options.onCheckboxClicked(props.row);
                    event.preventDefault();
                    event.stopPropagation();
                },
                render: function () {
                    var props = this.props;
                    var classes = ['tb-checkbox'];
                    if (props.isSelected) {
                        classes.push('tb-checked');
                    }
                    return React.DOM.span({ className: 'tb-checkbox-cell', onClick: this.handleClick, 'data-tb-test-id': options.checkboxCellTestId }, React.DOM.span({ className: classes.join(' ') }));
                }
            }));
        }
        DataGridCells.CheckboxCell = CheckboxCell;
        function FavoriteCell(options) {
            return React.createFactory(React.createClass({
                render: function () {
                    var props = this.props;
                    return VizPortalReact.DataGridFavoriteToggle.element({
                        isFavorite: props.row.data.favorite,
                        onSetFavorite: function (isFavorite) {
                            if (isFavorite) {
                                options.onAddFavorite(props.row);
                            }
                            else {
                                options.onRemoveFavorite(props.row);
                            }
                        },
                        testId: options.favoriteCellTestId
                    });
                }
            }));
        }
        DataGridCells.FavoriteCell = FavoriteCell;
        function ActionsCell(contentFormatter, options) {
            return React.createFactory(React.createClass({
                render: function () {
                    var content = contentFormatter(this.props);
                    if (options.menuDisabled && options.menuDisabled(this.props.row)) {
                        return content;
                    }
                    return VizPortalReact.ActionsMenuColumnCell.element({
                        actions: options.actions,
                        getActionTarget: options.getActionTarget,
                        translate: options.translate,
                        testId: options.testId
                    }, content);
                }
            }));
        }
        DataGridCells.ActionsCell = ActionsCell;
        function SiteRoleCell(propertyName, $translate, testId) {
            return React.createFactory(React.createClass({
                render: function () {
                    var props = this.props;
                    var siteRoleName = props.row.data[propertyName];
                    if (!siteRoleName) {
                        return null;
                    }
                    var translationId = 'siteRole_' + siteRoleName;
                    return React.DOM.span({ 'data-tb-test-id': testId }, $translate.instant(translationId));
                }
            }));
        }
        DataGridCells.SiteRoleCell = SiteRoleCell;
        function UserDisplayNameCell(testId) {
            return React.createFactory(React.createClass({
                render: function () {
                    var props = this.props;
                    var nameElement = React.DOM.a({ href: '/#/user/' + props.row.data.domainName +
                            '/' + props.row.data.username + '/workbooks' }, props.value);
                    if (props.row.data.siteRole === 'Guest') {
                        nameElement = React.DOM.span({}, props.value);
                    }
                    return React.DOM.span({ 'data-tb-test-id': testId }, React.DOM.span({ className: 'tb-grid-icon-user' }), nameElement);
                }
            }));
        }
        DataGridCells.UserDisplayNameCell = UserDisplayNameCell;
        function Link(linkFn) {
            return React.createFactory(React.createClass({
                render: function () {
                    var link = linkFn(this.props.row);
                    var linkElement = React.DOM.a({
                        href: link.url,
                        title: link.text,
                        style: link.style
                    }, link.text);
                    return React.DOM.span({
                        'data-tb-test-id': link.testId
                    }, React.DOM.span({ className: link.iconClassName, title: link.iconTitle }), linkElement);
                }
            }));
        }
        DataGridCells.Link = Link;
        function FixedValue(value) {
            return React.createFactory(React.createClass({
                render: function () {
                    return React.DOM.span({ 'title': value }, value);
                }
            }));
        }
        DataGridCells.FixedValue = FixedValue;
        function PlainTextCell(propertyName, testId) {
            return React.createFactory(React.createClass({
                render: function () {
                    var props = this.props;
                    var text = props.row.data[propertyName];
                    return React.DOM.span({ 'title': text, 'data-tb-test-id': testId }, text);
                }
            }));
        }
        DataGridCells.PlainTextCell = PlainTextCell;
        function PlainTextCellWithTransform(propertyName, transform, testId) {
            return React.createFactory(React.createClass({
                render: function () {
                    var props = this.props;
                    var text = transform(props.row.data[propertyName]);
                    return React.DOM.span({ 'title': text, 'data-tb-test-id': testId }, text);
                }
            }));
        }
        DataGridCells.PlainTextCellWithTransform = PlainTextCellWithTransform;
        function DateTimeCell(propertyName, nullDateTimeLabel, testId) {
            return React.createFactory(React.createClass({
                render: function () {
                    var props = this.props;
                    var dateTime = props.row.data[propertyName];
                    return React.DOM.span({ 'data-tb-test-id': testId }, dateTime ? VizPortal.L10n.localizedDateTime(dateTime) : nullDateTimeLabel);
                }
            }));
        }
        DataGridCells.DateTimeCell = DateTimeCell;
        function SizeCell(propertyName, sizeFilter, testId) {
            return React.createFactory(React.createClass({
                render: function () {
                    var props = this.props;
                    var sizeInBytes = props.row.data[propertyName];
                    return React.DOM.span({ 'data-tb-test-id': testId }, sizeFilter(sizeInBytes));
                }
            }));
        }
        DataGridCells.SizeCell = SizeCell;
        function Checkmark(propertyName) {
            var propertyNameParts = propertyName.split('.');
            return React.createFactory(React.createClass({
                render: function () {
                    var value = this.props.row.data;
                    _.each(propertyNameParts, function (part) {
                        value = value[part];
                    });
                    return React.DOM.span({
                        className: value ? 'tb-icon-checkmark' : null
                    });
                }
            }));
        }
        DataGridCells.Checkmark = Checkmark;
        //TODO - remove this and use React actions menu instead
        function AngularActionsCell(angularContext) {
            return React.createFactory(React.createClass({
                render: function () {
                    return VizPortalReact.AngularDirective.element({
                        angularContext: angularContext,
                        template: "<tb:popup-menu>" +
                            "  <tb:popup-menu-custom-button class='tb-data-grid-action-menu'>" +
                            "    <span class='tb-action-icon'></span>" +
                            "  </tb:popup-menu-custom-button>" +
                            "  <tb:popup-menu-content>" +
                            "    <div ng-include=\"'actionMenu.html'\"></div>" +
                            "  </tb:popup-menu-content>" +
                            "</tb:popup-menu>"
                    });
                }
            }));
        }
        DataGridCells.AngularActionsCell = AngularActionsCell;
        function LocalizedCount(propertyName, testId) {
            return React.createFactory(React.createClass({
                render: function () {
                    var props = this.props;
                    var count = props.row.data[propertyName];
                    var localizedCount = VizPortal.L10n.localizedCount(count);
                    return React.DOM.span({ 'data-tb-test-id': testId }, localizedCount);
                }
            }));
        }
        DataGridCells.LocalizedCount = LocalizedCount;
        function LocalizedCountWithBar(dataKey, maxStatsObject, testId) {
            return React.createFactory(React.createClass({
                render: function () {
                    var props = this.props;
                    var count = props.row.data[dataKey];
                    var localizedCount = VizPortal.L10n.localizedCount(count);
                    var max = maxStatsObject(props.row.data)[dataKey];
                    var normalizedValue = max ? (count / max) : 0;
                    var barVerticalMargin = VizPortal.FeatureFlags.useTallerRowHeight ?
                        VizPortalReact.CommonStyles.Sizes.DefaultSpace : VizPortalReact.CommonStyles.Sizes.SmallSpace;
                    return React.DOM.div({
                        style: {
                            marginTop: barVerticalMargin,
                            height: VizPortalReact.DataGrid.BodyRow.InnerHeight - (2 * barVerticalMargin),
                            width: (normalizedValue * 100) + '%',
                            backgroundColor: props.isSelected ?
                                VizPortalReact.CommonStyles.Colors.Grey245 : VizPortalReact.CommonStyles.Colors.Grey218
                        },
                        'data-tb-test-id': testId
                    }, React.DOM.span({
                        style: {
                            lineHeight: VizPortalReact.DataGrid.BodyRow.InnerHeight - (2 * barVerticalMargin) + 'px',
                            paddingLeft: VizPortalReact.CommonStyles.Sizes.DefaultSpace,
                            verticalAlign: 'top'
                        }
                    }, localizedCount));
                }
            }));
        }
        DataGridCells.LocalizedCountWithBar = LocalizedCountWithBar;
        function AlertCell(type, translate, angularContext, testId) {
            return React.createFactory(React.createClass({
                render: function () {
                    var props = this.props;
                    var hasAlert = props.row.data['hasAlert'];
                    if (!hasAlert) {
                        return null;
                    }
                    var id = props.row.data['id'];
                    return VizPortalReact.Menu.element({
                        tbTestId: testId,
                        menuButtonFactory: function () { return React.DOM.span({
                            className: 'tb-data-grid-icon tb-icon-alert',
                            'data-tb-test-id': testId,
                            title: translate('hasAlert')
                        }, ''); },
                        menuPanelFactory: function () {
                            // TODO: rewrite tb:alert-info as a React component
                            return VizPortalReact.AngularDirective.element({
                                angularContext: angularContext,
                                template: "<div class='tb-popup-menu-content tb-padded-small' style='min-width: 250px; white-space: normal; line-height: normal'>" +
                                    "  <tb:alert-info type=\"'" + type + "'\" id=\"'" + id + "'\"></tb:alert-info>" +
                                    "</div>"
                            });
                        }
                    });
                }
            }));
        }
        DataGridCells.AlertCell = AlertCell;
        function ScheduleDescriptionCell(scheduleUrlFn, scheduleFrequencyDescriptionFilter) {
            return React.createFactory(React.createClass({
                render: function () {
                    var row = this.props.row;
                    var schedule = row.data.schedule;
                    return React.DOM.span({}, React.DOM.a({
                        href: scheduleUrlFn(row),
                        title: schedule.name
                    }, schedule.name), React.DOM.span({ dangerouslySetInnerHTML: { __html: '&nbsp;&ndash;&nbsp;' } }), React.DOM.span({}, scheduleFrequencyDescriptionFilter(schedule)));
                }
            }));
        }
        DataGridCells.ScheduleDescriptionCell = ScheduleDescriptionCell;
    })(DataGridCells = VizPortalReact.DataGridCells || (VizPortalReact.DataGridCells = {}));
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="components/dataGrid/DataGridCells.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var CommonDataGridColumns;
    (function (CommonDataGridColumns) {
        function withActions(originalColumn, actionOptions) {
            return _.extend({}, originalColumn, {
                cellFormatter: VizPortalReact.DataGridCells.ActionsCell(originalColumn.cellFormatter, actionOptions),
                cellStyle: _.extend({}, originalColumn.cellStyle, {
                    paddingRight: 0,
                    overflow: 'visible' // To let the action menu extend beyond the row
                })
            });
        }
        CommonDataGridColumns.withActions = withActions;
        // The $scope parameter can be any scope that has a 'selectedItems' member.
        function selected($scope) {
            return {
                name: 'selected-col',
                dataKey: 'selected',
                text: '',
                cellFormatter: VizPortalReact.DataGridCells.CheckboxCell({
                    onCheckboxClicked: function (row) { return toggleSelection($scope, row); }
                }),
                resizable: false,
                sortable: false,
                cellStyle: {
                    padding: 0
                }
            };
        }
        CommonDataGridColumns.selected = selected;
        function favorite($scope) {
            return {
                name: 'favorite-col',
                dataKey: 'favorite',
                text: '',
                cellFormatter: VizPortalReact.DataGridCells.FavoriteCell({
                    onAddFavorite: function (row) { return addFavorite($scope, row); },
                    onRemoveFavorite: function (row) { return removeFavorite($scope, row); }
                }),
                resizable: false,
                sortable: false,
                cellStyle: {
                    padding: 0
                }
            };
        }
        CommonDataGridColumns.favorite = favorite;
        function toggleSelection($scope, row) {
            $scope.$apply(function () {
                $scope.selectedItems.toggle(row.data);
            });
        }
        function addFavorite($scope, row) {
            $scope.$apply(function () {
                $scope.addFavorite(row.data);
                row.data.favorite = true;
                $scope.dataGridProps.update++;
            });
        }
        function removeFavorite($scope, row) {
            $scope.$apply(function () {
                $scope.removeFavorite(row.data);
                row.data.favorite = false;
                $scope.dataGridProps.update++;
            });
        }
        function owner(translate, siteUrls, getOwnerFn) {
            return {
                name: 'owner-name-col',
                dataKey: 'ownerName',
                text: translate('column_owner'),
                direction: 'asc',
                cellFormatter: VizPortalReact.DataGridCells.Link(function (row) {
                    var owner = getOwnerFn ? getOwnerFn(row) : row.data.owner;
                    return {
                        text: owner.displayName,
                        url: siteUrls.userContentUrl(owner)
                    };
                })
            };
        }
        CommonDataGridColumns.owner = owner;
        function alert(type, translate, angularContext) {
            return {
                name: 'has-alert-col',
                dataKey: 'hasAlert',
                text: '',
                tooltip: translate('column_has_alert'),
                resizable: false,
                cellFormatter: VizPortalReact.DataGridCells.AlertCell(type, translate, angularContext),
                headerStyle: {
                    backgroundImage: 'url(img/alert_list_header_normal.png)',
                    backgroundRepeat: 'no-repeat',
                    backgroundPosition: 'center',
                    width: 19
                },
                cellStyle: {
                    overflow: 'visible' // To let the alert drop-down extend beyond the cell
                }
            };
        }
        CommonDataGridColumns.alert = alert;
    })(CommonDataGridColumns = VizPortalReact.CommonDataGridColumns || (VizPortalReact.CommonDataGridColumns = {}));
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../../../ts/libs.ts" />
/// <reference path="../../../../ts/FeatureFlags.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var DataGrid = (function (_super) {
        __extends(DataGrid, _super);
        function DataGrid() {
            _super.apply(this, arguments);
            this.state = {
                measuredHeaderWidths: null,
                measuredColumnWidths: null,
                colWidths: null,
                scrollLeft: 0,
                rows: null,
                isShowingLoadingIndicator: true
            };
        }
        DataGrid.prototype.componentDidMount = function () {
            var rect = React.findDOMNode(this).getBoundingClientRect();
            this.gridWidth = Math.ceil(rect.right - rect.left);
            // Fetch an initial set of rows
            this.fetchInitialData(this.props);
        };
        DataGrid.prototype.componentWillReceiveProps = function (nextProps) {
            // When componentWillRecieveProps is called, this.props is not (yet) equal to the new props.
            this.fetchInitialData(nextProps);
        };
        DataGrid.prototype.fetchInitialData = function (props) {
            this.setState({ isShowingLoadingIndicator: true });
            this.fetchUsingProps(props, 0, 0);
        };
        DataGrid.prototype.fetch = function (start, end) {
            this.fetchUsingProps(this.props, start, end);
        };
        DataGrid.prototype.fetchUsingProps = function (props, start, end) {
            var _this = this;
            if (props.rowStore) {
                props.rowStore.getItems(start, end).then(function (rows) {
                    _this.setState({ rows: rows, isShowingLoadingIndicator: false }, function () {
                        if (_this.props.updated) {
                            _this.props.updated(rows);
                        }
                    });
                });
            }
        };
        DataGrid.prototype.onColumnResize = function (column, width) {
            var newColumnWidth = {};
            newColumnWidth[column.name] = width;
            this.setState({ colWidths: React.addons.update(this.state.colWidths || {}, {
                    $merge: newColumnWidth
                }) });
        };
        DataGrid.prototype.handleClick = function (row, col) {
            if (this.props.onCellClick) {
                this.props.onCellClick(row.data, col.dataKey);
            }
        };
        DataGrid.prototype.handleMeasureHeaderWidths = function (widths) {
            var _this = this;
            this.setState({ measuredHeaderWidths: widths }, function () { return _this.maybeUpdateColumnWidths(); });
        };
        DataGrid.prototype.handleMeasureColumnWidths = function (widths) {
            var _this = this;
            this.setState({ measuredColumnWidths: widths }, function () { return _this.maybeUpdateColumnWidths(); });
        };
        DataGrid.prototype.maybeUpdateColumnWidths = function () {
            var _this = this;
            if (this.state.measuredColumnWidths && this.state.measuredHeaderWidths) {
                // First pass - allocate column widths up to a maximum per column (MaxInitialColumnWidth)
                var preferredWidths = {};
                var widths = {};
                var totalWidth = 0;
                _.each(this.props.cols, function (col) {
                    var columnKey = col.name;
                    var preferredWidth;
                    if (col.preferredWidth) {
                        preferredWidth = col.preferredWidth;
                    }
                    else {
                        preferredWidth = Math.max(_this.state.measuredColumnWidths[columnKey], _this.state.measuredHeaderWidths[columnKey]);
                    }
                    preferredWidths[columnKey] = preferredWidth;
                    widths[columnKey] = Math.min(preferredWidth, DataGrid.MaxInitialColumnWidth);
                    totalWidth += widths[columnKey];
                });
                // TODO: calculate content to determine if vertical scrollbar width is needed
                // Second pass - allocate unused width in left-to-right column order up to each col's preferred width
                var extraAvailable = this.gridWidth - DataGrid.ScrollbarWidth - totalWidth;
                var growToFitCols = 0;
                for (var i = 0; i < this.props.cols.length && extraAvailable > 0; i++) {
                    var col = this.props.cols[i];
                    var extraRequested = preferredWidths[col.name] - widths[col.name];
                    if (extraRequested > 0) {
                        var extraAllocated = Math.min(extraRequested, extraAvailable);
                        widths[col.name] += extraAllocated;
                        extraAvailable -= extraAllocated;
                    }
                    if (col.growToFit) {
                        growToFitCols += 1;
                    }
                }
                // Third pass - allocate remaining width evenly to any growToFit columns
                if (extraAvailable > 0 && growToFitCols > 0) {
                    var extraWidth = extraAvailable / growToFitCols;
                    _.each(this.props.cols, function (col) {
                        if (col.growToFit) {
                            widths[col.name] += extraWidth;
                        }
                    });
                }
                this.setState({ colWidths: widths });
            }
        };
        DataGrid.prototype.render = function () {
            var cols = this.props.cols;
            var rows = this.state.rows;
            var colWidths = this.state.colWidths;
            var scrollLeft = this.state.scrollLeft;
            var children = [];
            if (_.isArray(rows)) {
                // Header
                children.push(DataGrid.HeaderRow.element({
                    key: 'header',
                    cols: cols,
                    colWidths: colWidths || this.getProvisionalColumnWidths(),
                    sortKey: this.props.sortKey,
                    sortAscending: this.props.sortAscending !== false,
                    onHeaderClicked: this.props.onHeaderClicked ? this.props.onHeaderClicked.bind(this) : null,
                    measureColumnWidths: !colWidths && this.handleMeasureHeaderWidths.bind(this),
                    scrollLeft: scrollLeft,
                    onColumnResize: this.onColumnResize.bind(this)
                }));
                // Body
                if (rows.length > 0) {
                    children.push(DataGrid.Body.element({
                        key: 'body',
                        cols: cols,
                        colWidths: colWidths,
                        measureColumnWidths: !colWidths && this.handleMeasureColumnWidths.bind(this),
                        reportScrollLeftFn: this.bodyScrollLeft.bind(this),
                        rows: rows,
                        selectedKeys: this.props.selectedKeys || {},
                        onClick: this.handleClick.bind(this),
                        fetch: this.fetch.bind(this)
                    }));
                }
                else {
                    children.push(DataGrid.EmptyBody.element({
                        key: 'emptyBody',
                        emptyChild: this.props.emptyChild
                    }));
                }
            }
            if (VizPortal.FeatureFlags.reactDataGridLoadingIndicator) {
                if (this.state.isShowingLoadingIndicator) {
                    children.push(React.DOM.div({ className: 'tb-backdrop-white' }));
                    children.push(React.DOM.span({ className: 'tb-loading-indicator' }));
                }
            }
            return React.DOM.div({
                className: 'tb-react-data-grid',
                tabIndex: 0,
                style: {
                    outline: 'none'
                }
            }, children);
        };
        // getProvisionalColumnWidths is used when we have no data rows, so can't measure the width
        // of the data columns. We just choose reasonable widths for the headers.
        DataGrid.prototype.getProvisionalColumnWidths = function () {
            var _this = this;
            // Only compute provisional column widths if the header widths have already been measured
            if (!this.state.measuredHeaderWidths) {
                return null;
            }
            // Find the total width of the measured headers
            var totalWidth = 0;
            var numberOfResizableColumns = 0;
            _.each(this.props.cols, function (col) {
                if (col.preferredWidth) {
                    totalWidth += col.preferredWidth;
                }
                else {
                    totalWidth += _this.state.measuredHeaderWidths[col.name];
                }
                if (col.resizable !== false) {
                    numberOfResizableColumns++;
                }
            });
            // Allocate any extra space evenly between the resizable headers
            var extraAvailable = this.gridWidth - DataGrid.ScrollbarWidth - totalWidth;
            var provisionalColumnWidths = {};
            if (extraAvailable > 0) {
                var extraPerHeader = extraAvailable / numberOfResizableColumns;
                _.each(this.props.cols, function (col) {
                    if (col.resizable !== false) {
                        var width;
                        if (col.preferredWidth) {
                            width = col.preferredWidth;
                        }
                        else {
                            width = _this.state.measuredHeaderWidths[col.name];
                        }
                        provisionalColumnWidths[col.name] = width + extraPerHeader;
                    }
                });
            }
            return provisionalColumnWidths;
        };
        DataGrid.prototype.bodyScrollLeft = function (scrollLeft) {
            if (scrollLeft !== this.state.scrollLeft) {
                this.setState({ scrollLeft: scrollLeft });
            }
        };
        DataGrid.displayName = 'DataGrid';
        DataGrid.element = React.createFactory(DataGrid);
        DataGrid.MaxInitialColumnWidth = 200;
        DataGrid.ScrollbarWidth = 20;
        // Enforcing a minimum column width prevents some glitches when the columns
        // get very narrow. It would be ideal to find ways to remove the glitches and
        // reduce this minimum to 0.
        DataGrid.MinimumColumnWidth = 35;
        return DataGrid;
    })(React.Component);
    VizPortalReact.DataGrid = DataGrid;
    var DataGrid;
    (function (DataGrid) {
        // Helpers
        function measureWidth(componentOrElement) {
            var domNode = React.findDOMNode(componentOrElement);
            var rect = domNode.getBoundingClientRect();
            return Math.ceil(rect.right - rect.left);
        }
        // BodyCell
        var BodyCell = (function (_super) {
            __extends(BodyCell, _super);
            function BodyCell() {
                _super.apply(this, arguments);
            }
            BodyCell.prototype.componentDidMount = function () {
                if (!this.props.reportWidthFn)
                    return;
                var width = measureWidth(this);
                this.props.reportWidthFn(this.props.col.name, width);
            };
            BodyCell.prototype.shouldComponentUpdate = function (nextProps, nextState) {
                return React.addons.PureRenderMixin.shouldComponentUpdate.call(this, nextProps, nextState);
            };
            BodyCell.prototype.render = function () {
                var _this = this;
                var content = this.props.col.cellFormatter
                    ? this.props.col.cellFormatter(this.props)
                    : this.props.value;
                var attrs = {
                    className: 'tb-react-dg-bcell',
                    style: {
                        display: 'inline-block',
                        boxSizing: 'border-box',
                        width: this.props.width
                    },
                    onClick: function (e) {
                        if (e.defaultPrevented) {
                            return;
                        }
                        if (_this.props.onClick) {
                            _this.props.onClick(_this.props.row, _this.props.col);
                        }
                    }
                };
                if (this.props.col.cellStyle) {
                    _.extend(attrs.style, this.props.col.cellStyle);
                }
                return React.DOM.div(attrs, content);
            };
            BodyCell.displayName = 'DataGridBodyCell';
            BodyCell.element = React.createFactory(BodyCell);
            return BodyCell;
        })(React.Component);
        // BodyRow
        var BodyRow = (function (_super) {
            __extends(BodyRow, _super);
            function BodyRow() {
                _super.apply(this, arguments);
            }
            BodyRow.prototype.shouldComponentUpdate = function (nextProps, nextState) {
                return React.addons.PureRenderMixin.shouldComponentUpdate.call(this, nextProps, nextState);
            };
            BodyRow.prototype.render = function () {
                var _this = this;
                var row = this.props.row;
                var colWidths = this.props.colWidths;
                var color = null;
                if (this.props.isSelected) {
                    color = BodyRow.SelectedColor;
                }
                else if (this.props.isHovered) {
                    color = BodyRow.HoverColor;
                }
                var cells = row
                    ? this.props.cols.map(function (col, i) {
                        return BodyCell.element({
                            key: i,
                            col: col,
                            row: row,
                            value: row.data[col.dataKey],
                            width: colWidths && colWidths[col.name],
                            reportWidthFn: !col.preferredWidth && _this.props.handleReportCellWidth,
                            isSelected: _this.props.isSelected,
                            onClick: _this.props.onClick.bind(_this)
                        });
                    })
                    : null;
                var attrs = {
                    className: 'tb-react-dg-brow',
                    style: {
                        height: BodyRow.InnerHeight,
                        borderBottom: '1px solid #e6e6e6',
                        backgroundColor: color,
                        whiteSpace: 'nowrap'
                    },
                    onMouseEnter: function () { return _this.props.handleMouseEnter(row); },
                    onMouseLeave: function () { return _this.props.handleMouseLeave(); }
                };
                if (row && row.rowStyle) {
                    _.extend(attrs.style, row.rowStyle);
                }
                return React.DOM.div(attrs, cells);
            };
            BodyRow.displayName = 'DataGridBodyRow';
            BodyRow.element = React.createFactory(BodyRow);
            BodyRow.InnerHeight = VizPortal.FeatureFlags.useTallerRowHeight ? 37 : 27;
            BodyRow.OuterHeight = BodyRow.InnerHeight + 1;
            BodyRow.SelectedColor = '#d4e1ed';
            BodyRow.HoverColor = '#f5f5f5';
            return BodyRow;
        })(React.Component);
        DataGrid.BodyRow = BodyRow;
        // BodySection
        var BodySection = (function (_super) {
            __extends(BodySection, _super);
            function BodySection() {
                _super.apply(this, arguments);
                this.state = {
                    hoverRow: null
                };
            }
            BodySection.prototype.handleMouseEnter = function (row) {
                this.setState({ hoverRow: row });
            };
            BodySection.prototype.handleMouseLeave = function () {
                this.setState({ hoverRow: null });
            };
            BodySection.prototype.handleReportCellWidth = function (columnKey, width) {
                this.measuredWidths[columnKey] = Math.max(width, this.measuredWidths[columnKey] || 0);
            };
            BodySection.prototype.componentWillMount = function () {
                this.measuredWidths = {};
            };
            BodySection.prototype.componentDidMount = function () {
                if (this.props.measureColumnWidths) {
                    this.props.measureColumnWidths(this.measuredWidths);
                }
            };
            BodySection.prototype.shouldComponentUpdate = function (nextProps, nextState) {
                return React.addons.PureRenderMixin.shouldComponentUpdate.call(this, nextProps, nextState);
            };
            BodySection.prototype.render = function () {
                var cols = this.props.cols;
                var colWidths = this.props.colWidths;
                var rows = this.props.rows;
                var onClick = this.props.onClick;
                var handleMouseEnter = this.handleMouseEnter.bind(this);
                var handleMouseLeave = this.handleMouseLeave.bind(this);
                var handleReportCellWidth = this.props.measureColumnWidths ? this.handleReportCellWidth.bind(this) : null;
                var rowElements = [];
                for (var i = 0; i < rows.length; i++) {
                    var row = rows[i];
                    rowElements.push(BodyRow.element({
                        key: i,
                        row: row,
                        cols: cols,
                        colWidths: colWidths,
                        onClick: onClick,
                        isSelected: row && _.has(this.props.selectedKeys, row.key),
                        isHovered: row && (this.state.hoverRow === row),
                        handleMouseEnter: handleMouseEnter,
                        handleMouseLeave: handleMouseLeave,
                        handleReportCellWidth: handleReportCellWidth
                    }));
                }
                return React.DOM.div({
                    className: 'tb-react-dg-bsection',
                    style: {
                        height: rows.length * BodyRow.OuterHeight
                    }
                }, React.DOM.div({
                    style: {
                        position: 'absolute',
                        minWidth: '100%'
                    }
                }, rowElements));
            };
            BodySection.displayName = 'DataGridBodySection';
            BodySection.element = React.createFactory(BodySection);
            return BodySection;
        })(React.Component);
        // Body
        var Body = (function (_super) {
            __extends(Body, _super);
            function Body() {
                _super.apply(this, arguments);
                this.state = {
                    indexOfFirstVisibleSection: 0,
                    indexOfLastVisibleSection: 0
                };
            }
            // TODO: see if there's a way to enable pure rendering. Currently, it seems to mess up column width measurement.
            Body.prototype.render = function () {
                var _this = this;
                var rows = this.props.rows;
                if (!rows || rows.length === 0) {
                    return React.DOM.div({ className: 'tb-react-dg-body' });
                }
                var sections = this.renderSections();
                var topSpacer = this.state.indexOfFirstVisibleSection * Body.SectionHeight;
                var sectionsWrapper = React.DOM.div({
                    style: {
                        paddingTop: topSpacer,
                        height: rows.length * BodyRow.OuterHeight - topSpacer
                    }
                }, sections);
                return React.DOM.div({
                    className: 'tb-react-dg-body',
                    onScroll: function () { return _this.onScroll(); }
                }, sectionsWrapper);
            };
            Body.prototype.renderSections = function () {
                var sections = [];
                for (var i = this.state.indexOfFirstVisibleSection; i <= this.state.indexOfLastVisibleSection; i++) {
                    var sectionRows = this.props.rows.slice(i * Body.SectionRows, Math.min((i + 1) * Body.SectionRows, this.props.rows.length));
                    sections.push(BodySection.element({
                        key: i,
                        cols: this.props.cols,
                        colWidths: this.props.colWidths,
                        measureColumnWidths: i === this.state.indexOfFirstVisibleSection ? this.props.measureColumnWidths : null,
                        rows: sectionRows,
                        onClick: this.props.onClick,
                        selectedKeys: this.props.selectedKeys
                    }));
                }
                return sections;
            };
            Body.prototype.componentDidMount = function () {
                var _this = this;
                if (!window.addEventListener && window.attachEvent) {
                    var element = React.findDOMNode(this);
                    element.attachEvent('onscroll', function () {
                        _this.onScroll();
                    });
                }
                this.updateSections();
            };
            Body.prototype.componentWillUnmount = function () {
                if (!window.addEventListener && window.attachEvent) {
                    var element = React.findDOMNode(this);
                    element.detachEvent('onscroll');
                }
            };
            Body.prototype.onScroll = function () {
                this.updateSections();
                var reportScrollLeftFn = this.props.reportScrollLeftFn;
                if (reportScrollLeftFn) {
                    reportScrollLeftFn(React.findDOMNode(this).scrollLeft);
                }
            };
            Body.prototype.updateSections = function () {
                var _this = this;
                var node = $(React.findDOMNode(this));
                var viewportTop = node.scrollTop();
                var viewportBottom = viewportTop + node.height();
                var indexOfFirstVisibleSection = Math.floor(viewportTop / Body.SectionHeight);
                var indexOfLastVisibleSection = Math.ceil(viewportBottom / Body.SectionHeight);
                if (indexOfFirstVisibleSection === this.state.indexOfFirstVisibleSection
                    && indexOfLastVisibleSection === this.state.indexOfLastVisibleSection) {
                    return;
                }
                this.setState({
                    indexOfFirstVisibleSection: indexOfFirstVisibleSection,
                    indexOfLastVisibleSection: indexOfLastVisibleSection
                }, function () { return _this.fetch(); });
            };
            Body.prototype.fetch = function () {
                if (!this.props.fetch)
                    return;
                this.props.fetch(this.state.indexOfFirstVisibleSection * Body.SectionRows, (this.state.indexOfLastVisibleSection + 1) * Body.SectionRows - 1);
            };
            Body.displayName = 'DataGridBody';
            Body.element = React.createFactory(Body);
            Body.SectionRows = 10;
            Body.SectionHeight = Body.SectionRows * BodyRow.OuterHeight;
            return Body;
        })(React.Component);
        DataGrid.Body = Body;
        // HeaderColumn
        var HeaderColumn = (function (_super) {
            __extends(HeaderColumn, _super);
            function HeaderColumn(props) {
                var _this = this;
                _super.call(this, props);
                this.state = {
                    hovered: false
                };
                this.boundMouseEnter = function () { return _this.setState({ hovered: true }); };
                this.boundMouseLeave = function () { return _this.setState({ hovered: false }); };
            }
            HeaderColumn.prototype.startResize = function (event) {
                var _this = this;
                var resizeMouseX = event.clientX;
                var node = React.findDOMNode(this);
                var rect = node.getBoundingClientRect();
                var initialWidth = rect.right - rect.left;
                $(document).on("mousemove.mousecapture", function (e) {
                    var delta = e.clientX - resizeMouseX;
                    _this.props.onColumnResize(_this.props.col, Math.max(initialWidth + delta, DataGrid.MinimumColumnWidth));
                    e.preventDefault();
                });
                $(document).on("mouseup.mousecapture", function (e) {
                    $(document).off(".mousecapture");
                    e.preventDefault();
                });
                event.preventDefault();
            };
            HeaderColumn.prototype.shouldComponentUpdate = function (nextProps, nextState) {
                return React.addons.PureRenderMixin.shouldComponentUpdate.call(this, nextProps, nextState);
            };
            HeaderColumn.prototype.render = function () {
                var _this = this;
                var col = this.props.col;
                var isSortable = col.sortable !== false;
                var isResizable = col.resizable !== false;
                // Determine column header classes
                var classes = ['tb-react-dg-hcell'];
                if (isSortable) {
                    classes.push('tb-react-dg-hcell-sortable');
                }
                if (this.props.sorted) {
                    classes.push(this.props.sortAscending ? 'tb-react-dg-hcell-sort-asc' : 'tb-react-dg-hcell-sort-desc');
                }
                if (isResizable) {
                    classes.push('tb-react-dg-hcell-resizable');
                }
                // Determine column header attributes
                var attrs = {
                    className: classes.join(' '),
                    onMouseEnter: this.boundMouseEnter,
                    onMouseLeave: this.boundMouseLeave
                };
                if (isSortable && this.props.onHeaderClicked) {
                    attrs.onClick = function () { return _this.props.onHeaderClicked(col.dataKey, col.direction); };
                }
                if (col.headerStyle) {
                    attrs.style = col.headerStyle;
                }
                if (col.tooltip) {
                    attrs.title = col.tooltip;
                }
                var content = this.props.col.headerFormatter
                    ? col.headerFormatter(_.extend({}, this.props, this.state))
                    : React.DOM.span({ className: 'tb-react-dg-hcell-text' }, col.text);
                return React.DOM.span({ className: 'tb-react-dg-hcol', style: { width: this.props.width } }, React.DOM.div(attrs, content), col.resizable === false ? null : React.DOM.div({
                    className: 'tb-react-dg-hdivider tb-disable-selection',
                    onMouseDown: this.startResize.bind(this)
                }));
            };
            HeaderColumn.prototype.componentDidMount = function () {
                if (!this.props.reportWidthFn)
                    return;
                var width = measureWidth(this);
                this.props.reportWidthFn(this.props.col.name, width);
            };
            HeaderColumn.displayName = 'DataGridHeaderColumn';
            HeaderColumn.element = React.createFactory(HeaderColumn);
            return HeaderColumn;
        })(React.Component);
        // HeaderRow
        var HeaderRow = (function (_super) {
            __extends(HeaderRow, _super);
            function HeaderRow() {
                _super.apply(this, arguments);
            }
            HeaderRow.prototype.componentWillMount = function () {
                this.measuredWidths = {};
            };
            HeaderRow.prototype.componentDidMount = function () {
                if (this.props.measureColumnWidths) {
                    this.props.measureColumnWidths(this.measuredWidths);
                }
            };
            HeaderRow.prototype.handleReportHeaderWidth = function (columnKey, width) {
                this.measuredWidths[columnKey] = Math.max(width, this.measuredWidths[columnKey] || 0);
            };
            HeaderRow.prototype.shouldComponentUpdate = function (nextProps, nextState) {
                return React.addons.PureRenderMixin.shouldComponentUpdate.call(this, nextProps, nextState);
            };
            HeaderRow.prototype.render = function () {
                var _this = this;
                var cols = this.props.cols;
                var colWidths = this.props.colWidths;
                var reportWidthFn = this.handleReportHeaderWidth.bind(this);
                ;
                var scrollLeft = this.props.scrollLeft;
                var onColumnResize = this.props.onColumnResize;
                var hcols = cols.map(function (col) {
                    return HeaderColumn.element({
                        key: col.name,
                        col: col,
                        sorted: _this.props.sortKey === col.dataKey,
                        sortAscending: _this.props.sortAscending,
                        reportWidthFn: !col.preferredWidth && reportWidthFn,
                        width: colWidths && colWidths[col.name],
                        onColumnResize: onColumnResize,
                        onHeaderClicked: _this.props.onHeaderClicked
                    });
                });
                return React.DOM.div({ className: 'tb-react-dg-hrow' }, React.DOM.span({ className: 'tb-react-dg-hcols', style: { marginLeft: -scrollLeft } }, hcols));
            };
            HeaderRow.displayName = 'DataGridHeaderRow';
            HeaderRow.element = React.createFactory(HeaderRow);
            return HeaderRow;
        })(React.Component);
        DataGrid.HeaderRow = HeaderRow;
        // EmptyBody
        var EmptyBody = (function (_super) {
            __extends(EmptyBody, _super);
            function EmptyBody() {
                _super.apply(this, arguments);
            }
            EmptyBody.prototype.shouldComponentUpdate = function (nextProps, nextState) {
                return React.addons.PureRenderMixin.shouldComponentUpdate.call(this, nextProps, nextState);
            };
            EmptyBody.prototype.render = function () {
                return React.DOM.div({
                    className: 'tb-react-dg-body'
                }, this.props.emptyChild);
            };
            EmptyBody.displayName = 'EmptyBody';
            EmptyBody.element = React.createFactory(EmptyBody);
            return EmptyBody;
        })(React.Component);
        DataGrid.EmptyBody = EmptyBody;
    })(DataGrid = VizPortalReact.DataGrid || (VizPortalReact.DataGrid = {}));
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../common/react/CommonDataGridColumns.ts" />
/// <reference path="../../common/react/components/dataGrid/DataGrid.ts" />
/// <reference path="../../common/react/components/dataGrid/DataGridCells.ts" />
/// <reference path="../../ts/controllers/AngularCtrl.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var DatasourceGrid;
    (function (DatasourceGrid) {
        function columns(translate, scope, siteUrls, actions, getActionTarget, anyActionsAllowed, inProjectPlace, inWorkbookPlace, angularContext) {
            var columns = [];
            if (anyActionsAllowed) {
                columns.push(VizPortalReact.CommonDataGridColumns.selected(scope));
            }
            columns = columns.concat([
                nameColumn(anyActionsAllowed, translate, siteUrls, actions, getActionTarget, inWorkbookPlace),
                {
                    name: 'connection-type-col',
                    dataKey: 'connectionTypeDisplayName',
                    text: translate('column_connection_type'),
                    direction: 'asc'
                },
                {
                    name: 'connects-to-col',
                    dataKey: 'connectsTo',
                    text: translate('column_connects_to'),
                    sortable: false,
                    cellFormatter: connectsToCellFormatter(siteUrls)
                },
                {
                    name: 'last-refreshed-at-col',
                    dataKey: 'lastRefreshedAt',
                    text: translate('column_last_refresh'),
                    cellFormatter: VizPortalReact.DataGridCells.DateTimeCell('lastRefreshedAt', translate('live')),
                    direction: 'desc'
                }
            ]);
            if (!inProjectPlace && !inWorkbookPlace) {
                columns.push({
                    name: 'project-name-col',
                    dataKey: 'projectName',
                    text: translate('column_project'),
                    direction: 'asc',
                    cellFormatter: VizPortalReact.DataGridCells.Link(function (row) {
                        return {
                            text: row.data.project ? row.data.project.name : '',
                            url: row.data.project ? siteUrls.projectUrl(row.data.project.id) : ''
                        };
                    })
                });
            }
            if (!inWorkbookPlace) {
                columns.push(VizPortalReact.CommonDataGridColumns.owner(translate, siteUrls));
                columns.push({
                    name: 'updated-at-col',
                    dataKey: 'updatedAt',
                    text: translate('column_updated'),
                    direction: 'desc',
                    cellFormatter: VizPortalReact.DataGridCells.DateTimeCell('updatedAt')
                });
            }
            columns.push(VizPortalReact.CommonDataGridColumns.alert('datasource', translate, angularContext));
            return columns;
        }
        DatasourceGrid.columns = columns;
        function nameColumn(anyActionsAllowed, translate, siteUrls, actions, getActionTarget, inWorkbookPlace) {
            var column = {
                name: 'name-col',
                dataKey: 'name',
                text: translate('column_name'),
                direction: 'asc',
                cellFormatter: React.createFactory(React.createClass({
                    render: function () {
                        var props = this.props;
                        var datasource = props.row.data;
                        var isEmbedded = !!datasource.workbook;
                        return isEmbedded
                            ? embeddedName(datasource, inWorkbookPlace, siteUrls)
                            : publishedName(datasource, siteUrls);
                    }
                }))
            };
            if (anyActionsAllowed) {
                column = VizPortalReact.CommonDataGridColumns.withActions(column, {
                    actions: actions,
                    getActionTarget: getActionTarget,
                    translate: translate
                });
            }
            return column;
        }
        function embeddedName(datasource, inWorkbookPlace, siteUrls) {
            var title = datasource.name;
            var parts = [
                React.DOM.span({ key: 'icon', className: 'tb-icon-datasource-embedded' }),
                React.DOM.span({ key: 'name' }, datasource.name)
            ];
            if (!inWorkbookPlace) {
                title += " - " + datasource.workbook.name;
                parts.push(React.DOM.span({ key: 'dash' }, ' - '));
                parts.push(React.DOM.a({
                    key: 'workbookLink',
                    href: siteUrls.workbookDatasourcesUrl(datasource.workbook.id),
                    title: datasource.workbook.name
                }, datasource.workbook.name));
            }
            return React.DOM.span({ title: title }, parts);
        }
        function publishedName(datasource, siteUrls) {
            return React.DOM.span({ title: datasource.name }, React.DOM.span({ className: 'tb-icon-datasource-published' }), React.DOM.a({
                href: siteUrls.datasourceUrl(datasource.id),
                title: datasource.name
            }, datasource.name));
        }
        function connectsToCellFormatter(siteUrls) {
            return React.createFactory(React.createClass({
                render: function () {
                    var props = this.props;
                    var datasource = props.row.data;
                    switch (datasource.connectionDetails.type) {
                        case VizPortal.ServerApi.ConnectionDetailType.TableauServer:
                            return React.DOM.a({
                                href: siteUrls.datasourceUrl(datasource.connectionDetails.id)
                            }, React.DOM.span({ className: 'tb-icon-datasource-connection-tableau' }), React.DOM.span({ title: datasource.connectionDetails.name }, datasource.connectionDetails.name));
                        case VizPortal.ServerApi.ConnectionDetailType.File:
                            return React.DOM.span({}, React.DOM.span({ className: 'tb-icon-datasource-connection-file' }), React.DOM.span({ title: datasource.connectionDetails.fileName }, datasource.connectionDetails.fileName));
                        default:
                            return React.DOM.span({}, React.DOM.span({ className: 'tb-icon-datasource-connection-external' }), React.DOM.span({ title: datasource.connectionDetails.serverName }, datasource.connectionDetails.serverName));
                    }
                }
            }));
        }
    })(DatasourceGrid = VizPortalReact.DatasourceGrid || (VizPortalReact.DatasourceGrid = {}));
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../common/react/CommonDataGridColumns.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var ProjectGrid;
    (function (ProjectGrid) {
        function columns(translate, siteUrls, actions, getActionTarget, scope, anyActionsAllowed) {
            var columns = [];
            if (anyActionsAllowed) {
                columns.push(VizPortalReact.CommonDataGridColumns.selected(scope));
            }
            columns = columns.concat([
                nameColumn(translate, siteUrls, anyActionsAllowed, actions, getActionTarget),
                {
                    name: 'workbook-count-col',
                    dataKey: 'workbookCount',
                    text: translate('column_numWorkbooks'),
                    cellFormatter: VizPortalReact.DataGridCells.LocalizedCount('workbookCount'),
                    direction: 'asc',
                    headerStyle: { textAlign: 'right' },
                    cellStyle: { textAlign: 'right' }
                },
                {
                    name: 'view-count-col',
                    dataKey: 'viewCount',
                    text: translate('column_numViews'),
                    cellFormatter: VizPortalReact.DataGridCells.LocalizedCount('viewCount'),
                    direction: 'asc',
                    headerStyle: { textAlign: 'right' },
                    cellStyle: { textAlign: 'right' }
                },
                {
                    name: 'datasource-count-col',
                    dataKey: 'datasourceCount',
                    text: translate('column_numDatasources'),
                    cellFormatter: VizPortalReact.DataGridCells.LocalizedCount('datasourceCount'),
                    direction: 'asc',
                    headerStyle: { textAlign: 'right' },
                    cellStyle: { textAlign: 'right' }
                },
                VizPortalReact.CommonDataGridColumns.owner(translate, siteUrls),
                {
                    name: 'created-at-col',
                    dataKey: 'createdAt',
                    text: translate('column_created'),
                    direction: 'desc',
                    cellFormatter: VizPortalReact.DataGridCells.DateTimeCell('createdAt')
                },
            ]);
            return columns;
        }
        ProjectGrid.columns = columns;
        function nameColumn(translate, siteUrls, anyActionsAllowed, actions, getActionTarget) {
            var col = {
                name: 'name-col',
                dataKey: 'name',
                text: translate('column_name'),
                direction: 'asc',
                cellFormatter: VizPortalReact.DataGridCells.Link(function (row) {
                    return {
                        text: row.data.name,
                        url: siteUrls.projectUrl(row.data.id),
                        iconClassName: 'tb-grid-icon-project',
                        iconTitle: translate('project')
                    };
                })
            };
            if (anyActionsAllowed) {
                col = VizPortalReact.CommonDataGridColumns.withActions(col, {
                    actions: actions,
                    getActionTarget: getActionTarget,
                    translate: translate
                });
            }
            return col;
        }
    })(ProjectGrid = VizPortalReact.ProjectGrid || (VizPortalReact.ProjectGrid = {}));
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../common/react/CommonDataGridColumns.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var SiteGrid;
    (function (SiteGrid) {
        function columns(translate, scope, sizeFilter, actions, getActionTarget, siteUrls, showLiveDatabaseConnectionsColumn) {
            var columns = [
                VizPortalReact.CommonDataGridColumns.selected(scope),
                nameColumn(translate, siteUrls, actions, getActionTarget),
                {
                    name: 'user-count-col',
                    dataKey: 'userCount',
                    text: translate('column_userCount'),
                    cellFormatter: VizPortalReact.DataGridCells.LocalizedCount('userCount'),
                    direction: 'asc',
                    headerStyle: { textAlign: 'right' },
                    cellStyle: { textAlign: 'right' }
                },
                {
                    name: 'admin-count-col',
                    dataKey: 'adminCount',
                    text: translate('column_adminCount'),
                    cellFormatter: VizPortalReact.DataGridCells.LocalizedCount('adminCount'),
                    direction: 'asc',
                    headerStyle: { textAlign: 'right' },
                    cellStyle: { textAlign: 'right' }
                },
                {
                    name: 'user-quota-col',
                    dataKey: 'userQuota',
                    text: translate('column_maxUsers'),
                    cellFormatter: userQuotaFormatter(translate),
                    direction: 'asc',
                    headerStyle: { textAlign: 'right' },
                    cellStyle: { textAlign: 'right' }
                },
                {
                    name: 'storage-used-col',
                    dataKey: 'storageUsedBytes',
                    text: translate('column_storageUsed'),
                    cellFormatter: storageUsedFormatter(sizeFilter),
                    direction: 'asc',
                    headerStyle: { textAlign: 'right' },
                    cellStyle: { textAlign: 'right' }
                },
                {
                    name: 'storage-quota-col',
                    dataKey: 'storageQuotaBytes',
                    text: translate('column_storageQuota'),
                    cellFormatter: storageQuotaFormatter(translate, sizeFilter),
                    direction: 'asc',
                    headerStyle: { textAlign: 'right' },
                    cellStyle: { textAlign: 'right' }
                },
                {
                    name: 'status-col',
                    dataKey: 'availability',
                    text: translate('column_status'),
                    cellFormatter: VizPortalReact.DataGridCells.PlainTextCellWithTransform('availability', translate),
                    direction: 'asc'
                },
                {
                    name: 'metrics-col',
                    dataKey: 'metricsEnabled',
                    text: translate('column_metrics'),
                    cellFormatter: VizPortalReact.DataGridCells.Checkmark('settings.metricsEnabled'),
                    direction: 'desc'
                },
                {
                    name: 'web-authoring-col',
                    dataKey: 'authoringEnabled',
                    text: translate('column_webAuthoring'),
                    cellFormatter: VizPortalReact.DataGridCells.Checkmark('settings.authoringEnabled'),
                    direction: 'desc'
                },
                {
                    name: 'sheet-image-col',
                    dataKey: 'sheetImageEnabled',
                    text: translate('column_sheetImage'),
                    cellFormatter: VizPortalReact.DataGridCells.Checkmark('settings.sheetImageEnabled'),
                    direction: 'desc'
                }
            ];
            if (showLiveDatabaseConnectionsColumn) {
                columns.push({
                    name: 'live-connections-whitelist-enabled-col',
                    dataKey: 'liveDBConnectionsWhitelistEnabled',
                    text: translate('column_liveDBConnectionsWhitelistEnabled'),
                    cellFormatter: VizPortalReact.DataGridCells.Checkmark('siteAdminSettings.liveDBConnectionsWhitelistEnabled'),
                    direction: 'desc'
                });
            }
            columns.push({
                name: 'edit-membership-col',
                dataKey: 'siteAdminsCanAddUsers',
                text: translate('column_editMembership'),
                cellFormatter: VizPortalReact.DataGridCells.Checkmark('settings.siteAdminsCanAddUsers'),
                direction: 'desc'
            });
            columns.push({
                name: 'created-at-col',
                dataKey: 'createdAt',
                text: translate('column_created'),
                direction: 'desc',
                cellFormatter: VizPortalReact.DataGridCells.DateTimeCell('createdAt')
            });
            return columns;
        }
        SiteGrid.columns = columns;
        function nameColumn(translate, siteUrls, actions, getActionTarget) {
            var iconTitle = translate('site');
            return VizPortalReact.CommonDataGridColumns.withActions({
                name: 'name-col',
                dataKey: 'name',
                text: translate('column_name'),
                direction: 'asc',
                cellFormatter: VizPortalReact.DataGridCells.Link(function (row) {
                    var site = row.data;
                    return {
                        text: site.settings.name,
                        url: siteUrls.forSiteUrlName(site.settings.urlName).projectsUrl(),
                        iconClassName: 'tb-grid-icon-site',
                        iconTitle: iconTitle
                    };
                })
            }, {
                actions: actions,
                getActionTarget: getActionTarget,
                translate: translate
            });
        }
        function userQuotaFormatter(translate) {
            var serverLimitElement = React.DOM.span({}, translate('serverLimit'));
            return React.createFactory(React.createClass({
                render: function () {
                    var site = this.props.row.data;
                    if (site.settings.userQuotaEnabled) {
                        return React.DOM.span({}, VizPortal.L10n.localizedCount(site.settings.userQuota));
                    }
                    else {
                        return serverLimitElement;
                    }
                }
            }));
        }
        function storageUsedFormatter(sizeFilter) {
            return React.createFactory(React.createClass({
                render: function () {
                    var site = this.props.row.data;
                    return React.DOM.span({}, site.settings.storageQuotaEnabled
                        ? React.DOM.span({}, '(' + VizPortal.L10n.localizedPercent(site.storageQuotaPercentUsed) + ') ')
                        : null, React.DOM.span({}, sizeFilter(site.storageUsedBytes)));
                }
            }));
        }
        function storageQuotaFormatter(translate, sizeFilter) {
            var serverLimitElement = React.DOM.span({}, translate('serverLimit'));
            return React.createFactory(React.createClass({
                render: function () {
                    var site = this.props.row.data;
                    if (site.settings.storageQuotaEnabled) {
                        return React.DOM.span({}, sizeFilter(site.settings.storageQuotaBytes));
                    }
                    else {
                        return serverLimitElement;
                    }
                }
            }));
        }
    })(SiteGrid = VizPortalReact.SiteGrid || (VizPortalReact.SiteGrid = {}));
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../common/react/CommonDataGridColumns.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var ViewGrid;
    (function (ViewGrid) {
        function columns(
            // Dependencies
            translate, scope, 
            // Other params
            siteUrls, actions, getActionTarget, anyActionsAllowed, inProjectPlace, inWorkbookPlace) {
            var columns = [];
            if (anyActionsAllowed) {
                columns.push(_.extend({}, VizPortalReact.CommonDataGridColumns.selected(scope), {
                    headerStyle: {
                        borderRight: 'none' // Hides the border between the selected and favorite columns
                    }
                }));
            }
            columns.push(VizPortalReact.CommonDataGridColumns.favorite(scope));
            columns.push(nameColumn(translate, siteUrls, anyActionsAllowed, actions, getActionTarget));
            if (!inWorkbookPlace) {
                columns.push({
                    name: 'workbook-name-col',
                    dataKey: 'workbookName',
                    text: translate('column_workbook'),
                    direction: 'asc',
                    cellFormatter: VizPortalReact.DataGridCells.Link(function (row) {
                        return {
                            text: row.data.workbook.name,
                            url: siteUrls.workbookViewsUrl(row.data.workbook.id)
                        };
                    })
                });
            }
            columns.push({
                name: 'index-col',
                dataKey: 'index',
                text: translate('column_sheetNumber'),
                cellFormatter: VizPortalReact.DataGridCells.LocalizedCount('index'),
                direction: 'asc',
                headerStyle: { textAlign: 'right' },
                cellStyle: { textAlign: 'right' }
            });
            if (!inWorkbookPlace && !inProjectPlace) {
                columns.push({
                    name: 'project-name-col',
                    dataKey: 'projectName',
                    text: translate('column_project'),
                    direction: 'asc',
                    cellFormatter: VizPortalReact.DataGridCells.Link(function (row) {
                        return {
                            text: row.data.workbook.project.name,
                            url: siteUrls.projectViewsUrl(row.data.workbook.project.id)
                        };
                    })
                });
            }
            if (!inWorkbookPlace) {
                columns.push(VizPortalReact.CommonDataGridColumns.owner(translate, siteUrls, function (row) { return row.data.workbook.owner; }));
                columns.push({
                    name: 'updated-at-col',
                    dataKey: 'updatedAt',
                    text: translate('column_updated'),
                    direction: 'desc',
                    cellFormatter: VizPortalReact.DataGridCells.DateTimeCell('updatedAt')
                });
            }
            return columns;
        }
        ViewGrid.columns = columns;
        function nameColumn(translate, siteUrls, anyActionsAllowed, actions, getActionTarget) {
            var col = {
                name: 'name-col',
                dataKey: 'name',
                text: translate('column_name'),
                direction: 'asc',
                cellFormatter: VizPortalReact.DataGridCells.Link(function (row) {
                    return {
                        text: row.data.name,
                        url: siteUrls.viewUrl(row.data.path),
                        iconClassName: 'tb-grid-icon-view',
                        iconTitle: translate('view')
                    };
                })
            };
            if (anyActionsAllowed) {
                col = VizPortalReact.CommonDataGridColumns.withActions(col, {
                    actions: actions,
                    getActionTarget: getActionTarget,
                    translate: translate
                });
            }
            return col;
        }
    })(ViewGrid = VizPortalReact.ViewGrid || (VizPortalReact.ViewGrid = {}));
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../../../ts/libs.ts" />
/// <reference path="../../CommonStyles.ts" />
/// <reference path="../../OrderStore.ts" />
/// <reference path="../../SorterActions.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    function SelectableSortKeyDataGridColumn(columnSpec, keyToTextMap, orderStore, sorterActions, cellFormatterForKey) {
        _.extend(columnSpec, getOrderDirectionAndTextFromStore(orderStore, keyToTextMap));
        columnSpec.text = keyToTextMap[columnSpec.dataKey];
        columnSpec.headerFormatter = headerFormatter(keyToTextMap, sorterActions);
        columnSpec.cellFormatter = cellFormatterForKey ? cellFormatterForKey[columnSpec.dataKey] : null;
        return columnSpec;
    }
    VizPortalReact.SelectableSortKeyDataGridColumn = SelectableSortKeyDataGridColumn;
    function getOrderDirectionAndTextFromStore(orderStore, keyToTextMap) {
        var orderClauses = orderStore.getOrderClauses();
        for (var i = 0; i < orderClauses.length; i++) {
            var orderClause = orderClauses[i];
            if (keyToTextMap[orderClause.field]) {
                // stop at the first orderclause that this column owns
                return {
                    dataKey: orderClause.field,
                    direction: orderClause.ascending ? 'asc' : 'desc',
                    text: keyToTextMap[orderClause.field]
                };
            }
        }
        return undefined;
    }
    function headerFormatter(keyToTextMap, sorterActions) {
        return React.createFactory(React.createClass({
            displayName: 'SelectableSortKeyColumnHeaderFormatter',
            getInitialState: function () {
                return {
                    menuHovered: false
                };
            },
            render: function () {
                var _this = this;
                var menuButtonTop = (VizPortalReact.CommonStyles.Sizes.DataGridHeaderHeight - VizPortalReact.CommonStyles.Sizes.NormalIconSize) / 2;
                var menu = VizPortalReact.Menu.element({
                    ref: 'menu',
                    style: {
                        lineHeight: 'normal',
                        fontFamily: VizPortalReact.CommonStyles.Fonts.BodyFont,
                        fontSize: VizPortalReact.CommonStyles.Sizes.NormalFontSize,
                        // vertically center the icon on the right side of the column header
                        position: 'absolute',
                        top: menuButtonTop,
                        right: VizPortalReact.CommonStyles.Sizes.DefaultSpace
                    },
                    menuButtonFactory: function (props) { return React.DOM.span({
                        className: 'tb-drop-down-icon'
                    }); },
                    // TODO: refactor this into a common component. Similar code in ActionsMenuColumnCell.ts
                    menuPanelFactory: function (props) {
                        var headerColProps = _this.props;
                        var currentKey = headerColProps.col.dataKey;
                        var menuItems = _.map(keyToTextMap, function (text, key) {
                            var isSelected = key === currentKey;
                            var menuItemContent = [
                                React.DOM.span({
                                    className: 'tb-padded-right',
                                    style: {
                                        visibility: isSelected ? 'visible' : 'hidden'
                                    }
                                }, '•'),
                                React.DOM.span({}, text)
                            ];
                            return React.DOM.div({
                                className: 'tb-popup-menu-item',
                                'data-tb-test-id': key,
                                onClick: function () {
                                    _this.selectKey(key, sorterActions);
                                    _this.refs['menu'].closeMenu();
                                }
                            }, menuItemContent);
                        });
                        return React.DOM.div({
                            className: 'tb-popup-menu-content tb-padded-small'
                        }, menuItems);
                    },
                    menuPanelStyle: {
                        // position drop down 3px below header cell
                        top: menuButtonTop + VizPortalReact.CommonStyles.Sizes.NormalIconSize + VizPortalReact.CommonStyles.Sizes.DropdownOffset,
                        right: -(VizPortalReact.CommonStyles.Sizes.DefaultSpace),
                        left: 'auto'
                    }
                });
                return React.DOM.div({
                    style: {
                        textDecoration: (this.props.hovered && !this.state.menuHovered) ? 'underline' : 'none'
                    }
                }, React.DOM.div({
                    style: {
                        marginRight: VizPortalReact.CommonStyles.Sizes.NormalIconSize - VizPortalReact.CommonStyles.Sizes.DefaultSpace,
                        overflow: 'hidden',
                        textOverflow: 'ellipsis'
                    }
                }, this.props.col.text), React.DOM.div({
                    // stop propagation to prevent header cell from sorting.
                    onClick: function (event) { return event.stopPropagation(); },
                    onMouseOver: function () { return _this.setState({ menuHovered: true }); },
                    onMouseOut: function () { return _this.setState({ menuHovered: false }); }
                }, menu));
            },
            selectKey: function (key, sorterActions) {
                var props = this.props;
                if (props.col.dataKey === key) {
                    // if the user selects the same metric in the menu, don't do anything
                    return;
                }
                // TODO: combine these into one call so as to not trigger multiple requests in a post angular world.
                sorterActions.removeFieldFromOrder(props.col.dataKey);
                sorterActions.setPrimaryOrder(key, props.col.direction);
            }
        }));
    }
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../common/react/CommonDataGridColumns.ts" />
/// <reference path="../../common/react/components/dataGrid/SelectableSortKeyDataGridColumn.ts" />
/// <reference path="../../ts/services/SorterFactory.ts" />
/// <reference path="../../ts/controllers/AngularCtrl.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var WorkbookGrid;
    (function (WorkbookGrid) {
        function columns(
            // Dependencies
            translate, sizeFilter, scope, angularContext, 
            // Other params
            siteUrls, actions, getActionTarget, anyActionsAllowed, showProjectColumn, orderStore, sorterActions) {
            var columns = [];
            if (anyActionsAllowed) {
                columns.push(_.extend({}, VizPortalReact.CommonDataGridColumns.selected(scope), {
                    headerStyle: {
                        borderRight: 'none' // Hides the border between the selected and favorite columns
                    }
                }));
            }
            columns.push(VizPortalReact.CommonDataGridColumns.favorite(scope));
            columns.push(nameColumn(translate, siteUrls, anyActionsAllowed, actions, getActionTarget));
            if (VizPortal.FeatureFlags.contentAnalyticsEnabled) {
                var viewsColKeys = ['hitsTotal', 'hitsLastMonthTotal', 'hitsLastTwoWeeksTotal', 'hitsLastDayTotal'];
                var keyToTextMap = _.reduce(viewsColKeys, function (memo, key) {
                    memo[key] = translate('metric_' + key);
                    return memo;
                }, {});
                var defaultKey = 'hitsTotal';
                var defaultText = keyToTextMap[defaultKey];
                columns.push(VizPortalReact.SelectableSortKeyDataGridColumn({
                    name: 'hits-col',
                    dataKey: defaultKey,
                    text: defaultText,
                    direction: 'desc',
                    headerStyle: { textAlign: 'left' },
                    cellStyle: { textAlign: 'left' },
                    preferredWidth: 200
                }, keyToTextMap, orderStore, sorterActions, 
                // cell formatters for the different column keys
                // TODO: update when the server supports hitsLastMonthTotal
                // TODO: update when the server supports hitsLastDayTotal
                {
                    'hitsTotal': VizPortalReact.DataGridCells.LocalizedCountWithBar('hitsTotal', function (data) { return data.maxStatValues; }, 'metrics-column-bars'),
                    'hitsLastTwoWeeksTotal': VizPortalReact.DataGridCells.LocalizedCountWithBar('hitsLastTwoWeeksTotal', function (data) { return data.maxStatValues; }, 'metrics-column-bars')
                }));
                columns.push({
                    name: 'favorites-col',
                    dataKey: 'favoritesTotal',
                    text: translate('metric_favoritesTotal'),
                    cellFormatter: VizPortalReact.DataGridCells.LocalizedCountWithBar('favoritesTotal', function (data) { return data.maxStatValues; }, 'favorites-column-bars'),
                    direction: 'desc',
                    headerStyle: { textAlign: 'left' },
                    cellStyle: { textAlign: 'left' },
                    preferredWidth: 200
                });
            }
            columns.push({
                name: 'num-sheets-col',
                dataKey: 'numSheets',
                text: translate('column_numSheets'),
                cellFormatter: VizPortalReact.DataGridCells.LocalizedCount('numSheets'),
                direction: 'asc',
                headerStyle: { textAlign: 'right' },
                cellStyle: { textAlign: 'right' }
            });
            columns.push({
                name: 'size-col',
                dataKey: 'size',
                text: translate('column_size'),
                cellFormatter: VizPortalReact.DataGridCells.SizeCell('size', sizeFilter),
                direction: 'asc',
                headerStyle: { textAlign: 'right' },
                cellStyle: { textAlign: 'right' }
            });
            if (showProjectColumn) {
                columns.push({
                    name: 'project-name-col',
                    dataKey: 'projectName',
                    text: translate('column_project'),
                    direction: 'asc',
                    cellFormatter: VizPortalReact.DataGridCells.Link(function (row) {
                        return {
                            text: row.data.project.name,
                            url: siteUrls.projectUrl(row.data.project.id)
                        };
                    })
                });
            }
            columns = columns.concat([
                VizPortalReact.CommonDataGridColumns.owner(translate, siteUrls),
                {
                    name: 'updated-at-col',
                    dataKey: 'updatedAt',
                    text: translate('column_updated'),
                    direction: 'desc',
                    cellFormatter: VizPortalReact.DataGridCells.DateTimeCell('updatedAt')
                },
                VizPortalReact.CommonDataGridColumns.alert('workbook', translate, angularContext)
            ]);
            return columns;
        }
        WorkbookGrid.columns = columns;
        function nameColumn(translate, siteUrls, anyActionsAllowed, actions, getActionTarget) {
            var col = {
                name: 'name-col',
                dataKey: 'name',
                text: translate('column_name'),
                direction: 'asc',
                cellFormatter: VizPortalReact.DataGridCells.Link(function (row) {
                    return {
                        text: row.data.name,
                        url: siteUrls.workbookUrl(row.data.id),
                        iconClassName: 'tb-grid-icon-workbook',
                        iconTitle: translate('workbook')
                    };
                })
            };
            if (anyActionsAllowed) {
                col = VizPortalReact.CommonDataGridColumns.withActions(col, {
                    actions: actions,
                    getActionTarget: getActionTarget,
                    translate: translate
                });
            }
            return col;
        }
    })(WorkbookGrid = VizPortalReact.WorkbookGrid || (VizPortalReact.WorkbookGrid = {}));
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../libs.ts" />
/// <reference path="../controllers/ContentPlaceCtrl.ts" />
/// <reference path="../controllers/FilterPanelCtrl.ts" />
/// <reference path="../directives/tbSelectionMenu.ts" />
/// <reference path="../directives/tbTypeahead.ts" />
/// <reference path="../filters/SizeFilter.ts" />
/// <reference path="../helpers/ActionButtonsHelper.ts" />
/// <reference path="../helpers/SubplaceCountsHelper.ts" />
/// <reference path="../models/Content.ts" />
/// <reference path="../models/ContentTypes.ts" />
/// <reference path="../models/FlowLayout.ts" />
/// <reference path="../models/ITemplate.ts" />
/// <reference path="../models/IPlace.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/types/resourceParts.ts" />
/// <reference path="../ServerApi/types/IOrderClause.ts" />
/// <reference path="../services/ActionPanelService.ts" />
/// <reference path="../services/BrowserTitleService.ts" />
/// <reference path="../services/FilterPanelService.ts" />
/// <reference path="../services/HelpService.ts" />
/// <reference path="../services/SorterFactory.ts" />
/// <reference path="../../app/SiteUrls.ts" />
/// <reference path="../../app/content/DatasourceGrid.ts" />
/// <reference path="../../app/content/ProjectGrid.ts" />
/// <reference path="../../app/content/SiteGrid.ts" />
/// <reference path="../../app/content/ViewGrid.ts" />
/// <reference path="../../app/content/WorkbookGrid.ts" />
/// <reference path="../../common/react/OrderStore.ts" />
/// <reference path="../../common/react/SorterActions.ts" />
var VizPortal;
(function (VizPortal) {
    var ContentSubplaceCtrl = (function () {
        function ContentSubplaceCtrl($scope, $translate, $state, AngularToReactDataGridBridge, sizeFilter, BrowserTitleService, ContentActions, CreateSiteAction, queryService, filterPanelService, actionPanelService, ServerService, SorterFactory, Favorites, BrowserSupportService, HelpService, AngularContextFactory, subplace, resource, detailsUrl, projectUrl, workbookUrl, defaultOrder, shouldFetchDetails) {
            var _this = this;
            this.$scope = $scope;
            this.$translate = $translate;
            this.AngularToReactDataGridBridge = AngularToReactDataGridBridge;
            this.sizeFilter = sizeFilter;
            this.actionPanelService = actionPanelService;
            this.ServerService = ServerService;
            this.HelpService = HelpService;
            this.AngularContextFactory = AngularContextFactory;
            this.subplace = subplace;
            this.projectUrl = projectUrl;
            // Sort Order
            $scope.sorter = SorterFactory.create(defaultOrder);
            var useReactDataGrid = this.isReactDataGridEnabled(subplace.type);
            $scope.useReactDataGrid = useReactDataGrid;
            if (useReactDataGrid) {
                this.configureForReactDataGrid(subplace.type, $scope.place, $scope.sorter);
            }
            $scope.busy = false;
            BrowserTitleService.setTitle(subplace.name, $scope.objectName);
            $scope.isTouch = BrowserSupportService.isTouch();
            $scope.selectedItems = new VizPortal.Set(function (item) { return item.id; });
            $scope.contentType = subplace.type.name;
            var explicitFilterKeys = subplace.filterKeys();
            $scope.filterControls = {};
            // Filter panel controls
            $scope.filterDefinitions = filterPanelService.getFilterDefinitions(explicitFilterKeys);
            $scope.filterFieldValues = function (filterField) {
                return function (matchText) { return subplace.filterValuesQuery(filterField).withMatchText(matchText); };
            };
            $scope.getFieldValueQuery = function (filterField) {
                return subplace.filterValuesQuery(filterField).withMatchText('');
            };
            $scope.availableAction = function (action) { return action.isAvailable($scope.selectedItems, $scope.detailedItem, $scope.allowedActions); };
            VizPortal.ActionButtonsHelper.setupActionButtons($scope, actionPanelService.getContentActionButtons($scope.contentType, $scope.place));
            $scope.listActions = [
                {
                    name: 'create-project',
                    translate: 'createProject',
                    isAvailable: function () { return subplace.type.name === VizPortal.ProjectContentType.name && ServerService.isSessionSiteOrServerAdmin(); },
                    execute: function ($event) {
                        ContentActions.createProject(VizPortal.ActionContext.fromEvent($event))
                            .then(function (result) {
                            if (result.id) {
                                $scope.refreshContent();
                            }
                        });
                    }
                },
                {
                    name: 'create-new-site',
                    translate: 'newSite',
                    isAvailable: function () { return subplace.type.name === VizPortal.SitesContentType.name; },
                    execute: function ($event) {
                        CreateSiteAction.execute($scope).then(function () { return $state.hardReload(); });
                    }
                }
            ];
            $scope.availableListAction = function (listAction) { return listAction.isAvailable(); };
            // Layout
            $scope.gridLayout = _.once(function (width, height) {
                return new VizPortal.FlowLayout(width, height);
            });
            // Popovers
            $scope.getItemDetails = function (item) {
                var detailsResource = resource;
                return detailsResource.getById(item.id);
            };
            var getActions = function (item) {
                var actionResource = resource;
                //TODO: Remove this check once all objects have permissions
                if (!actionResource.actions)
                    return null;
                return actionResource.actions(item.id);
            };
            // Fetch and set detailed item iff 1 item is selected
            $scope.detailedItem = null;
            var pendingDetailId;
            $scope.$watch(function () { return ($scope.selectedItems.size() === 1) ? $scope.selectedItems.first().id : null; }, function (id) {
                $scope.detailedItem = null;
                $scope.allowedActions = null;
                if (_.isString(id)) {
                    pendingDetailId = id;
                    var item = $scope.selectedItems.first();
                    if (shouldFetchDetails(item)) {
                        $scope.getItemDetails(item).then(function (detailedItem) {
                            if (id === pendingDetailId) {
                                $scope.detailedItem = detailedItem;
                                if ($scope.dataGridProps) {
                                    $scope.dataGridProps.update++;
                                }
                            }
                        });
                    }
                    //TODO Remove then object below once all resources have actions
                    (getActions(item) || { then: angular.noop }).then(function (actions) {
                        if (id === pendingDetailId)
                            $scope.allowedActions = actions;
                    });
                }
                else {
                    pendingDetailId = null;
                }
            });
            $scope.refreshContent = function () {
                _this.refresh();
                $scope.$emit(VizPortal.SubplaceEvents.RefreshCounts, subplace.name);
            };
            $scope.$on(VizPortal.SubplaceEvents.Refresh, function () {
                $scope.refreshContent();
            });
            $scope.$on(VizPortal.SelectionEvent.SelectionStarted, function () {
                $scope.busy = true;
            });
            $scope.$on(VizPortal.SelectionEvent.SelectionEnded, function () {
                $scope.busy = false;
            });
            this.query = queryService.createQueryUpdaterFromSubplace($scope, subplace, function (query) {
                if (useReactDataGrid) {
                    _this.AngularToReactDataGridBridge.updateReactDataGridRowStore({ scope: $scope, sliceable: query });
                }
                $scope.sliceable = query;
                $scope.sorter.setOrder(query.getOrder());
            });
            $scope.detailsUrl = detailsUrl;
            $scope.projectUrl = projectUrl;
            $scope.workbookUrl = workbookUrl;
            $scope.sliceChanged = function (newSlice) {
                $scope.isEmpty = newSlice.total === 0;
                $scope.selectedItems.updateItems(newSlice.items);
                VizPortal.SubplaceCountsHelper.updateCountsFromSubplace($scope, subplace, newSlice.total);
            };
            $scope.anyActionsAllowed = function () { return _this.anyActionsAllowed(subplace.type.name, $scope.place, $scope.ownerId); };
            $scope.showModeSwitcher = function () {
                switch ($scope.contentType) {
                    case VizPortal.ContentTypes.project:
                    case VizPortal.ContentTypes.workbook:
                    case VizPortal.ContentTypes.view:
                        return true;
                    default:
                        return false;
                }
            };
            $scope.shouldShowReadMore = function ($event) {
                var card = $($event.currentTarget).parent();
                var descriptionContainerHeight = card.find('.tb-card-view-description').height() - 16; // 16px == lineHeight
                var descriptionTextHeight = card.find('.tb-card-view-description-text').height();
                return descriptionTextHeight > descriptionContainerHeight;
            };
            $scope.addFavorite = function (item) {
                switch ($scope.contentType) {
                    case VizPortal.ContentTypes.workbook:
                        return Favorites.addWorkbook(item);
                    case VizPortal.ContentTypes.view:
                        return Favorites.addView(item);
                    default:
                        return;
                }
            };
            $scope.removeFavorite = function (item) {
                switch ($scope.contentType) {
                    case VizPortal.ContentTypes.workbook:
                        return Favorites.removeWorkbook(item);
                    case VizPortal.ContentTypes.view:
                        return Favorites.removeView(item);
                    default:
                        return;
                }
            };
            $scope.isLiveDBAvailable = ServerService.isLiveDBAvailable(); // Used in Sites subplace
            $scope.emptyTemplateModel = this.createEmptyTemplateModel($scope.contentType, $scope.place);
            this.refresh();
        }
        ContentSubplaceCtrl.prototype.isReactDataGridEnabled = function (contentType) {
            switch (contentType) {
                case VizPortal.DatasourceContentType:
                    return VizPortal.FeatureFlags.reactDatasourceGrid;
                case VizPortal.ProjectContentType:
                    return VizPortal.FeatureFlags.reactProjectGrid;
                case VizPortal.SitesContentType:
                    return VizPortal.FeatureFlags.reactSitesGrid;
                case VizPortal.WorkbookContentType:
                    return VizPortal.FeatureFlags.reactWorkbookGrid;
                case VizPortal.ViewContentType:
                case VizPortal.ViewInWorkbookContentType:
                    return VizPortal.FeatureFlags.reactViewGrid;
            }
            return false;
        };
        ContentSubplaceCtrl.prototype.configureForReactDataGrid = function (contentType, place, sorter) {
            var _this = this;
            var orderStore = sorter.getOrderStore();
            var sorterActions = {
                setPrimaryOrder: function (columnKey, direction) { return _this.$scope.$apply(function () { return _this.$scope.sorter.setPrimary(columnKey, direction); }); },
                removeFieldFromOrder: function (columnKey) { return _this.$scope.$apply(function () { return _this.$scope.sorter.removeFieldFromOrder(columnKey); }); }
            };
            var columns = this.reactDataGridColumnsFor(contentType, place, orderStore, sorterActions);
            var emptyTemplateModel = this.createEmptyTemplateModel(contentType.name, place);
            this.AngularToReactDataGridBridge.attachReactDataGridToScope(this.$scope, columns, emptyTemplateModel);
            this.$scope.dataGridProps.updated = function (rows) {
                _this.$scope.isEmpty = rows.length === 0;
                _this.$scope.selectedItems.updateItems(_.map(rows, function (row) { return row.data; }));
                VizPortal.SubplaceCountsHelper.updateCountsFromSubplace(_this.$scope, _this.subplace, rows.length);
            };
            this.$scope.$watch(function () { return _this.$scope.sorter.selectedColumnKey() + ';' + _this.$scope.sorter.isSortAscending(); }, function () {
                _this.$scope.dataGridProps.cols = _this.reactDataGridColumnsFor(contentType, place, orderStore, sorterActions);
                _this.$scope.dataGridProps.update++;
            });
        };
        ContentSubplaceCtrl.prototype.reactDataGridColumnsFor = function (contentType, place, orderStore, sorterActions) {
            var _this = this;
            var siteUrls = new VizPortalReact.SiteUrls({
                siteUrlName: this.ServerService.sessionSiteUrlName(),
                queryString: window.location.search
            });
            var getActionTarget = function () {
                return {
                    items: _this.$scope.selectedItems,
                    detailedItem: _this.$scope.detailedItem,
                    actionContext: { scope: _this.$scope },
                    allowedActions: _this.$scope.allowedActions
                };
            };
            switch (contentType) {
                case VizPortal.ProjectContentType:
                    return VizPortalReact.ProjectGrid.columns(function (id) { return _this.$translate.instant(id); }, siteUrls, this.actionPanelService.getContentActionButtons(contentType.name, place), getActionTarget, this.$scope, this.anyActionsAllowed(contentType.name, place, this.$scope.ownerId));
                case VizPortal.SitesContentType:
                    return VizPortalReact.SiteGrid.columns(function (id) { return _this.$translate.instant(id); }, this.$scope, this.sizeFilter, this.actionPanelService.getContentActionButtons(contentType.name, place), getActionTarget, siteUrls, this.ServerService.isLiveDBAvailable());
                case VizPortal.WorkbookContentType:
                    return VizPortalReact.WorkbookGrid.columns(function (id) { return _this.$translate.instant(id); }, this.sizeFilter, this.$scope, this.AngularContextFactory.create(this.$scope), siteUrls, this.actionPanelService.getContentActionButtons(contentType.name, place), getActionTarget, this.anyActionsAllowed(contentType.name, place, this.$scope.ownerId), place !== 'project', orderStore, sorterActions);
                case VizPortal.ViewContentType:
                case VizPortal.ViewInWorkbookContentType:
                    return VizPortalReact.ViewGrid.columns(function (id) { return _this.$translate.instant(id); }, this.$scope, siteUrls, this.actionPanelService.getContentActionButtons(contentType.name, place), getActionTarget, this.anyActionsAllowed(contentType.name, place, this.$scope.ownerId), place === 'project', place === 'workbook');
                case VizPortal.DatasourceContentType:
                    return VizPortalReact.DatasourceGrid.columns(function (id) { return _this.$translate.instant(id); }, this.$scope, siteUrls, this.actionPanelService.getContentActionButtons(contentType.name, place), getActionTarget, this.anyActionsAllowed(contentType.name, place, this.$scope.ownerId), place === 'project', place === 'workbook', this.AngularContextFactory.create(this.$scope));
                default:
                    throw "No react data grid for content type " + contentType.name;
            }
        };
        // Is the user able to perform any actions
        ContentSubplaceCtrl.prototype.anyActionsAllowed = function (contentType, place, ownerId) {
            switch (contentType) {
                case VizPortal.ProjectContentType.name:
                    return this.ServerService.isSessionSiteOrServerAdmin();
                case VizPortal.DatasourceContentType.name:
                    if (place === VizPortal.WorkbookContentType.name) {
                        // Viewing a data sources subplace in a workbook place and the user is not an admin or the workbook owner
                        return this.ServerService.isSessionSiteOrServerAdmin() || ownerId === this.ServerService.sessionUserId();
                    }
                default:
                    return true;
            }
        };
        ContentSubplaceCtrl.prototype.refresh = function () {
            this.query.refresh();
        };
        ContentSubplaceCtrl.prototype.createEmptyTemplateModel = function (contentType, place) {
            var emptyTemplateModel = {};
            switch (contentType) {
                case VizPortal.ContentTypes.view:
                    emptyTemplateModel.title = 'viewsEmptyMessage';
                    break;
                case VizPortal.ContentTypes.workbook:
                    var isDataSourcePlace = place === VizPortal.DatasourceContentType.name;
                    emptyTemplateModel.title = isDataSourcePlace ? 'workbooksForDataSourceEmptyMessage' : 'workbooksEmptyMessage';
                    break;
                case VizPortal.ContentTypes.project:
                    emptyTemplateModel.title = 'projectsEmptyMessage';
                    break;
                case VizPortal.ContentTypes.datasource:
                    var helpUrl = this.HelpService.getDatasourceHelpUrl();
                    emptyTemplateModel.title = 'datasourcesEmptyMessage';
                    if (helpUrl) {
                        emptyTemplateModel.help = {
                            links: [{
                                    localizedValueKey: 'remoteRefreshSchedulesEmptyHelp',
                                    url: helpUrl
                                }]
                        };
                    }
                    break;
                case VizPortal.SitesContentType.name:
                    emptyTemplateModel.title = 'sitesEmptyMessage';
                    break;
            }
            return emptyTemplateModel;
        };
        ContentSubplaceCtrl.$inject = [
            // Services
            '$scope',
            '$translate',
            '$state',
            'AngularToReactDataGridBridge',
            'sizeFilter',
            'BrowserTitleService',
            'ContentActions',
            'CreateSiteAction',
            'QueryService',
            'FilterPanelService',
            'ActionPanelService',
            'ServerService',
            'SorterFactory',
            'Favorites',
            'BrowserSupportService',
            'HelpService',
            'AngularContextFactory',
            // Resolved on ui-router state config, keep in sync with IContentSubplaceResolve
            'subplace',
            'resource',
            'detailsUrl',
            'projectUrl',
            'workbookUrl',
            'defaultOrder',
            'shouldFetchDetails'
        ];
        return ContentSubplaceCtrl;
    })();
    VizPortal.ContentSubplaceCtrl = ContentSubplaceCtrl;
    VizPortal.Module.instance().controller('ContentSubplaceCtrl', ContentSubplaceCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/ErrorCodes.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/ServerService.ts" />
var VizPortal;
(function (VizPortal) {
    var ErrorCtrl = (function () {
        function ErrorCtrl($scope, $state, $stateParams, server) {
            // attempt to coerce to number
            var error = +$stateParams.errorCode;
            if (!error) {
                var redirectState = $stateParams.redirectState || 'main.site.content.site.projects';
                var redirectSiteUrlName = $stateParams.redirectSiteUrlName || server.sessionSiteUrlName();
                $scope.redirectLocKey = $stateParams.redirectLocKey || 'backToContent';
                $scope.redirectUrl = $state.href(redirectState, { siteUrlName: redirectSiteUrlName });
                $scope.detailsLocKey = $stateParams.detailsLocKey || 'pageDoesNotExist';
            }
            else {
                switch (error) {
                    case VizPortal.SolrErrorCode.SolrDisabled:
                    case VizPortal.SolrErrorCode.SolrCommunicationError:
                        $scope.redirectLocKey = null;
                        $scope.redirectUrl = null;
                        $scope.detailsLocKey = 'serverDown';
                        break;
                    default:
                        $scope.redirectLocKey = null;
                        $scope.redirectUrl = null;
                        $scope.detailsLocKey = $stateParams.detailsLocKey || 'pageDoesNotExist';
                        break;
                }
            }
        }
        ErrorCtrl.StateParamKeys = {
            DetailsLocKey: 'detailsLocKey',
            RedirectState: 'redirectState',
            RedirectLocKey: 'redirectLocKey',
            RedirectSiteUrlName: 'redirectSiteUrlName'
        };
        ErrorCtrl.$inject = [
            '$scope',
            '$state',
            '$stateParams',
            'ServerService'
        ];
        return ErrorCtrl;
    })();
    VizPortal.ErrorCtrl = ErrorCtrl;
    VizPortal.Module.instance().controller('ErrorCtrl', ErrorCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../common/react/CommonDataGridColumns.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var ExtractTasksGrid;
    (function (ExtractTasksGrid) {
        function columns(translate, scope, anyActionsAllowed, actions, isServerPage, serverUrls, siteUrls, scheduleFrequencyDescriptionFilter, showWorkbookOrDatasourceColumn, showScheduleColumn, showSiteColumn) {
            var columns = [
                VizPortalReact.CommonDataGridColumns.selected(scope)
            ];
            if (showWorkbookOrDatasourceColumn) {
                columns.push({
                    name: 'workbook-datasource-col',
                    dataKey: 'targetName',
                    direction: 'asc',
                    text: translate('column_task_workbook_data_source'),
                    cellFormatter: targetLinkFormatter(siteUrls, translate)
                });
            }
            columns.push({
                name: 'task-type-col',
                dataKey: 'type',
                direction: 'asc',
                text: translate('column_task_type'),
                cellFormatter: VizPortalReact.DataGridCells.PlainTextCellWithTransform('type', function (type) { return type === VizPortal.ServerApi.ExtractTaskType.IncrementExtract
                    ? translate('extractTasksIncremental')
                    : translate('extractTasksFull'); })
            });
            if (showScheduleColumn) {
                columns.push({
                    name: 'schedule-name-col',
                    dataKey: 'scheduleName',
                    direction: 'asc',
                    text: translate('column_task_schedule'),
                    cellFormatter: VizPortalReact.DataGridCells.ScheduleDescriptionCell(function (row) {
                        var subscription = row.data;
                        // This cast to ISchedule shouldn't be necessary, but for some reason
                        // subscription.schedule is of type INamedItemInfo.
                        // TODO: figure out why this is the case and refactor the types accordingly.
                        var schedule = subscription.schedule;
                        return isServerPage
                            ? serverUrls.schedule(schedule.id, schedule.scheduledAction)
                            : siteUrls.schedule(schedule.id, schedule.scheduledAction);
                    }, scheduleFrequencyDescriptionFilter)
                });
            }
            columns.push({
                name: 'priority-col',
                dataKey: 'priority',
                direction: 'asc',
                text: translate('column_task_priority'),
                cellFormatter: VizPortalReact.DataGridCells.LocalizedCount('priority'),
                headerStyle: { textAlign: 'right' },
                cellStyle: { textAlign: 'right' }
            });
            if (showSiteColumn) {
                columns.push({
                    name: 'site-name-col',
                    dataKey: 'siteName',
                    direction: 'asc',
                    text: translate('column_task_site'),
                    cellFormatter: VizPortalReact.DataGridCells.PlainTextCellWithTransform('site', function (site) { return site.name; })
                });
            }
            columns.push({
                name: 'last-run-at-col',
                dataKey: 'lastRunAt',
                text: translate('column_task_last_update'),
                direction: 'desc',
                cellFormatter: VizPortalReact.DataGridCells.DateTimeCell('lastRunAt', translate('never'))
            });
            columns.push({
                name: 'next-run-at-col',
                dataKey: 'runNextAt',
                text: translate('column_task_next_update'),
                direction: 'asc',
                cellFormatter: VizPortalReact.DataGridCells.DateTimeCell('runNextAt', translate('disabled'))
            });
            // Add the actions menu to whichever column was first (not including the 'selected' column)
            if (anyActionsAllowed) {
                columns[1] = VizPortalReact.CommonDataGridColumns.withActions(columns[1], {
                    actions: actions,
                    getActionTarget: function () {
                        return {
                            items: scope.selectedItems,
                            actionContext: { scope: scope }
                        };
                    },
                    translate: translate
                });
            }
            return columns;
        }
        ExtractTasksGrid.columns = columns;
        function targetLinkFormatter(siteUrls, translate) {
            return VizPortalReact.DataGridCells.Link(function (row) {
                var extractTask = row.data;
                var siteUrlsForRow = siteUrls.forSiteUrlName(extractTask.site.urlName);
                if (row.data.datasource) {
                    var datasource = row.data.datasource;
                    return {
                        text: datasource.name,
                        url: siteUrlsForRow.datasourceUrl(datasource.id),
                        iconClassName: 'tb-grid-icon-datasource',
                        iconTitle: translate('datasource')
                    };
                }
                else {
                    var workbook = row.data.workbook;
                    return {
                        text: workbook.name,
                        url: siteUrlsForRow.workbookUrl(workbook.id),
                        iconClassName: 'tb-grid-icon-workbook',
                        iconTitle: translate('workbook')
                    };
                }
            });
        }
    })(ExtractTasksGrid = VizPortalReact.ExtractTasksGrid || (VizPortalReact.ExtractTasksGrid = {}));
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../common/react/CommonDataGridColumns.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var RemoteRefreshScheduleGrid;
    (function (RemoteRefreshScheduleGrid) {
        function columns(translate, scope, anyActionsAllowed, actions, remoteRefreshScheduleTypeNameFilter, cronExpressionFilter) {
            var columns = [];
            if (anyActionsAllowed) {
                columns.push(VizPortalReact.CommonDataGridColumns.selected(scope));
            }
            var refreshTypeColumn = {
                name: 'refreshType-col',
                dataKey: 'refreshType',
                text: translate('column_remote_schedule_refresh_type'),
                direction: 'asc',
                cellFormatter: VizPortalReact.DataGridCells.PlainTextCellWithTransform('refreshType', remoteRefreshScheduleTypeNameFilter)
            };
            if (anyActionsAllowed) {
                refreshTypeColumn = VizPortalReact.CommonDataGridColumns.withActions(refreshTypeColumn, {
                    actions: actions,
                    getActionTarget: function () {
                        return {
                            items: scope.selectedItems,
                            actionContext: { scope: scope }
                        };
                    },
                    translate: translate
                });
            }
            columns = columns.concat([
                refreshTypeColumn,
                {
                    name: 'definition-col',
                    dataKey: 'definition',
                    text: translate('column_remote_schedule_definition'),
                    direction: 'asc',
                    cellFormatter: VizPortalReact.DataGridCells.PlainTextCellWithTransform('definition', cronExpressionFilter)
                },
                {
                    name: 'priority-col',
                    dataKey: 'priority',
                    text: translate('column_task_priority'),
                    cellFormatter: VizPortalReact.DataGridCells.FixedValue(translate('notApplicable')),
                    direction: 'asc'
                },
                {
                    name: 'lastRunAt-col',
                    dataKey: 'lastRunAt',
                    text: translate('column_task_last_update'),
                    direction: 'asc',
                    cellFormatter: VizPortalReact.DataGridCells.DateTimeCell('lastRunAt', translate('unavailable'))
                },
                {
                    name: 'runNextAt-col',
                    dataKey: 'runNextAt',
                    text: translate('column_task_next_update'),
                    direction: 'asc',
                    cellFormatter: VizPortalReact.DataGridCells.DateTimeCell('runNextAt', translate('unavailable'))
                }
            ]);
            return columns;
        }
        RemoteRefreshScheduleGrid.columns = columns;
    })(RemoteRefreshScheduleGrid = VizPortalReact.RemoteRefreshScheduleGrid || (VizPortalReact.RemoteRefreshScheduleGrid = {}));
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../../../ts/libs.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var AngularToReactDataGridBridge = (function () {
        function AngularToReactDataGridBridge($translate, locLinkifier) {
            this.$translate = $translate;
            this.locLinkifier = locLinkifier;
        }
        AngularToReactDataGridBridge.prototype.attachReactDataGridToScope = function ($scope, columns, emptyTemplateModel) {
            $scope.dataGridProps = {
                // Message to display for an empty grid
                emptyChild: this.emptyTemplateElementFor(emptyTemplateModel),
                // This gets incremented on each update, to force the data grid to re-render
                update: 0,
                cols: columns,
                // Sort on header click
                onHeaderClicked: function (columnKey, direction) {
                    $scope.$apply(function () {
                        $scope.sorter.setPrimary(columnKey, direction);
                    });
                },
                // Select row on cell click
                onCellClick: function (item, columnKey) {
                    $scope.$apply(function () {
                        if (VizPortal.FeatureFlags.toggleSelectableRow) {
                            var onlySelectedRow = $scope.selectedItems.size() === 1 && $scope.selectedItems.contains(item);
                            var isActionMenu = columnKey === 'actions';
                            if (onlySelectedRow && !isActionMenu) {
                                $scope.selectedItems.toggle(item);
                            }
                            else {
                                $scope.selectedItems.clear();
                                $scope.selectedItems.add(item);
                            }
                        }
                        else {
                            $scope.selectedItems.clear();
                            $scope.selectedItems.add(item);
                        }
                        var keys = $scope.selectedItems.keys();
                        $scope.dataGridProps.selectedKeys = _.object(keys, keys);
                        $scope.dataGridProps.update++;
                    });
                }
            };
            // Re-render the grid when the sort order changes
            $scope.$watch(function () { return $scope.sorter.selectedColumnKey() + ';' + $scope.sorter.isSortAscending(); }, function () {
                $scope.dataGridProps.sortKey = $scope.sorter.selectedColumnKey();
                $scope.dataGridProps.sortAscending = $scope.sorter.isSortAscending();
                $scope.dataGridProps.update++;
            });
            // Re-render the grid when the selection changes
            // TODO: find a better way to monitor changes in selected items
            $scope.$watch(function () { return $scope.selectedItems.size(); }, function () {
                var keys = $scope.selectedItems.keys();
                $scope.dataGridProps.selectedKeys = _.object(keys, keys);
                $scope.dataGridProps.update++;
            });
        };
        AngularToReactDataGridBridge.prototype.emptyTemplateElementFor = function (emptyTemplateModel) {
            var _this = this;
            var children = [];
            if (emptyTemplateModel.title) {
                children.push(React.DOM.div({
                    key: 'title',
                    className: 'tb-data-grid-empty-title'
                }, this.$translate.instant(emptyTemplateModel.title)));
            }
            if (emptyTemplateModel.body) {
                children.push(React.DOM.div({
                    key: 'body',
                    className: 'tb-data-grid-empty-body'
                }, _.map(emptyTemplateModel.body, function (paragraph) {
                    return React.DOM.div({
                        className: 'tb-data-grid-empty-body-paragraph'
                    }, _.map(paragraph.statements, function (statement) {
                        return React.DOM.div({
                            key: 'help',
                            dangerouslySetInnerHTML: { __html: _this.locLinkifier(statement) }
                        });
                    }));
                })));
            }
            if (emptyTemplateModel.help) {
                children.push(React.DOM.div({
                    key: 'help',
                    className: 'tb-data-grid-empty-help-link',
                    dangerouslySetInnerHTML: { __html: this.locLinkifier(emptyTemplateModel.help) }
                }));
            }
            return React.DOM.div({ className: 'tb-data-grid-empty' }, children);
        };
        AngularToReactDataGridBridge.prototype.updateReactDataGridRowStore = function (config) {
            var keyForItem = config.keyForItem || (function (item) { return item['id']; });
            config.scope.dataGridProps.rowStore = new VizPortalReact.SparseCachedList(config.sliceable, function (item) {
                return {
                    key: keyForItem(item),
                    data: item,
                    rowStyle: config.getRowStyle ? config.getRowStyle(item) : null
                };
            });
            config.scope.dataGridProps.update++;
        };
        AngularToReactDataGridBridge.$inject = [
            '$translate',
            'locLinkifierFilter'
        ];
        return AngularToReactDataGridBridge;
    })();
    VizPortalReact.AngularToReactDataGridBridge = AngularToReactDataGridBridge;
    VizPortal.Module.instance().service('AngularToReactDataGridBridge', AngularToReactDataGridBridge);
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    // Sorts things locally on the browser client (as opposed to sorting on the server)
    var LocalSorter = (function () {
        function LocalSorter() {
            this.comparableValueTransforms = {};
        }
        // For a given 'fieldName', mutate the values under comparison using 'subFunc'.
        // Useful when we do not want to sort by the raw value, but by some transformed
        //   version of it.
        LocalSorter.prototype.addTransformForValueComparison = function (fieldName, transformFunc) {
            // _.memoize creates a caching version of the function passed to it
            this.comparableValueTransforms[fieldName] = _.memoize(transformFunc);
        };
        // Sort 'unsortedItems' as specified by 'clauses'
        LocalSorter.prototype.sortByClauses = function (unsortedItems, clauses) {
            var _this = this;
            if (!unsortedItems || unsortedItems.length == 0)
                return unsortedItems;
            var itemsToSort = unsortedItems.slice(0);
            if (!clauses || clauses.length == 0)
                return itemsToSort;
            itemsToSort.sort(function (a, b) { return _this.compareByClauses(a, b, clauses, 0); });
            return itemsToSort;
        };
        // Compare two items in the order specified by 'clauses'
        LocalSorter.prototype.compareByClauses = function (a, b, clauses, clauseIndex) {
            if (clauseIndex >= clauses.length)
                return 0;
            // Compare items according to the first clause
            var clause = clauses[clauseIndex];
            var fieldName = clause.field;
            var valA = a[fieldName];
            var valB = b[fieldName];
            // Maybe transform raw values before comparison
            var transformFunc = this.comparableValueTransforms[fieldName];
            if (transformFunc) {
                valA = transformFunc(valA);
                valB = transformFunc(valB);
            }
            if (valA > valB) {
                return clause.ascending ? 1 : -1;
            }
            else if (valA < valB) {
                return clause.ascending ? -1 : 1;
            }
            else {
                // terms are equal, compare items according to the next clause
                return this.compareByClauses(a, b, clauses, clauseIndex + 1);
            }
        };
        return LocalSorter;
    })();
    VizPortal.LocalSorter = LocalSorter;
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var RefreshPropertyHelper;
    (function (RefreshPropertyHelper) {
        function getAvailableRefreshTypes(item) {
            var types = [];
            types.push(VizPortal.ServerApi.RemoteRefreshTypes.Full);
            if (item.hasIncrementalExtract) {
                types.push(VizPortal.ServerApi.RemoteRefreshTypes.Incremental);
            }
            return types;
        }
        RefreshPropertyHelper.getAvailableRefreshTypes = getAvailableRefreshTypes;
        function canBeRefreshedRemotely(datasource) {
            // To be refreshed remotely (on a sync client) the datasource must have an extract and not be OAuth.
            return datasource.hasExtracts &&
                !(datasource.connectionOAuth &&
                    datasource.connectionDetails &&
                    datasource.connectionDetails.type === VizPortal.ServerApi.ConnectionDetailType.Database);
        }
        RefreshPropertyHelper.canBeRefreshedRemotely = canBeRefreshedRemotely;
        function getCurrentRefreshLocation($translate, refreshed) {
            if (refreshed && refreshed.refreshMode === VizPortal.ServerApi.RefreshModeTypes.Remote && refreshed.remoteAgentName) {
                return refreshed.remoteAgentName;
            }
            else if (refreshed && refreshed.refreshMode === VizPortal.ServerApi.RefreshModeTypes.Remote && !refreshed.remoteAgentName) {
                return $translate.instant('remoteRefreshModeUnlinkedLabel');
            }
            else {
                return $translate.instant('remoteRefreshModeServerLabel');
            }
        }
        RefreshPropertyHelper.getCurrentRefreshLocation = getCurrentRefreshLocation;
        // Prevent deep links to the incorrect refresh schedules page
        // 'extractTasks' is the default state
        function redirectByDatasourceRefreshMode($state, refreshMode) {
            // Don't assume the refresh mode property is defined. If it isn't 'extractTasks' is the default state.
            if ($state.is('main.site.content.datasource.remoteRefreshSchedules') && refreshMode !== VizPortal.ServerApi.RefreshModeTypes.Remote) {
                $state.go('^.extractTasks');
            }
            if ($state.is('main.site.content.datasource.extractTasks') && refreshMode === VizPortal.ServerApi.RefreshModeTypes.Remote) {
                $state.go('^.remoteRefreshSchedules');
            }
        }
        RefreshPropertyHelper.redirectByDatasourceRefreshMode = redirectByDatasourceRefreshMode;
    })(RefreshPropertyHelper = VizPortal.RefreshPropertyHelper || (VizPortal.RefreshPropertyHelper = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/ErrorCodes.ts" />
var VizPortal;
(function (VizPortal) {
    var ChangeDatasourceRemoteRefreshPropertiesAction = (function () {
        function ChangeDatasourceRemoteRefreshPropertiesAction($q, $translate, $window, $state, ConfirmActionDialog, ToasterService, HelpService, ServerService, RemoteRefreshAgents, ChangeDatasourceRefreshModeAction, ChangeDatasourceRemoteAgentAction, CreateExtractTasksAction, CreateRemoteRefreshScheduleAction) {
            this.$q = $q;
            this.$translate = $translate;
            this.$window = $window;
            this.$state = $state;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.ToasterService = ToasterService;
            this.HelpService = HelpService;
            this.ServerService = ServerService;
            this.RemoteRefreshAgents = RemoteRefreshAgents;
            this.ChangeDatasourceRefreshModeAction = ChangeDatasourceRefreshModeAction;
            this.ChangeDatasourceRemoteAgentAction = ChangeDatasourceRemoteAgentAction;
            this.CreateExtractTasksAction = CreateExtractTasksAction;
            this.CreateRemoteRefreshScheduleAction = CreateRemoteRefreshScheduleAction;
            // A special agent "name" for the option to add a new agent. (The @@s have no associated magic)
            this.AddNewAgentOption = '@@add-new-agent@@';
        }
        ChangeDatasourceRemoteRefreshPropertiesAction.prototype.execute = function ($event, datasource, openCreateRefreshScheduleOnSave, existingRefreshSchedulesCount) {
            var _this = this;
            var context = VizPortal.ActionContext.fromEvent($event);
            var dialogScope = context.scope.$new();
            dialogScope.prompt = this.$translate.instant('editRemoteRefreshPropertiesDialogPrompt', { DATASOURCE_NAME: VizPortal.L10n.elideIfLong(datasource.name) });
            // careful, the UI depends on Server being the first item in the array, remote the second.
            dialogScope.remoteRefreshModeOptions = [VizPortal.ServerApi.RefreshModeTypes.Server, VizPortal.ServerApi.RefreshModeTypes.Remote];
            dialogScope.remoteAgentOptions = [];
            dialogScope.remoteAgentOptionsEnabled = function () { return dialogScope.editModel.refreshMode === VizPortal.ServerApi.RefreshModeTypes.Remote; };
            dialogScope.remoteRefreshDescription = function () {
                return {
                    localizedStatementKey: 'remoteRefreshModeEditRemoteDescription',
                    links: [{
                            key: '{LEARN_HOW_TO_ADD_A_COMPUTER_TO_THE_LIST}',
                            localizedValueKey: 'remoteRefreshModeEditRemoteDescriptionSetupLink',
                            url: _this.HelpService.getServerHelpUrlByCategory('dataconnections7')
                        }]
                };
            };
            dialogScope.editModel = { refreshMode: datasource.refreshMode, remoteAgentName: datasource.remoteAgentName };
            dialogScope.existingRefreshSchedules = function () { return existingRefreshSchedulesCount; };
            dialogScope.warnRefreshesToBeDeleted = function () {
                return datasource.refreshMode === VizPortal.ServerApi.RefreshModeTypes.Server &&
                    dialogScope.editModel.refreshMode === VizPortal.ServerApi.RefreshModeTypes.Remote &&
                    existingRefreshSchedulesCount > 0;
            };
            dialogScope.warnEmbeddedPassword = function () {
                return datasource.refreshMode === VizPortal.ServerApi.RefreshModeTypes.Server &&
                    dialogScope.editModel.refreshMode === VizPortal.ServerApi.RefreshModeTypes.Remote &&
                    datasource.connectionDetails &&
                    datasource.connectionDetails.hasEmbeddedPassword;
            };
            dialogScope.remoteAgentSelectClicked = function () { return _this.refreshAvailableRemoteAgents(datasource, dialogScope); };
            dialogScope.$watch('editModel.remoteAgentName', function (newRemoteAgent, oldRemoteAgent, scope) {
                if (newRemoteAgent === oldRemoteAgent) {
                    return;
                }
                if (newRemoteAgent === _this.AddNewAgentOption) {
                    dialogScope.editModel.remoteAgentName = oldRemoteAgent;
                    _this.$window.open(_this.HelpService.getServerHelpUrlByCategory('dataconnections7'), VizPortal.LinkTargetAttributes.Blank);
                }
            });
            this.refreshAvailableRemoteAgents(datasource, dialogScope);
            return this.ConfirmActionDialog.open({
                scope: dialogScope,
                title: this.$translate.instant('editRemoteRefreshScheduleDialogTitle'),
                bodyTemplateUrl: 'confirmActionDialogRemoteRefreshProperties.html',
                size: '400px',
                actionName: openCreateRefreshScheduleOnSave ? this.$translate.instant('next') : this.$translate.instant('save'),
                action: angular.noop,
                confirmDisabled: function () {
                    return dialogScope.editModel.refreshMode === VizPortal.ServerApi.RefreshModeTypes.Remote && !dialogScope.editModel.remoteAgentName;
                }
            }).result
                .then(function (result) {
                // if both mode and agent are changing the change agent action will pop success toast with all the necessary information  so don't duplicate the same toast here
                var supressSuccessToast = openCreateRefreshScheduleOnSave ||
                    (datasource.refreshMode === VizPortal.ServerApi.RefreshModeTypes.Server && dialogScope.editModel.refreshMode === VizPortal.ServerApi.RefreshModeTypes.Remote && datasource.remoteAgentName !== dialogScope.editModel.remoteAgentName);
                // There's a race condition in the back-end, send the two requests sequentially.
                return _this.ChangeDatasourceRefreshModeAction.execute(datasource, datasource.refreshMode, dialogScope.editModel.refreshMode, dialogScope.editModel.remoteAgentName, supressSuccessToast, false);
            })
                .then(VizPortal.ResultHelper.rejectResultOnError(this.$q))
                .then(function (result) {
                return _this.ChangeDatasourceRemoteAgentAction.execute(datasource, datasource.remoteAgentName, dialogScope.editModel.remoteAgentName, dialogScope.editModel.refreshMode, openCreateRefreshScheduleOnSave, false);
            })
                .then(VizPortal.ResultHelper.rejectResultOnError(this.$q))
                .then(function (result) {
                if (openCreateRefreshScheduleOnSave) {
                    // if it was requested open the proper create schedule action
                    if (dialogScope.editModel.refreshMode === VizPortal.ServerApi.RefreshModeTypes.Remote) {
                        return _this.CreateRemoteRefreshScheduleAction.execute($event, datasource, VizPortal.RefreshPropertyHelper.getAvailableRefreshTypes(datasource));
                    }
                    else {
                        return _this.CreateExtractTasksAction.forDatasource(datasource, VizPortal.ActionContext.fromEvent($event), VizPortal.CreateExtractTasksMode.AllowSchedule);
                    }
                }
                else {
                    // we're not creating a schedule afterwards
                    return _this.$q.when(result);
                }
            })
                .then(function () {
                if (openCreateRefreshScheduleOnSave) {
                    // defer the refresh property success toast and only show one toast when also showing the create schedule dialog
                    if (dialogScope.editModel.refreshMode === VizPortal.ServerApi.RefreshModeTypes.Remote) {
                        _this.ToasterService.pop({
                            type: VizPortal.ToastType.Info,
                            text: _this.$translate.instant('editRemoteRefreshPropertiesAgentSuccess', { AGENT_NAME: VizPortal.L10n.elideIfLong(dialogScope.editModel.remoteAgentName) })
                        });
                    }
                    else {
                        _this.ToasterService.pop({ type: VizPortal.ToastType.Info, text: _this.$translate.instant('editRemoteRefreshPropertiesServerSuccess') });
                    }
                }
            }) // if chaining anything after this make sure to rejectResultOnError for the remote/server extract refresh actions
                .fin(function () {
                dialogScope.$destroy();
                _this.$state.hardReload();
            });
        };
        ChangeDatasourceRemoteRefreshPropertiesAction.prototype.refreshAvailableRemoteAgents = function (datasource, scope) {
            var _this = this;
            this.RemoteRefreshAgents.get()
                .then(function (result) {
                var remoteAgentNames = _.map(result.agents, function (agent) { return agent.name; });
                if (datasource.remoteAgentName) {
                    remoteAgentNames = _.union(remoteAgentNames, [datasource.remoteAgentName]);
                }
                if (!datasource.remoteAgentName && datasource.refreshMode === VizPortal.ServerApi.RefreshModeTypes.Server) {
                    // automatically try to select the first available agent if the current refresh mode is server
                    // if the current refresh mode is remote and there isn't a remote agent specified the previously specified agent was unlinked
                    if (remoteAgentNames.length > 0) {
                        scope.editModel.remoteAgentName = remoteAgentNames[0];
                    }
                }
                // Add the options representing remote agents
                scope.remoteAgentOptions = _.map(remoteAgentNames, function (name) { return ({
                    display: name,
                    name: name
                }); });
                // Add the last option for adding a new remote agent
                scope.remoteAgentOptions.push({
                    display: _this.$translate.instant('remoteRefreshAgentAddNew'),
                    name: _this.AddNewAgentOption
                });
            });
        };
        ChangeDatasourceRemoteRefreshPropertiesAction.$inject = [
            '$q',
            '$translate',
            '$window',
            '$state',
            'ConfirmActionDialog',
            'ToasterService',
            'HelpService',
            'ServerService',
            'RemoteRefreshAgents',
            'ChangeDatasourceRefreshModeAction',
            'ChangeDatasourceRemoteAgentAction',
            'CreateExtractTasksAction',
            'CreateRemoteRefreshScheduleAction'
        ];
        return ChangeDatasourceRemoteRefreshPropertiesAction;
    })();
    VizPortal.ChangeDatasourceRemoteRefreshPropertiesAction = ChangeDatasourceRemoteRefreshPropertiesAction;
    VizPortal.Module.instance().service('ChangeDatasourceRemoteRefreshPropertiesAction', ChangeDatasourceRemoteRefreshPropertiesAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var CronExpressionDefaultValues = (function () {
        function CronExpressionDefaultValues() {
        }
        CronExpressionDefaultValues.seconds = '0';
        CronExpressionDefaultValues.minutes = '0';
        CronExpressionDefaultValues.hours = '0';
        CronExpressionDefaultValues.dayOfMonth = '?';
        CronExpressionDefaultValues.month = '*';
        CronExpressionDefaultValues.dayOfWeek = '*';
        CronExpressionDefaultValues.year = '';
        CronExpressionDefaultValues.expression = CronExpressionDefaultValues.seconds + ' ' +
            CronExpressionDefaultValues.minutes + ' ' +
            CronExpressionDefaultValues.hours + ' ' +
            CronExpressionDefaultValues.dayOfMonth + ' ' +
            CronExpressionDefaultValues.month + ' ' +
            CronExpressionDefaultValues.dayOfWeek + ' ' +
            CronExpressionDefaultValues.year;
        return CronExpressionDefaultValues;
    })();
    VizPortal.CronExpressionDefaultValues = CronExpressionDefaultValues;
    var CronExpressionFieldValues = (function () {
        function CronExpressionFieldValues(seconds, minutes, hours, dayOfMonth, month, dayOfWeek, year) {
            if (seconds === void 0) { seconds = CronExpressionDefaultValues.seconds; }
            if (minutes === void 0) { minutes = CronExpressionDefaultValues.minutes; }
            if (hours === void 0) { hours = CronExpressionDefaultValues.hours; }
            if (dayOfMonth === void 0) { dayOfMonth = CronExpressionDefaultValues.dayOfMonth; }
            if (month === void 0) { month = CronExpressionDefaultValues.month; }
            if (dayOfWeek === void 0) { dayOfWeek = CronExpressionDefaultValues.dayOfWeek; }
            if (year === void 0) { year = CronExpressionDefaultValues.year; }
            this.seconds = seconds;
            this.minutes = minutes;
            this.hours = hours;
            this.dayOfMonth = dayOfMonth;
            this.month = month;
            this.dayOfWeek = dayOfWeek;
            this.year = year;
        }
        return CronExpressionFieldValues;
    })();
    VizPortal.CronExpressionFieldValues = CronExpressionFieldValues;
    var CronExpressionFieldSubsetTypes = (function () {
        function CronExpressionFieldSubsetTypes() {
        }
        CronExpressionFieldSubsetTypes.All = '1'; // ie '*'
        CronExpressionFieldSubsetTypes.Any = '2'; // ie '?'
        CronExpressionFieldSubsetTypes.Specific = '3'; // ie '3'
        CronExpressionFieldSubsetTypes.SpecificIncrement = '4'; // ie '0/2'
        CronExpressionFieldSubsetTypes.Range = '5'; // ie '1-5'
        CronExpressionFieldSubsetTypes.RangeIncrement = '6'; // ie '1-5/2'
        CronExpressionFieldSubsetTypes.Invalid = '7';
        return CronExpressionFieldSubsetTypes;
    })();
    VizPortal.CronExpressionFieldSubsetTypes = CronExpressionFieldSubsetTypes;
    var RemoteRefreshScheduleEditorViewModel = (function () {
        function RemoteRefreshScheduleEditorViewModel() {
            this.hoursOfDay = _.clone(RemoteRefreshScheduleEditorViewModel.defaultHoursOfDay);
            this.dayOfWeek = _.clone(RemoteRefreshScheduleEditorViewModel.defaultDayOfWeek);
            this.editorModeIsDaily = RemoteRefreshScheduleEditorViewModel.defaultEditorModeIsDaily;
        }
        // Get the cron expression equivalent to the current view model
        RemoteRefreshScheduleEditorViewModel.prototype.getCronExpression = function () {
            var values = new CronExpressionFieldValues();
            values.minutes = this.buildMinutesExpression();
            values.hours = this.buildHoursExpression();
            values.dayOfWeek = this.buildDayOfWeekExpression();
            return CronExpressionHelper.buildFromFields(values);
        };
        // This does NOT validate the expression string, assumes that it is a valid cron expression.
        // This only supports the subset of cron expressions currently implemented by the UI.
        RemoteRefreshScheduleEditorViewModel.prototype.setFromCronExpression = function (expression) {
            var minutesField = CronExpressionHelper.getMinutesField(expression);
            var hoursField = CronExpressionHelper.getHoursField(expression);
            var dayOfWeekField = CronExpressionHelper.getDayOfWeekField(expression);
            var days = [false, false, false, false, false, false, false];
            // minutes and hours of day
            var minutesParts = CronExpressionHelper.getTimeFieldSubsetParts(minutesField);
            var hoursParts = CronExpressionHelper.getTimeFieldSubsetParts(hoursField);
            // Expression can be an incremented range or a specific. Increment is described
            // using hours or minutes.
            if (minutesParts.increment !== undefined || hoursParts.increment !== undefined) {
                this.editorModeIsDaily = false;
                this.hoursOfDay.increment = (minutesParts.increment !== undefined ? minutesParts.increment : 0) +
                    (hoursParts.increment !== undefined ? hoursParts.increment * 60 : 0);
                this.hoursOfDay.from = hoursParts.from * 60;
                this.hoursOfDay.to = hoursParts.to * 60;
            }
            else {
                this.editorModeIsDaily = true;
                this.hoursOfDay.specific = hoursParts.specific * 60;
            }
            // days of week
            _.each(dayOfWeekField.split(','), function (subset) {
                var type = CronExpressionHelper.getTypeFromFieldSubset(subset);
                if (type === CronExpressionFieldSubsetTypes.Range) {
                    var from = CronExpressionHelper.getFromPartFromSubset(subset);
                    var to = CronExpressionHelper.getToPartFromSubset(subset);
                    _.each(_.range(from, to + 1), function (dayNumber) { return days[dayNumber - 1] = true; });
                }
                else if (type === CronExpressionFieldSubsetTypes.Specific) {
                    days[CronExpressionHelper.getSpecificPartFromSubset(subset) - 1] = true;
                }
                else if (type === CronExpressionFieldSubsetTypes.All) {
                    days = [true, true, true, true, true, true, true];
                }
                else {
                    throw '#setFromCronExpression failed when parsing the dayOfWeek field of the expression: {' + expression + '}. #getTypeFromFieldSubset returned: {' + type + '} for subset parameter: {' + subset + '}';
                }
            });
            this.dayOfWeek = {
                sunday: days[0],
                monday: days[1],
                tuesday: days[2],
                wednesday: days[3],
                thursday: days[4],
                friday: days[5],
                saturday: days[6]
            };
        };
        RemoteRefreshScheduleEditorViewModel.prototype.isValid = function () {
            return this.intervalIsValid() && this.dayOfWeekNotEmpty();
        };
        RemoteRefreshScheduleEditorViewModel.isEqual = function (objThis, objThat) {
            return _.isEqual(objThis.hoursOfDay, objThat.hoursOfDay) &&
                _.isEqual(objThis.dayOfWeek, objThat.dayOfWeek) &&
                objThis.editorModeIsDaily === objThat.editorModeIsDaily;
        };
        RemoteRefreshScheduleEditorViewModel.prototype.isEqual = function (that) {
            return RemoteRefreshScheduleEditorViewModel.isEqual(this, that);
        };
        RemoteRefreshScheduleEditorViewModel.clone = function (objThis, objThat) {
            objThis.hoursOfDay = _.clone(objThat.hoursOfDay);
            objThis.dayOfWeek = _.clone(objThat.dayOfWeek);
            objThis.editorModeIsDaily = objThat.editorModeIsDaily;
            return objThis;
        };
        RemoteRefreshScheduleEditorViewModel.prototype.clone = function (that) {
            return RemoteRefreshScheduleEditorViewModel.clone(this, that);
        };
        RemoteRefreshScheduleEditorViewModel.prototype.intervalIsValid = function () {
            return this.editorModeIsDaily || this.hoursOfDay.from < this.hoursOfDay.to;
        };
        RemoteRefreshScheduleEditorViewModel.prototype.dayOfWeekNotEmpty = function () {
            return !_.isEqual(this.dayOfWeek, RemoteRefreshScheduleEditorViewModel.emptyDayOfWeek);
        };
        // Build the minutes cron expression field from the view model
        // Cron expression values for minutes are 0-59
        RemoteRefreshScheduleEditorViewModel.prototype.buildMinutesExpression = function () {
            if (this.editorModeIsDaily) {
                return '0';
            }
            else {
                var minutesIncrement = this.hoursOfDay.increment % 60;
                return '0' + (minutesIncrement > 0 ? '/' + minutesIncrement : '');
            }
        };
        // Build the hours cron expression field from the view model
        // Cron expression values for hours are 0-23
        RemoteRefreshScheduleEditorViewModel.prototype.buildHoursExpression = function () {
            if (this.editorModeIsDaily) {
                return (this.hoursOfDay.specific / 60) + '';
            }
            else {
                // The view model combines cron's minutes & hours into a single increment field described in minutes.
                var minutesIncrement = this.hoursOfDay.increment % 60;
                var hoursIncrement = (this.hoursOfDay.increment >= 60 ? this.hoursOfDay.increment - minutesIncrement : 0) / 60;
                if (hoursIncrement > 0) {
                    return (this.hoursOfDay.from / 60) + '-' + (this.hoursOfDay.to / 60) + '/' + hoursIncrement;
                }
                else {
                    return (this.hoursOfDay.from / 60) + '-' + (this.hoursOfDay.to / 60);
                }
            }
        };
        // Build the day of week cron expression field from the view model
        // Collapse the days of week into the minimum cron expression so that it can be localized and translated into
        // the most succinct statement possible. Cron expression values for day of week are 1-7, Sunday through Saturday.
        RemoteRefreshScheduleEditorViewModel.prototype.buildDayOfWeekExpression = function () {
            var days = [this.dayOfWeek.sunday,
                this.dayOfWeek.monday,
                this.dayOfWeek.tuesday,
                this.dayOfWeek.wednesday,
                this.dayOfWeek.thursday,
                this.dayOfWeek.friday,
                this.dayOfWeek.saturday];
            var expression = '';
            var indexOfStart = days.indexOf(true);
            var indexOfEnd = days.indexOf(false, indexOfStart);
            if (indexOfStart === -1) {
                return '?';
            }
            if (indexOfStart === 0 && indexOfEnd === -1) {
                return '*';
            }
            while (true) {
                indexOfEnd = days.indexOf(false, indexOfStart);
                if (indexOfEnd === -1) {
                    if (indexOfStart === days.length - 1) {
                        expression = expression + (indexOfStart + 1) + '';
                    }
                    else if (indexOfStart === days.length - 2) {
                        expression = expression + (indexOfStart + 1) + ',' + (indexOfStart + 2);
                    }
                    else {
                        expression = expression + (indexOfStart + 1) + '-' + (days.length);
                    }
                    break;
                }
                else {
                    if (indexOfEnd - indexOfStart === 1) {
                        expression = expression + (indexOfStart + 1);
                    }
                    else if (indexOfEnd - indexOfStart === 2) {
                        expression = expression + (indexOfStart + 1) + ',' + indexOfEnd;
                    }
                    else {
                        expression = expression + (indexOfStart + 1) + '-' + indexOfEnd;
                    }
                    indexOfStart = days.indexOf(true, indexOfEnd);
                    if (indexOfStart !== -1) {
                        expression = expression + ',';
                    }
                    else {
                        break;
                    }
                }
            }
            return expression;
        };
        RemoteRefreshScheduleEditorViewModel.minuteIncrementOptions = [15, 30, 1 * 60, 2 * 60, 4 * 60, 8 * 60, 12 * 60]; // represented as minutes
        RemoteRefreshScheduleEditorViewModel.defaultHoursOfDay = {
            specific: 5 * 60,
            increment: 2 * 60,
            from: 8 * 60,
            to: 17 * 60
        };
        RemoteRefreshScheduleEditorViewModel.defaultDayOfWeek = {
            sunday: false,
            monday: true,
            tuesday: true,
            wednesday: true,
            thursday: true,
            friday: true,
            saturday: false
        };
        RemoteRefreshScheduleEditorViewModel.emptyDayOfWeek = {
            sunday: false,
            monday: false,
            tuesday: false,
            wednesday: false,
            thursday: false,
            friday: false,
            saturday: false
        };
        RemoteRefreshScheduleEditorViewModel.defaultEditorModeIsDaily = true; // default mode is daily at 5am
        return RemoteRefreshScheduleEditorViewModel;
    })();
    VizPortal.RemoteRefreshScheduleEditorViewModel = RemoteRefreshScheduleEditorViewModel;
    var CronExpressionHelper;
    (function (CronExpressionHelper) {
        // Helper methods for cron expressions in the Quartz Scheduler format.
        // Docs: http://www.quartz-scheduler.org/documentation/quartz-1.x/tutorials/crontrigger
        //
        // Expression consists of 7 fields:
        //   _Field_      _Mandatory_   _Values_          _Special_     _Notes_
        //   Seconds      true          0-59              , - * /
        //   Minutes      true          0-59              , - * /
        //   Hours        true          0-23              , - * /
        //   Day of month true          1-31              , - * ? / L W
        //   Month        true          1-12              , - * /       Jan-Dec
        //   Day of week  true          1-7               , - * ? / L # Sun-Sat
        //   Year         false         empty, 1970-2099  , - * /
        //
        // WARN: Non-numeric values are not supported by this implementation (ie 'Jan' or 'Sun')
        // Concatenate discrete fields into a single cron expression string
        function buildFromFields(fields) {
            var expression = fields.seconds + ' ' +
                fields.minutes + ' ' +
                fields.hours + ' ' +
                fields.dayOfMonth + ' ' +
                fields.month + ' ' +
                fields.dayOfWeek;
            // year is optional
            if (fields.year) {
                expression = expression + ' ' + fields.year;
            }
            return expression;
        }
        CronExpressionHelper.buildFromFields = buildFromFields;
        // Parse discrete fields from a cron expression string.
        function buildFromExpression(expression) {
            var fields = new CronExpressionFieldValues();
            var split = expression.split(' ');
            fields.seconds = split[0];
            fields.minutes = split[1];
            fields.hours = split[2];
            fields.dayOfMonth = split[3];
            fields.month = split[4];
            fields.dayOfWeek = split[5];
            if (split.length === 7) {
                fields.year = split[6];
            }
            return fields;
        }
        CronExpressionHelper.buildFromExpression = buildFromExpression;
        // Given a subset of a field that is comma delimited, determine the type. This type informs the parsing applied
        // to the field.
        function getTypeFromFieldSubset(field) {
            if (field === '*')
                return CronExpressionFieldSubsetTypes.All;
            if (field === '?')
                return CronExpressionFieldSubsetTypes.Any;
            // A sinle one or two digit number
            if (field.search('^([0-9]|[0-9][0-9])$') !== -1)
                return CronExpressionFieldSubsetTypes.Specific;
            // A single one or two digit number with a one or two digit increment
            if (field.search('((^)|(^([0-9]|[0-9][0-9])))\/([0-9]|[0-9][0-9])$') !== -1)
                return CronExpressionFieldSubsetTypes.SpecificIncrement;
            // Two one or two digit numbers separated by a dash, describing the from and to properties of the range.
            if (field.search('^(([0-9]|[0-9][0-9])-([0-9]|[0-9][0-9]))$') !== -1)
                return CronExpressionFieldSubsetTypes.Range;
            // Two one or two digit numbers separated by a dash, describing the from and to properties of the range, with a one or two digit increment.
            if (field.search('^(([0-9]|[0-9][0-9])-([0-9]|[0-9][0-9]))\/([0-9]|[0-9][0-9])$') !== -1)
                return CronExpressionFieldSubsetTypes.RangeIncrement;
            return CronExpressionFieldSubsetTypes.Invalid;
        }
        CronExpressionHelper.getTypeFromFieldSubset = getTypeFromFieldSubset;
        // Return the "specific" part in a field subset.
        // Example: 1/4 returns 1
        // Example: 4 returns 4
        // Example: 0/2 returns 2
        function getSpecificPartFromSubset(subset) {
            // input may or may not have an increment
            var slash = subset.indexOf('/');
            // an increment with no specific value is an implied 0
            if (slash === 0)
                return 0;
            var number = slash === -1 ? subset : subset.substring(0, slash);
            return parseInt(number, 10);
        }
        CronExpressionHelper.getSpecificPartFromSubset = getSpecificPartFromSubset;
        // Return the "from" part of a range in a field subset.
        // Example: 1-2 returns 1
        // Example: 4-10/2 returns 4
        function getFromPartFromSubset(subset) {
            var number = subset.substring(0, subset.indexOf('-'));
            return parseInt(number, 10);
        }
        CronExpressionHelper.getFromPartFromSubset = getFromPartFromSubset;
        // Return the "to" part of a range in a field subset.
        // Example: 1-2 returns 2
        // Example: 4-10/2 returns 10
        function getToPartFromSubset(subset) {
            // input may or may not have an increment
            var slash = subset.indexOf('/');
            var number = subset.substring(subset.indexOf('-') + 1, slash === -1 ? subset.length : slash);
            return parseInt(number, 10);
        }
        CronExpressionHelper.getToPartFromSubset = getToPartFromSubset;
        // Return the "increment" part in a field subset.
        // Example: 2/5 returns 5
        // Example: 4-10/2 returns 2
        function getIncrementPartFromSubset(subset) {
            var number = subset.substring(subset.indexOf('/') + 1);
            return parseInt(number, 10);
        }
        CronExpressionHelper.getIncrementPartFromSubset = getIncrementPartFromSubset;
        // Given a field subset, return a view model equivalent. Subsets are the comma delimited portions of a cron expression field.
        // Example: '8-17/2' returns { increment: 2, from: 8, to: 17 }
        function getTimeFieldSubsetParts(subset) {
            var parts = {};
            var type = CronExpressionHelper.getTypeFromFieldSubset(subset);
            if (type === CronExpressionFieldSubsetTypes.Specific) {
                parts.specific = getSpecificPartFromSubset(subset);
            }
            else if (type === CronExpressionFieldSubsetTypes.SpecificIncrement) {
                parts.specific = getSpecificPartFromSubset(subset);
                parts.increment = getIncrementPartFromSubset(subset);
            }
            else if (type === CronExpressionFieldSubsetTypes.Range) {
                parts.from = getFromPartFromSubset(subset);
                parts.to = getToPartFromSubset(subset);
            }
            else if (type === CronExpressionFieldSubsetTypes.RangeIncrement) {
                parts.from = getFromPartFromSubset(subset);
                parts.to = getToPartFromSubset(subset);
                parts.increment = getIncrementPartFromSubset(subset);
            }
            else {
                throw '#getTimeFieldSubsetParts failed. #getTypeFromFieldSubset returned: {' + type + '} for subset parameter: {' + subset + '}';
            }
            return parts;
        }
        CronExpressionHelper.getTimeFieldSubsetParts = getTimeFieldSubsetParts;
        // Get the seconds field of a cron expression string
        function getSecondsField(expression) {
            return buildFromExpression(expression).seconds;
        }
        CronExpressionHelper.getSecondsField = getSecondsField;
        // Get the minutes field of a cron expression string
        function getMinutesField(expression) {
            return buildFromExpression(expression).minutes;
        }
        CronExpressionHelper.getMinutesField = getMinutesField;
        // Get the hours field of a cron expression string
        function getHoursField(expression) {
            return buildFromExpression(expression).hours;
        }
        CronExpressionHelper.getHoursField = getHoursField;
        // Get the day of month field of a cron expression string
        function getDayOfMonthField(expression) {
            return buildFromExpression(expression).dayOfMonth;
        }
        CronExpressionHelper.getDayOfMonthField = getDayOfMonthField;
        // Get the month field of a cron expression string
        function getMonthField(expression) {
            return buildFromExpression(expression).month;
        }
        CronExpressionHelper.getMonthField = getMonthField;
        // Get the day of week field of a cron expression string
        function getDayOfWeekField(expression) {
            return buildFromExpression(expression).dayOfWeek;
        }
        CronExpressionHelper.getDayOfWeekField = getDayOfWeekField;
        // Get the year field of a cron expression string
        function getYearField(expression) {
            return buildFromExpression(expression).year;
        }
        CronExpressionHelper.getYearField = getYearField;
        // Set the seconds field of a cron expression string
        function setSecondsField(expression, val) {
            var fields = buildFromExpression(expression);
            fields.seconds = val;
            return buildFromFields(fields);
        }
        CronExpressionHelper.setSecondsField = setSecondsField;
        // Set the minutes field of a cron expression string
        function setMinutesField(expression, val) {
            var fields = buildFromExpression(expression);
            fields.minutes = val;
            return buildFromFields(fields);
        }
        CronExpressionHelper.setMinutesField = setMinutesField;
        // Set the hours field of a cron expression string
        function setHoursField(expression, val) {
            var fields = buildFromExpression(expression);
            fields.hours = val;
            return buildFromFields(fields);
        }
        CronExpressionHelper.setHoursField = setHoursField;
        // Set the day of month field of a cron expression string
        function setDayOfMonthField(expression, val) {
            var fields = buildFromExpression(expression);
            fields.dayOfMonth = val;
            return buildFromFields(fields);
        }
        CronExpressionHelper.setDayOfMonthField = setDayOfMonthField;
        // Set the month field of a cron expression string
        function setMonthField(expression, val) {
            var fields = buildFromExpression(expression);
            fields.month = val;
            return buildFromFields(fields);
        }
        CronExpressionHelper.setMonthField = setMonthField;
        // Set the day of week field of a cron expression string
        function setDayOfWeekField(expression, val) {
            var fields = buildFromExpression(expression);
            fields.dayOfWeek = val;
            return buildFromFields(fields);
        }
        CronExpressionHelper.setDayOfWeekField = setDayOfWeekField;
        // Set the year field of a cron expression string
        function setYearField(expression, val) {
            var fields = buildFromExpression(expression);
            fields.year = val;
            return buildFromFields(fields);
        }
        CronExpressionHelper.setYearField = setYearField;
    })(CronExpressionHelper = VizPortal.CronExpressionHelper || (VizPortal.CronExpressionHelper = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../fetchers/IListFetcher.ts" />
/// <reference path="../fetchers/ListResult.ts" />
/// <reference path="../ServerApi/types/IGetItemsParams.ts" />
/// <reference path="../ServerApi/types/IGetItemsResult.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerResourceFetcher = (function () {
        function ServerResourceFetcher(server, requestType, resultMapper) {
            this.server = server;
            this.requestType = requestType;
            this.resultMapper = resultMapper;
        }
        ServerResourceFetcher.prototype.fetchList = function (params) {
            var _this = this;
            return this.server
                .sendRequest(new this.requestType(params))
                .then(function (result) {
                var startIndex = params.page ? params.page.startIndex : 0;
                return new VizPortal.ListResult(_this.resultMapper(result), startIndex, result.totalCount);
            });
        };
        return ServerResourceFetcher;
    })();
    VizPortal.ServerResourceFetcher = ServerResourceFetcher;
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/IResponse.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var CreateRemoteRefreshScheduleRequest = (function (_super) {
            __extends(CreateRemoteRefreshScheduleRequest, _super);
            function CreateRemoteRefreshScheduleRequest(params) {
                _super.call(this, 'createRemoteRefreshSchedule', params);
            }
            return CreateRemoteRefreshScheduleRequest;
        })(ServerApi.Request);
        ServerApi.CreateRemoteRefreshScheduleRequest = CreateRemoteRefreshScheduleRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/IResponse.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var DeleteRemoteRefreshSchedulesRequest = (function (_super) {
            __extends(DeleteRemoteRefreshSchedulesRequest, _super);
            function DeleteRemoteRefreshSchedulesRequest(params) {
                _super.call(this, 'deleteRemoteRefreshSchedules', params);
            }
            return DeleteRemoteRefreshSchedulesRequest;
        })(ServerApi.Request);
        ServerApi.DeleteRemoteRefreshSchedulesRequest = DeleteRemoteRefreshSchedulesRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/IRemoteRefreshSchedule.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        // Remote refreshes can be full or incremental
        ServerApi.RemoteRefreshTypes = {
            Full: 'Full',
            Incremental: 'Incremental'
        };
        // Given a datasource id, get the remote refresh schedules
        var GetRemoteRefreshSchedulesRequest = (function (_super) {
            __extends(GetRemoteRefreshSchedulesRequest, _super);
            function GetRemoteRefreshSchedulesRequest(params) {
                _super.call(this, 'getRemoteRefreshSchedules', params);
            }
            return GetRemoteRefreshSchedulesRequest;
        })(ServerApi.Request);
        ServerApi.GetRemoteRefreshSchedulesRequest = GetRemoteRefreshSchedulesRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/IResponse.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var UpdateRemoteRefreshScheduleRequest = (function (_super) {
            __extends(UpdateRemoteRefreshScheduleRequest, _super);
            function UpdateRemoteRefreshScheduleRequest(params) {
                _super.call(this, 'updateRemoteRefreshSchedule', params);
            }
            return UpdateRemoteRefreshScheduleRequest;
        })(ServerApi.Request);
        ServerApi.UpdateRemoteRefreshScheduleRequest = UpdateRemoteRefreshScheduleRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="ServerService.ts" />
var VizPortal;
(function (VizPortal) {
    var ErrorNotifyingServer = (function () {
        function ErrorNotifyingServer(ServerService, toaster, $translate, $timeout) {
            this.ServerService = ServerService;
            this.toaster = toaster;
            this.$translate = $translate;
            this.$timeout = $timeout;
        }
        ErrorNotifyingServer.prototype.notifyOnFail = function (result) {
            var _this = this;
            result.fail(function (reason) {
                if (reason === VizPortal.ErrorReason.Unknown) {
                    _this.toaster.pop({ type: VizPortal.ToastType.Error, text: _this.$translate.instant('unexpectedError') });
                }
            });
            return result;
        };
        ErrorNotifyingServer.prototype.addDelay = function (result) {
            var _this = this;
            return result.then(function (value) { return _this.$timeout(function () { return value; }, ErrorNotifyingServer.ResponseDelay); });
        };
        ErrorNotifyingServer.prototype.sendRequest = function (request) {
            return this.notifyOnFail(this.ServerService.sendRequest(request));
        };
        ErrorNotifyingServer.prototype.sendRequestAndDelay = function (request) {
            return this.addDelay(this.sendRequest(request));
        };
        ErrorNotifyingServer.prototype.sendRequests = function (requests, combineResults) {
            return this.notifyOnFail(this.ServerService.sendRequests(requests, combineResults));
        };
        ErrorNotifyingServer.prototype.sendRequestsAndDelay = function (requests, combineResults) {
            return this.addDelay(this.sendRequests(requests, combineResults));
        };
        ErrorNotifyingServer.prototype.getServerService = function () {
            return this.ServerService;
        };
        ErrorNotifyingServer.ResponseDelay = 2000;
        ErrorNotifyingServer.$inject = ['ServerService', 'ToasterService', '$translate', '$timeout'];
        return ErrorNotifyingServer;
    })();
    VizPortal.ErrorNotifyingServer = ErrorNotifyingServer;
    VizPortal.Module.instance().service('ErrorNotifyingServer', ErrorNotifyingServer);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../fetchers/ServerResourceFetcher.ts" />
/// <reference path="../helpers/ServerModelHelper.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/CreateRemoteRefreshScheduleRequest.ts" />
/// <reference path="../ServerApi/requests/DeleteRemoteRefreshSchedulesRequest.ts" />
/// <reference path="../ServerApi/requests/GetRemoteRefreshSchedulesRequest.ts" />
/// <reference path="../ServerApi/requests/UpdateRemoteRefreshScheduleRequest.ts" />
/// <reference path="../services/ErrorNotifyingServer.ts" />
/// <reference path="Resource.ts" />
var VizPortal;
(function (VizPortal) {
    var RemoteRefreshSchedules = (function (_super) {
        __extends(RemoteRefreshSchedules, _super);
        function RemoteRefreshSchedules(ErrorNotifyingServer, FetcherFactory) {
            _super.call(this, FetcherFactory.getServerResourceFetcher(VizPortal.ServerApi.GetRemoteRefreshSchedulesRequest, VizPortal.ServerApiMapper.remoteRefreshSchedules));
            this.ErrorNotifyingServer = ErrorNotifyingServer;
        }
        RemoteRefreshSchedules.prototype.create = function (targetId, item) {
            return this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.CreateRemoteRefreshScheduleRequest({
                targetId: targetId,
                definition: item.definition,
                refreshType: item.refreshType
            }));
        };
        RemoteRefreshSchedules.prototype.update = function (targetId, initialSchedule, finalSchedule) {
            return this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.UpdateRemoteRefreshScheduleRequest({
                targetId: targetId,
                initial: VizPortal.RemoteRefreshScheduleMapper.mapSingleToApi(initialSchedule),
                final: VizPortal.RemoteRefreshScheduleMapper.mapSingleToApi(finalSchedule)
            }));
        };
        RemoteRefreshSchedules.prototype.del = function (targetId, items) {
            var schedules = items.toArray();
            return this.ErrorNotifyingServer.sendRequests(VizPortal.RequestHelper.buildRequests(schedules, function (schedulesBlock) {
                return new VizPortal.ServerApi.DeleteRemoteRefreshSchedulesRequest({
                    targetId: targetId,
                    schedules: VizPortal.RemoteRefreshScheduleMapper.mapToApi(schedulesBlock)
                });
            }), VizPortal.ResultHelper.combineResults);
        };
        RemoteRefreshSchedules.$inject = ['ErrorNotifyingServer', 'FetcherFactory'];
        return RemoteRefreshSchedules;
    })(VizPortal.Resource);
    VizPortal.RemoteRefreshSchedules = RemoteRefreshSchedules;
    VizPortal.Module.instance().service('RemoteRefreshSchedules', RemoteRefreshSchedules);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/CronExpressionHelper.ts" />
/// <reference path="../helpers/ErrorCodes.ts" />
/// <reference path="../resources/RemoteRefreshSchedules.ts" />
/// <reference path="ContentActionNotification.ts" />
var VizPortal;
(function (VizPortal) {
    var CreateRemoteRefreshScheduleAction = (function () {
        function CreateRemoteRefreshScheduleAction($translate, $filter, ConfirmActionDialog, ContentActionNotification, RemoteRefreshSchedules) {
            this.$translate = $translate;
            this.$filter = $filter;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.ContentActionNotification = ContentActionNotification;
            this.RemoteRefreshSchedules = RemoteRefreshSchedules;
        }
        CreateRemoteRefreshScheduleAction.prototype.execute = function ($event, item, availableTypes) {
            var _this = this;
            var context = VizPortal.ActionContext.fromEvent($event);
            this.scope = context.scope.$new();
            this.scope.availableTypeOptions = availableTypes;
            this.scope.minuteIncrementOptions = VizPortal.RemoteRefreshScheduleEditorViewModel.minuteIncrementOptions;
            this.scope.prompt = this.$translate.instant('createRemoteRefreshScheduleCustomDialogPrompt', { ITEM_NAME: VizPortal.L10n.elideIfLong(item.name) });
            this.scope.startOnMonday = VizPortal.L10n.firstDayOfWeekIsMonday();
            this.scope.editorViewModel = new VizPortal.RemoteRefreshScheduleEditorViewModel();
            this.scope.scheduleInfo = {
                definition: this.scope.editorViewModel.getCronExpression(),
                refreshType: VizPortal.ServerApi.RemoteRefreshTypes.Full,
                runNextAt: null
            };
            var dialogInstance = this.ConfirmActionDialog.open({
                title: this.$translate.instant('createRemoteRefreshScheduleDialogTitle'),
                bodyTemplateUrl: 'confirmActionDialogRemoteRefreshSchedule.html',
                size: '500px',
                scope: this.scope,
                position: _.extend(VizPortal.ModalService.anchoredTo(context.targetElement), { reserveHeight: 600 }),
                actionName: this.$translate.instant('createRemoteRefreshScheduleDialogSubmit'),
                action: function () {
                    _this.scope.scheduleInfo.definition = _this.scope.editorViewModel.getCronExpression();
                    return _this.RemoteRefreshSchedules.create(item.id, _this.scope.scheduleInfo);
                },
                confirmDisabled: function () { return !_this.scope.editorViewModel.isValid(); }
            });
            return dialogInstance.result
                .then(function (result) {
                if (result.errors && result.errors.length) {
                    var errorMessage = _this.errorMessageFor(result.errors[0]);
                    dialogInstance.showErrorMessage(errorMessage);
                }
                else {
                    _this.ContentActionNotification.notifySuccess(_this.$translate.instant('createRemoteRefreshScheduleSuccess', { REFRESH_TYPE_NAME: _this.$filter('remoteRefreshScheduleTypeName')(_this.scope.scheduleInfo.refreshType) }));
                }
                return result;
            })
                .fin(function () { return _this.scope.$destroy(); });
        };
        CreateRemoteRefreshScheduleAction.prototype.errorMessageFor = function (error) {
            return this.$translate.instant('errorUnknown');
        };
        CreateRemoteRefreshScheduleAction.$inject = [
            '$translate',
            '$filter',
            'ConfirmActionDialog',
            'ContentActionNotification',
            'RemoteRefreshSchedules'
        ];
        return CreateRemoteRefreshScheduleAction;
    })();
    VizPortal.CreateRemoteRefreshScheduleAction = CreateRemoteRefreshScheduleAction;
    VizPortal.Module.instance().service('CreateRemoteRefreshScheduleAction', CreateRemoteRefreshScheduleAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var DeleteRemoteRefreshSchedulesAction = (function () {
        function DeleteRemoteRefreshSchedulesAction($translate, ConfirmActionDialog, ContentActionNotification, RemoteRefreshSchedules) {
            this.$translate = $translate;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.ContentActionNotification = ContentActionNotification;
            this.RemoteRefreshSchedules = RemoteRefreshSchedules;
        }
        DeleteRemoteRefreshSchedulesAction.prototype.execute = function (context, item, selected) {
            var _this = this;
            return this.ConfirmActionDialog.open({
                scope: context.scope,
                title: this.$translate.instant('delete'),
                bodyText: this.$translate.instant('confirmDeleteRemoteRefreshSchedules', { COUNT: selected.size() }, VizPortal.L10n.Interpolations.Count),
                actionName: this.$translate.instant('confirmDeleteButton', { ITEM_COUNT: selected.size() }, VizPortal.L10n.Interpolations.Count),
                isDeleteAction: true,
                action: function (dialogInstance) {
                    return _this.RemoteRefreshSchedules.del(item.id, selected)
                        .then(function (result) {
                        if (result.errors && result.errors.length) {
                            var errorMessage = _this.errorMessageFor(result.errors[0]);
                            dialogInstance.showErrorMessage(errorMessage);
                        }
                        else {
                            _this.ContentActionNotification.notifySuccess(_this.$translate.instant('deleteRemoteRefreshScheduleSuccess', { ITEM_COUNT: selected.size() }, VizPortal.L10n.Interpolations.Count));
                        }
                        return result;
                    });
                }
            }).result;
        };
        DeleteRemoteRefreshSchedulesAction.prototype.errorMessageFor = function (error) {
            return this.$translate.instant('errorUnknown');
        };
        DeleteRemoteRefreshSchedulesAction.$inject = [
            '$translate',
            'ConfirmActionDialog',
            'ContentActionNotification',
            'RemoteRefreshSchedules'
        ];
        return DeleteRemoteRefreshSchedulesAction;
    })();
    VizPortal.DeleteRemoteRefreshSchedulesAction = DeleteRemoteRefreshSchedulesAction;
    VizPortal.Module.instance().service('DeleteRemoteRefreshSchedulesAction', DeleteRemoteRefreshSchedulesAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/ErrorCodes.ts" />
/// <reference path="../resources/RemoteRefreshSchedules.ts" />
/// <reference path="CreateRemoteRefreshScheduleAction.ts" />
/// <reference path="ContentActionNotification.ts" />
var VizPortal;
(function (VizPortal) {
    var EditRemoteRefreshScheduleAction = (function () {
        function EditRemoteRefreshScheduleAction($translate, $filter, ConfirmActionDialog, ContentActionNotification, RemoteRefreshSchedules) {
            this.$translate = $translate;
            this.$filter = $filter;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.ContentActionNotification = ContentActionNotification;
            this.RemoteRefreshSchedules = RemoteRefreshSchedules;
        }
        EditRemoteRefreshScheduleAction.prototype.execute = function (context, item, schedule, availableTypes) {
            var _this = this;
            this.scope = context.scope.$new();
            this.scope.availableTypeOptions = availableTypes;
            this.scope.minuteIncrementOptions = VizPortal.RemoteRefreshScheduleEditorViewModel.minuteIncrementOptions;
            this.scope.prompt = this.$translate.instant('editRemoteRefreshScheduleCustomDialogPrompt', { DATASOURCE_NAME: VizPortal.L10n.elideIfLong(item.name) });
            this.scope.startOnMonday = VizPortal.L10n.firstDayOfWeekIsMonday();
            this.scope.editorViewModel = new VizPortal.RemoteRefreshScheduleEditorViewModel();
            this.scope.editorViewModel.setFromCronExpression(schedule.definition);
            this.scope.scheduleInfo = _.clone(schedule);
            var initialViewModel = new VizPortal.RemoteRefreshScheduleEditorViewModel().clone(this.scope.editorViewModel);
            var dialogInstance = this.ConfirmActionDialog.open({
                title: this.$translate.instant('editRemoteRefreshScheduleDialogTitle'),
                bodyTemplateUrl: 'confirmActionDialogRemoteRefreshSchedule.html',
                size: '500px',
                scope: this.scope,
                position: _.extend(VizPortal.ModalService.anchoredTo(context.targetElement), { reserveHeight: 600 }),
                actionName: this.$translate.instant('editRemoteRefreshSchedule'),
                action: function () {
                    _this.scope.scheduleInfo.definition = _this.scope.editorViewModel.getCronExpression();
                    return _this.RemoteRefreshSchedules.update(item.id, schedule, _this.scope.scheduleInfo);
                },
                confirmDisabled: function () {
                    return !_this.scope.editorViewModel.isValid() ||
                        (_this.scope.editorViewModel.isEqual(initialViewModel) && _this.scope.scheduleInfo.refreshType === schedule.refreshType);
                }
            });
            return dialogInstance.result
                .then(function (result) {
                if (result.errors && result.errors.length) {
                    var errorMessage = _this.errorMessageFor(result.errors[0]);
                    dialogInstance.showErrorMessage(errorMessage);
                }
                else {
                    _this.ContentActionNotification.notifySuccess(_this.$translate.instant('editRemoteRefreshScheduleSuccess', { REFRESH_TYPE_NAME: _this.$filter('remoteRefreshScheduleTypeName')(_this.scope.scheduleInfo.refreshType) }));
                }
                return result;
            })
                .fin(function () { return _this.scope.$destroy(); });
        };
        EditRemoteRefreshScheduleAction.prototype.errorMessageFor = function (error) {
            return this.$translate.instant('errorUnknown');
        };
        EditRemoteRefreshScheduleAction.$inject = [
            '$translate',
            '$filter',
            'ConfirmActionDialog',
            'ContentActionNotification',
            'RemoteRefreshSchedules'
        ];
        return EditRemoteRefreshScheduleAction;
    })();
    VizPortal.EditRemoteRefreshScheduleAction = EditRemoteRefreshScheduleAction;
    VizPortal.Module.instance().service('EditRemoteRefreshScheduleAction', EditRemoteRefreshScheduleAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var QueryService = (function () {
        function QueryService($location) {
            this.$location = $location;
        }
        QueryService.prototype.createQueryUpdaterFromSubplace = function ($scope, subplace, refreshFn) {
            return new QueryUpdater(this.$location, $scope, subplace.type, subplace.resource, refreshFn, subplace.defaultFilters, subplace.filterKeys());
        };
        QueryService.prototype.createQueryUpdater = function ($scope, type, resource, refreshFn, defaultFilters) {
            return new QueryUpdater(this.$location, $scope, type, resource, refreshFn, defaultFilters);
        };
        QueryService.$inject = ['$location'];
        return QueryService;
    })();
    VizPortal.QueryService = QueryService;
    var QueryUpdater = (function () {
        function QueryUpdater($location, $scope, type, resource, refreshFn, defaultFilters, filterKeys) {
            var _this = this;
            if (filterKeys === void 0) { filterKeys = type.filterKeys; }
            this.$location = $location;
            this.$scope = $scope;
            this.type = type;
            this.resource = resource;
            this.refreshFn = refreshFn;
            this.defaultFilters = defaultFilters;
            this.filterKeys = filterKeys;
            // store last order and filters so we know if we will need to update the resource query
            this.order = null;
            this.filters = null;
            $scope.$on('$locationChangeSuccess', function (event, newLoc, oldLoc) {
                // Only trigger a refresh if we're at the same location
                // i.e. only the query string has changed
                newLoc = newLoc.split('?')[0];
                oldLoc = oldLoc.split('?')[0];
                if (newLoc === oldLoc) {
                    _this.refreshIfOrderOrFilterChanged();
                }
            });
        }
        // public methods
        QueryUpdater.prototype.refresh = function () {
            var orderAndFilters = this.getCurrentOrderAndFilters();
            var order = orderAndFilters.order;
            var filters = orderAndFilters.filters;
            var extraQueryParams = this.type.extraQueryParams;
            this.rememberOrderAndFilter(order, filters);
            var resourceQuery = this.createResourceQuery(order, filters, extraQueryParams);
            this.refreshFn(resourceQuery);
        };
        // private methods
        QueryUpdater.prototype.refreshIfOrderOrFilterChanged = function () {
            var orderAndFilters = this.getCurrentOrderAndFilters();
            var order = orderAndFilters.order;
            var filters = orderAndFilters.filters;
            var extraQueryParams = this.type.extraQueryParams;
            if (this.didOrderOrFilterChanged(order, filters)) {
                this.rememberOrderAndFilter(order, filters);
                var resourceQuery = this.createResourceQuery(order, filters, extraQueryParams);
                this.refreshFn(resourceQuery);
            }
        };
        QueryUpdater.prototype.didOrderOrFilterChanged = function (newOrder, newFilters) {
            return (!_.isEqual(newOrder, this.order) || !_.isEqual(newFilters, this.filters));
        };
        QueryUpdater.prototype.rememberOrderAndFilter = function (order, filters) {
            this.order = order;
            this.filters = filters;
        };
        QueryUpdater.prototype.createResourceQuery = function (order, filters, extraParams) {
            return this.resource.all().withFilters(filters).withOrder(order).withExtraParams(extraParams);
        };
        QueryUpdater.prototype.getCurrentOrderAndFilters = function () {
            var urlParams = this.$location.search();
            return {
                order: VizPortal.Order.fromInput(urlParams.order, this.type.orderKeys) || this.type.defaultOrder,
                filters: this.getFilterClauses(urlParams, this.filterKeys, this.defaultFilters)
            };
        };
        QueryUpdater.prototype.getFilterClauses = function (urlParams, filterKeys, defaultFilters) {
            return VizPortal.ServerFilterClauses.create(_.defaults(_(urlParams).pick(filterKeys), defaultFilters || {}));
        };
        return QueryUpdater;
    })();
    VizPortal.Module.instance().service('QueryService', QueryService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../models/Set.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var SelectionService = (function () {
        function SelectionService() {
        }
        SelectionService.prototype.rowClicked = function (selectedItems, row, colIndex) {
            var isCheckbox = colIndex === 0;
            if (isCheckbox) {
                selectedItems.toggle(row);
            }
            else {
                selectedItems.clear();
                selectedItems.add(row);
            }
        };
        return SelectionService;
    })();
    VizPortal.SelectionService = SelectionService;
    VizPortal.Module.instance().service('SelectionService', SelectionService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../../app/content/RemoteRefreshScheduleGrid.ts" />
/// <reference path="../../common/react/components/dataGrid/AngularToReactDataGridBridge.ts" />
/// <reference path="../helpers/ActionButtonsHelper.ts" />
/// <reference path="../helpers/LocalSorter.ts" />
/// <reference path="../helpers/RefreshPropertyHelper.ts" />
/// <reference path="../helpers/SubplaceCountsHelper.ts" />
/// <reference path="../models/ContentTypes.ts" />
/// <reference path="../models/IEmptyTemplate.ts" />
/// <reference path="../models/ITemplate.ts" />
/// <reference path="../models/IPlace.ts" />
/// <reference path="../services/BrowserTitleService.ts" />
/// <reference path="../services/ChangeDatasourceRemoteRefreshPropertiesAction.ts" />
/// <reference path="../services/CreateRemoteRefreshScheduleAction.ts" />
/// <reference path="../services/DeleteRemoteRefreshSchedulesAction.ts" />
/// <reference path="../services/EditRemoteRefreshScheduleAction.ts" />
/// <reference path="../services/HelpService.ts" />
/// <reference path="../services/QueryService.ts" />
/// <reference path="../services/SelectionService.ts" />
/// <reference path="../services/SorterFactory.ts" />
var VizPortal;
(function (VizPortal) {
    var RemoteRefreshSchedulesCtrl = (function () {
        function RemoteRefreshSchedulesCtrl($q, $translate, AngularToReactDataGridBridge, $scope, $state, $filter, BrowserTitleService, subplace, serverService, queryService, selectionService, HelpService, sorterFactory, datasource, CreateRemoteRefreshScheduleAction, DeleteRemoteRefreshSchedulesAction, EditRemoteRefreshScheduleAction, ChangeDatasourceRemoteRefreshPropertiesAction) {
            var _this = this;
            this.$q = $q;
            this.$translate = $translate;
            this.AngularToReactDataGridBridge = AngularToReactDataGridBridge;
            this.$scope = $scope;
            this.$filter = $filter;
            this.serverService = serverService;
            this.HelpService = HelpService;
            this.datasource = datasource;
            this.DeleteRemoteRefreshSchedulesAction = DeleteRemoteRefreshSchedulesAction;
            this.EditRemoteRefreshScheduleAction = EditRemoteRefreshScheduleAction;
            $scope.selectedItems = new VizPortal.Set(RemoteRefreshSchedulesCtrl.keyForSchedule);
            var actions = this.createActions($scope.selectedItems);
            if (VizPortal.FeatureFlags.reactRemoteSchedulesGrid) {
                this.configureForReactDataGrid(actions);
            }
            BrowserTitleService.setTitle('refreshSchedule', $scope.objectName);
            // If a deep link was used to this sub-place after the refresh mode was changed, redirect to the correct one.
            this.redirectByExtractsAndRefreshMode($state, datasource);
            $scope.$on(VizPortal.SubplaceEvents.Refresh, function () {
                _this.refreshRemoteRefreshSchedules();
            });
            $scope.datasource = datasource;
            $scope.anyActionsAllowed = function () { return _this.anyActionsAllowed(); };
            $scope.refreshPropertiesAreEditable = function () { return $scope.anyActionsAllowed() && VizPortal.RefreshPropertyHelper.canBeRefreshedRemotely(datasource); };
            $scope.currentRefreshLocation = function () { return VizPortal.RefreshPropertyHelper.getCurrentRefreshLocation($translate, $scope.datasource); };
            $scope.sorter = sorterFactory.create(VizPortal.RemoteRefreshScheduleContentType.defaultOrder);
            $scope.availableAction = function (action) { return action.isAvailable($scope.selectedItems); };
            VizPortal.ActionButtonsHelper.setupActionButtons($scope, actions);
            $scope.listActions = [{
                    name: 'new-remote-refresh-schedule',
                    translate: 'newExtractRefresh',
                    isAvailable: function () { return $scope.anyActionsAllowed(); },
                    execute: function ($event) { return CreateRemoteRefreshScheduleAction.execute($event, datasource, VizPortal.RefreshPropertyHelper.getAvailableRefreshTypes($scope.datasource))
                        .then(function () { return _this.refreshRemoteRefreshSchedules(); }); }
                }];
            $scope.availableListAction = function (listAction) { return listAction.isAvailable(); };
            $scope.headerClicked = function (header) { return $scope.sorter.setPrimary(header.attrs['key'], header.attrs['direction']); };
            $scope.rowClicked = function (row, colIndex) {
                if ($scope.anyActionsAllowed()) {
                    selectionService.rowClicked($scope.selectedItems, row, colIndex);
                }
            };
            this.waitForCountOfSchedules = $q.defer();
            $scope.changeRemoteRefreshProperties = function ($event) {
                _this.waitForCountOfSchedules.promise.then(function (countOfSchedules) {
                    ChangeDatasourceRemoteRefreshPropertiesAction.execute($event, $scope.datasource, false, countOfSchedules);
                });
            };
            $scope.sliceChanged = function (newSlice) {
                _this.waitForCountOfSchedules.resolve(newSlice.total);
                $scope.selectedItems.updateItems(newSlice.items);
                VizPortal.SubplaceCountsHelper.updateCountsFromSubplace($scope, subplace, newSlice.total);
            };
            $scope.emptyTemplateModel = this.emptyTemplateModel();
            this.query = queryService.createQueryUpdaterFromSubplace($scope, subplace, function (resourceQuery) {
                $scope.sliceable = new LocallySortingScheduleInfoSliceable(resourceQuery, $filter);
                if (VizPortal.FeatureFlags.reactRemoteSchedulesGrid) {
                    _this.AngularToReactDataGridBridge.updateReactDataGridRowStore({
                        scope: $scope,
                        sliceable: $scope.sliceable,
                        keyForItem: RemoteRefreshSchedulesCtrl.keyForSchedule
                    });
                }
            });
            this.refreshRemoteRefreshSchedules();
        }
        RemoteRefreshSchedulesCtrl.keyForSchedule = function (remoteRefreshSchedule) {
            return remoteRefreshSchedule.definition + '_' + remoteRefreshSchedule.refreshType;
        };
        RemoteRefreshSchedulesCtrl.prototype.anyActionsAllowed = function () {
            return this.serverService.isSessionSiteOrServerAdmin() || this.datasource.owner.id === this.serverService.sessionUserId();
        };
        RemoteRefreshSchedulesCtrl.prototype.emptyTemplateModel = function () {
            return {
                title: 'extractTasksEmptyMessage',
                body: [{
                        statements: [
                            {
                                localizedStatementKey: 'remoteRefreshSchedulesEmptyParagraph1'
                            }
                        ]
                    }],
                help: {
                    links: [{
                            localizedValueKey: 'remoteRefreshSchedulesEmptyHelp',
                            url: this.HelpService.getDatasourceHelpUrl()
                        }]
                }
            };
        };
        RemoteRefreshSchedulesCtrl.prototype.configureForReactDataGrid = function (actions) {
            var _this = this;
            this.$scope.useReactDataGrid = true;
            var columns = VizPortalReact.RemoteRefreshScheduleGrid.columns(function (id) { return _this.$translate.instant(id); }, this.$scope, this.anyActionsAllowed(), actions, this.$filter('remoteRefreshScheduleTypeName'), this.$filter('cronExpression'));
            this.AngularToReactDataGridBridge.attachReactDataGridToScope(this.$scope, columns, this.emptyTemplateModel());
        };
        RemoteRefreshSchedulesCtrl.prototype.redirectByExtractsAndRefreshMode = function ($state, datasource) {
            // Prevent deep links for live data sources
            if (!datasource.hasExtracts) {
                $state.go('^.connectedWorkbooks'); // Go to default sibling state
            }
            // Prevent deep links to the incorrect refresh schedules page
            VizPortal.RefreshPropertyHelper.redirectByDatasourceRefreshMode($state, datasource.refreshMode);
        };
        RemoteRefreshSchedulesCtrl.prototype.createActions = function (selectedItems) {
            var _this = this;
            return [
                {
                    name: 'delete',
                    translate: 'delete_action',
                    isAvailable: function (items) { return !items.isEmpty() && _this.$scope.anyActionsAllowed(); },
                    execute: function (items, context) {
                        _this.DeleteRemoteRefreshSchedulesAction.execute(context, _this.datasource, _this.$scope.selectedItems)
                            .then(function (result) {
                            // Is this the right NotFound error code for RemoteRefreshSchedules?
                            VizPortal.ActionHelpers.deselectAllExceptErrors(_this.$scope.selectedItems, result, VizPortal.SchedulingErrorCode.SchedulingTaskNotFound);
                            _this.refreshRemoteRefreshSchedules();
                        });
                    }
                }, {
                    name: 'edit',
                    translate: 'editRemoteRefreshSchedule_action',
                    isAvailable: function (items) { return items.size() === 1 && _this.$scope.anyActionsAllowed(); },
                    execute: function (items, context) {
                        _this.EditRemoteRefreshScheduleAction.execute(context, _this.datasource, items.first(), VizPortal.RefreshPropertyHelper.getAvailableRefreshTypes(_this.datasource)).then(function (result) {
                            // Is this the right NotFound error code for RemoteRefreshSchedules?
                            VizPortal.ActionHelpers.deselectNotFound(_this.$scope.selectedItems, result, VizPortal.SchedulingErrorCode.SchedulingTaskNotFound);
                            _this.refreshRemoteRefreshSchedules();
                        });
                    }
                }
            ];
        };
        RemoteRefreshSchedulesCtrl.prototype.refreshRemoteRefreshSchedules = function () {
            this.waitForCountOfSchedules = this.$q.defer();
            this.query.refresh();
        };
        RemoteRefreshSchedulesCtrl.$inject = [
            '$q',
            '$translate',
            'AngularToReactDataGridBridge',
            '$scope',
            '$state',
            '$filter',
            'BrowserTitleService',
            'subplace',
            'ServerService',
            'QueryService',
            'SelectionService',
            'HelpService',
            'SorterFactory',
            'datasource',
            'CreateRemoteRefreshScheduleAction',
            'DeleteRemoteRefreshSchedulesAction',
            'EditRemoteRefreshScheduleAction',
            'ChangeDatasourceRemoteRefreshPropertiesAction'
        ];
        return RemoteRefreshSchedulesCtrl;
    })();
    VizPortal.RemoteRefreshSchedulesCtrl = RemoteRefreshSchedulesCtrl;
    // Injects client-side sorting into getSlice for the wrapped ResourceQuery instance
    // (Note that sorting a slice would be incorrect for other datasources that support paging)
    var LocallySortingScheduleInfoSliceable = (function () {
        function LocallySortingScheduleInfoSliceable(wrappedQuery, $filter) {
            this.wrappedQuery = wrappedQuery;
            this.localSorter = new VizPortal.LocalSorter();
            // Sort by the localized version of these fields rather than the raw values:
            this.localSorter.addTransformForValueComparison('refreshType', $filter('remoteRefreshScheduleTypeName'));
            this.localSorter.addTransformForValueComparison('definition', $filter('cronExpression'));
        }
        LocallySortingScheduleInfoSliceable.prototype.getSlice = function (start, size) {
            var _this = this;
            return this.wrappedQuery.getSlice(start, size).then(function (listResult) {
                return new VizPortal.ListResult(_this.localSorter.sortByClauses(listResult.items, _this.wrappedQuery.getOrder()));
            });
        };
        return LocallySortingScheduleInfoSliceable;
    })();
    VizPortal.Module.instance().controller('RemoteRefreshSchedulesCtrl', RemoteRefreshSchedulesCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="CreateOrEditScheduleCtrl.ts" />
/// <reference path="../ServerApi/types/ISchedule.ts" />
var VizPortal;
(function (VizPortal) {
    var CreateOrEditScheduleViewModelMapper;
    (function (CreateOrEditScheduleViewModelMapper) {
        function defaultSchedule() {
            return _.extend({
                name: '',
                scheduledAction: VizPortal.ServerApi.ScheduleActions.Extract,
                priority: 50,
                parallel: true
            }, this.defaultScheduleFrequency());
        }
        CreateOrEditScheduleViewModelMapper.defaultSchedule = defaultSchedule;
        function defaultScheduleFrequency() {
            return {
                scheduleType: VizPortal.ServerApi.ScheduleTypes.Hourly,
                hourly: {
                    startTime: 0,
                    endTime: 0,
                    recurrenceMinutes: 60
                },
                daily: {
                    startTime: 0
                },
                weekly: {
                    startTime: 0,
                    recurrenceDaysOfWeek: []
                },
                monthly: {
                    startTime: 0,
                    recurrenceDayOfMonth: VizPortal.ServerApi.ScheduleLastDayOfMonth
                }
            };
        }
        CreateOrEditScheduleViewModelMapper.defaultScheduleFrequency = defaultScheduleFrequency;
        function viewModelFromSchedule(schedule) {
            var viewModel = this.defaultSchedule();
            viewModel.id = schedule.id;
            viewModel.name = schedule.name;
            viewModel.scheduleType = schedule.scheduleType;
            viewModel.scheduledAction = schedule.scheduledAction;
            viewModel.priority = schedule.priority;
            viewModel.parallel = schedule.parallel;
            return _.extend(viewModel, this.viewModelFromScheduleFrequency({ scheduleType: schedule.scheduleType, scheduleDetails: schedule.scheduleDetails }));
        }
        CreateOrEditScheduleViewModelMapper.viewModelFromSchedule = viewModelFromSchedule;
        function viewModelFromScheduleFrequency(schedule) {
            var viewModel = this.defaultScheduleFrequency();
            viewModel.scheduleType = schedule.scheduleType;
            switch (schedule.scheduleType) {
                case VizPortal.ServerApi.ScheduleTypes.Hourly:
                    viewModel.hourly = _.clone(schedule.scheduleDetails);
                    break;
                case VizPortal.ServerApi.ScheduleTypes.Daily:
                    viewModel.daily = _.clone(schedule.scheduleDetails);
                    break;
                case VizPortal.ServerApi.ScheduleTypes.Weekly:
                    viewModel.weekly = {
                        startTime: schedule.scheduleDetails.startTime,
                        recurrenceDaysOfWeek: _.clone(schedule.scheduleDetails.recurrenceDaysOfWeek)
                    };
                    break;
                case VizPortal.ServerApi.ScheduleTypes.Monthly:
                    viewModel.monthly = _.clone(schedule.scheduleDetails);
                    break;
            }
            return viewModel;
        }
        CreateOrEditScheduleViewModelMapper.viewModelFromScheduleFrequency = viewModelFromScheduleFrequency;
        function createScheduleParamsFromViewModel(viewModel) {
            return {
                name: viewModel.name,
                priority: viewModel.priority,
                scheduleType: viewModel.scheduleType,
                parallel: viewModel.parallel,
                scheduledAction: viewModel.scheduledAction,
                scheduleDetails: scheduleDetailsFromViewModel(viewModel)
            };
        }
        CreateOrEditScheduleViewModelMapper.createScheduleParamsFromViewModel = createScheduleParamsFromViewModel;
        function updateScheduleParamsFromViewModel(viewModel) {
            return {
                id: viewModel.id,
                name: viewModel.name,
                priority: viewModel.priority,
                scheduleType: viewModel.scheduleType,
                parallel: viewModel.parallel,
                scheduleDetails: scheduleDetailsFromViewModel(viewModel)
            };
        }
        CreateOrEditScheduleViewModelMapper.updateScheduleParamsFromViewModel = updateScheduleParamsFromViewModel;
        function scheduleFrequencyFromViewModel(viewModel) {
            return {
                scheduleType: viewModel.scheduleType,
                scheduleDetails: scheduleDetailsFromViewModel(viewModel)
            };
        }
        CreateOrEditScheduleViewModelMapper.scheduleFrequencyFromViewModel = scheduleFrequencyFromViewModel;
        function scheduleDetailsFromViewModel(viewModel) {
            switch (viewModel.scheduleType) {
                case VizPortal.ServerApi.ScheduleTypes.Daily:
                    return viewModel.daily;
                case VizPortal.ServerApi.ScheduleTypes.Hourly:
                    return viewModel.hourly;
                case VizPortal.ServerApi.ScheduleTypes.Weekly:
                    return viewModel.weekly;
                case VizPortal.ServerApi.ScheduleTypes.Monthly:
                    return viewModel.monthly;
            }
            throw "Unknown scheduleType: " + viewModel.scheduleType;
        }
    })(CreateOrEditScheduleViewModelMapper = VizPortal.CreateOrEditScheduleViewModelMapper || (VizPortal.CreateOrEditScheduleViewModelMapper = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="CreateOrEditScheduleViewModelMapper.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/types/ISchedule.ts" />
var VizPortal;
(function (VizPortal) {
    var CreateOrEditScheduleCtrl = (function () {
        function CreateOrEditScheduleCtrl($scope, $translate) {
            this.$translate = $translate;
            $scope.scheduleActions = _.values(VizPortal.ServerApi.ScheduleActions);
            $scope.hourlyFrequencies = this.hourlyFrequencies();
            $scope.daysOfMonth = this.daysOfMonth();
        }
        CreateOrEditScheduleCtrl.prototype.hourlyFrequencies = function () {
            var _this = this;
            var hourlyFrequencies = [];
            _.each([15, 30], function (minutes) {
                hourlyFrequencies.push({
                    label: _this.$translate.instant('minutes', { MINUTES: minutes }),
                    value: minutes
                });
            });
            _.each([1, 2, 4, 6, 8, 12], function (hours) {
                hourlyFrequencies.push({
                    label: _this.$translate.instant('hours', { HOURS: hours }),
                    value: hours * 60
                });
            });
            return hourlyFrequencies;
        };
        CreateOrEditScheduleCtrl.prototype.daysOfMonth = function () {
            var _this = this;
            var daysOfMonth = [];
            _.each(_.range(1, 32), function (day) {
                daysOfMonth.push({
                    label: _this.$translate.instant('dayOfMonth', { DAY: day }),
                    value: '' + day
                });
            });
            daysOfMonth.push({ label: this.$translate.instant("last"), value: VizPortal.ServerApi.ScheduleLastDayOfMonth });
            return daysOfMonth;
        };
        CreateOrEditScheduleCtrl.$inject = [
            '$scope',
            '$translate'
        ];
        return CreateOrEditScheduleCtrl;
    })();
    VizPortal.CreateOrEditScheduleCtrl = CreateOrEditScheduleCtrl;
    VizPortal.Module.instance().controller('CreateOrEditScheduleCtrl', CreateOrEditScheduleCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/ISchedule.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var UpdateScheduleRequest = (function (_super) {
            __extends(UpdateScheduleRequest, _super);
            function UpdateScheduleRequest(params) {
                _super.call(this, 'updateSchedule', params);
            }
            return UpdateScheduleRequest;
        })(ServerApi.Request);
        ServerApi.UpdateScheduleRequest = UpdateScheduleRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../controllers/CreateOrEditScheduleCtrl.ts" />
/// <reference path="../helpers/ErrorCodes.ts" />
/// <reference path="../ServerApi/requests/CreateScheduleRequest.ts" />
/// <reference path="../ServerApi/requests/UpdateScheduleRequest.ts" />
/// <reference path="ContentActionNotification.ts" />
var VizPortal;
(function (VizPortal) {
    var ScheduleDialogMode;
    (function (ScheduleDialogMode) {
        ScheduleDialogMode[ScheduleDialogMode["Create"] = 0] = "Create";
        ScheduleDialogMode[ScheduleDialogMode["Edit"] = 1] = "Edit";
    })(ScheduleDialogMode || (ScheduleDialogMode = {}));
    // TODO: rename to CreateOrUpdateScheduleAction
    var CreateScheduleAction = (function () {
        function CreateScheduleAction(ConfirmActionDialog, $translate, ContentActionNotification, Schedules, ScheduleErrors) {
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.$translate = $translate;
            this.ContentActionNotification = ContentActionNotification;
            this.Schedules = Schedules;
            this.ScheduleErrors = ScheduleErrors;
        }
        CreateScheduleAction.prototype.createSchedule = function (context) {
            return this.showDialog(ScheduleDialogMode.Create, VizPortal.CreateOrEditScheduleViewModelMapper.defaultSchedule(), context);
        };
        CreateScheduleAction.prototype.editSchedule = function (schedule, context) {
            return this.showDialog(ScheduleDialogMode.Edit, VizPortal.CreateOrEditScheduleViewModelMapper.viewModelFromSchedule(schedule), context);
        };
        CreateScheduleAction.prototype.showDialog = function (mode, scheduleViewModel, context) {
            var _this = this;
            var dialogScope = context.scope.$new();
            dialogScope.scheduleViewModel = scheduleViewModel;
            var title;
            var actionName;
            var action;
            if (mode === ScheduleDialogMode.Create) {
                title = this.$translate.instant('createScheduleDialogTitle');
                actionName = this.$translate.instant('createScheduleDialog_create');
                action = function (dialogInstance) {
                    return _this.submitScheduleCreate(dialogScope.scheduleViewModel, dialogInstance);
                };
            }
            else {
                title = this.$translate.instant('editScheduleDialogTitle');
                actionName = this.$translate.instant('createScheduleDialog_save');
                var originalName = scheduleViewModel.name;
                action = function (dialogInstance) {
                    return _this.submitScheduleUpdate(dialogScope.scheduleViewModel, originalName, dialogInstance);
                };
            }
            return this.ConfirmActionDialog.open({
                scope: dialogScope,
                title: title,
                bodyTemplateUrl: "createScheduleDialog.html",
                actionName: actionName,
                action: action,
                size: VizPortal.ModalSize.fitToContent
            }).result.fin(function () { return dialogScope.$destroy(); });
        };
        CreateScheduleAction.prototype.submitScheduleCreate = function (scheduleViewModel, dialogInstance) {
            var _this = this;
            var params = VizPortal.CreateOrEditScheduleViewModelMapper.createScheduleParamsFromViewModel(scheduleViewModel);
            return this.Schedules.create(params).then(function (result) {
                if (result.errors && result.errors.length) {
                    var errorMessage = _this.ScheduleErrors.errorMessageFor(result.errors[0]);
                    dialogInstance.showErrorMessage(errorMessage);
                }
                else {
                    _this.ContentActionNotification.notifySuccess(_this.$translate.instant('createScheduleSuccess', { SCHEDULE_NAME: VizPortal.L10n.elideIfLong(params.name) }));
                }
                return result;
            });
        };
        CreateScheduleAction.prototype.submitScheduleUpdate = function (scheduleViewModel, originalScheduleName, dialogInstance) {
            var _this = this;
            var params = VizPortal.CreateOrEditScheduleViewModelMapper.updateScheduleParamsFromViewModel(scheduleViewModel);
            return this.Schedules.update(params).then(function (result) {
                if (result.errors && result.errors.length) {
                    var errorMessage = _this.ScheduleErrors.errorMessageFor(result.errors[0], originalScheduleName);
                    if (dialogInstance) {
                        dialogInstance.showErrorMessage(errorMessage);
                    }
                    else {
                        _this.ContentActionNotification.notifyFailure(errorMessage);
                    }
                }
                else {
                    _this.ContentActionNotification.notifySuccess(_this.$translate.instant('updateScheduleSuccess', { SCHEDULE_NAME: VizPortal.L10n.elideIfLong(params.name) }));
                }
                return result;
            });
        };
        CreateScheduleAction.$inject = ['ConfirmActionDialog', '$translate', 'ContentActionNotification', 'Schedules', 'ScheduleErrors'];
        return CreateScheduleAction;
    })();
    VizPortal.CreateScheduleAction = CreateScheduleAction;
    VizPortal.Module.instance().service('CreateScheduleAction', CreateScheduleAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var DeleteSchedulesAction = (function () {
        function DeleteSchedulesAction(ScheduleErrors, ActionHelpers, ConfirmActionDialog, $translate, Schedules) {
            this.ScheduleErrors = ScheduleErrors;
            this.ActionHelpers = ActionHelpers;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.$translate = $translate;
            this.Schedules = Schedules;
        }
        DeleteSchedulesAction.prototype.deleteSchedules = function (schedules, context) {
            var _this = this;
            var scheduleCount = schedules.size();
            var extractTaskCount = this.countExtractTasks(schedules);
            var subscriptionScheduleCount = this.countSubscriptionSchedules(schedules);
            var bodyText;
            if (scheduleCount === 1) {
                if (subscriptionScheduleCount > 0) {
                    bodyText = this.$translate.instant('confirmDeleteSubscriptionSchedule', {
                        SCHEDULE_NAME: VizPortal.L10n.elideIfLong(schedules.first().name)
                    });
                }
                else {
                    bodyText = this.$translate.instant('confirmDeleteExtractRefreshSchedule', {
                        SCHEDULE_NAME: VizPortal.L10n.elideIfLong(schedules.first().name),
                        EXTRACT_COUNT: extractTaskCount
                    }, VizPortal.L10n.Interpolations.Count);
                }
            }
            else {
                bodyText = this.$translate.instant('confirmDeleteSchedules', {
                    SCHEDULE_COUNT: scheduleCount,
                    EXTRACT_COUNT: extractTaskCount,
                    SUBSCRIPTION_COUNT: subscriptionScheduleCount
                }, VizPortal.L10n.Interpolations.Count);
            }
            return this.ConfirmActionDialog.open({
                scope: context.scope,
                title: this.$translate.instant('delete'),
                bodyText: bodyText,
                actionName: this.$translate.instant('confirmDeleteButton', {
                    ITEM_COUNT: schedules.size()
                }, VizPortal.L10n.Interpolations.Count),
                isDeleteAction: true,
                action: function (dialogInstance) {
                    return _this.Schedules.del(schedules.keys()).then(function (result) { return _this.notifyResult(schedules, result); });
                }
            }).result;
        };
        DeleteSchedulesAction.prototype.notifyResult = function (schedules, result) {
            var _this = this;
            this.ActionHelpers.notifyStandardError(schedules, {
                successId: 'deleteSchedulesSuccess',
                errorId: 'deleteSchedulesError'
            }, function (errorItem) { return _this.ScheduleErrors.errorDetailsFor(errorItem); })(result);
        };
        // returns the number of extract tasks in the given set of schedules
        DeleteSchedulesAction.prototype.countExtractTasks = function (schedules) {
            return _.reduce(schedules.toArray(), function (sum, s) { return sum + (s.scheduledAction === VizPortal.ServerApi.ScheduleActions.Extract ? s.taskCount : 0); }, 0);
        };
        // returns the number of subscription schedules in the given set of schedules
        DeleteSchedulesAction.prototype.countSubscriptionSchedules = function (schedules) {
            return _.reduce(schedules.toArray(), function (sum, s) { return sum + (s.scheduledAction === VizPortal.ServerApi.ScheduleActions.Subscription ? 1 : 0); }, 0);
        };
        DeleteSchedulesAction.$inject = ['ScheduleErrors', 'ActionHelpers', 'ConfirmActionDialog', '$translate', 'Schedules'];
        return DeleteSchedulesAction;
    })();
    VizPortal.DeleteSchedulesAction = DeleteSchedulesAction;
    VizPortal.Module.instance().service('DeleteSchedulesAction', DeleteSchedulesAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/ErrorCodes.ts" />
/// <reference path="ContentActionNotification.ts" />
var VizPortal;
(function (VizPortal) {
    var RenameScheduleAction = (function () {
        function RenameScheduleAction(toaster, ConfirmActionDialog, $translate, Schedules, ScheduleErrors) {
            this.toaster = toaster;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.$translate = $translate;
            this.Schedules = Schedules;
            this.ScheduleErrors = ScheduleErrors;
        }
        RenameScheduleAction.prototype.confirmRename = function (schedule, context) {
            var _this = this;
            var scope = context.scope.$new();
            scope.description = this.$translate.instant('confirmRenameSchedule', {
                SCHEDULE_NAME: VizPortal.L10n.elideIfLong(schedule.name)
            });
            scope.input = {
                text: schedule.name,
                maxLength: 255
            };
            return this.ConfirmActionDialog.open({
                title: this.$translate.instant('rename'),
                bodyTemplateUrl: 'confirmActionDialogInput.html',
                scope: scope,
                actionName: this.$translate.instant('rename'),
                action: function (dialogInstance) {
                    return _this.Schedules.rename(schedule.id, scope.input.text)
                        .then(function (result) { return _this.handleResult(schedule, scope.input.text, result, dialogInstance); });
                }
            }).result.fin(function () { return scope.$destroy(); });
        };
        RenameScheduleAction.prototype.renameInPlace = function (schedule, newName) {
            var _this = this;
            return this.Schedules.rename(schedule.id, newName)
                .then(function (result) { return _this.handleResult(schedule, newName, result); });
        };
        RenameScheduleAction.prototype.handleResult = function (schedule, newName, result, dialogInstance) {
            if (result.errors && result.errors.length) {
                var errorMessage = this.ScheduleErrors.errorMessageFor(result.errors[0], schedule.name);
                if (dialogInstance) {
                    dialogInstance.showErrorMessage(errorMessage);
                }
                else {
                    this.toaster.pop({ type: VizPortal.ToastType.Error, text: errorMessage });
                }
            }
            else {
                var successMsg = this.$translate.instant('updateScheduleNameSuccess', {
                    ITEM_NAME: VizPortal.L10n.elideIfLong(schedule.name),
                    NEW_ITEM_NAME: VizPortal.L10n.elideIfLong(newName)
                });
                this.toaster.pop({ type: VizPortal.ToastType.Info, text: successMsg });
                schedule.name = newName;
            }
            return result;
        };
        RenameScheduleAction.$inject = ['ToasterService', 'ConfirmActionDialog', '$translate', 'Schedules', 'ScheduleErrors'];
        return RenameScheduleAction;
    })();
    VizPortal.RenameScheduleAction = RenameScheduleAction;
    VizPortal.Module.instance().service('RenameScheduleAction', RenameScheduleAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="AbstractContentAction.ts" />
/// <reference path="../resources/Schedules.ts" />
var VizPortal;
(function (VizPortal) {
    var RunSchedulesAction = (function (_super) {
        __extends(RunSchedulesAction, _super);
        function RunSchedulesAction(ConfirmActionDialog, ContentActionNotification, $translate, Schedules) {
            _super.call(this, ConfirmActionDialog, ContentActionNotification);
            this.$translate = $translate;
            this.Schedules = Schedules;
        }
        RunSchedulesAction.prototype.configureDialog = function (dialogConfig, schedules) {
            var _this = this;
            dialogConfig.bodyText = this.$translate.instant('schedulesRunPrompt', {
                ITEM_COUNT: schedules.size(),
                ITEM_NAME: VizPortal.L10n.elideIfLong(schedules.first().name)
            }, VizPortal.L10n.Interpolations.Count);
            dialogConfig.title = this.$translate.instant('runNow');
            dialogConfig.actionName = this.$translate.instant('runNowConfirmButton');
            dialogConfig.action = function () { return _this.Schedules.run(schedules.keys()); };
        };
        RunSchedulesAction.prototype.notificationTranslationIds = function () {
            return {
                successId: 'schedulesRunSuccess',
                errorId: 'schedulesRunError'
            };
        };
        RunSchedulesAction.$inject = ['ConfirmActionDialog', 'ContentActionNotification', '$translate', 'Schedules'];
        return RunSchedulesAction;
    })(VizPortal.AbstractContentAction);
    VizPortal.RunSchedulesAction = RunSchedulesAction;
    VizPortal.Module.instance().service('RunSchedulesAction', RunSchedulesAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="AbstractContentAction.ts" />
/// <reference path="../resources/Schedules.ts" />
var VizPortal;
(function (VizPortal) {
    var RunServerSchedulesAction = (function (_super) {
        __extends(RunServerSchedulesAction, _super);
        function RunServerSchedulesAction(ConfirmActionDialog, ContentActionNotification, $translate, Schedules) {
            _super.call(this, ConfirmActionDialog, ContentActionNotification);
            this.$translate = $translate;
            this.Schedules = Schedules;
        }
        RunServerSchedulesAction.prototype.configureDialog = function (dialogConfig, schedules) {
            var _this = this;
            dialogConfig.bodyText = this.$translate.instant('schedulesRunPrompt', {
                ITEM_COUNT: schedules.size(),
                ITEM_NAME: VizPortal.L10n.elideIfLong(schedules.first().name)
            }, VizPortal.L10n.Interpolations.Count);
            dialogConfig.title = this.$translate.instant('runNow');
            dialogConfig.actionName = this.$translate.instant('runNowConfirmButton', {
                ITEM_COUNT: schedules.size()
            }, VizPortal.L10n.Interpolations.Count);
            dialogConfig.action = function () { return _this.Schedules.runServer(schedules.keys()); };
        };
        RunServerSchedulesAction.prototype.notificationTranslationIds = function () {
            return {
                successId: 'schedulesRunSuccess',
                errorId: 'schedulesRunError'
            };
        };
        RunServerSchedulesAction.$inject = ['ConfirmActionDialog', 'ContentActionNotification', '$translate', 'Schedules'];
        return RunServerSchedulesAction;
    })(VizPortal.AbstractContentAction);
    VizPortal.RunServerSchedulesAction = RunServerSchedulesAction;
    VizPortal.Module.instance().service('RunServerSchedulesAction', RunServerSchedulesAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    /*
     * Determines which schedule-related actions a user has permission to perform.
     */
    var SchedulePermissions = (function () {
        function SchedulePermissions(ServerService) {
            this.ServerService = ServerService;
        }
        // This covers edit, rename, delete, enable/disable
        SchedulePermissions.prototype.canEditSchedule = function () {
            return this.ServerService.isSessionServerAdmin();
        };
        SchedulePermissions.prototype.canRunSchedule = function () {
            return this.ServerService.isSessionSiteOrServerAdmin();
        };
        SchedulePermissions.$inject = ['ServerService'];
        return SchedulePermissions;
    })();
    VizPortal.SchedulePermissions = SchedulePermissions;
    VizPortal.Module.instance().service('SchedulePermissions', SchedulePermissions);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var ScheduleErrors = (function () {
        function ScheduleErrors(ServerService, SchedulesConfig, $translate) {
            this.ServerService = ServerService;
            this.SchedulesConfig = SchedulesConfig;
            this.$translate = $translate;
        }
        ScheduleErrors.prototype.errorDetailsFor = function (scheduleErrorItem) {
            return {
                itemName: scheduleErrorItem.item.name,
                itemUrl: scheduleErrorItem.error.code === VizPortal.SchedulingErrorCode.SchedulingScheduleNotFound
                    ? null
                    : this.scheduleUrl(scheduleErrorItem.item),
                errorMessage: this.errorMessageForItem(scheduleErrorItem)
            };
        };
        ScheduleErrors.prototype.scheduleUrl = function (schedule) {
            return this.ServerService.sessionSiteId()
                ? this.SchedulesConfig.siteUrlFor(schedule)
                : this.SchedulesConfig.serverUrlFor(schedule);
        };
        ScheduleErrors.prototype.errorMessageForItem = function (errorItem) {
            return this.errorMessageFor(errorItem.error, errorItem.item.name);
        };
        ScheduleErrors.prototype.errorMessageFor = function (error, scheduleName) {
            if (scheduleName === void 0) { scheduleName = ''; }
            switch (error.code) {
                case VizPortal.SchedulingErrorCode.SchedulingScheduleNotFound:
                    return this.$translate.instant('errorScheduleNotFound', { SCHEDULE_NAME: VizPortal.L10n.elideIfLong(scheduleName) });
                case VizPortal.SchedulingErrorCode.SchedulingNameAlreadyExists:
                    return this.$translate.instant('errorScheduleNameAlreadyExists');
                case VizPortal.SchedulingErrorCode.SchedulingNameTooLong:
                    return this.$translate.instant('errorScheduleNameTooLong');
                default:
                    return this.$translate.instant('errorUnknown');
            }
        };
        ScheduleErrors.$inject = ['ServerService', 'SchedulesConfig', '$translate'];
        return ScheduleErrors;
    })();
    VizPortal.ScheduleErrors = ScheduleErrors;
    VizPortal.Module.instance().service('ScheduleErrors', ScheduleErrors);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="ScheduleErrors.ts" />
var VizPortal;
(function (VizPortal) {
    var SetScheduleStatusAction = (function () {
        function SetScheduleStatusAction(ScheduleErrors, ActionHelpers, ConfirmActionDialog, $translate, Schedules) {
            this.ScheduleErrors = ScheduleErrors;
            this.ActionHelpers = ActionHelpers;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.$translate = $translate;
            this.Schedules = Schedules;
        }
        SetScheduleStatusAction.prototype.enableSchedule = function (schedule) {
            return this.enableSchedules(this.singleton(schedule));
        };
        SetScheduleStatusAction.prototype.disableSchedule = function (schedule) {
            return this.disableSchedules(this.singleton(schedule));
        };
        SetScheduleStatusAction.prototype.singleton = function (schedule) {
            return VizPortal.Set.singleton(schedule, function (s) { return s.id; });
        };
        SetScheduleStatusAction.prototype.confirmEnableSchedules = function (schedules, context) {
            var _this = this;
            return this.confirmAction(schedules, context, function () { return _this.enableSchedules(schedules); }, SetScheduleStatusAction.EnableTranslationIds);
        };
        SetScheduleStatusAction.prototype.confirmDisableSchedules = function (schedules, context) {
            var _this = this;
            return this.confirmAction(schedules, context, function () { return _this.disableSchedules(schedules); }, SetScheduleStatusAction.DisableTranslationIds);
        };
        SetScheduleStatusAction.prototype.confirmAction = function (schedules, context, action, translationIds) {
            return this.ConfirmActionDialog.open({
                scope: context.scope,
                title: this.$translate.instant(translationIds.title),
                bodyText: this.$translate.instant(translationIds.body, {
                    ITEM_COUNT: schedules.size(),
                    NAME: VizPortal.L10n.elideIfLong(schedules.first().name)
                }, VizPortal.L10n.Interpolations.Count),
                actionName: this.$translate.instant(translationIds.actionName, {
                    ITEM_COUNT: schedules.size()
                }, VizPortal.L10n.Interpolations.Count),
                action: action
            }).result;
        };
        SetScheduleStatusAction.prototype.enableSchedules = function (schedules) {
            var _this = this;
            return this.Schedules.enable(schedules.keys())
                .then(function (result) {
                return _this.notifyResult(schedules, result, SetScheduleStatusAction.EnableTranslationIds);
            });
        };
        SetScheduleStatusAction.prototype.disableSchedules = function (schedules) {
            var _this = this;
            return this.Schedules.disable(schedules.keys())
                .then(function (result) {
                return _this.notifyResult(schedules, result, SetScheduleStatusAction.DisableTranslationIds);
            });
        };
        SetScheduleStatusAction.prototype.notifyResult = function (schedules, result, translationIds) {
            var _this = this;
            this.ActionHelpers.notifyStandardError(schedules, translationIds, function (errorItem) { return _this.ScheduleErrors.errorDetailsFor(errorItem); })(result);
        };
        SetScheduleStatusAction.$inject = ['ScheduleErrors', 'ActionHelpers', 'ConfirmActionDialog', '$translate', 'Schedules'];
        SetScheduleStatusAction.EnableTranslationIds = {
            successId: 'enableSchedulesSuccess',
            errorId: 'enableSchedulesError',
            title: 'enableSchedulesDialogTitle',
            body: 'enableSchedulesDialogPrompt',
            actionName: 'enableSchedulesDialogSubmit'
        };
        SetScheduleStatusAction.DisableTranslationIds = {
            successId: 'disableSchedulesSuccess',
            errorId: 'disableSchedulesError',
            title: 'disableSchedulesDialogTitle',
            body: 'disableSchedulesDialogPrompt',
            actionName: 'disableSchedulesDialogSubmit'
        };
        return SetScheduleStatusAction;
    })();
    VizPortal.SetScheduleStatusAction = SetScheduleStatusAction;
    VizPortal.Module.instance().service('SetScheduleStatusAction', SetScheduleStatusAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../../app/IMainScope.ts" />
/// <reference path="../controllers/CreateOrEditScheduleCtrl.ts" />
/// <reference path="../controllers/CreateOrEditScheduleViewModelMapper.ts" />
/// <reference path="../helpers/ActionContext.ts" />
/// <reference path="../helpers/SubplaceCountsHelper.ts" />
/// <reference path="../resources/Schedules.ts" />
/// <reference path="../services/CreateScheduleAction.ts" />
/// <reference path="../services/DeleteSchedulesAction.ts" />
/// <reference path="../services/RenameScheduleAction.ts" />
/// <reference path="../services/RunSchedulesAction.ts" />
/// <reference path="../services/RunServerSchedulesAction.ts" />
/// <reference path="../services/SchedulePermissions.ts" />
/// <reference path="../services/SetScheduleStatusAction.ts" />
/// <reference path="../services/SorterFactory.ts" />
var VizPortal;
(function (VizPortal) {
    var ScheduleCtrl = (function () {
        function ScheduleCtrl($scope, $state, schedule, place, SchedulePermissions, CreateScheduleAction, DeleteSchedulesAction, SetScheduleStatusAction, RunServerSchedulesAction, RunSchedulesAction, RenameScheduleAction, siteId) {
            var _this = this;
            this.SchedulePermissions = SchedulePermissions;
            this.CreateScheduleAction = CreateScheduleAction;
            this.DeleteSchedulesAction = DeleteSchedulesAction;
            this.SetScheduleStatusAction = SetScheduleStatusAction;
            this.RunServerSchedulesAction = RunServerSchedulesAction;
            this.RunSchedulesAction = RunSchedulesAction;
            this.RenameScheduleAction = RenameScheduleAction;
            $scope.objectName = schedule.name;
            VizPortal.SubplaceTabsHelper.refreshWhenCurrentTabClicked($scope, $state);
            VizPortal.SubplaceCountsHelper.keepSubplaceCountsUpdated($scope, place);
            $scope.schedule = schedule;
            // Permissions
            $scope.canRunNow = function () { return SchedulePermissions.canRunSchedule(); };
            $scope.canEditSchedule = function () { return SchedulePermissions.canEditSchedule(); };
            $scope.isSubscription = schedule.scheduledAction === VizPortal.ServerApi.ScheduleActions.Subscription;
            $scope.rename = function ($event) {
                RenameScheduleAction.confirmRename(schedule, VizPortal.ActionContext.fromEvent($event))
                    .then(function () { return $state.hardReload(); });
            };
            // Edit schedule
            $scope.beginEdit = function () {
                $scope.scheduleViewModel = VizPortal.CreateOrEditScheduleViewModelMapper.viewModelFromSchedule(schedule);
                $scope.editMode = true;
            };
            $scope.cancelEdit = function () { return $scope.editMode = false; };
            $scope.save = function ($event) {
                $scope.busy = true;
                _this.CreateScheduleAction.submitScheduleUpdate($scope.scheduleViewModel, $scope.schedule.name)
                    .then(function () {
                    $scope.editMode = false;
                    $state.hardReload();
                })
                    .fin(function () { return $scope.busy = false; });
            };
            $scope.scheduleStatus = {
                enabled: !!schedule.runNextAt
            };
            $scope.$watch('scheduleStatus.enabled', function (newVal, oldVal) {
                if (newVal !== oldVal) {
                    var action = newVal
                        ? _this.SetScheduleStatusAction.enableSchedule(schedule)
                        : _this.SetScheduleStatusAction.disableSchedule(schedule);
                    action.then(function () { return $state.hardReload(); });
                }
            });
            var scheduleSet = VizPortal.Set.singleton(schedule, function (s) { return s.id; });
            $scope.del = function ($event) {
                _this.DeleteSchedulesAction.deleteSchedules(scheduleSet, VizPortal.ActionContext.fromEvent($event))
                    .then(function () { return $state.go('^.^.schedules'); });
            };
            $scope.runNow = function ($event) {
                if (!siteId) {
                    _this.RunServerSchedulesAction.execute(scheduleSet, VizPortal.ActionContext.fromEvent($event))
                        .then(function () { return $state.hardReload(); });
                }
                else {
                    _this.RunSchedulesAction.execute(scheduleSet, VizPortal.ActionContext.fromEvent($event))
                        .then(function () { return $state.hardReload(); });
                }
            };
        }
        ScheduleCtrl.$inject = [
            '$scope',
            '$state',
            'schedule',
            'place',
            'SchedulePermissions',
            'CreateScheduleAction',
            'DeleteSchedulesAction',
            'SetScheduleStatusAction',
            'RunServerSchedulesAction',
            'RunSchedulesAction',
            'RenameScheduleAction',
            'siteId'
        ];
        return ScheduleCtrl;
    })();
    VizPortal.ScheduleCtrl = ScheduleCtrl;
    VizPortal.Module.instance().controller('ScheduleCtrl', ScheduleCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="AbstractContentAction.ts" />
var VizPortal;
(function (VizPortal) {
    var ChangeExtractTaskPriorityAction = (function (_super) {
        __extends(ChangeExtractTaskPriorityAction, _super);
        function ChangeExtractTaskPriorityAction(ConfirmActionDialog, ContentActionNotification, $translate, ExtractTasks) {
            _super.call(this, ConfirmActionDialog, ContentActionNotification);
            this.$translate = $translate;
            this.ExtractTasks = ExtractTasks;
        }
        ChangeExtractTaskPriorityAction.prototype.configureDialog = function (dialogConfig, extractTasks) {
            var _this = this;
            var scope = dialogConfig.scope;
            if (extractTasks.size() === 1) {
                var task = extractTasks.first();
                if (task.workbook) {
                    scope.description = this.$translate.instant('extractTasksSetPriorityWorkbookPrompt', {
                        PARENT_NAME: VizPortal.L10n.elideIfLong(task.workbook.name)
                    });
                }
                else if (task.datasource) {
                    scope.description = this.$translate.instant('extractTasksSetPriorityDatasourcePrompt', {
                        PARENT_NAME: VizPortal.L10n.elideIfLong(task.datasource.name)
                    });
                }
            }
            else {
                scope.description = this.$translate.instant('extractTasksSetPriorityMultiplePrompt', {
                    ITEM_COUNT: extractTasks.size()
                }, VizPortal.L10n.Interpolations.Count);
            }
            scope.numberDescription = this.$translate.instant('createScheduleFormPriorityDescription');
            scope.input = {
                num: Math.min.apply(Math, _.map(extractTasks.toArray(), function (extractTasks) { return extractTasks.priority; })),
                min: VizPortal.ExtractTasks.MIN_PRIORITY,
                max: VizPortal.ExtractTasks.MAX_PRIORITY,
                isInteger: true,
                width: '75px'
            };
            dialogConfig.bodyTemplateUrl = 'confirmActionDialogInputNumber.html';
            dialogConfig.title = this.$translate.instant('tasksSetPriority');
            dialogConfig.actionName = this.$translate.instant('tasksSetPriorityConfirm', {
                ITEM_COUNT: extractTasks.size()
            }, VizPortal.L10n.Interpolations.Count);
            dialogConfig.action = function () { return _this.ExtractTasks.setPriority(extractTasks.keys(), scope.input.num); };
        };
        ChangeExtractTaskPriorityAction.prototype.notificationTranslationIds = function () {
            return {
                successId: 'extractTasksSetPrioritySuccess',
                errorId: 'extractTasksSetPriorityError'
            };
        };
        ChangeExtractTaskPriorityAction.$inject = ['ConfirmActionDialog', 'ContentActionNotification', '$translate', 'ExtractTasks'];
        return ChangeExtractTaskPriorityAction;
    })(VizPortal.AbstractContentAction);
    VizPortal.ChangeExtractTaskPriorityAction = ChangeExtractTaskPriorityAction;
    VizPortal.Module.instance().service('ChangeExtractTaskPriorityAction', ChangeExtractTaskPriorityAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/ErrorCodes.ts" />
/// <reference path="../resources/Schedules.ts" />
/// <reference path="ContentActionNotification.ts" />
var VizPortal;
(function (VizPortal) {
    var ChangeScheduleAction = (function () {
        function ChangeScheduleAction($translate, ConfirmActionDialog, SearchSuggestionsService, Subscriptions, ExtractTasks, ActionHelpers) {
            this.$translate = $translate;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.SearchSuggestionsService = SearchSuggestionsService;
            this.Subscriptions = Subscriptions;
            this.ExtractTasks = ExtractTasks;
            this.ActionHelpers = ActionHelpers;
        }
        // Generic logic
        ChangeScheduleAction.prototype.createDialogScope = function (parentScope, items, options) {
            var scope = parentScope.$new();
            scope.descriptionTranslateKey = options.descriptionTranslateKey;
            scope.descriptionTranslateValues = options.descriptionTranslateValues;
            scope.filterList = {
                model: null,
                displayField: 'name',
                suggestions: this.SearchSuggestionsService.schedulesSource(options.scheduledActionType)
            };
            return scope;
        };
        ChangeScheduleAction.prototype.execute = function (items, context, options) {
            var scope = this.createDialogScope(context.scope, items, options);
            var getSchedule = function () { return scope.filterList.model; };
            var dialogInstance = this.ConfirmActionDialog.open({
                scope: scope,
                bodyTemplateUrl: 'confirmActionDialogFilterListBox.html',
                title: this.$translate.instant('changeSchedule'),
                actionName: this.$translate.instant('changeScheduleConfirm', { COUNT: items.size() }, VizPortal.L10n.Interpolations.Count),
                action: function () { return options.action(items.keys(), getSchedule().id); },
                confirmDisabled: function () { return !getSchedule(); }
            });
            dialogInstance.result
                .then(this.ActionHelpers.notifyStandardError(items, options.notificationTranslationIds, function (errorItem) { return options.errorDetailFn(getSchedule())(errorItem); }));
            dialogInstance.result.fin(function () { return scope.$destroy(); });
            return dialogInstance.result;
        };
        ChangeScheduleAction.prototype.setScheduleErrorMessageFor = function (errorItem, schedule) {
            switch (errorItem.error.code) {
                case VizPortal.SchedulingErrorCode.SchedulingScheduleNotFound:
                    return this.$translate.instant('scheduleNotFound', { SCHEDULE: schedule.name });
            }
            return null;
        };
        // Subscription specific logic
        ChangeScheduleAction.prototype.forSubscriptions = function (subscriptions, context) {
            var _this = this;
            var descriptionTranslateKey;
            var descriptionTranslateValues;
            if (subscriptions.size() === 1) {
                var sub = subscriptions.first();
                descriptionTranslateValues = { TARGET_NAME: VizPortal.L10n.elideIfLong(sub.targetName) };
                if (sub.targetType === VizPortal.SubscriptionTargetTypes.view) {
                    descriptionTranslateKey = 'changeScheduleSubscriptionViewPrompt';
                }
                else if (sub.targetType === VizPortal.SubscriptionTargetTypes.workbook) {
                    descriptionTranslateKey = 'changeScheduleSubscriptionWorkbookPrompt';
                }
            }
            else {
                descriptionTranslateKey = 'changeScheduleSubscriptionsPrompt';
                descriptionTranslateValues = { COUNT: subscriptions.size() };
            }
            var options = {
                action: function (ids, scheduleId) { return _this.Subscriptions.setSchedule(ids, scheduleId); },
                notificationTranslationIds: {
                    successId: 'changeScheduleSubscriptionsSuccess',
                    errorId: 'changeScheduleSubscriptionsError'
                },
                errorDetailFn: function (schedule) { return _this.subscriptionErrorDetailFactory(schedule); },
                scheduledActionType: VizPortal.ServerApi.ScheduleActions.Subscription,
                descriptionTranslateKey: descriptionTranslateKey,
                descriptionTranslateValues: descriptionTranslateValues
            };
            return this.execute(subscriptions, context, options);
        };
        ChangeScheduleAction.prototype.subscriptionErrorDetailFactory = function (schedule) {
            var _this = this;
            return function (errorItem) {
                return {
                    itemName: errorItem.item.subject,
                    errorMessage: _this.subscriptionErrorMessageFor(errorItem, schedule)
                };
            };
        };
        ChangeScheduleAction.prototype.subscriptionErrorMessageFor = function (errorItem, schedule) {
            switch (errorItem.error.code) {
                case VizPortal.CommonErrorCode.SubscriptionNotFound:
                    return this.$translate.instant('subscriptionNotFound', { SUBSCRIPTION_SUBJECT: errorItem.item.subject });
            }
            return this.setScheduleErrorMessageFor(errorItem, schedule);
        };
        // Extract Tasks specific logic
        ChangeScheduleAction.prototype.forExtractTasks = function (extractTasks, context) {
            var _this = this;
            var descriptionTranslateKey;
            var descriptionTranslateValues;
            if (extractTasks.size() === 1) {
                var task = extractTasks.first();
                if (task.workbook) {
                    descriptionTranslateKey = 'changeScheduleExtractTasksWorkbookPrompt';
                    descriptionTranslateValues = { PARENT_NAME: VizPortal.L10n.elideIfLong(task.workbook.name) };
                }
                else if (task.datasource) {
                    descriptionTranslateKey = 'changeScheduleExtractTasksDatasourcePrompt';
                    descriptionTranslateValues = { PARENT_NAME: VizPortal.L10n.elideIfLong(task.datasource.name) };
                }
            }
            else {
                descriptionTranslateKey = 'changeScheduleExtractTasksPrompt';
                descriptionTranslateValues = { COUNT: extractTasks.size() };
            }
            var options = {
                action: function (ids, scheduleId) { return _this.ExtractTasks.setSchedule(ids, scheduleId); },
                notificationTranslationIds: {
                    successId: 'changeScheduleExtractTasksSuccess',
                    errorId: 'changeScheduleExtractTasksError'
                },
                errorDetailFn: function (schedule) { return _this.extractTaskErrorDetailFactory(schedule); },
                scheduledActionType: VizPortal.ServerApi.ScheduleActions.Extract,
                descriptionTranslateKey: descriptionTranslateKey,
                descriptionTranslateValues: descriptionTranslateValues
            };
            return this.execute(extractTasks, context, options);
        };
        ChangeScheduleAction.prototype.extractTaskErrorDetailFactory = function (schedule) {
            var _this = this;
            return function (errorItem) {
                var namedItem = errorItem.item.datasource || errorItem.item.workbook;
                return {
                    itemName: namedItem.name,
                    errorMessage: _this.extractTaskErrorMessageFor(errorItem, schedule)
                };
            };
        };
        ChangeScheduleAction.prototype.extractTaskErrorMessageFor = function (errorItem, schedule) {
            switch (errorItem.error.code) {
                case VizPortal.SchedulingErrorCode.SchedulingTaskNotFound:
                    if (errorItem.item.workbook)
                        return this.$translate.instant('extractTaskNotFoundForWorkbook', { WORKBOOK_NAME: VizPortal.L10n.elideIfLong(errorItem.item.workbook.name) });
                    if (errorItem.item.datasource)
                        return this.$translate.instant('extractTaskNotFoundForDatasource', { DATASOURCE_NAME: VizPortal.L10n.elideIfLong(errorItem.item.datasource.name) });
            }
            return this.setScheduleErrorMessageFor(errorItem, schedule);
        };
        ChangeScheduleAction.$inject = [
            '$translate',
            'ConfirmActionDialog',
            'SearchSuggestionsService',
            'Subscriptions',
            'ExtractTasks',
            'ActionHelpers'
        ];
        return ChangeScheduleAction;
    })();
    VizPortal.ChangeScheduleAction = ChangeScheduleAction;
    VizPortal.Module.instance().service('ChangeScheduleAction', ChangeScheduleAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var DeleteExtractTasksAction = (function () {
        function DeleteExtractTasksAction(ConfirmActionDialog, ActionHelpers, ContentUrl, $translate, ExtractTasks) {
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.ActionHelpers = ActionHelpers;
            this.ContentUrl = ContentUrl;
            this.$translate = $translate;
            this.ExtractTasks = ExtractTasks;
        }
        DeleteExtractTasksAction.prototype.executeWithContext = function (extractTasks, context) {
            var _this = this;
            var description;
            if (extractTasks.size() === 1) {
                var task = extractTasks.first();
                if (task.workbook) {
                    description = this.$translate.instant('confirmDeleteExtractWorkbook', { PARENT_NAME: VizPortal.L10n.elideIfLong(task.workbook.name) });
                }
                else if (task.datasource) {
                    description = this.$translate.instant('confirmDeleteExtractDatasources', { PARENT_NAME: VizPortal.L10n.elideIfLong(task.datasource.name) });
                }
            }
            else {
                description = this.$translate.instant('confirmDeleteExtracts', {
                    ITEM_COUNT: extractTasks.size()
                }, VizPortal.L10n.Interpolations.Count);
            }
            return this.ConfirmActionDialog.open({
                scope: context.scope,
                title: this.$translate.instant('delete'),
                bodyText: description,
                actionName: this.$translate.instant('confirmDeleteButton', { ITEM_COUNT: extractTasks.size() }, VizPortal.L10n.Interpolations.Count),
                isDeleteAction: true,
                action: function (dialogInstance) {
                    return _this.ExtractTasks.del(extractTasks.keys())
                        .then(_this.ActionHelpers.notifyStandardError(extractTasks, {
                        successId: 'deleteExtractTasksSuccess',
                        errorId: 'deleteExtractTasksError'
                    }, function (errorItem) {
                        var namedItem = errorItem.item.workbook || errorItem.item.datasource;
                        return {
                            itemName: namedItem.name,
                            itemUrl: _this.urlFor(errorItem),
                            errorMessage: _this.errorMessageFor(errorItem)
                        };
                    }));
                }
            }).result;
        };
        DeleteExtractTasksAction.prototype.urlFor = function (errorItem) {
            var href;
            if (errorItem.item.workbook) {
                href = this.ContentUrl.forItem(errorItem.item.workbook, VizPortal.WorkbookContentType);
            }
            if (errorItem.item.datasource) {
                href = this.ContentUrl.forItem(errorItem.item.datasource, VizPortal.DatasourceContentType);
            }
            return href;
        };
        DeleteExtractTasksAction.prototype.errorMessageFor = function (errorItem) {
            switch (errorItem.error.code) {
                case VizPortal.SchedulingErrorCode.SchedulingTaskNotFound:
                    if (errorItem.item.workbook)
                        return this.$translate.instant('errorExtractTaskForWorkbookNotFound', {
                            WORKBOOK_NAME: VizPortal.L10n.elideIfLong(errorItem.item.workbook.name),
                            SCHEDULE_NAME: VizPortal.L10n.elideIfLong(errorItem.item.schedule.name)
                        });
                    if (errorItem.item.datasource)
                        return this.$translate.instant('errorExtractTaskForDatasourceNotFound', {
                            DATASOURCE_NAME: VizPortal.L10n.elideIfLong(errorItem.item.datasource.name),
                            SCHEDULE_NAME: VizPortal.L10n.elideIfLong(errorItem.item.schedule.name)
                        });
            }
        };
        DeleteExtractTasksAction.$inject = ['ConfirmActionDialog', 'ActionHelpers', 'ContentUrl', '$translate', 'ExtractTasks'];
        return DeleteExtractTasksAction;
    })();
    VizPortal.DeleteExtractTasksAction = DeleteExtractTasksAction;
    VizPortal.Module.instance().service('DeleteExtractTasksAction', DeleteExtractTasksAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var DeleteExtractTasksRequest = (function (_super) {
            __extends(DeleteExtractTasksRequest, _super);
            function DeleteExtractTasksRequest(ids) {
                _super.call(this, 'deleteExtractTasks', { ids: ids });
            }
            return DeleteExtractTasksRequest;
        })(ServerApi.Request);
        ServerApi.DeleteExtractTasksRequest = DeleteExtractTasksRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../types/IGetItemsParams.ts" />
/// <reference path="../types/IGetItemsResult.ts" />
/// <reference path="../types/IDataSource.ts" />
/// <reference path="../types/IExtractTask.ts" />
/// <reference path="../types/ISchedule.ts" />
/// <reference path="../types/ISite.ts" />
/// <reference path="../types/IWorkbook.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetExtractTasksRequest = (function (_super) {
            __extends(GetExtractTasksRequest, _super);
            function GetExtractTasksRequest(params) {
                _super.call(this, 'getExtractTasks', params);
            }
            return GetExtractTasksRequest;
        })(ServerApi.Request);
        ServerApi.GetExtractTasksRequest = GetExtractTasksRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var RunExtractTasksRequest = (function (_super) {
            __extends(RunExtractTasksRequest, _super);
            function RunExtractTasksRequest(ids) {
                _super.call(this, 'runExtractTasks', {
                    ids: ids
                });
            }
            return RunExtractTasksRequest;
        })(ServerApi.Request);
        ServerApi.RunExtractTasksRequest = RunExtractTasksRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
/// <reference path="../types/IResponse.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var SetExtractTasksPriorityRequest = (function (_super) {
            __extends(SetExtractTasksPriorityRequest, _super);
            function SetExtractTasksPriorityRequest(ids, priority) {
                _super.call(this, 'setExtractTasksPriority', {
                    ids: ids,
                    priority: priority
                });
            }
            return SetExtractTasksPriorityRequest;
        })(ServerApi.Request);
        ServerApi.SetExtractTasksPriorityRequest = SetExtractTasksPriorityRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var SetExtractTasksScheduleRequest = (function (_super) {
            __extends(SetExtractTasksScheduleRequest, _super);
            function SetExtractTasksScheduleRequest(ids, scheduleId) {
                _super.call(this, 'setExtractTasksSchedule', {
                    ids: ids,
                    scheduleId: scheduleId
                });
            }
            return SetExtractTasksScheduleRequest;
        })(ServerApi.Request);
        ServerApi.SetExtractTasksScheduleRequest = SetExtractTasksScheduleRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/RequestHelper.ts" />
/// <reference path="../helpers/ResultHelper.ts" />
/// <reference path="../helpers/ServerModelHelper.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/DeleteExtractTasksRequest.ts" />
/// <reference path="../ServerApi/requests/GetExtractTasksRequest.ts" />
/// <reference path="../ServerApi/requests/RunExtractTasksRequest.ts" />
/// <reference path="../ServerApi/requests/SetExtractTasksPriorityRequest.ts" />
/// <reference path="../ServerApi/requests/SetExtractTasksScheduleRequest.ts" />
/// <reference path="../ServerApi/types/IExtractTask.ts" />
/// <reference path="../services/ErrorNotifyingServer.ts" />
/// <reference path="Resource.ts" />
var VizPortal;
(function (VizPortal) {
    var ExtractTasks = (function (_super) {
        __extends(ExtractTasks, _super);
        function ExtractTasks(ErrorNotifyingServer, FetcherFactory) {
            _super.call(this, FetcherFactory.getServerResourceFetcher(VizPortal.ServerApi.GetExtractTasksRequest, VizPortal.ServerApiMapper.extractTasks));
            this.ErrorNotifyingServer = ErrorNotifyingServer;
        }
        ExtractTasks.prototype.del = function (ids) {
            return this.ErrorNotifyingServer.sendRequests(VizPortal.RequestHelper.buildRequests(ids, function (idsBlock) { return new VizPortal.ServerApi.DeleteExtractTasksRequest(idsBlock); }), VizPortal.ResultHelper.combineResults);
        };
        ExtractTasks.prototype.run = function (ids) {
            return this.ErrorNotifyingServer.sendRequests(VizPortal.RequestHelper.buildRequests(ids, function (idsBlock) { return new VizPortal.ServerApi.RunExtractTasksRequest(idsBlock); }), VizPortal.ResultHelper.combineResults);
        };
        ExtractTasks.prototype.setPriority = function (ids, priority) {
            return this.ErrorNotifyingServer.sendRequests(VizPortal.RequestHelper.buildRequests(ids, function (idsBlock) { return new VizPortal.ServerApi.SetExtractTasksPriorityRequest(idsBlock, priority); }), VizPortal.ResultHelper.combineResults);
        };
        ExtractTasks.prototype.setSchedule = function (ids, scheduleId) {
            return this.ErrorNotifyingServer.sendRequests(VizPortal.RequestHelper.buildRequests(ids, function (idsBlock) { return new VizPortal.ServerApi.SetExtractTasksScheduleRequest(idsBlock, scheduleId); }), VizPortal.ResultHelper.combineResults);
        };
        ExtractTasks.MAX_PRIORITY = 100;
        ExtractTasks.MIN_PRIORITY = 1;
        ExtractTasks.$inject = ['ErrorNotifyingServer', 'FetcherFactory'];
        return ExtractTasks;
    })(VizPortal.Resource);
    VizPortal.ExtractTasks = ExtractTasks;
    VizPortal.Module.instance().service('ExtractTasks', ExtractTasks);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="AbstractContentAction.ts" />
/// <reference path="../resources/ExtractTasks.ts" />
var VizPortal;
(function (VizPortal) {
    var RunExtractTasksAction = (function (_super) {
        __extends(RunExtractTasksAction, _super);
        function RunExtractTasksAction(ConfirmActionDialog, ContentActionNotification, $translate, ExtractTasks) {
            _super.call(this, ConfirmActionDialog, ContentActionNotification);
            this.$translate = $translate;
            this.ExtractTasks = ExtractTasks;
        }
        RunExtractTasksAction.prototype.configureDialog = function (dialogConfig, extractTasks) {
            var _this = this;
            var extractTaskCount = extractTasks.size();
            if (extractTaskCount === 1) {
                var extractTask = extractTasks.first();
                if (extractTask.datasource) {
                    dialogConfig.bodyText = this.$translate.instant('extractTaskForDataSourceRunPrompt', {
                        DATASOURCE_NAME: VizPortal.L10n.elideIfLong(extractTask.datasource.name)
                    });
                }
                else if (extractTask.workbook) {
                    dialogConfig.bodyText = this.$translate.instant('extractTaskForWorkbookRunPrompt', {
                        WORKBOOK_NAME: VizPortal.L10n.elideIfLong(extractTask.workbook.name)
                    });
                }
                else {
                    dialogConfig.bodyText = this.$translate.instant('extractTasksRunPrompt', {
                        ITEM_COUNT: extractTaskCount
                    }, VizPortal.L10n.Interpolations.Count);
                }
            }
            else {
                dialogConfig.bodyText = this.$translate.instant('extractTasksRunPrompt', {
                    ITEM_COUNT: extractTaskCount
                }, VizPortal.L10n.Interpolations.Count);
            }
            dialogConfig.title = this.$translate.instant('runNow');
            dialogConfig.actionName = this.$translate.instant('runNowConfirmButton', {
                ITEM_COUNT: extractTaskCount
            }, VizPortal.L10n.Interpolations.Count);
            dialogConfig.action = function () { return _this.ExtractTasks.run(extractTasks.keys()); };
        };
        RunExtractTasksAction.prototype.notificationTranslationIds = function () {
            return {
                successId: 'extractTasksRunSuccess',
                errorId: 'extractTasksRunError'
            };
        };
        RunExtractTasksAction.$inject = ['ConfirmActionDialog', 'ContentActionNotification', '$translate', 'ExtractTasks'];
        return RunExtractTasksAction;
    })(VizPortal.AbstractContentAction);
    VizPortal.RunExtractTasksAction = RunExtractTasksAction;
    VizPortal.Module.instance().service('RunExtractTasksAction', RunExtractTasksAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var DeleteSubscriptionsRequest = (function (_super) {
            __extends(DeleteSubscriptionsRequest, _super);
            function DeleteSubscriptionsRequest(ids) {
                _super.call(this, 'deleteSubscriptions', { ids: ids });
            }
            return DeleteSubscriptionsRequest;
        })(ServerApi.Request);
        ServerApi.DeleteSubscriptionsRequest = DeleteSubscriptionsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="resourceParts.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="../types/IGetItemsParams.ts" />
/// <reference path="../types/IGetItemsResult.ts" />
/// <reference path="../types/IDataSource.ts" />
/// <reference path="../types/ISubscription.ts" />
/// <reference path="../types/ISchedule.ts" />
/// <reference path="../types/ISite.ts" />
/// <reference path="../types/IWorkbook.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetSubscriptionsRequest = (function (_super) {
            __extends(GetSubscriptionsRequest, _super);
            function GetSubscriptionsRequest(params) {
                _super.call(this, 'getSubscriptions', params);
            }
            return GetSubscriptionsRequest;
        })(ServerApi.Request);
        ServerApi.GetSubscriptionsRequest = GetSubscriptionsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var SetSubscriptionsScheduleRequest = (function (_super) {
            __extends(SetSubscriptionsScheduleRequest, _super);
            function SetSubscriptionsScheduleRequest(ids, scheduleId) {
                _super.call(this, 'setSubscriptionsSchedule', {
                    ids: ids,
                    scheduleId: scheduleId
                });
            }
            return SetSubscriptionsScheduleRequest;
        })(ServerApi.Request);
        ServerApi.SetSubscriptionsScheduleRequest = SetSubscriptionsScheduleRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
/// <reference path="../types/IResponse.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var SetSubscriptionSubjectRequest = (function (_super) {
            __extends(SetSubscriptionSubjectRequest, _super);
            function SetSubscriptionSubjectRequest(id, subject) {
                _super.call(this, 'setSubscriptionSubject', {
                    id: id,
                    subject: subject
                });
            }
            return SetSubscriptionSubjectRequest;
        })(ServerApi.Request);
        ServerApi.SetSubscriptionSubjectRequest = SetSubscriptionSubjectRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/RequestHelper.ts" />
/// <reference path="../helpers/ResultHelper.ts" />
/// <reference path="../helpers/ServerModelHelper.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/DeleteSubscriptionsRequest.ts" />
/// <reference path="../ServerApi/requests/GetSubscriptionsRequest.ts" />
/// <reference path="../ServerApi/requests/SetSubscriptionsScheduleRequest.ts" />
/// <reference path="../ServerApi/requests/SetSubscriptionSubjectRequest.ts" />
/// <reference path="../ServerApi/types/ISubscription.ts" />
/// <reference path="../services/ErrorNotifyingServer.ts" />
/// <reference path="Resource.ts" />
var VizPortal;
(function (VizPortal) {
    var Subscriptions = (function (_super) {
        __extends(Subscriptions, _super);
        function Subscriptions(ErrorNotifyingServer, FetcherFactory) {
            _super.call(this, FetcherFactory.getServerResourceFetcher(VizPortal.ServerApi.GetSubscriptionsRequest, VizPortal.ServerApiMapper.subscriptions));
            this.ErrorNotifyingServer = ErrorNotifyingServer;
        }
        Subscriptions.prototype.del = function (ids) {
            return this.ErrorNotifyingServer.sendRequests(VizPortal.RequestHelper.buildRequests(ids, function (idsBlock) { return new VizPortal.ServerApi.DeleteSubscriptionsRequest(idsBlock); }), VizPortal.ResultHelper.combineResults);
        };
        Subscriptions.prototype.setSchedule = function (ids, scheduleId) {
            return this.ErrorNotifyingServer.sendRequests(VizPortal.RequestHelper.buildRequests(ids, function (idsBlock) { return new VizPortal.ServerApi.SetSubscriptionsScheduleRequest(idsBlock, scheduleId); }), VizPortal.ResultHelper.combineResults);
        };
        Subscriptions.prototype.changeSubject = function (id, subject) {
            return this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.SetSubscriptionSubjectRequest(id, subject));
        };
        Subscriptions.$inject = ['ErrorNotifyingServer', 'FetcherFactory'];
        return Subscriptions;
    })(VizPortal.Resource);
    VizPortal.Subscriptions = Subscriptions;
    VizPortal.Module.instance().service('Subscriptions', Subscriptions);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/Order.ts" />
/// <reference path="../models/ContentFilters.ts" />
/// <reference path="../models/ContentTypes.ts" />
/// <reference path="../models/IPlace.ts" />
/// <reference path="../resources/ExtractTasks.ts" />
/// <reference path="../resources/Subscriptions.ts" />
/// <reference path="../ServerApi/types/IOrderClause.ts" />
var VizPortal;
(function (VizPortal) {
    // TODO: This should be named "TasksPlace".
    var TaskPlace = (function () {
        function TaskPlace($location, ExtractTasks, Subscriptions) {
            var _this = this;
            this.$location = $location;
            this.ExtractTasks = ExtractTasks;
            this.Subscriptions = Subscriptions;
            this.urlParamsFn = function () { return _this.$location.search(); };
        }
        TaskPlace.prototype.create = function (siteId, implicitFilters) {
            if (implicitFilters === void 0) { implicitFilters = {}; }
            var place = new VizPortal.Place();
            var excludeFilterKeys = _.union(TaskPlace.ExcludeFilterKeys, _.keys(implicitFilters));
            place.addSubplace(VizPortal.Subplace.create('extractTasks', VizPortal.ExtractTaskContentType, this.ExtractTasks, this.urlParamsFn, _.extend({}, implicitFilters, { siteId: siteId }), excludeFilterKeys));
            place.addSubplace(VizPortal.Subplace.create('subscriptions', VizPortal.SubscriptionContentType, this.Subscriptions, this.urlParamsFn, _.extend({}, implicitFilters, { siteId: siteId }), excludeFilterKeys));
            return place;
        };
        TaskPlace.ExcludeFilterKeys = [
            VizPortal.ContentFiltersKeys.siteId
        ];
        TaskPlace.$inject = [
            '$location',
            'ExtractTasks',
            'Subscriptions'
        ];
        return TaskPlace;
    })();
    VizPortal.TaskPlace = TaskPlace;
    VizPortal.Module.instance().service('TaskPlace', TaskPlace);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../../app/IMainScope.ts" />
/// <reference path="../helpers/SubplaceCountsHelper.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../models/IPlace.ts" />
/// <reference path="../models/TaskPlace.ts" />
var VizPortal;
(function (VizPortal) {
    var TasksCtrl = (function () {
        function TasksCtrl($scope, $state, place) {
            VizPortal.SubplaceTabsHelper.refreshWhenCurrentTabClicked($scope, $state);
            VizPortal.SubplaceCountsHelper.keepSubplaceCountsUpdated($scope, place);
        }
        TasksCtrl.$inject = [
            '$scope',
            '$state',
            'place'
        ];
        return TasksCtrl;
    })();
    VizPortal.TasksCtrl = TasksCtrl;
    VizPortal.Module.instance().controller('TasksCtrl', TasksCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../../app/content/ExtractTasksGrid.ts" />
/// <reference path="../controllers/ContentPlaceCtrl.ts" />
/// <reference path="../controllers/RemoteRefreshSchedulesCtrl.ts" />
/// <reference path="../controllers/ScheduleCtrl.ts" />
/// <reference path="../helpers/ActionButtonsHelper.ts" />
/// <reference path="../helpers/RefreshPropertyHelper.ts" />
/// <reference path="../helpers/SubplaceCountsHelper.ts" />
/// <reference path="../models/ContentTypes.ts" />
/// <reference path="../models/IEmptyTemplate.ts" />
/// <reference path="../models/ITemplate.ts" />
/// <reference path="../resources/Schedules.ts" />
/// <reference path="../services/BrowserTitleService.ts" />
/// <reference path="../services/ChangeDatasourceRemoteRefreshPropertiesAction.ts" />
/// <reference path="../services/ChangeExtractTaskPriorityAction.ts" />
/// <reference path="../services/ChangeScheduleAction.ts" />
/// <reference path="../services/DeleteExtractTasksAction.ts" />
/// <reference path="../services/HelpService.ts" />
/// <reference path="../services/QueryService.ts" />
/// <reference path="../services/RunExtractTasksAction.ts" />
/// <reference path="../services/SelectionService.ts" />
/// <reference path="../services/SorterFactory.ts" />
/// <reference path="TasksCtrl.ts" />
var VizPortal;
(function (VizPortal) {
    var ExtractTasksCtrl = (function () {
        function ExtractTasksCtrl($q, $translate, AngularToReactDataGridBridge, $filter, $scope, $state, BrowserTitleService, subplace, extractTasksContext, queryService, selectionService, sorterFactory, DeleteExtractTasksAction, RunExtractTasksAction, ChangeExtractTaskPriorityAction, ChangeScheduleAction, ChangeDatasourceRemoteRefreshPropertiesAction, ServerService, HelpService) {
            var _this = this;
            this.$q = $q;
            this.$translate = $translate;
            this.AngularToReactDataGridBridge = AngularToReactDataGridBridge;
            this.$filter = $filter;
            this.$scope = $scope;
            this.$state = $state;
            this.extractTasksContext = extractTasksContext;
            this.DeleteExtractTasksAction = DeleteExtractTasksAction;
            this.RunExtractTasksAction = RunExtractTasksAction;
            this.ChangeExtractTaskPriorityAction = ChangeExtractTaskPriorityAction;
            this.ChangeScheduleAction = ChangeScheduleAction;
            this.ServerService = ServerService;
            this.HelpService = HelpService;
            BrowserTitleService.setTitle($scope.objectName ? 'refreshSchedule' : 'extractTasks', $scope.objectName);
            // If a deep link was used to this sub-place after the refresh mode was changed, redirect to the correct one.
            this.redirectByExtractsAndRefreshMode($state, extractTasksContext.datasource);
            this.waitForCountOfSchedules = $q.defer();
            $scope.selectedItems = new VizPortal.Set(function (extractTask) { return extractTask.id; });
            var actions = this.createActions($scope.selectedItems);
            $scope.useReactDataGrid = VizPortal.FeatureFlags.reactExtractTasksGrid;
            if (VizPortal.FeatureFlags.reactExtractTasksGrid) {
                this.configureForReactDataGrid(actions);
            }
            $scope.rowClicked = function (row, colIndex) {
                if ($scope.anyActionsAllowed()) {
                    selectionService.rowClicked($scope.selectedItems, row, colIndex);
                }
            };
            $scope.sorter = sorterFactory.create(VizPortal.ExtractTaskContentType.defaultOrder);
            this.query = queryService.createQueryUpdaterFromSubplace($scope, subplace, function (resourceQuery) {
                if (VizPortal.FeatureFlags.reactExtractTasksGrid) {
                    _this.AngularToReactDataGridBridge.updateReactDataGridRowStore({ scope: $scope, sliceable: resourceQuery });
                }
                $scope.sliceable = resourceQuery;
                $scope.sorter.setOrder(resourceQuery.getOrder());
            });
            this.refreshExtractTasks();
            $scope.$on(VizPortal.SubplaceEvents.Refresh, function () {
                _this.refreshExtractTasks();
            });
            $scope.availableAction = function (action) { return action.isAvailable($scope.selectedItems); };
            VizPortal.ActionButtonsHelper.setupActionButtons($scope, actions);
            $scope.listActions = [{
                    name: 'new-refresh-task',
                    translate: 'newExtractRefresh',
                    isAvailable: function () { return (!!_this.extractTasksContext.createExtractTaskFn && _this.extractTasksContext.modifyExtractTasksPermission); },
                    execute: function ($event) {
                        // If refresh properties can be modified the expectation is that creating a schedule when none exist will first
                        // show the refresh properties.
                        if ($scope.refreshPropertiesAreEditable()) {
                            // Refresh properties are enabled, wait for the current count.
                            _this.waitForCountOfSchedules.promise.then(function (countOfSchedules) {
                                if (countOfSchedules === 0) {
                                    // No schedules exist, show refresh properties before showing the create action.
                                    ChangeDatasourceRemoteRefreshPropertiesAction.execute($event, extractTasksContext.datasource, true, countOfSchedules);
                                }
                                else {
                                    // Schedules exist, open the create action directly.
                                    _this.extractTasksContext.createExtractTaskFn(VizPortal.ActionContext.fromEvent($event)).then(function () { return _this.refreshExtractTasks(); });
                                }
                            });
                        }
                        else {
                            // Refresh property feature isn't enabled, immediately open the create action.
                            _this.extractTasksContext.createExtractTaskFn(VizPortal.ActionContext.fromEvent($event)).then(function () { return _this.refreshExtractTasks(); });
                        }
                    }
                }];
            $scope.availableListAction = function (listAction) { return listAction.isAvailable(); };
            $scope.anyActionsAllowed = function () { return _this.anyActionsAllowed(); };
            $scope.headerClicked = function (header) { return $scope.sorter.setPrimary(header.attrs['key'], header.attrs['direction']); };
            $scope.extractTypeTranslationKey = function (extractTask) {
                switch (extractTask.type) {
                    case VizPortal.ServerApi.ExtractTaskType.IncrementExtract: return 'extractTasksIncremental';
                    case VizPortal.ServerApi.ExtractTaskType.RefreshExtract: return 'extractTasksFull';
                    default: return null;
                }
            };
            $scope.sliceChanged = function (newSlice) {
                _this.waitForCountOfSchedules.resolve(newSlice.total);
                $scope.selectedItems.updateItems(newSlice.items);
                VizPortal.SubplaceCountsHelper.updateCountsFromSubplace($scope, subplace, newSlice.total);
            };
            $scope.emptyTemplateModel = this.createEmptyTemplateModel(extractTasksContext);
            $scope.showRefreshProperties = function () {
                return ServerService.featureFlags().dataSyncEnabled && extractTasksContext.datasource !== undefined;
            };
            $scope.currentRefreshLocation = function () { return VizPortal.RefreshPropertyHelper.getCurrentRefreshLocation(_this.$translate, extractTasksContext.datasource); };
            $scope.refreshPropertiesAreEditable = function () {
                return $scope.showRefreshProperties() &&
                    extractTasksContext.modifyExtractTasksPermission &&
                    VizPortal.RefreshPropertyHelper.canBeRefreshedRemotely(extractTasksContext.datasource);
            };
            $scope.changeRemoteRefreshProperties = function ($event) {
                _this.waitForCountOfSchedules.promise.then(function (countOfSchedules) {
                    ChangeDatasourceRemoteRefreshPropertiesAction.execute($event, extractTasksContext.datasource, false, countOfSchedules);
                });
            };
        }
        ExtractTasksCtrl.prototype.anyActionsAllowed = function () {
            return this.extractTasksContext.modifyExtractTasksPermission;
        };
        ExtractTasksCtrl.prototype.isServerPage = function () {
            return this.$state.includes("main.server.**");
        };
        ExtractTasksCtrl.prototype.showWorkbookOrDatasourceColumn = function () {
            var place = this.$scope.place;
            return !(place === 'workbook' || place === 'datasource');
        };
        ExtractTasksCtrl.prototype.showScheduleColumn = function () {
            return !this.$state.includes("**.schedule.**");
        };
        ExtractTasksCtrl.prototype.showSiteColumn = function () {
            return this.isServerPage();
        };
        ExtractTasksCtrl.prototype.redirectByExtractsAndRefreshMode = function ($state, datasource) {
            if (datasource) {
                // Prevent deep links for live data sources.
                if (!datasource.hasExtracts) {
                    $state.go('^.connectedWorkbooks'); // Go to default sibling state
                }
                // Prevent deep links to the incorrect refresh schedules page
                VizPortal.RefreshPropertyHelper.redirectByDatasourceRefreshMode($state, datasource.refreshMode);
            }
        };
        ExtractTasksCtrl.prototype.createActions = function (selectedItems) {
            var _this = this;
            return [
                {
                    name: 'tasks-run-now',
                    translate: 'runNow_action',
                    isAvailable: function (extractTasks) {
                        return !extractTasks.isEmpty() && _this.extractTasksContext.modifyExtractTasksPermission;
                    },
                    execute: function (items, context) {
                        _this.RunExtractTasksAction.execute(items, context)
                            .then(function (result) {
                            VizPortal.ActionHelpers.deselectNotFound(selectedItems, result, VizPortal.SchedulingErrorCode.SchedulingTaskNotFound);
                            _this.refreshExtractTasks();
                        });
                    }
                },
                {
                    name: 'tasks-change-schedule',
                    translate: 'changeSchedule_action',
                    isAvailable: function (extractTasks) {
                        return !extractTasks.isEmpty() && _this.extractTasksContext.modifyExtractTasksPermission;
                    },
                    execute: function (items, context) {
                        _this.ChangeScheduleAction.forExtractTasks(items, context)
                            .then(function (result) {
                            var scheduleScope = _this.$scope;
                            if (scheduleScope.schedule) {
                                VizPortal.ActionHelpers.deselectAllExceptErrors(selectedItems, result, VizPortal.SchedulingErrorCode.SchedulingTaskNotFound);
                            }
                            else {
                                VizPortal.ActionHelpers.deselectNotFound(selectedItems, result, VizPortal.SchedulingErrorCode.SchedulingTaskNotFound);
                            }
                            _this.refreshExtractTasks();
                        });
                    }
                },
                {
                    name: 'tasks-priority',
                    translate: 'tasksSetPriority_action',
                    isAvailable: function (extractTasks) {
                        return !extractTasks.isEmpty() && _this.ServerService.isSessionSiteOrServerAdmin();
                    },
                    execute: function (items, context) {
                        _this.ChangeExtractTaskPriorityAction.execute(items, context)
                            .then(function (result) {
                            VizPortal.ActionHelpers.deselectNotFound(selectedItems, result, VizPortal.SchedulingErrorCode.SchedulingTaskNotFound);
                            _this.refreshExtractTasks();
                        });
                    }
                },
                {
                    name: 'tasks-delete',
                    translate: 'delete_action',
                    isAvailable: function (extractTasks) {
                        return !extractTasks.isEmpty() && _this.extractTasksContext.modifyExtractTasksPermission;
                    },
                    execute: function (items, context) {
                        _this.DeleteExtractTasksAction.executeWithContext(items, context)
                            .then(function (result) {
                            VizPortal.ActionHelpers.deselectAllExceptErrors(selectedItems, result, VizPortal.SchedulingErrorCode.SchedulingTaskNotFound);
                            _this.refreshExtractTasks();
                        });
                    }
                }
            ];
        };
        ExtractTasksCtrl.prototype.refreshExtractTasks = function () {
            this.waitForCountOfSchedules = this.$q.defer();
            this.query.refresh();
        };
        ExtractTasksCtrl.prototype.createEmptyTemplateModel = function (extractTasksContext) {
            var emptyTemplateModel = {};
            emptyTemplateModel.title = 'extractTasksEmptyMessage';
            // The extract tasks grid is used in multiple locations, only show this information for data sources.
            // Only data sources have a refresh mode, check that it exists.
            if (this.ServerService.featureFlags().dataSyncEnabled && extractTasksContext.datasource) {
                emptyTemplateModel.help = {
                    links: [{
                            localizedValueKey: 'remoteRefreshSchedulesEmptyHelp',
                            url: this.HelpService.getDatasourceHelpUrl()
                        }]
                };
                // Don't display the help information for OAuth connections because they can only be refreshed on server
                if (extractTasksContext.datasource && !extractTasksContext.datasource.connectionOAuth) {
                    emptyTemplateModel.body = [{
                            statements: [
                                {
                                    localizedStatementKey: 'remoteRefreshSchedulesEmptyParagraph1'
                                }
                            ]
                        }];
                }
            }
            return emptyTemplateModel;
        };
        ExtractTasksCtrl.prototype.configureForReactDataGrid = function (actions) {
            var _this = this;
            var siteUrls = new VizPortalReact.SiteUrls({
                siteUrlName: this.ServerService.sessionSiteUrlName(),
                queryString: window.location.search
            });
            var columns = VizPortalReact.ExtractTasksGrid.columns(function (id) { return _this.$translate.instant(id); }, this.$scope, this.anyActionsAllowed(), actions, this.isServerPage(), new VizPortalReact.ServerUrls(window.location.search), siteUrls, this.$filter('scheduleFrequencyDescription'), this.showWorkbookOrDatasourceColumn(), this.showScheduleColumn(), this.showSiteColumn());
            this.AngularToReactDataGridBridge.attachReactDataGridToScope(this.$scope, columns, this.createEmptyTemplateModel(this.extractTasksContext));
        };
        ExtractTasksCtrl.$inject = [
            '$q',
            '$translate',
            'AngularToReactDataGridBridge',
            '$filter',
            '$scope',
            '$state',
            'BrowserTitleService',
            'subplace',
            'extractTasksContext',
            'QueryService',
            'SelectionService',
            'SorterFactory',
            'DeleteExtractTasksAction',
            'RunExtractTasksAction',
            'ChangeExtractTaskPriorityAction',
            'ChangeScheduleAction',
            'ChangeDatasourceRemoteRefreshPropertiesAction',
            'ServerService',
            'HelpService'
        ];
        return ExtractTasksCtrl;
    })();
    VizPortal.ExtractTasksCtrl = ExtractTasksCtrl;
    VizPortal.Module.instance().controller('ExtractTasksCtrl', ExtractTasksCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var CreateGroupRequest = (function (_super) {
            __extends(CreateGroupRequest, _super);
            function CreateGroupRequest(params) {
                _super.call(this, 'createGroup', params);
            }
            return CreateGroupRequest;
        })(ServerApi.Request);
        ServerApi.CreateGroupRequest = CreateGroupRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var DeleteGroupsRequest = (function (_super) {
            __extends(DeleteGroupsRequest, _super);
            function DeleteGroupsRequest(ids) {
                _super.call(this, 'deleteGroups', { ids: ids });
            }
            return DeleteGroupsRequest;
        })(ServerApi.Request);
        ServerApi.DeleteGroupsRequest = DeleteGroupsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="resourceParts.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        ServerApi.LocalGroupDomainName = 'local';
        ServerApi.GroupKeys = ServerApi.NamedItemKeys;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../types/IGetItemsParams.ts" />
/// <reference path="../types/IGetItemsResult.ts" />
/// <reference path="../types/IGroup.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetGroupsRequest = (function (_super) {
            __extends(GetGroupsRequest, _super);
            function GetGroupsRequest(params) {
                _super.call(this, 'getGroups', params);
            }
            return GetGroupsRequest;
        })(ServerApi.Request);
        ServerApi.GetGroupsRequest = GetGroupsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var UpdateGroupNameRequest = (function (_super) {
            __extends(UpdateGroupNameRequest, _super);
            function UpdateGroupNameRequest(params) {
                _super.call(this, 'updateGroupName', params);
            }
            return UpdateGroupNameRequest;
        })(ServerApi.Request);
        ServerApi.UpdateGroupNameRequest = UpdateGroupNameRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var UpdateGroupsMinimumSiteRoleRequest = (function (_super) {
            __extends(UpdateGroupsMinimumSiteRoleRequest, _super);
            function UpdateGroupsMinimumSiteRoleRequest(params) {
                _super.call(this, 'updateGroupsMinimumSiteRole', params);
            }
            return UpdateGroupsMinimumSiteRoleRequest;
        })(ServerApi.Request);
        ServerApi.UpdateGroupsMinimumSiteRoleRequest = UpdateGroupsMinimumSiteRoleRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/RequestHelper.ts" />
/// <reference path="../helpers/ResultHelper.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/CreateGroupRequest.ts" />
/// <reference path="../ServerApi/requests/DeleteGroupsRequest.ts" />
/// <reference path="../ServerApi/requests/GetGroupsRequest.ts" />
/// <reference path="../ServerApi/requests/UpdateGroupNameRequest.ts" />
/// <reference path="../ServerApi/requests/UpdateGroupsMinimumSiteRoleRequest.ts" />
/// <reference path="../ServerApi/types/IGroup.ts" />
/// <reference path="../services/ServerService.ts" />
/// <reference path="Resource.ts" />
var VizPortal;
(function (VizPortal) {
    var Groups = (function (_super) {
        __extends(Groups, _super);
        function Groups(ErrorNotifyingServer, FetcherFactory) {
            _super.call(this, FetcherFactory.getServerResourceFetcher(VizPortal.ServerApi.GetGroupsRequest, function (result) { return result.groups; }));
            this.ErrorNotifyingServer = ErrorNotifyingServer;
            this.server = ErrorNotifyingServer.getServerService();
        }
        Groups.isActiveDirectory = function (group) {
            return group.domainName && group.domainName !== VizPortal.ServerApi.LocalGroupDomainName;
        };
        // Actions
        // create new group
        Groups.prototype.createGroup = function (groupName) {
            var params = {
                name: groupName
            };
            return this.ErrorNotifyingServer.sendRequestAndDelay(new VizPortal.ServerApi.CreateGroupRequest(params));
        };
        // delete groups
        Groups.prototype.deleteGroups = function (ids) {
            return this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests(ids, function (idsBlock) { return new VizPortal.ServerApi.DeleteGroupsRequest(idsBlock); }), VizPortal.ResultHelper.combineResults);
        };
        // update group name
        Groups.prototype.updateGroupName = function (groupId, name) {
            var params = {
                groupId: groupId,
                name: name
            };
            return this.ErrorNotifyingServer.sendRequestAndDelay(new VizPortal.ServerApi.UpdateGroupNameRequest(params));
        };
        // get group details
        Groups.prototype.getGroupDetails = function (groupId) {
            var params = {
                id: groupId
            };
            return this.server.sendRequest(new VizPortal.ServerApi.GetGroupDetailsRequest(params));
        };
        Groups.prototype.updateGroupsMinimumSiteRole = function (groupIds, siteRole) {
            return this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests(groupIds, function (idsBlock) {
                return new VizPortal.ServerApi.UpdateGroupsMinimumSiteRoleRequest({
                    groupIds: idsBlock,
                    minimumSiteRole: siteRole
                });
            }), VizPortal.ResultHelper.combineResults);
        };
        Groups.$inject = ['ErrorNotifyingServer', 'FetcherFactory'];
        return Groups;
    })(VizPortal.Resource);
    VizPortal.Groups = Groups;
    VizPortal.Module.instance().service('Groups', Groups);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/types/ISiteRole.ts" />
/// <reference path="../services/ServerService.ts" />
var VizPortal;
(function (VizPortal) {
    // TODO: hook this up in a bunch of other places.
    var SiteRoles = (function () {
        function SiteRoles(serverService) {
            this.serverService = serverService;
        }
        SiteRoles.prototype.optionsForCurrentUser = function () {
            var rolesToRemoveFromList = [VizPortal.ServerApi.SiteRoles.Guest];
            if (!this.serverService.isSessionServerAdmin()) {
                rolesToRemoveFromList.push(VizPortal.ServerApi.SiteRoles.ServerAdministrator);
            }
            return _.difference(SiteRoles.All, rolesToRemoveFromList);
        };
        SiteRoles.All = [
            VizPortal.ServerApi.SiteRoles.ServerAdministrator,
            VizPortal.ServerApi.SiteRoles.SiteAdministrator,
            VizPortal.ServerApi.SiteRoles.Publisher,
            VizPortal.ServerApi.SiteRoles.Interactor,
            VizPortal.ServerApi.SiteRoles.Viewer,
            VizPortal.ServerApi.SiteRoles.Unlicensed,
            VizPortal.ServerApi.SiteRoles.ViewerWithPublish,
            VizPortal.ServerApi.SiteRoles.UnlicensedWithPublish,
            VizPortal.ServerApi.SiteRoles.Guest
        ];
        SiteRoles.WithoutGuest = _.without(SiteRoles.All, VizPortal.ServerApi.SiteRoles.Guest);
        SiteRoles.WithoutGuestOrServerAdmin = _.without(SiteRoles.All, VizPortal.ServerApi.SiteRoles.Guest, VizPortal.ServerApi.SiteRoles.ServerAdministrator);
        SiteRoles.Mixed = 'Mixed';
        SiteRoles.$inject = ['ServerService'];
        return SiteRoles;
    })();
    VizPortal.SiteRoles = SiteRoles;
    VizPortal.Module.instance().service('SiteRoles', SiteRoles);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetGroupDetailsRequest = (function (_super) {
            __extends(GetGroupDetailsRequest, _super);
            function GetGroupDetailsRequest(params) {
                _super.call(this, 'getGroup', params);
            }
            return GetGroupDetailsRequest;
        })(ServerApi.Request);
        ServerApi.GetGroupDetailsRequest = GetGroupDetailsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="resourceInfoParts.ts" />
/// <reference path="../libs.ts" />
/// <reference path="IUserInfo.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="../types/IGetItemsParams.ts" />
/// <reference path="../types/IGetItemsResult.ts" />
/// <reference path="../types/IGroup.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var SearchActiveDirectoryGroupNameRequest = (function (_super) {
            __extends(SearchActiveDirectoryGroupNameRequest, _super);
            function SearchActiveDirectoryGroupNameRequest(params) {
                _super.call(this, 'searchActiveDirectoryGroupName', params);
            }
            return SearchActiveDirectoryGroupNameRequest;
        })(ServerApi.Request);
        ServerApi.SearchActiveDirectoryGroupNameRequest = SearchActiveDirectoryGroupNameRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="../types/IActionResult.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var SyncActiveDirectoryGroupRequest = (function (_super) {
            __extends(SyncActiveDirectoryGroupRequest, _super);
            function SyncActiveDirectoryGroupRequest(params) {
                _super.call(this, 'syncActiveDirectoryGroup', params);
            }
            return SyncActiveDirectoryGroupRequest;
        })(ServerApi.Request);
        ServerApi.SyncActiveDirectoryGroupRequest = SyncActiveDirectoryGroupRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../types/IActionResult.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var SyncActiveDirectoryGroupsRequest = (function (_super) {
            __extends(SyncActiveDirectoryGroupsRequest, _super);
            function SyncActiveDirectoryGroupsRequest(groups) {
                _super.call(this, 'syncActiveDirectoryGroups', { groups: groups });
            }
            return SyncActiveDirectoryGroupsRequest;
        })(ServerApi.Request);
        ServerApi.SyncActiveDirectoryGroupsRequest = SyncActiveDirectoryGroupsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/SearchActiveDirectoryGroupNameRequest.ts" />
/// <reference path="../ServerApi/requests/SyncActiveDirectoryGroupRequest.ts" />
/// <reference path="../ServerApi/requests/SyncActiveDirectoryGroupsRequest.ts" />
/// <reference path="../ServerApi/types/IGroup.ts" />
/// <reference path="../services/ServerService.ts" />
/// <reference path="Resource.ts" />
var VizPortal;
(function (VizPortal) {
    var basicGroupInfoToAdGroup = function (group) {
        return {
            name: group.name,
            domainName: group.domainName
        };
    };
    var ActiveDirectoryGroups = (function () {
        function ActiveDirectoryGroups(ErrorNotifyingServer) {
            this.ErrorNotifyingServer = ErrorNotifyingServer;
        }
        // search for active directory groups
        ActiveDirectoryGroups.prototype.searchActiveDirectoryGroupName = function (searchInputText) {
            var request = new VizPortal.ServerApi.SearchActiveDirectoryGroupNameRequest({ name: searchInputText });
            return this.ErrorNotifyingServer.sendRequest(request);
        };
        // synchronize a group, if the group does not exist then it will be added
        ActiveDirectoryGroups.prototype.syncAdGroup = function (groupName, groupDomainName, siteRole) {
            var request = new VizPortal.ServerApi.SyncActiveDirectoryGroupRequest({
                name: groupName,
                domainName: groupDomainName,
                siteRole: siteRole
            });
            return this.ErrorNotifyingServer.sendRequest(request);
        };
        // synchronize groups
        ActiveDirectoryGroups.prototype.syncAdGroups = function (groups) {
            var adGroups = _.map(groups, basicGroupInfoToAdGroup);
            var request = new VizPortal.ServerApi.SyncActiveDirectoryGroupsRequest(adGroups);
            return this.ErrorNotifyingServer.sendRequest(request);
        };
        ActiveDirectoryGroups.$inject = ['ErrorNotifyingServer'];
        return ActiveDirectoryGroups;
    })();
    VizPortal.ActiveDirectoryGroups = ActiveDirectoryGroups;
    VizPortal.Module.instance().service('ActiveDirectoryGroups', ActiveDirectoryGroups);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../resources/ActiveDirectoryGroups.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.SyncGroupEvent = {
        groupSynced: "groupSynced"
    };
    var ActiveDirectoryGroupAction = (function () {
        function ActiveDirectoryGroupAction($timeout, $translate, $q, ActiveDirectoryGroups, ConfirmActionDialog, longRunningActionService, toaster) {
            this.$timeout = $timeout;
            this.$translate = $translate;
            this.$q = $q;
            this.ActiveDirectoryGroups = ActiveDirectoryGroups;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.longRunningActionService = longRunningActionService;
            this.toaster = toaster;
        }
        ActiveDirectoryGroupAction.prototype.showSyncAdGroupDialog = function (group, scope) {
            var _this = this;
            var dialogScope = scope.$new();
            dialogScope.group = {
                model: group
            };
            var dialogBody = this.$translate.instant('confirmSyncAdGroup', { GROUP_NAME: VizPortal.L10n.elideIfLong(group.name) });
            var dialogInstance = this.ConfirmActionDialog.open({
                scope: dialogScope,
                title: this.$translate.instant('synchronize'),
                bodyText: dialogBody,
                actionName: this.$translate.instant('synchronize'),
                action: function () { return _this.ActiveDirectoryGroups.syncAdGroup(group.name, group.domainName); }
            });
            return dialogInstance.result
                .then(VizPortal.ResultHelper.rejectResultOnError(this.$q))
                .then(function (result) {
                // notification
                _this.toaster.pop({
                    type: VizPortal.ToastType.Info,
                    text: _this.$translate.instant('syncAdGroupSubmitted', { GROUP_NAME: VizPortal.L10n.elideIfLong(dialogScope.group.model.name) })
                });
                return result;
            })
                .then(this.longRunningActionService
                .startProgressTrackingForResponse())
                .then(this.longRunningActionService.delayResultForSolr())
                .then(this.handleSyncCompleteFor(dialogScope, ActiveDirectoryGroupAction.Mode.sync))
                .fail(this.handleSyncErrorResultFor(dialogScope, ActiveDirectoryGroupAction.Mode.sync))
                .fin(function () { return dialogScope.$destroy(); });
        };
        ActiveDirectoryGroupAction.prototype.showSyncAdGroupsDialog = function (selectedGroups, scope) {
            var _this = this;
            var groups = _.filter(selectedGroups, VizPortal.Groups.isActiveDirectory);
            if (groups.length === 0) {
                // No active directory groups were selected, display an error message
                return this.ConfirmActionDialog.open({
                    scope: scope,
                    title: this.$translate.instant('synchronize'),
                    bodyText: this.$translate.instant('syncAdGroupsNoGroups')
                }).result;
            }
            else if (groups.length === 1) {
                // Only 1 active directory group was selected, use the single single AD dialog
                return this.showSyncAdGroupDialog(groups[0], scope);
            }
            else {
                var dialogInstance = this.ConfirmActionDialog.open({
                    scope: scope,
                    title: this.$translate.instant('synchronize'),
                    bodyText: this.$translate.instant('confirmSyncAdGroups', { GROUP_COUNT: groups.length }, VizPortal.L10n.Interpolations.Count),
                    actionName: this.$translate.instant('synchronizeConfirm', { COUNT: groups.length }, VizPortal.L10n.Interpolations.Count),
                    action: function () {
                        var responsePromise = _this.ActiveDirectoryGroups.syncAdGroups(groups);
                        // Display results
                        responsePromise.then(VizPortal.ResultHelper.rejectResultOnError(_this.$q))
                            .then(function (result) {
                            var successMessage = _this.$translate.instant('syncAdGroupsSubmitted', { GROUP_COUNT: groups.length }, VizPortal.L10n.Interpolations.Count);
                            _this.toaster.pop({ type: VizPortal.ToastType.Info, text: successMessage });
                            return result;
                        })
                            .fail(function (result) {
                            var errorMessage = _this.$translate.instant('syncAdGroupsError', { GROUP_COUNT: groups.length }, VizPortal.L10n.Interpolations.Count);
                            _this.toaster.pop({ type: VizPortal.ToastType.Error, text: errorMessage });
                        });
                        return responsePromise;
                    }
                });
                return dialogInstance.result;
            }
        };
        ActiveDirectoryGroupAction.prototype.showAddAdGroupDialog = function (scope) {
            var _this = this;
            var dialogScope = scope.$new();
            dialogScope.group = {};
            var dialogInstance = this.ConfirmActionDialog.open({
                scope: dialogScope,
                title: this.$translate.instant('addUsersImportAdGroupTitle'),
                bodyTemplateUrl: 'addActiveDirectoryGroupDialog.html',
                actionName: this.$translate.instant('addUsersImportAdGroupSubmit'),
                action: function () {
                    var group = dialogScope.group.model;
                    var siteRole = dialogScope.group.siteRole || VizPortal.ServerApi.SiteRoles.Unlicensed;
                    return _this.ActiveDirectoryGroups.syncAdGroup(group.name, group.domainName, siteRole);
                },
                position: { reserveHeight: 450 },
                size: VizPortal.ModalSize.fitToContent,
                confirmDisabled: function () { return !dialogScope.group.model || !dialogScope.group.siteRole; } // TODO: Replace with form validation
            });
            return dialogInstance.result
                .then(VizPortal.ResultHelper.rejectResultOnError(this.$q))
                .then(function (result) {
                _this.toaster.pop({
                    type: VizPortal.ToastType.Info,
                    text: _this.$translate.instant('addAdGroupSubmitted', { GROUP_NAME: VizPortal.L10n.elideIfLong(dialogScope.group.model.name) })
                });
                return result;
            })
                .then(this.longRunningActionService
                .startProgressTrackingForResponse())
                .then(this.longRunningActionService.delayResultForSolr())
                .then(this.handleSyncCompleteFor(dialogScope, ActiveDirectoryGroupAction.Mode.add))
                .fail(this.handleSyncErrorResultFor(dialogScope, ActiveDirectoryGroupAction.Mode.add))
                .fin(function () { return dialogScope.$destroy(); });
        };
        ActiveDirectoryGroupAction.prototype.handleSyncErrorResultFor = function (scope, actionType) {
            var _this = this;
            return function (result) {
                if (!result || !result.errors)
                    return; // Must have failed for some reason with out an error code, like cancel
                var group = scope.group.model;
                var errorStringArgs = {
                    GROUP_NAME: VizPortal.L10n.elideIfLong(group.name),
                    DOMAIN_NAME: VizPortal.L10n.elideIfLong(group.domainName)
                };
                if (result.errors[0].code === VizPortal.CommonErrorCode.AdGroupNotFound) {
                    // ad group not found is the only thing we expect to handle at the moment
                    _this.toaster.pop({ type: VizPortal.ToastType.Error, text: _this.$translate.instant('errorActiveDirectoryGroupNotFound', errorStringArgs) });
                }
                else {
                    _this.toaster.pop({ type: VizPortal.ToastType.Error, text: _this.$translate.instant(actionType + 'AdGroupError', errorStringArgs) });
                }
                return result; // For chaining
            };
        };
        ActiveDirectoryGroupAction.prototype.handleSyncCompleteFor = function (scope, actionType) {
            var _this = this;
            return function (result) {
                // Add a delay to allow solr to index
                scope.$emit(VizPortal.SyncGroupEvent.groupSynced);
                // Create success messages
                var completeMessageStringArgs = {
                    GROUP_NAME: VizPortal.L10n.elideIfLong(scope.group.model.name),
                    DOMAIN_NAME: VizPortal.L10n.elideIfLong(scope.group.model.domainName)
                };
                var successLines = [
                    _this.$translate.instant(actionType + 'AdGroupSuccess', completeMessageStringArgs),
                    _this.$translate.instant('syncAdGroupSuccessSummary', {
                        NUM_ADDED: result.usersAddedToGroup || 0,
                        NUM_REMOVED: result.usersRemovedFromGroup || 0
                    }, VizPortal.L10n.Interpolations.Count)
                ];
                if (result.usersAddedToSite > 0) {
                    successLines.push(_this.$translate.instant('syncAdGroupSuccessNumAddedToSite', { NUM_ADDED: result.usersAddedToSite }, VizPortal.L10n.Interpolations.Count));
                }
                if (result.usersSiteRoleUpdated > 0) {
                    successLines.push(_this.$translate.instant('syncAdGroupSuccessNumSiteRoleUpdated', { NUM_UPDATED: result.usersSiteRoleUpdated }, VizPortal.L10n.Interpolations.Count));
                }
                _this.toaster.pop({
                    type: VizPortal.ToastType.Info,
                    text: successLines.join('\n'),
                    timeout: VizPortal.ToasterService.NoTimeout
                });
                // Create error messages
                var errorLines = [
                    _this.$translate.instant(actionType + 'AdGroupError', completeMessageStringArgs)
                ];
                if (result.usersWithInsufficientLicenses > 0) {
                    errorLines.push(_this.$translate.instant('syncAdGroupErrorInsufficientLicenses', { COUNT: result.usersWithInsufficientLicenses }, VizPortal.L10n.Interpolations.Count));
                }
                if (result.usersSkipped > 0) {
                    errorLines.push(_this.$translate.instant('syncAdGroupErrorNumUsersSkipped', { COUNT: result.usersWithInsufficientLicenses }, VizPortal.L10n.Interpolations.Count));
                }
                if (errorLines.length > 1) {
                    _this.toaster.pop({ type: VizPortal.ToastType.Error, text: errorLines.join('\n') });
                }
                return result; // For Chaining
            };
        };
        ActiveDirectoryGroupAction.$inject = ['$timeout',
            '$translate',
            '$q',
            'ActiveDirectoryGroups',
            'ConfirmActionDialog',
            'LongRunningActionService',
            'ToasterService'];
        // Used for proper translations
        ActiveDirectoryGroupAction.Mode = {
            add: 'add',
            sync: 'sync'
        };
        return ActiveDirectoryGroupAction;
    })();
    VizPortal.ActiveDirectoryGroupAction = ActiveDirectoryGroupAction;
    VizPortal.Module.instance().service('ActiveDirectoryGroupAction', ActiveDirectoryGroupAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var UpdateGroupsMinimumSiteRoleAction = (function () {
        function UpdateGroupsMinimumSiteRoleAction($translate, $q, $filter, Groups, toaster, confirmActionDialog) {
            this.$translate = $translate;
            this.$q = $q;
            this.$filter = $filter;
            this.Groups = Groups;
            this.toaster = toaster;
            this.confirmActionDialog = confirmActionDialog;
        }
        UpdateGroupsMinimumSiteRoleAction.prototype.executeInPlace = function (group, siteRole) {
            var _this = this;
            var groupSet = VizPortal.Set.fromIdItemArray([group]);
            return this.Groups.updateGroupsMinimumSiteRole([group.id], siteRole)
                .then(VizPortal.ResultHelper.rejectResultOnError(this.$q))
                .then(function () { return _this.handleSuccessResult(groupSet, siteRole); })
                .fail(function (result) { return _this.handleErrorResult(groupSet, siteRole, result); });
        };
        UpdateGroupsMinimumSiteRoleAction.prototype.showUpdateGroupsMinimumSiteRoleDialog = function (groupsToSet, context) {
            var _this = this;
            var groupsOnlyAD = groupsToSet.filter(VizPortal.Groups.isActiveDirectory);
            if (groupsOnlyAD.size() === 0) {
                // No active directory groups were selected, display an error message
                return this.confirmActionDialog.open({
                    scope: context.scope,
                    title: this.$translate.instant('minimumSiteRole'),
                    bodyText: this.$translate.instant('minimumSiteRoleNoADGroups')
                }).result;
            }
            var dialogScope = context.scope.$new();
            dialogScope.siteRole = (groupsOnlyAD.size() === 1) ? groupsOnlyAD.first().minimumSiteRole : VizPortal.ServerApi.SiteRoles.Unlicensed;
            dialogScope.siteRoleOptions = VizPortal.SiteRoles.WithoutGuestOrServerAdmin;
            dialogScope.setSiteRole = function (role) {
                dialogScope.siteRole = role;
            };
            dialogScope.description = this.$translate.instant('confirmSetGroupsMinimumSiteRoleDesc', {
                GROUP_NAME: VizPortal.L10n.elideIfLong(groupsOnlyAD.first().name),
                GROUP_COUNT: groupsOnlyAD.size()
            }, VizPortal.L10n.Interpolations.Count);
            var dialogInstance = this.confirmActionDialog.open({
                title: this.$translate.instant('confirmSetGroupsMinimumSiteRoleTitle'),
                bodyTemplateUrl: 'confirmActionDialogInputRole.html',
                scope: dialogScope,
                confirmDisabled: function () { return false; },
                actionName: this.$translate.instant('confirmSetGroupsMinimumSiteRoleButton', {
                    ITEM_COUNT: groupsOnlyAD.size()
                }, VizPortal.L10n.Interpolations.Count),
                action: function (dialogInstance) { return _this.setGroupsSiteRoles(groupsOnlyAD, dialogScope.siteRole); }
            });
            dialogInstance.result.fin(function () { return dialogScope.$destroy(); });
            return dialogInstance.result;
        };
        UpdateGroupsMinimumSiteRoleAction.prototype.setGroupsSiteRoles = function (selectedGroups, siteRole) {
            var _this = this;
            var groups = _.map(selectedGroups.toArray(), function (group) { return group.id; });
            return this.Groups.updateGroupsMinimumSiteRole(groups, siteRole)
                .then(VizPortal.ResultHelper.rejectResultOnError(this.$q))
                .then(function () { return _this.handleSuccessResult(selectedGroups, siteRole); })
                .fail(function (result) { return _this.handleErrorResult(selectedGroups, siteRole, result); });
        };
        UpdateGroupsMinimumSiteRoleAction.prototype.handleSuccessResult = function (groups, siteRole) {
            this.toaster.pop({
                type: VizPortal.ToastType.Info,
                text: this.$translate.instant('updateGroupsMinimumSiteRoleSuccess', {
                    GROUP_NAME: VizPortal.L10n.elideIfLong(groups.first().name),
                    COUNT: groups.size(),
                    SITE_ROLE: this.$filter('siteRole')(siteRole)
                }, VizPortal.L10n.Interpolations.Count)
            });
        };
        UpdateGroupsMinimumSiteRoleAction.prototype.handleErrorResult = function (groups, siteRole, result) {
            this.toaster.pop({
                type: VizPortal.ToastType.Error,
                text: this.$translate.instant('updateGroupsMinimumSiteRoleError', {
                    GROUP_NAME: VizPortal.L10n.elideIfLong(groups.first().name),
                    COUNT: groups.size(),
                    SITE_ROLE: this.$filter('siteRole')(siteRole)
                }, VizPortal.L10n.Interpolations.Count)
            });
            return this.$q.reject(result); // for chaining errors
        };
        UpdateGroupsMinimumSiteRoleAction.$inject = [
            '$translate',
            '$q',
            '$filter',
            'Groups',
            'ToasterService',
            'ConfirmActionDialog'
        ];
        return UpdateGroupsMinimumSiteRoleAction;
    })();
    VizPortal.UpdateGroupsMinimumSiteRoleAction = UpdateGroupsMinimumSiteRoleAction;
    VizPortal.Module.instance().service('UpdateGroupsMinimumSiteRoleAction', UpdateGroupsMinimumSiteRoleAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../../ts/libs.ts" />
var VizPortal;
(function (VizPortal) {
    var CheckboxState = (function () {
        function CheckboxState() {
        }
        CheckboxState.toggle = function (checkboxState) {
            // toggle:
            // mixed   => checked
            // checked => empty
            // empty   => checked
            switch (checkboxState) {
                case CheckboxState.checked: {
                    return CheckboxState.empty;
                }
                default: {
                    return CheckboxState.checked;
                }
            }
        };
        CheckboxState.checked = 'checked';
        CheckboxState.mixed = 'mixed';
        CheckboxState.empty = 'empty';
        return CheckboxState;
    })();
    VizPortal.CheckboxState = CheckboxState;
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var ImportExternalSiteUsersRequest = (function (_super) {
            __extends(ImportExternalSiteUsersRequest, _super);
            function ImportExternalSiteUsersRequest(params) {
                _super.call(this, 'importExternalUsers', params);
            }
            return ImportExternalSiteUsersRequest;
        })(ServerApi.Request);
        ServerApi.ImportExternalSiteUsersRequest = ImportExternalSiteUsersRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var ImportThirdPartySiteUsersRequest = (function (_super) {
            __extends(ImportThirdPartySiteUsersRequest, _super);
            function ImportThirdPartySiteUsersRequest(params) {
                _super.call(this, 'importThirdPartyUsers', params);
            }
            return ImportThirdPartySiteUsersRequest;
        })(ServerApi.Request);
        ServerApi.ImportThirdPartySiteUsersRequest = ImportThirdPartySiteUsersRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var AddUsersToSiteRequest = (function (_super) {
            __extends(AddUsersToSiteRequest, _super);
            function AddUsersToSiteRequest(usernames, siteRole) {
                _super.call(this, 'addUsersToSite', { usernames: usernames, siteRole: siteRole });
            }
            return AddUsersToSiteRequest;
        })(ServerApi.Request);
        ServerApi.AddUsersToSiteRequest = AddUsersToSiteRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var CreateLocalUserRequest = (function (_super) {
            __extends(CreateLocalUserRequest, _super);
            function CreateLocalUserRequest(params) {
                _super.call(this, 'createLocalUser', params);
            }
            return CreateLocalUserRequest;
        })(ServerApi.Request);
        ServerApi.CreateLocalUserRequest = CreateLocalUserRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var DeleteUsersRequest = (function (_super) {
            __extends(DeleteUsersRequest, _super);
            function DeleteUsersRequest(ids) {
                _super.call(this, 'deleteUsers', { ids: ids });
            }
            return DeleteUsersRequest;
        })(ServerApi.Request);
        ServerApi.DeleteUsersRequest = DeleteUsersRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetRemainingUserQuotaRequest = (function (_super) {
            __extends(GetRemainingUserQuotaRequest, _super);
            function GetRemainingUserQuotaRequest() {
                _super.call(this, 'getRemainingUserQuota', {});
            }
            return GetRemainingUserQuotaRequest;
        })(ServerApi.Request);
        ServerApi.GetRemainingUserQuotaRequest = GetRemainingUserQuotaRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="IUser.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        ServerApi.SiteUserAuthSetting = {
            Saml: 'SAML',
            Default: 'DEFAULT'
        };
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../requests/Request.ts" />
/// <reference path="../types/IGetItemsParams.ts" />
/// <reference path="../types/IGetItemsResult.ts" />
/// <reference path="../types/ISiteUser.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetSiteUsersRequest = (function (_super) {
            __extends(GetSiteUsersRequest, _super);
            function GetSiteUsersRequest(params) {
                _super.call(this, 'getSiteUsers', params);
            }
            return GetSiteUsersRequest;
        })(ServerApi.Request);
        ServerApi.GetSiteUsersRequest = GetSiteUsersRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var ImportSiteUsersFromActiveDirectoryRequest = (function (_super) {
            __extends(ImportSiteUsersFromActiveDirectoryRequest, _super);
            function ImportSiteUsersFromActiveDirectoryRequest(params) {
                _super.call(this, 'importUsersFromActiveDirectory', params);
            }
            return ImportSiteUsersFromActiveDirectoryRequest;
        })(ServerApi.Request);
        ServerApi.ImportSiteUsersFromActiveDirectoryRequest = ImportSiteUsersFromActiveDirectoryRequest;
        var ImportServerUsersFromActiveDirectoryRequest = (function (_super) {
            __extends(ImportServerUsersFromActiveDirectoryRequest, _super);
            function ImportServerUsersFromActiveDirectoryRequest(params) {
                _super.call(this, 'importServerUsersFromActiveDirectory', params);
            }
            return ImportServerUsersFromActiveDirectoryRequest;
        })(ServerApi.Request);
        ServerApi.ImportServerUsersFromActiveDirectoryRequest = ImportServerUsersFromActiveDirectoryRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var UpdateUsersAdminStatusRequest = (function (_super) {
            __extends(UpdateUsersAdminStatusRequest, _super);
            function UpdateUsersAdminStatusRequest(params) {
                _super.call(this, 'updateUsersAdminStatus', params);
            }
            return UpdateUsersAdminStatusRequest;
        })(ServerApi.Request);
        ServerApi.UpdateUsersAdminStatusRequest = UpdateUsersAdminStatusRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var UpdateUsersGroupMembershipRequest = (function (_super) {
            __extends(UpdateUsersGroupMembershipRequest, _super);
            function UpdateUsersGroupMembershipRequest(params) {
                _super.call(this, 'updateUsersGroupMembership', params);
            }
            return UpdateUsersGroupMembershipRequest;
        })(ServerApi.Request);
        ServerApi.UpdateUsersGroupMembershipRequest = UpdateUsersGroupMembershipRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var UpdateUsersSiteRoleRequest = (function (_super) {
            __extends(UpdateUsersSiteRoleRequest, _super);
            function UpdateUsersSiteRoleRequest(params) {
                _super.call(this, 'updateUsersSiteRole', params);
            }
            return UpdateUsersSiteRoleRequest;
        })(ServerApi.Request);
        ServerApi.UpdateUsersSiteRoleRequest = UpdateUsersSiteRoleRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/RequestHelper.ts" />
/// <reference path="../helpers/ResultHelper.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/ImportExternalUsers.ts" />
/// <reference path="../ServerApi/requests/ImportThirdPartySiteUsers.ts" />
/// <reference path="../ServerApi/requests/AddUsersToSiteRequest.ts" />
/// <reference path="../ServerApi/requests/CreateLocalUserRequest.ts" />
/// <reference path="../ServerApi/requests/DeleteUsersRequest.ts" />
/// <reference path="../ServerApi/requests/GetRemainingUserQuotaRequest.ts" />
/// <reference path="../ServerApi/requests/GetSiteUsersRequest.ts" />
/// <reference path="../ServerApi/requests/ImportUsersFromActiveDirectoryRequest.ts" />
/// <reference path="../ServerApi/requests/UpdateUsersAdminStatusRequest.ts" />
/// <reference path="../ServerApi/requests/UpdateUsersGroupMembershipRequest.ts" />
/// <reference path="../ServerApi/requests/UpdateUsersSiteRoleRequest.ts" />
/// <reference path="../ServerApi/types/ISiteUser.ts" />
/// <reference path="../services/ServerService.ts" />
/// <reference path="Resource.ts" />
var VizPortal;
(function (VizPortal) {
    var SiteUsers = (function (_super) {
        __extends(SiteUsers, _super);
        function SiteUsers(ErrorNotifyingServer, FetcherFactory, $q) {
            _super.call(this, FetcherFactory.getServerResourceFetcher(VizPortal.ServerApi.GetSiteUsersRequest, function (result) { return result.users; }));
            this.ErrorNotifyingServer = ErrorNotifyingServer;
            this.$q = $q;
            this.server = ErrorNotifyingServer.getServerService();
        }
        // gets the user with the specified username & domainName.
        SiteUsers.prototype.getUserByUsernameAndDomain = function (username, domainName) {
            return this.all()
                .addFilter(VizPortal.Filter.stringFieldEq('username', username))
                .addFilter(VizPortal.Filter.stringFieldEq('domainName', domainName))
                .getFirst();
        };
        // group membership - remove only
        SiteUsers.prototype.removeFromGroups = function (userIds, groupIds) {
            return this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests2(userIds, groupIds, function (userIdsBlock, groupIdsBlock) { return new VizPortal.ServerApi.UpdateUsersGroupMembershipRequest({
                userIds: userIdsBlock,
                addToGroupIds: [],
                removeFromGroupIds: groupIdsBlock
            }); }), VizPortal.ResultHelper.combineResults);
        };
        SiteUsers.prototype.getUserCountsBySiteRole = function (baseQuery) {
            // remove any existing site role filter
            var filtersWithoutSiteRole = _.filter(baseQuery.getFilters(), function (filter) {
                return !(filter.field && filter.field === VizPortal.ServerApi.FilterFieldNames.siteRole);
            });
            var modifiedQuery = baseQuery.withFilters(filtersWithoutSiteRole);
            var counts = {};
            var promises = _.map(VizPortal.SiteRoles.WithoutGuest, function (siteRole) {
                return modifiedQuery
                    .addFilter(VizPortal.Filter.stringFieldEq(VizPortal.ServerApi.FilterFieldNames.siteRole, siteRole))
                    .getCount()
                    .then(function (totalCount) {
                    counts[siteRole] = totalCount;
                });
            });
            //Any site role
            promises.push(modifiedQuery.getCount().then(function (totalCount) { counts['Any'] = totalCount; }));
            return this.$q.all(promises).then(function () { return counts; });
        };
        // group membership - add only
        SiteUsers.prototype.addToGroups = function (userIds, groupIds) {
            return this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests2(userIds, groupIds, function (userIdsBlock, groupIdsBlock) { return new VizPortal.ServerApi.UpdateUsersGroupMembershipRequest({
                userIds: userIdsBlock,
                addToGroupIds: groupIdsBlock,
                removeFromGroupIds: []
            }); }), VizPortal.ResultHelper.combineResults);
        };
        // group membership - add and remove
        SiteUsers.prototype.updateUsersGroupMembership = function (userIds, addToGroupIds, removeFromGroupIds) {
            return this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests3(userIds, addToGroupIds, removeFromGroupIds, function (userIdsBlock, addToGroupIdsBlock, removeFromGroupIdsBlock) { return new VizPortal.ServerApi.UpdateUsersGroupMembershipRequest({
                userIds: userIdsBlock,
                addToGroupIds: addToGroupIdsBlock,
                removeFromGroupIds: removeFromGroupIdsBlock
            }); }), VizPortal.ResultHelper.combineResults);
        };
        // creates a local user
        SiteUsers.prototype.createLocalUser = function (username, displayName, email, password, admin, siteRole) {
            var _this = this;
            return this.server.sendRequest(new VizPortal.ServerApi.GeneratePublicKeyRequest()).
                then(function (generatePublicKeyResult) {
                var key = generatePublicKeyResult.key;
                var keyId = generatePublicKeyResult.keyId;
                var encryptedPassword = rsa.encrypt(password, key);
                var createLocalUserRequest = new VizPortal.ServerApi.CreateLocalUserRequest({
                    username: username,
                    displayName: displayName,
                    email: email,
                    encryptedPassword: encryptedPassword,
                    keyId: keyId,
                    admin: admin,
                    siteRole: siteRole
                });
                return _this.ErrorNotifyingServer.sendRequestAndDelay(createLocalUserRequest);
            });
        };
        // adds users to this site
        SiteUsers.prototype.addUsersToSite = function (usernames, siteRole) {
            return this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests(usernames, function (usernamesBlock) { return new VizPortal.ServerApi.AddUsersToSiteRequest(usernamesBlock, siteRole); }), VizPortal.ResultHelper.combineResults);
        };
        // delete users from this site
        SiteUsers.prototype.deleteUsers = function (userIds) {
            return this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests(userIds, function (userIdsBlock) { return new VizPortal.ServerApi.DeleteUsersRequest(userIdsBlock); }), VizPortal.ResultHelper.combineUserResults);
        };
        // imports users from active directory to this site
        SiteUsers.prototype.importUsersFromActiveDirectory = function (userIds, siteRole, serverAdmin) {
            if (serverAdmin === void 0) { serverAdmin = false; }
            var requestBuilder;
            if (serverAdmin) {
                requestBuilder = function (userIdsBlock) { return new VizPortal.ServerApi.ImportSiteUsersFromActiveDirectoryRequest({ usernames: userIdsBlock, admin: true }); };
            }
            else {
                requestBuilder = function (userIdsBlock) { return new VizPortal.ServerApi.ImportSiteUsersFromActiveDirectoryRequest({ usernames: userIdsBlock, siteRole: siteRole }); };
            }
            return this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests(userIds, requestBuilder), VizPortal.ResultHelper.combineUserResults);
        };
        SiteUsers.prototype.importExternalUsers = function (emails, siteRole) {
            return this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests(emails, function (emailsBlock) { return new VizPortal.ServerApi.ImportExternalSiteUsersRequest({
                emailAddresses: emailsBlock,
                siteRole: siteRole
            }); }), VizPortal.ResultHelper.combineImportUserResults);
        };
        SiteUsers.prototype.importThirdPartyUsers = function (emails, siteRole) {
            return this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests(emails, function (emailsBlock) { return new VizPortal.ServerApi.ImportThirdPartySiteUsersRequest({
                emailAddresses: emailsBlock,
                siteRole: siteRole
            }); }), VizPortal.ResultHelper.combineImportUserResults);
        };
        // updates users site role for this site
        SiteUsers.prototype.updateUsersSiteRole = function (userIds, siteRole) {
            return this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests(userIds, function (userIdsBlock) { return new VizPortal.ServerApi.UpdateUsersSiteRoleRequest({
                userIds: userIdsBlock,
                siteRole: siteRole
            }); }), VizPortal.ResultHelper.combineResults);
        };
        // site membership - change these users' server admin status. Includes SOLR delay.
        SiteUsers.prototype.updateServerAdminStatusAndDelay = function (userIds, admin) {
            return this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests(userIds, function (userIdsBlock) { return new VizPortal.ServerApi.UpdateUsersAdminStatusRequest({
                userIds: userIdsBlock,
                admin: admin
            }); }), VizPortal.ResultHelper.combineResults);
        };
        // site membership - change these users' server admin status. No SOLR delay.
        SiteUsers.prototype.updateServerAdminStatusNoDelay = function (userIds, admin) {
            return this.ErrorNotifyingServer.sendRequests(VizPortal.RequestHelper.buildRequests(userIds, function (userIdsBlock) { return new VizPortal.ServerApi.UpdateUsersAdminStatusRequest({
                userIds: userIdsBlock,
                admin: admin
            }); }), VizPortal.ResultHelper.combineResults);
        };
        SiteUsers.prototype.getRemainingUserQuota = function () {
            return this.server.sendRequest(new VizPortal.ServerApi.GetRemainingUserQuotaRequest())
                .then(function (result) { return result.usersRemaining; });
        };
        SiteUsers.$inject = ['ErrorNotifyingServer', 'FetcherFactory', '$q'];
        return SiteUsers;
    })(VizPortal.Resource);
    VizPortal.SiteUsers = SiteUsers;
    VizPortal.Module.instance().service('SiteUsers', SiteUsers);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/IGroup.ts" />
/// <reference path="../types/IGroupMember.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetUsersGroupMembershipRequest = (function (_super) {
            __extends(GetUsersGroupMembershipRequest, _super);
            function GetUsersGroupMembershipRequest(params) {
                _super.call(this, 'getUsersGroupMembership', params);
            }
            return GetUsersGroupMembershipRequest;
        })(ServerApi.Request);
        ServerApi.GetUsersGroupMembershipRequest = GetUsersGroupMembershipRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../fetchers/ListResult.ts" />
/// <reference path="../models/ISliceable.ts" />
var VizPortal;
(function (VizPortal) {
    var SliceableFactory = (function () {
        function SliceableFactory($q) {
            this.$q = $q;
        }
        SliceableFactory.prototype.fromArray = function (list) {
            var _this = this;
            if (list === void 0) { list = []; }
            return {
                getSlice: function (start, size) {
                    var slice = list.slice(start, start + size);
                    return _this.$q.when(new VizPortal.ListResult(slice, start, list.length));
                }
            };
        };
        SliceableFactory.prototype.searchArray = function (searchFilterFn, listPromise) {
            var _this = this;
            var list;
            return function (search) {
                var filteredSliceable;
                var createFilteredSliceable = function () {
                    var filteredList = _.filter(list, function (item) { return searchFilterFn(item, search); });
                    // Angular tries to optimize ng-repeats by adding a "$$hashKey property to objects to prevent re-rendering
                    // items in a list that have not changed.  This breaks the tbTypeaheadFormat directive that relies on re-rendering
                    // each item in the list so we need to pass in "fresh" models every time the search changes.
                    filteredList = _.map(filteredList, _.clone);
                    filteredSliceable = _this.fromArray(filteredList);
                };
                createFilteredSliceable();
                return {
                    getSlice: function (start, size) {
                        if (list)
                            return filteredSliceable.getSlice(start, size);
                        return listPromise.then(function (newList) {
                            list = newList;
                            createFilteredSliceable();
                            return filteredSliceable.getSlice(start, size);
                        });
                    }
                };
            };
        };
        SliceableFactory.$inject = ['$q'];
        return SliceableFactory;
    })();
    VizPortal.SliceableFactory = SliceableFactory;
    VizPortal.Module.instance().service('SliceableFactory', SliceableFactory);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="ContentActionNotification.ts" />
/// <reference path="../ServerApi/types/IUserActionResult.ts" />
var VizPortal;
(function (VizPortal) {
    var UserActionNotification = (function () {
        function UserActionNotification($translate, toaster) {
            this.$translate = $translate;
            this.toaster = toaster;
        }
        UserActionNotification.prototype.notify = function (params) {
            var _this = this;
            _.defaults(params, {
                results: [],
                errors: []
            });
            this.notifyErrors(params);
            // handle results (successes & partial successes)
            var errorsByUserId = _.groupBy(params.errors, 'id');
            var usersMappedByResults = this.getUsersByResultMap(params.users, params.results, params.successCode, errorsByUserId);
            _.each(usersMappedByResults, function (usersForResult, resultCode) {
                var toastType = (resultCode === params.successCode)
                    ? VizPortal.ToastType.Info
                    : VizPortal.ToastType.Error;
                // TODO: refactor getUsersByResultMap() to make this not necessary.
                var users = _.unique(usersForResult);
                var msg = (users.length > 1)
                    ? _this.multiResultMessageFor(resultCode, users.length)
                    : _this.resultMessageFor(resultCode, nameFor(users[0], _this.$translate));
                _this.toaster.pop({ type: toastType, text: msg });
            });
        };
        UserActionNotification.prototype.notifyErrors = function (params) {
            var _this = this;
            _.defaults(params, {
                errors: []
            });
            // handle errors (failures)
            if (params.errors.length > 0) {
                _.each(params.errors, function (error) {
                    var user = params.users.get(error.id);
                    var nameForMsg = (user && nameFor(user, _this.$translate)) || error.username;
                    if (_.isFunction(params.showErrorMsgFunc)) {
                        params.showErrorMsgFunc(_this.errorMessageFor(error, nameForMsg));
                    }
                    else {
                        _this.toaster.pop({ type: VizPortal.ToastType.Error, text: _this.errorMessageFor(error, nameForMsg) });
                    }
                });
            }
        };
        /*
         * TODO: we need to know the action that was being attempted in order to produce
         *       more specific error messages.
         *       The design of this class should probably be reworked to handle that.
         */
        UserActionNotification.prototype.errorMessageFor = function (error, username) {
            var errorCode = error.code;
            if (!!VizPortal.LdapErrorCode[errorCode]) {
                return this.ldapErrorMessage(error, username);
            }
            switch (errorCode) {
                case VizPortal.UserErrorCode.UserAlreadyExists:
                    return this.$translate.instant('errorUserAlreadyExists', { NEW_ITEM_NAME: VizPortal.L10n.elideIfLong(username) });
                case VizPortal.UserErrorCode.UserNotSupportedGuestOperation:
                    return this.$translate.instant('errorUserNotSupportedGuestOperation');
                case VizPortal.UserErrorCode.UserNotSupportedSelfOperation:
                    return this.$translate.instant('errorUserNotSupportedSelfOperation');
                case VizPortal.UserErrorCode.UserInsufficientSiteQuota:
                    return this.$translate.instant('errorUserInsufficientSiteQuota');
                case VizPortal.CommonErrorCode.CallingUserInsufficientPermissions:
                    return this.$translate.instant('errorInsufficientPermision', { USER_NAME: VizPortal.L10n.elideIfLong(username) });
                case VizPortal.CommonErrorCode.ADUserNotFound:
                    return this.$translate.instant('errorUserNotFoundInAD', { USER_NAME: VizPortal.L10n.elideIfLong(username) });
                case VizPortal.CommonErrorCode.UnexpectedErrorOccurred:
                    return this.$translate.instant('unexpectedErrorOnServer');
                default:
                    return this.$translate.instant('errorUnknown');
            }
        };
        UserActionNotification.prototype.ldapErrorMessage = function (error, username) {
            var errorCode = error.code;
            switch (errorCode) {
                case VizPortal.LdapErrorCode.LdapServerDown:
                    return this.$translate.instant('errorLdapServerDown', { USER_NAME: VizPortal.L10n.elideIfLong(username) });
                case VizPortal.LdapErrorCode.LdapInvalidCredentials:
                    return this.$translate.instant('errorLdapInvalidCredentials', { USER_NAME: VizPortal.L10n.elideIfLong(username) });
                default:
                    return this.$translate.instant('errorUnknownLdapError', { USER_NAME: VizPortal.L10n.elideIfLong(username) });
            }
        };
        UserActionNotification.prototype.resultMessageFor = function (resultCode, username) {
            return this.$translate.instant('userActionResult_' + resultCode, { USER_NAME: VizPortal.L10n.elideIfLong(username) });
        };
        UserActionNotification.prototype.multiResultMessageFor = function (resultCode, count) {
            return this.$translate.instant('userActionBulkOperationResult_' + resultCode, { COUNT: count }, VizPortal.L10n.Interpolations.Count);
        };
        // returns a dictionary of users keyed by result code.
        // each user might appear multiple times (multiple result codes per user).
        // if a user is not associated with any result codes, this function associates them with the success code.
        UserActionNotification.prototype.getUsersByResultMap = function (users, results, successCode, errorsByUserId) {
            var _this = this;
            var resultSet = VizPortal.Set.fromIdItemArray(results);
            var map = {};
            users.each(function (user) {
                var resultsForThisUser = resultSet.get(user.id);
                var resultCodesForThisUser = resultsForThisUser && resultSet.get(user.id).codes || [];
                if (resultCodesForThisUser.length > 0) {
                    // there were partial success results for this user.  map them.
                    _.each(resultCodesForThisUser, function (resultCode) {
                        // Check for op codes in the results array that are considered errors.
                        // Map non-errors to the sucess result code.
                        var resultToNotifyFor = _this.isErrorResult(resultCode) ? resultCode.toString() : successCode;
                        if (map[resultToNotifyFor]) {
                            map[resultToNotifyFor].push(user);
                        }
                        else {
                            map[resultToNotifyFor] = [user];
                        }
                    });
                }
                else if (!errorsByUserId[user.id]) {
                    // If there are no result codes or error codes for this user, treat operation as a success.
                    if (map[successCode]) {
                        map[successCode].push(user);
                    }
                    else {
                        map[successCode] = [user];
                    }
                }
            });
            return map;
        };
        UserActionNotification.prototype.isErrorResult = function (resultCode) {
            switch (resultCode) {
                case 14: // user that owns content on site/server, gets unlicensed instead
                case 15: // server admin that owns content on site/server cannot be deleted
                case 32: // site at quota
                case 31: // not enough licenses to add to site
                case 42: // not enough licenses to promote to admin
                case 52:
                    return true;
                default:
                    return false;
            }
        };
        UserActionNotification.$inject = [
            '$translate',
            'ToasterService'];
        return UserActionNotification;
    })();
    VizPortal.UserActionNotification = UserActionNotification;
    VizPortal.Module.instance().service('UserActionNotification', UserActionNotification);
    // Notification For:
    // => adding users to site
    var AddUserToSiteActionNotification = (function () {
        function AddUserToSiteActionNotification($translate, toaster) {
            this.$translate = $translate;
            this.toaster = toaster;
        }
        AddUserToSiteActionNotification.prototype.notify = function (showErrorMsgFunc, result, username, siteRoleEnum) {
            if (!!result.errors && result.errors.length > 0) {
                var errorMsg = this.errorMessageFor(result.errors[0], username);
                showErrorMsgFunc(errorMsg);
            }
            else {
                var translatedSiteRole = this.$translate.instant(siteRoleEnum);
                var successMsg = this.$translate.instant('addUserToSiteWithSiteRoleSuccessMsg', { NEW_ITEM_NAME: VizPortal.L10n.elideIfLong(username), SITE_ROLE: translatedSiteRole });
                this.toaster.pop({ type: VizPortal.ToastType.Info, text: successMsg });
            }
        };
        AddUserToSiteActionNotification.prototype.errorMessageFor = function (error, username) {
            switch (error.code) {
                case VizPortal.CommonErrorCode.SystemUserNotFound:
                    return this.$translate.instant('errorSystemUserNotFound', { USER_NAME: VizPortal.L10n.elideIfLong(username) });
                case VizPortal.UserErrorCode.UserAlreadyExists:
                    return this.$translate.instant('errorUserAlreadyExists', { NEW_ITEM_NAME: VizPortal.L10n.elideIfLong(username) });
                case VizPortal.UserErrorCode.UserInsufficientSiteQuota:
                    return this.$translate.instant('errorUserInsufficientSiteQuota');
                default:
                    return this.$translate.instant('errorUnknown');
            }
        };
        AddUserToSiteActionNotification.$inject = [
            '$translate',
            'ToasterService'];
        return AddUserToSiteActionNotification;
    })();
    VizPortal.AddUserToSiteActionNotification = AddUserToSiteActionNotification;
    VizPortal.Module.instance().service('AddUserToSiteActionNotification', AddUserToSiteActionNotification);
    // Notification For:
    // => site role change for single site
    var SiteRolesUpdateActionNotification = (function () {
        function SiteRolesUpdateActionNotification($state, $filter, $translate, contentActionNotification) {
            this.$state = $state;
            this.$filter = $filter;
            this.$translate = $translate;
            this.contentActionNotification = contentActionNotification;
        }
        SiteRolesUpdateActionNotification.prototype.notify = function (result, users, siteRoleEnum) {
            var _this = this;
            var translatedSiteRole = this.$filter('siteRole')(siteRoleEnum);
            var successfulName = getSuccessfulName(users, result, this.$translate);
            var failingName = getFailingName(users, result, this.$translate);
            // create a notification object for result reporting
            var notification = VizPortal.MultipleResultNotificationOptions.create(new VizPortal.MultipleItemResult(users, result), {
                describeSuccessSummary: function (successCount) {
                    return _this.$translate.instant('updateSiteRoleSuccess', {
                        SUCCESS_COUNT: successCount,
                        USER_NAME: VizPortal.L10n.elideIfLong(successfulName),
                        SITE_ROLE: translatedSiteRole
                    }, VizPortal.L10n.Interpolations.Count);
                },
                describeErrorSummary: function (errorCount) {
                    return _this.$translate.instant('updateSiteRoleError', {
                        ERROR_COUNT: errorCount,
                        USER_NAME: VizPortal.L10n.elideIfLong(failingName),
                        SITE_ROLE: translatedSiteRole
                    }, VizPortal.L10n.Interpolations.Count);
                },
                describeErrorDetail: function (errorItem) {
                    return {
                        itemName: errorItem.item.username,
                        itemUrl: getUrlForUser(_this.$state, errorItem.item),
                        errorMessage: _this.errorMessageFor(errorItem, translatedSiteRole)
                    };
                }
            });
            // pass the notification object to the service for displaying
            this.contentActionNotification.notify(notification);
        };
        SiteRolesUpdateActionNotification.prototype.errorMessageFor = function (errorItem, siteRole) {
            switch (errorItem.error.code) {
                case VizPortal.UserErrorCode.UserInsufficientLicenses:
                    return this.$translate.instant('errorUserInsufficientLicenses_updateSiteRole', { SITE_ROLE: siteRole });
                case VizPortal.UserErrorCode.UserNotSupportedGuestOperation:
                    return this.$translate.instant('errorUserNotSupportedGuestOperation');
                case VizPortal.UserErrorCode.UserNotSupportedAdminOperation:
                    return this.$translate.instant('errorUserNotSupportedAdminOperation');
                case VizPortal.UserErrorCode.UserNotSupportedSelfOperation:
                    return this.$translate.instant('errorUserNotSupportedSelfOperation');
                case VizPortal.UserErrorCode.UserInsufficientSiteQuota:
                    return this.$translate.instant('errorUserInsufficientSiteQuota');
                default:
                    return this.$translate.instant('errorUnknown');
            }
        };
        SiteRolesUpdateActionNotification.$inject = [
            '$state',
            '$filter',
            '$translate',
            'ContentActionNotification'];
        return SiteRolesUpdateActionNotification;
    })();
    VizPortal.SiteRolesUpdateActionNotification = SiteRolesUpdateActionNotification;
    VizPortal.Module.instance().service('SiteRolesUpdateActionNotification', SiteRolesUpdateActionNotification);
    // Notification For:
    // => site membership and roles change for single site
    var SiteMembershipUpdateActionNotification = (function () {
        function SiteMembershipUpdateActionNotification($state, $translate, contentActionNotification) {
            this.$state = $state;
            this.$translate = $translate;
            this.contentActionNotification = contentActionNotification;
        }
        SiteMembershipUpdateActionNotification.prototype.notify = function (result, users, userCount, addedUser, addedToSiteCount, addedToSiteName, removedFromSiteCount, removedFromSiteName) {
            var _this = this;
            var successId;
            var errorId;
            var messageArgs = {
                USER_NAME: VizPortal.L10n.elideIfLong(nameFor(addedUser, this.$translate))
            };
            // determine result notification strings and args
            if (addedToSiteCount > 0) {
                if (removedFromSiteCount > 0) {
                    successId = 'siteRolesChanged_usersAddedToSitesAndRemovedFromSites';
                    errorId = 'siteRolesChanged_usersAddedToSitesAndRemovedFromSites_failed';
                    angular.extend(messageArgs, {
                        ADD_COUNT: addedToSiteCount,
                        ADD_NAME: VizPortal.L10n.elideIfLong(addedToSiteName),
                        REMOVE_COUNT: removedFromSiteCount,
                        REMOVE_NAME: VizPortal.L10n.elideIfLong(removedFromSiteName)
                    });
                }
                else {
                    successId = 'siteRolesChanged_usersAddedToSites';
                    errorId = 'siteRolesChanged_usersAddedToSites_failed';
                    angular.extend(messageArgs, {
                        ADD_COUNT: addedToSiteCount,
                        ADD_NAME: VizPortal.L10n.elideIfLong(addedToSiteName)
                    });
                }
            }
            else {
                successId = 'siteRolesChanged_usersRemovedFromSites';
                errorId = 'siteRolesChanged_usersRemovedFromSites_failed';
                angular.extend(messageArgs, {
                    REMOVE_COUNT: removedFromSiteCount,
                    REMOVE_NAME: VizPortal.L10n.elideIfLong(removedFromSiteName)
                });
            }
            // create a notification object for result reporting
            var notification = VizPortal.MultipleResultNotificationOptions.create(new VizPortal.MultipleItemResult(users, result), {
                describeSuccessSummary: function (successCount) {
                    angular.extend(messageArgs, { USER_COUNT: successCount });
                    return _this.$translate.instant(successId, messageArgs, VizPortal.L10n.Interpolations.Count);
                },
                describeErrorSummary: function (errorCount) {
                    angular.extend(messageArgs, { USER_COUNT: errorCount });
                    return _this.$translate.instant(errorId, messageArgs, VizPortal.L10n.Interpolations.Count);
                },
                describeErrorDetail: function (errorItem) {
                    return {
                        itemName: errorItem.item.username,
                        itemUrl: getUrlForUser(_this.$state, errorItem.item),
                        errorMessage: _this.errorMessageFor(errorItem)
                    };
                }
            });
            // pass the notification object to the service for displaying
            this.contentActionNotification.notify(notification);
        };
        SiteMembershipUpdateActionNotification.prototype.errorMessageFor = function (errorItem) {
            switch (errorItem.error.code) {
                case VizPortal.CommonErrorCode.SystemUserNotFound:
                    return this.$translate.instant('errorSystemUserNotFound', { USER_NAME: VizPortal.L10n.elideIfLong(errorItem.item.username) });
                case VizPortal.UserErrorCode.UserInsufficientLicenses:
                    return this.$translate.instant('errorUserInsufficientLicenses');
                case VizPortal.UserErrorCode.UserNotSupportedGuestOperation:
                    return this.$translate.instant('errorUserNotSupportedGuestOperation');
                case VizPortal.UserErrorCode.UserInsufficientSiteQuota:
                    return this.$translate.instant('errorUserInsufficientSiteQuota');
                default:
                    return this.$translate.instant('errorUnknown');
            }
        };
        SiteMembershipUpdateActionNotification.$inject = [
            '$state',
            '$translate',
            'ContentActionNotification'];
        return SiteMembershipUpdateActionNotification;
    })();
    VizPortal.SiteMembershipUpdateActionNotification = SiteMembershipUpdateActionNotification;
    VizPortal.Module.instance().service('SiteMembershipUpdateActionNotification', SiteMembershipUpdateActionNotification);
    // Notification For:
    // => single or multiple server admin update
    var ServerAdminUpdateActionNotification = (function () {
        function ServerAdminUpdateActionNotification($filter, $state, $translate, contentActionNotification) {
            this.$filter = $filter;
            this.$state = $state;
            this.$translate = $translate;
            this.contentActionNotification = contentActionNotification;
        }
        ServerAdminUpdateActionNotification.prototype.notify = function (result, users, newAdminState) {
            var _this = this;
            var successId;
            var errorId;
            if (newAdminState) {
                successId = 'serverAdminPromotionSuccess';
                errorId = 'serverAdminPromotionFailed';
            }
            else {
                successId = 'serverAdminDemotionSuccess';
                errorId = 'serverAdminDemotionFailed';
            }
            var successfulName = getSuccessfulName(users, result, this.$translate);
            var failingName = getFailingName(users, result, this.$translate);
            // create a notification object for result reporting
            var notification = VizPortal.MultipleResultNotificationOptions.create(new VizPortal.MultipleItemResult(users, result), {
                describeSuccessSummary: function (successCount) {
                    var messageArgs = {
                        USER_COUNT: successCount,
                        USER_NAME: VizPortal.L10n.elideIfLong(successfulName)
                    };
                    return _this.$translate.instant(successId, messageArgs, VizPortal.L10n.Interpolations.Count);
                },
                describeErrorSummary: function (errorCount) {
                    var messageArgs = {
                        USER_COUNT: errorCount,
                        USER_NAME: VizPortal.L10n.elideIfLong(failingName)
                    };
                    return _this.$translate.instant(errorId, messageArgs, VizPortal.L10n.Interpolations.Count);
                },
                describeErrorDetail: function (errorItem) {
                    return {
                        itemName: errorItem.item.username,
                        itemUrl: getUrlForUser(_this.$state, errorItem.item),
                        errorMessage: _this.errorMessageFor(errorItem)
                    };
                }
            });
            // pass the notification object to the service for displaying
            this.contentActionNotification.notify(notification);
        };
        ServerAdminUpdateActionNotification.prototype.errorMessageFor = function (errorItem) {
            switch (errorItem.error.code) {
                case VizPortal.UserErrorCode.UserInsufficientLicenses:
                    var translatedRole = this.$filter('siteRole')(VizPortal.ServerApi.SiteRoles.ServerAdministrator);
                    return this.$translate.instant('errorUserInsufficientLicenses_updateSiteRole', { SITE_ROLE: translatedRole });
                case VizPortal.CommonErrorCode.CallingUserInsufficientPermissions:
                    return this.$translate.instant('errorCallingUserInsufficientPermissions_serverAdminChange');
                case VizPortal.CommonErrorCode.SystemUserNotFound:
                    return this.$translate.instant('errorSystemUserNotFound', { USER_NAME: VizPortal.L10n.elideIfLong(errorItem.item.username) });
                case VizPortal.UserErrorCode.UserNotSupportedGuestOperation:
                    return this.$translate.instant('errorUserNotSupportedGuestOperation');
                case VizPortal.UserErrorCode.UserNotSupportedSelfOperation:
                    return this.$translate.instant('errorUserNotSupportedSelfOperation');
                case VizPortal.UserErrorCode.UserInsufficientSiteQuota:
                    return this.$translate.instant('errorUserInsufficientSiteQuota');
                default:
                    return this.$translate.instant('errorUnknown');
            }
        };
        ServerAdminUpdateActionNotification.$inject = [
            '$filter',
            '$state',
            '$translate',
            'ContentActionNotification'];
        return ServerAdminUpdateActionNotification;
    })();
    VizPortal.ServerAdminUpdateActionNotification = ServerAdminUpdateActionNotification;
    VizPortal.Module.instance().service('ServerAdminUpdateActionNotification', ServerAdminUpdateActionNotification);
    // Notification For:
    // => group membership for users
    var GroupMembershipUpdateActionNotification = (function () {
        function GroupMembershipUpdateActionNotification($state, $translate, contentActionNotification) {
            this.$state = $state;
            this.$translate = $translate;
            this.contentActionNotification = contentActionNotification;
        }
        GroupMembershipUpdateActionNotification.prototype.notify = function (result, users, addedToGroupCount, addedToGroupName, removedFromGroupCount, removedFromGroupName) {
            var _this = this;
            var notification;
            if (result.errors && result.errors.length && result.errors[0].code === VizPortal.CommonErrorCode.GroupNotFound) {
                // TODO: how can we determine if the "to" group or the "from" group (or both) are not found?
                notification = {
                    errorSummary: this.$translate.instant('errorGroupNotFound', {
                        ITEM_NAME: VizPortal.L10n.elideIfLong(addedToGroupName || removedFromGroupName)
                    })
                };
            }
            else {
                var successId;
                var errorId;
                var messageArgs = {
                    USER_NAME: VizPortal.L10n.elideIfLong(nameFor(users.first(), this.$translate))
                };
                // determine result notification strings and args
                if (addedToGroupCount > 0) {
                    if (removedFromGroupCount > 0) {
                        successId = 'groupMembershipChanged_usersAddedToGroupsAndRemovedFromGroups';
                        errorId = 'groupMembershipChanged_usersAddedToGroupsAndRemovedFromGroups_failed';
                        angular.extend(messageArgs, {
                            ADD_COUNT: addedToGroupCount,
                            ADD_NAME: VizPortal.L10n.elideIfLong(addedToGroupName),
                            REMOVE_COUNT: removedFromGroupCount,
                            REMOVE_NAME: VizPortal.L10n.elideIfLong(removedFromGroupName)
                        });
                    }
                    else {
                        successId = 'groupMembershipChanged_usersAddedToGroups';
                        errorId = 'groupMembershipChanged_usersAddedToGroups_failed';
                        angular.extend(messageArgs, {
                            ADD_COUNT: addedToGroupCount,
                            ADD_NAME: VizPortal.L10n.elideIfLong(addedToGroupName)
                        });
                    }
                }
                else {
                    successId = 'groupMembershipChanged_usersRemovedFromGroups';
                    errorId = 'groupMembershipChanged_usersRemovedFromGroups_failed';
                    angular.extend(messageArgs, {
                        REMOVE_COUNT: removedFromGroupCount,
                        REMOVE_NAME: VizPortal.L10n.elideIfLong(removedFromGroupName)
                    });
                }
                // TODO: this doesn't seem right - do the errors apply to users or groups? I don't think
                // we can calculate the success count if errors can apply to groups.
                notification = VizPortal.MultipleResultNotificationOptions.create(new VizPortal.MultipleItemResult(users, result), {
                    describeSuccessSummary: function (successCount) {
                        angular.extend(messageArgs, { USER_COUNT: successCount });
                        return _this.$translate.instant(successId, messageArgs, VizPortal.L10n.Interpolations.Count);
                    },
                    describeErrorSummary: function (errorCount) {
                        angular.extend(messageArgs, { USER_COUNT: errorCount });
                        return _this.$translate.instant(errorId, messageArgs, VizPortal.L10n.Interpolations.Count);
                    },
                    describeErrorDetail: function (errorItem) {
                        return {
                            itemName: errorItem.item.username,
                            itemUrl: getUrlForUser(_this.$state, errorItem.item),
                            errorMessage: _this.errorMessageFor(errorItem)
                        };
                    }
                });
            }
            // pass the notification object to the service for displaying
            this.contentActionNotification.notify(notification);
        };
        GroupMembershipUpdateActionNotification.prototype.errorMessageFor = function (errorItem) {
            switch (errorItem.error.code) {
                case VizPortal.GroupErrorCode.InvalidGroupMembershipUpdate:
                    return this.$translate.instant('errorInvalidAllUsersGroupMembershipUpdate');
                case VizPortal.CommonErrorCode.SiteUserNotFound:
                    return this.$translate.instant('errorUserNotFound');
                case VizPortal.CommonErrorCode.SystemUserNotFound:
                    return this.$translate.instant('errorSystemUserNotFound', { USER_NAME: VizPortal.L10n.elideIfLong(errorItem.item.username) });
                case VizPortal.CommonErrorCode.GroupNotFound:
                    return this.$translate.instant('errorGroupNotFound');
                default:
                    return this.$translate.instant('errorUnknown');
            }
        };
        GroupMembershipUpdateActionNotification.$inject = [
            '$state',
            '$translate',
            'ContentActionNotification'];
        return GroupMembershipUpdateActionNotification;
    })();
    VizPortal.GroupMembershipUpdateActionNotification = GroupMembershipUpdateActionNotification;
    VizPortal.Module.instance().service('GroupMembershipUpdateActionNotification', GroupMembershipUpdateActionNotification);
    // helpers
    var nameFor = function (user, $translate) {
        return $translate.instant('userActionNameFormattedForToast', { DISPLAY_NAME: VizPortal.L10n.elideIfLong(user.displayName), USER_NAME: VizPortal.L10n.elideIfLong(user.username) });
    };
    // get name of a successful item
    // returns empty string if no items successful
    var getSuccessfulName = function (users, result, $translate) {
        var successfulItem = getSuccessfulItem(users, result);
        return successfulItem ? nameFor(successfulItem, $translate) : "";
    };
    // get name of a failing item
    // returns empty string if no items failed
    var getFailingName = function (users, result, $translate) {
        var failingItem = getFailingItem(users, result);
        return failingItem ? nameFor(failingItem, $translate) : "";
    };
    // get a successful item, useful when there is only one item that is successful
    // returns undefined if no items successful
    var getSuccessfulItem = function (users, result) {
        return users.find(function (item) {
            var matchingError = undefined;
            if (!!result.errors) {
                matchingError = _.find(result.errors, function (error) {
                    return item.id === error.id;
                });
            }
            ;
            return !matchingError;
        });
    };
    // get a failing item, useful when there is only one item that is failing
    // returns undefined if no items failed
    var getFailingItem = function (users, result) {
        return users.find(function (item) {
            var matchingError = undefined;
            if (!!result.errors) {
                matchingError = _.find(result.errors, function (error) {
                    return item.id === error.id;
                });
            }
            ;
            return !!matchingError;
        });
    };
    // get the URL to the specified user's profile page
    var getUrlForUser = function (state, user) {
        if (user.username === 'guest' && user.domainName === 'local') {
            return null;
        }
        else {
            return state.href("main.site.user.workbooks", { username: user.username, domainName: user.domainName });
        }
    };
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../../common/components/checkboxes/CheckboxState.ts" />
/// <reference path="../helpers/Order.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../models/IApplyCancelButtons.ts" />
/// <reference path="../models/ColumnWidths.ts" />
/// <reference path="../models/OrderKeys.ts" />
/// <reference path="../resources/Groups.ts" />
/// <reference path="../resources/SiteUsers.ts" />
/// <reference path="../ServerApi/requests/GetGroupsRequest.ts" />
/// <reference path="../ServerApi/requests/GetUsersGroupMembershipRequest.ts" />
/// <reference path="../ServerApi/requests/UpdateUsersGroupMembershipRequest.ts" />
/// <reference path="../services/SliceableFactory.ts" />
/// <reference path="../services/UserActionNotification.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.GroupMembershipEvent = {
        MembershipChanged: "MembershipChanged"
    };
    VizPortal.GroupMembershipDialogFilters = {
        AllGroups: "groupMembershipAllGroups",
        AssignedGroups: "groupMembershipAssignedGroups",
        SearchResults: "groupMembershipSearchResults"
    };
    var GroupMembershipDialogCtrl = (function () {
        function GroupMembershipDialogCtrl($q, $scope, $translate, groupMembershipUpdateActionNotification, groups, server, SiteUsers, toaster, BrowserSupportService, sliceableFactory) {
            var _this = this;
            this.$q = $q;
            this.$translate = $translate;
            this.groupMembershipUpdateActionNotification = groupMembershipUpdateActionNotification;
            this.groups = groups;
            this.SiteUsers = SiteUsers;
            this.toaster = toaster;
            this.sliceableFactory = sliceableFactory;
            this.server = server;
            this.serverState = {};
            this.groupIdToGroup = {};
            this.clientChanges = {};
            this.scope = $scope;
            this.scope.busy = false;
            this.scope.needsAssignedGroupsRefresh = false;
            this.scope.sliceable = groups.all().withOrder(GroupMembershipDialogCtrl.ListOrder);
            this.scope.columnWidths = {
                getActual: this.getColumnWidths,
                getMin: this.getColumnWidths,
                hasPreferredWidths: function () { return true; }
            };
            this.uncheckedAssignedGroups = 0;
            this.scope.groupFilter = { selection: VizPortal.GroupMembershipDialogFilters.AllGroups };
            this.scope.lastGroupFilter = this.scope.groupFilter.selection;
            this.updateGroupFilters();
            this.scope.searchInput = { text: '' };
            var displayName = ($scope.users.size() > 0) ? $scope.users.first().displayName : '';
            this.scope.editGroupMembershipDescription =
                $translate.instant('editGroupMembershipDescription', { USER_COUNT: $scope.users.size(), USER_NAME: VizPortal.L10n.elideIfLong(displayName) }, VizPortal.L10n.Interpolations.Count);
            this.scope.isDirty = function () {
                return !_.isEmpty(_this.clientChanges);
            };
            // IApplyCancelButtons
            this.scope.applyCancelButtons = {
                applyString: $translate.instant("save"),
                cancelString: $translate.instant("cancel"),
                apply: function () { return _this.apply(); },
                cancel: function () { return _this.scope.dismiss(); },
                disableApply: function () { return (!_this.scope.isDirty() || _this.scope.busy); },
                disableCancel: function () { return _this.scope.busy; },
                isBusy: function () { return _this.scope.busy; }
            };
            this.scope.isGroupDirty = function (group) {
                return !!_this.clientChanges[group.id];
            };
            this.scope.checkboxClicked = function (group, colIndex) {
                if (group.isAllUsersGroup) {
                    return;
                }
                if (_this.scope.groupFilter.selection === VizPortal.GroupMembershipDialogFilters.AssignedGroups) {
                    //keep track of the checkbox changes made to the assigned groups
                    if (_this.scope.clientState[group.id] === VizPortal.CheckboxState.empty) {
                        _this.uncheckedAssignedGroups--;
                    }
                    else if (_this.scope.clientState[group.id] === VizPortal.CheckboxState.checked) {
                        _this.uncheckedAssignedGroups++;
                    }
                    //if the number of checked/mixed groups matches the original number, a refresh isn't needed.
                    _this.scope.needsAssignedGroupsRefresh = _this.uncheckedAssignedGroups > 0;
                }
                _this.scope.clientState[group.id] = VizPortal.CheckboxState.toggle(_this.scope.clientState[group.id]);
                // if the client & server state are equal, remove the group from client changes
                // to avoid sending no-op requests to the server.
                if (_this.isClientAndServerStateEqualFor(group.id)) {
                    delete _this.clientChanges[group.id];
                }
                else {
                    _this.clientChanges[group.id] = _this.scope.clientState[group.id];
                    _this.groupIdToGroup[group.id] = _this.clone(group);
                }
            };
            this.scope.submitSearch = function (searchText, $event) {
                if (!searchText) {
                    _this.scope.groupFilter.selection = _this.scope.lastGroupFilter;
                }
                else {
                    if (_this.scope.groupFilter.selection !== VizPortal.GroupMembershipDialogFilters.SearchResults) {
                        _this.scope.groupFilter.selection = VizPortal.GroupMembershipDialogFilters.SearchResults;
                    }
                    _this.scope.sliceable = groups.all().withFiltersAndOrder([VizPortal.Filter.search(searchText)], GroupMembershipDialogCtrl.ListOrder);
                }
                if (BrowserSupportService.isTouch() && $event) {
                    // blur to retract the keyboard when search is explicitly submitted
                    $($event.target).blur();
                }
            };
            this.scope.refreshAssignedGroups = function () {
                _this.scope.sliceable = _this.getAssignedGroupsList();
                _this.scope.needsAssignedGroupsRefresh = false;
            };
            this.scope.$watch('groupFilter.selection', function (newFilter) {
                _this.updateGroupFilters();
                if (newFilter === VizPortal.GroupMembershipDialogFilters.AssignedGroups) {
                    _this.scope.refreshAssignedGroups();
                }
                if (newFilter === VizPortal.GroupMembershipDialogFilters.AllGroups) {
                    _this.scope.sliceable = groups.all().withOrder(GroupMembershipDialogCtrl.ListOrder);
                }
                if (newFilter !== VizPortal.GroupMembershipDialogFilters.SearchResults) {
                    _this.scope.lastGroupFilter = newFilter;
                    _this.scope.searchInput.text = '';
                }
                _this.scope.needsAssignedGroupsRefresh = false;
            });
            this.getServerState(this.scope.users);
        }
        //The last column's width is dependent on whether or not the scroll bar is visible.
        GroupMembershipDialogCtrl.prototype.getColumnWidths = function (index) {
            //checkbox column and group name column are constant. These should be kept in sync with the design spec for the dialog.
            var widths = [27, 278];
            var calcMemberCountWidth = $('.tb-group-membership .tb-data-grid-body-background').width() - widths[0] - widths[1];
            return index === 2 ? calcMemberCountWidth : widths[index];
        };
        GroupMembershipDialogCtrl.prototype.updateGroupFilters = function () {
            var filters = [
                VizPortal.GroupMembershipDialogFilters.AllGroups,
                VizPortal.GroupMembershipDialogFilters.AssignedGroups
            ];
            if (this.scope.groupFilter.selection === VizPortal.GroupMembershipDialogFilters.SearchResults) {
                filters.push(VizPortal.GroupMembershipDialogFilters.SearchResults);
            }
            this.scope.groupFilters = filters;
        };
        GroupMembershipDialogCtrl.prototype.getAssignedGroupsList = function () {
            var _this = this;
            var groupsList = [];
            _.each(this.scope.clientState, function (checkboxState, groupId) {
                if (checkboxState !== VizPortal.CheckboxState.empty) {
                    groupsList.push(_this.groupIdToGroup[groupId]);
                }
            });
            this.uncheckedAssignedGroups = 0;
            return this.sliceableFactory.fromArray(groupsList.sort(function (groupA, groupB) {
                return groupA.name.localeCompare(groupB.name, VizPortal.L10n.language);
            }));
        };
        // true if either client & server state are both checked, or client state is empty and server state is null.
        // note: server state doesn't use empty for empty groups, because of pagnination -- we don't know how many
        // groups there might be, so we only track the ones that have relevant membership, and treat the nulls as empty.
        GroupMembershipDialogCtrl.prototype.isClientAndServerStateEqualFor = function (groupId) {
            return ((this.scope.clientState[groupId] === this.serverState[groupId])
                || (this.scope.clientState[groupId] === VizPortal.CheckboxState.empty && !this.serverState[groupId]));
        };
        GroupMembershipDialogCtrl.prototype.clone = function (group) {
            return { name: group.name, id: group.id, userCount: group.userCount,
                isAllUsersGroup: group.isAllUsersGroup, domainName: group.domainName };
        };
        GroupMembershipDialogCtrl.prototype.getServerState = function (users) {
            var _this = this;
            var userIds = users.keys();
            if (userIds && userIds.length > 0) {
                // request group membership info from the server.
                this.server.sendRequest(new VizPortal.ServerApi.GetUsersGroupMembershipRequest({ userIds: userIds }))
                    .then(function (result) {
                    // count how many selected users belong to each group.
                    // e.g. {allUsers: 3, bigGroup: 2, ...}
                    var groupMembershipCounts = _.countBy(result.members, function (user) { return user.groupId; });
                    // for each group, compute the checkbox state.
                    // e.g. {allUsers: 'checked', bigGroup: 'mixed', ...}
                    _this.serverState = {};
                    var selectedUsersCount = _this.scope.users.size();
                    _.each(groupMembershipCounts, function (memberCount, groupId) {
                        _this.serverState[groupId] = _this.stringForGroupState(memberCount, selectedUsersCount);
                    });
                    _this.scope.clientState = _.clone(_this.serverState);
                    _.each(_this.clientChanges, function (clientGroupState, groupId) {
                        _this.scope.clientState[groupId] = clientGroupState;
                    });
                    _.each(result.groups, function (group) {
                        _this.groupIdToGroup[group.id] = group;
                    });
                });
            }
        };
        GroupMembershipDialogCtrl.prototype.apply = function () {
            var _this = this;
            var users = _.clone(this.scope.users); // clone for independence from further selection
            var userIds = users.keys();
            var params = {
                userIds: userIds,
                addToGroupIds: [],
                removeFromGroupIds: []
            };
            // build up input params for the request: group IDs to add to & group IDs to remove from.
            _.each(this.clientChanges, function (clientGroupState, groupId) {
                if (clientGroupState === VizPortal.CheckboxState.checked) {
                    params.addToGroupIds.push(groupId);
                }
                if (clientGroupState === VizPortal.CheckboxState.empty) {
                    params.removeFromGroupIds.push(groupId);
                }
            });
            if (this.isValidParamsForUpdate(params)) {
                this.scope.busy = true;
                // send the update to the server.
                return this.SiteUsers.updateUsersGroupMembership(params.userIds, params.addToGroupIds, params.removeFromGroupIds).then(function (result) {
                    var addedToGroupName = '';
                    if (params.addToGroupIds.length > 0) {
                        addedToGroupName = _this.groupIdToGroup[params.addToGroupIds[0]].name;
                    }
                    var removedFromGroupName = '';
                    if (params.removeFromGroupIds.length > 0) {
                        removedFromGroupName = _this.groupIdToGroup[params.removeFromGroupIds[0]].name;
                    }
                    // show toast
                    _this.groupMembershipUpdateActionNotification.notify(result, users, params.addToGroupIds.length, addedToGroupName, params.removeFromGroupIds.length, removedFromGroupName);
                    _this.scope.$emit(VizPortal.GroupMembershipEvent.MembershipChanged);
                    _this.scope.close(result);
                });
            }
            return this.$q.when({});
        };
        // Given params for making an UpdateUsersGroupMembership request
        // returns true iff there's at least one user and at least one group to add or remove the user from
        GroupMembershipDialogCtrl.prototype.isValidParamsForUpdate = function (params) {
            return (params.userIds.length > 0 && (params.addToGroupIds.length > 0 || params.removeFromGroupIds.length > 0));
        };
        // Given the number of members in a group, and the number of selected users,
        // returns a string corresponding to the checkbox state.
        GroupMembershipDialogCtrl.prototype.stringForGroupState = function (memberCount, selectedUsersCount) {
            if (memberCount === selectedUsersCount) {
                return VizPortal.CheckboxState.checked;
            }
            else if (memberCount > 0) {
                return VizPortal.CheckboxState.mixed;
            }
            else {
                return VizPortal.CheckboxState.empty;
            }
        };
        GroupMembershipDialogCtrl.$inject = [
            '$q',
            '$scope',
            '$translate',
            'GroupMembershipUpdateActionNotification',
            'Groups',
            'ServerService',
            'SiteUsers',
            'ToasterService',
            'BrowserSupportService',
            'SliceableFactory'
        ];
        GroupMembershipDialogCtrl.ListOrder = [VizPortal.Order.asc(VizPortal.OrderKeys.name)];
        return GroupMembershipDialogCtrl;
    })();
    VizPortal.GroupMembershipDialogCtrl = GroupMembershipDialogCtrl;
    VizPortal.Module.instance().controller('GroupMembershipDialogCtrl', GroupMembershipDialogCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../controllers/GroupMembershipDialogCtrl.ts" />
/// <reference path="../ServerApi/types/ISiteUser.ts" />
var VizPortal;
(function (VizPortal) {
    var EditGroupMembershipAction = (function () {
        function EditGroupMembershipAction(modalService) {
            this.modalService = modalService;
        }
        // TODO: use ConfimActionDialog
        EditGroupMembershipAction.prototype.showEditGroupMembershipDialog = function (users, context) {
            var scope = context.scope.$new(true);
            scope.users = users;
            var dialogInstance = this.modalService.open({
                scope: scope,
                templateUrl: 'groupMembershipDialog.html',
                size: VizPortal.ModalSize.fitToContent,
                controller: VizPortal.GroupMembershipDialogCtrl
            });
            return dialogInstance.result.fin(function () { return scope.$destroy(); });
        };
        EditGroupMembershipAction.$inject = ['ModalService'];
        return EditGroupMembershipAction;
    })();
    VizPortal.EditGroupMembershipAction = EditGroupMembershipAction;
    VizPortal.Module.instance().service('EditGroupMembershipAction', EditGroupMembershipAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/types/ISiteUser.ts" />
var VizPortal;
(function (VizPortal) {
    var RemoveUsersFromSiteAction = (function () {
        function RemoveUsersFromSiteAction($state, $translate, ConfirmActionDialog, userActionNotification, serverService, SiteUsers, toaster) {
            this.$state = $state;
            this.$translate = $translate;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.userActionNotification = userActionNotification;
            this.serverService = serverService;
            this.SiteUsers = SiteUsers;
            this.toaster = toaster;
        }
        RemoveUsersFromSiteAction.prototype.showRemoveUsersFromSiteDialog = function (siteUsersToRemove, context) {
            var _this = this;
            var dialogBody = this.$translate.instant('confirmRemoveUsersFromSite', {
                USER_NAME: VizPortal.L10n.elideIfLong(siteUsersToRemove.first().displayName),
                USER_COUNT: siteUsersToRemove.size(),
                SITE_NAME: VizPortal.L10n.elideIfLong(this.serverService.sessionSiteName())
            }, VizPortal.L10n.Interpolations.Count);
            var dialogInstance = this.ConfirmActionDialog.open({
                scope: context.scope,
                title: this.$translate.instant('remove'),
                bodyText: dialogBody,
                actionName: this.$translate.instant('confirmRemoveButton', {
                    ITEM_COUNT: siteUsersToRemove.size()
                }, VizPortal.L10n.Interpolations.Count),
                action: function () { return _this.SiteUsers.deleteUsers(siteUsersToRemove.keys()); },
                isDeleteAction: true
            });
            dialogInstance.result.then(function (result) {
                var params = {
                    users: siteUsersToRemove,
                    results: result.results,
                    errors: result.errors,
                    successCode: '13'
                };
                _this.userActionNotification.notify(params);
            });
            return dialogInstance.result;
        };
        RemoveUsersFromSiteAction.$inject = ['$state',
            '$translate',
            'ConfirmActionDialog',
            'UserActionNotification',
            'ServerService',
            'SiteUsers',
            'ToasterService'];
        return RemoveUsersFromSiteAction;
    })();
    VizPortal.RemoveUsersFromSiteAction = RemoveUsersFromSiteAction;
    VizPortal.Module.instance().service('RemoveUsersFromSiteAction', RemoveUsersFromSiteAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var SetSiteUsersSiteRoleAction = (function () {
        function SetSiteUsersSiteRoleAction($translate, $q, confirmActionDialog, serverAdminUpdateActionNotification, serverService, siteRolesUpdateActionNotification, siteRoles, siteUsers, toaster) {
            this.$translate = $translate;
            this.$q = $q;
            this.confirmActionDialog = confirmActionDialog;
            this.serverAdminUpdateActionNotification = serverAdminUpdateActionNotification;
            this.serverService = serverService;
            this.siteRolesUpdateActionNotification = siteRolesUpdateActionNotification;
            this.siteRoles = siteRoles;
            this.siteUsers = siteUsers;
            this.toaster = toaster;
        }
        SetSiteUsersSiteRoleAction.prototype.showSetSiteUsersSiteRoleDialog = function (siteUsersToSet, context) {
            var _this = this;
            var dialogScope = context.scope.$new();
            dialogScope.siteRole = (siteUsersToSet.size() === 1) ? siteUsersToSet.first().siteRole : VizPortal.ServerApi.SiteRoles.Unlicensed;
            dialogScope.siteRoleOptions = this.siteRoles.optionsForCurrentUser();
            dialogScope.setSiteRole = function (role) {
                dialogScope.siteRole = role;
            };
            dialogScope.description = this.$translate.instant('confirmSetUsersSiteRoleDesc', {
                USER_NAME: VizPortal.L10n.elideIfLong(siteUsersToSet.first().displayName),
                USER_COUNT: siteUsersToSet.size()
            }, VizPortal.L10n.Interpolations.Count);
            var dialogInstance = this.confirmActionDialog.open({
                title: this.$translate.instant('confirmSetUsersSiteRoleTitle'),
                bodyTemplateUrl: 'confirmActionDialogInputRole.html',
                scope: dialogScope,
                confirmDisabled: function () { return false; },
                actionName: this.$translate.instant('confirmSetUsersSiteRoleButton', {
                    ITEM_COUNT: siteUsersToSet.size()
                }, VizPortal.L10n.Interpolations.Count),
                action: function (dialogInstance) { return _this.setSiteUsersSiteRoles(siteUsersToSet, dialogScope.siteRole); }
            });
            dialogInstance.result.fin(function () { return dialogScope.$destroy(); });
            return dialogInstance.result;
        };
        SetSiteUsersSiteRoleAction.prototype.setSiteUsersSiteRoles = function (selectedUsers, siteRole) {
            var _this = this;
            var users = selectedUsers.clone();
            if (siteRole === VizPortal.ServerApi.SiteRoles.ServerAdministrator) {
                return this.makeUsersServerAdmins(users)
                    .then(function (showToastForPromotedAdmins) {
                    return showToastForPromotedAdmins();
                });
            }
            else {
                // demote server admins
                // update site roles
                // show toast for both after complete to avoid toast showing up behind dialog.
                var showToastForDemotedAdmins = function () { };
                var serverAdmins = users.filter(function (user) { return user.siteRole === VizPortal.ServerApi.SiteRoles.ServerAdministrator; });
                return this.demoteServerAdminsNoDelay(serverAdmins)
                    .then(function (result) {
                    // don't try update site role for admins that did not get demoted
                    if (!!result.errors) {
                        _.each(result.errors, function (error) {
                            users.remove(users.get(error.id));
                        });
                    }
                    showToastForDemotedAdmins = (function () { return _this.serverAdminUpdateActionNotification.notify(result, serverAdmins, false); });
                    return _this.updateUsersSiteRole(users, siteRole);
                })
                    .then(function (showToastForUpdatedUsersSiteRoles) {
                    showToastForDemotedAdmins();
                    // we might not have any users whose roles were updated, if they were removed from errors in updating admin status.
                    // if we don't have any users whose roles were updated, we'll only show the demoted admins toast.
                    if (users.size() > 0) {
                        showToastForUpdatedUsersSiteRoles();
                    }
                });
            }
        };
        // if any selected users are server admins && current user is server admin, demote!
        SetSiteUsersSiteRoleAction.prototype.demoteServerAdminsNoDelay = function (serverAdmins) {
            if (serverAdmins.size() === 0) {
                return this.$q.when({});
            }
            else if (!this.serverService.isSessionServerAdmin()) {
                // hand craft an IResult with errors
                var result = { errors: [] };
                serverAdmins.each(function (user) {
                    result.errors.push({
                        id: user.id,
                        code: VizPortal.CommonErrorCode.CallingUserInsufficientPermissions
                    });
                });
                return this.$q.when(result);
            }
            else {
                return this.siteUsers.updateServerAdminStatusNoDelay(serverAdmins.keys(), false);
            }
        };
        SetSiteUsersSiteRoleAction.prototype.updateUsersSiteRole = function (users, siteRole) {
            var _this = this;
            return this.siteUsers.updateUsersSiteRole(users.keys(), siteRole).then(function (result) {
                // returns a function that shows toast for the action
                return function () { return _this.siteRolesUpdateActionNotification.notify(result, users, siteRole); };
            });
        };
        // makes the users server admins and shows toast
        SetSiteUsersSiteRoleAction.prototype.makeUsersServerAdmins = function (users) {
            var _this = this;
            return this.siteUsers.updateServerAdminStatusAndDelay(users.keys(), true).then(function (result) {
                // returns a function to show toast for the action
                return function () { return _this.serverAdminUpdateActionNotification.notify(result, users, true); };
            });
        };
        SetSiteUsersSiteRoleAction.$inject = ['$translate',
            '$q',
            'ConfirmActionDialog',
            'ServerAdminUpdateActionNotification',
            'ServerService',
            'SiteRolesUpdateActionNotification',
            'SiteRoles',
            'SiteUsers',
            'ToasterService'];
        return SetSiteUsersSiteRoleAction;
    })();
    VizPortal.SetSiteUsersSiteRoleAction = SetSiteUsersSiteRoleAction;
    VizPortal.Module.instance().service('SetSiteUsersSiteRoleAction', SetSiteUsersSiteRoleAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var UpdateUserAuthSettingsRequest = (function (_super) {
            __extends(UpdateUserAuthSettingsRequest, _super);
            function UpdateUserAuthSettingsRequest(userIds, authSetting) {
                _super.call(this, 'updateUserAuthSettings', { userIds: userIds, authSetting: authSetting });
            }
            return UpdateUserAuthSettingsRequest;
        })(ServerApi.Request);
        ServerApi.UpdateUserAuthSettingsRequest = UpdateUserAuthSettingsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/types/ISiteUser.ts" />
/// <reference path="../ServerApi/requests/UpdateUserAuthSettingsRequest.ts" />
var VizPortal;
(function (VizPortal) {
    var UpdateUserAuthenticationAction = (function () {
        function UpdateUserAuthenticationAction(modal) {
            this.modal = modal;
        }
        UpdateUserAuthenticationAction.prototype.showUpdateUserAuthenticationDialog = function (siteUsersToUpdate, context) {
            var scope = context.scope.$new();
            scope.siteUsersToUpdate = siteUsersToUpdate;
            // dialogScope.siteUsersToUpdate = siteUsersToUpdate;
            var dialogInstance = this.modal.open({
                scope: scope,
                templateUrl: 'updateUserAuthenticationDialog.html',
                controller: UpdateUserAuthenticationCtrl
            });
            dialogInstance.result.fin(function () { return scope.$destroy(); });
            return dialogInstance.result;
        };
        UpdateUserAuthenticationAction.$inject = ['ModalService'];
        return UpdateUserAuthenticationAction;
    })();
    VizPortal.UpdateUserAuthenticationAction = UpdateUserAuthenticationAction;
    VizPortal.Module.instance().service('UpdateUserAuthenticationAction', UpdateUserAuthenticationAction);
    var UpdateUserAuthenticationCtrl = (function () {
        function UpdateUserAuthenticationCtrl($scope, $translate, toaster, server) {
            this.$scope = $scope;
            this.$translate = $translate;
            this.toaster = toaster;
            this.server = server;
            $scope.defaultDisabled = _.all($scope.siteUsersToUpdate.toArray(), function (user) { return user.authSetting === VizPortal.ServerApi.SiteUserAuthSetting.Default || !user.authSetting; });
            $scope.samlDisabled = !server.thirdPartyAuthState().enabled
                || _.all($scope.siteUsersToUpdate.toArray(), function (user) { return user.authSetting === VizPortal.ServerApi.SiteUserAuthSetting.Saml; });
            var confirm = function (authSetting) {
                $scope.busy = true;
                var userIds = $scope.siteUsersToUpdate.keys();
                server
                    .sendRequest(new VizPortal.ServerApi.UpdateUserAuthSettingsRequest(userIds, authSetting))
                    .then(function (result) {
                    $scope.busy = false;
                    if (result.errors && result.errors.length) {
                        toaster.pop({ type: VizPortal.ToastType.Error, text: $translate.instant('unexpectedError') });
                        return;
                    }
                    $scope.close(result);
                }, function (result) {
                    $scope.busy = false;
                    toaster.pop({ type: VizPortal.ToastType.Error, text: $translate.instant('unexpectedError') });
                });
            };
            $scope.confirmDefault = function () { return confirm(VizPortal.ServerApi.SiteUserAuthSetting.Default); };
            $scope.confirmSAML = function () { return confirm(VizPortal.ServerApi.SiteUserAuthSetting.Saml); };
        }
        UpdateUserAuthenticationCtrl.$inject = [
            '$scope',
            '$translate',
            'ToasterService',
            'ServerService'
        ];
        return UpdateUserAuthenticationCtrl;
    })();
    VizPortal.Module.instance().controller('UpdateUserAuthenticationCtrl', UpdateUserAuthenticationCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/ActionHelpers.ts" />
/// <reference path="../services/EditGroupMembershipAction.ts" />
/// <reference path="../services/RemoveUsersFromSiteAction.ts" />
/// <reference path="../services/SetSiteUsersSiteRoleAction.ts" />
/// <reference path="../services/UpdateUserAuthenticationAction.ts" />
/// <reference path="../models/IListScope.ts" />
/// <reference path="../models/ISiteUserInfo.ts" />
var VizPortal;
(function (VizPortal) {
    var SiteUsersActions = (function () {
        function SiteUsersActions(EditGroupMembershipAction, RemoveUsersFromSiteAction, SetSiteUsersSiteRoleAction, serverService, UpdateUserAuthenticationAction) {
            this.EditGroupMembershipAction = EditGroupMembershipAction;
            this.RemoveUsersFromSiteAction = RemoveUsersFromSiteAction;
            this.SetSiteUsersSiteRoleAction = SetSiteUsersSiteRoleAction;
            this.serverService = serverService;
            this.UpdateUserAuthenticationAction = UpdateUserAuthenticationAction;
            this.siteUsersActionDefinition = [
                this.editUsersGroupMembershipAction(),
                this.setSiteUsersSiteRoleAction(),
                this.updateUserAuthenticationAction(),
                this.removeUsersFromSiteAction()
            ];
        }
        // Public API
        SiteUsersActions.prototype.getSiteUsersActionsButtons = function () {
            return this.siteUsersActionDefinition;
        };
        // action button factory
        SiteUsersActions.prototype.editUsersGroupMembershipAction = function () {
            var _this = this;
            return {
                name: 'groupMembership',
                translate: 'groupMembership_action',
                isAvailable: function (items) { return items.size() > 0; },
                execute: function (items, context) {
                    var scope = context.scope;
                    _this.EditGroupMembershipAction.showEditGroupMembershipDialog(items, context)
                        .then(function (result) {
                        if (result) {
                            VizPortal.ActionHelpers.deselectNotFound(scope.selectedItems, result, VizPortal.CommonErrorCode.SiteUserNotFound);
                            scope.refreshItems();
                        }
                    });
                }
            };
        };
        SiteUsersActions.prototype.removeUsersFromSiteAction = function () {
            var _this = this;
            var isAvailable = this.serverService.canSessionUserManageUsers();
            return {
                name: 'remove',
                translate: 'remove_action',
                isAvailable: function (items) { return _this.canRemove(items); },
                execute: function (items, context) {
                    var scope = context.scope;
                    _this.RemoveUsersFromSiteAction.showRemoveUsersFromSiteDialog(items, context)
                        .then(function (result) {
                        if (result) {
                            VizPortal.ActionHelpers.deselectAllExceptErrors(scope.selectedItems, result, VizPortal.CommonErrorCode.SiteUserNotFound);
                            scope.refreshItems();
                        }
                    });
                }
            };
        };
        SiteUsersActions.prototype.updateUserAuthenticationAction = function () {
            var _this = this;
            return {
                name: 'authentication',
                translate: 'authentication_action',
                isAvailable: function (items) { return _this.canEditAuthenticationSetting(items); },
                execute: function (items, context) {
                    var scope = context.scope;
                    _this.UpdateUserAuthenticationAction.showUpdateUserAuthenticationDialog(items, context)
                        .then(function (result) {
                        VizPortal.ActionHelpers.deselectNotFound(scope.selectedItems, result, VizPortal.CommonErrorCode.SiteUserNotFound);
                        scope.refreshItems();
                        _this.serverService.refreshSessionInfo();
                    });
                }
            };
        };
        SiteUsersActions.prototype.canEditAuthenticationSetting = function (items) {
            return !items.isEmpty() && this.serverService.isThirdPartyAuthEditable();
        };
        // $note-ltan-1-28-2015
        // Used by SiteUsersPlace and GroupUsersSubplace
        SiteUsersActions.prototype.setSiteUsersSiteRoleAction = function () {
            var _this = this;
            return {
                name: 'siteRole',
                translate: 'siteRole_action',
                isAvailable: function (items) { return _this.canChangeRole(items); },
                execute: function (items, context) {
                    var scope = context.scope;
                    _this.SetSiteUsersSiteRoleAction.showSetSiteUsersSiteRoleDialog(items, context)
                        .then(function (result) {
                        VizPortal.ActionHelpers.deselectNotFound(scope.selectedItems, result, VizPortal.CommonErrorCode.SiteUserNotFound);
                        scope.refreshItems();
                    });
                }
            };
        };
        // Determine if change role action is allowed.
        // - Disallow if all selected users are server admins unless the current user is a Server Admin
        // - Disallow if the only selection is a guest user.
        // - Disallow site admins from attempting to change role of a set of all server admins
        // - Disallow if session user cannot manage users
        SiteUsersActions.prototype.canChangeRole = function (users) {
            return ((users.size() > 0)
                && !SiteUsersActions.isSingleSelectAndGuest(users)
                && (!SiteUsersActions.areAllSelectedUsersServerAdmins(users) || this.serverService.isSessionServerAdmin()))
                && this.serverService.canSessionUserManageUsers();
        };
        // Determine if remove users action is allowed.
        // - Disallow if session user is not allowed (per server setting) to manage users.
        // - Disallow if the only selection is a guest user.
        // - Disallow site admins from attempting to remove a set of all server admins
        SiteUsersActions.prototype.canRemove = function (users) {
            var canManageUsers = this.serverService.canSessionUserManageUsers();
            return ((users.size() > 0)
                && canManageUsers
                && !SiteUsersActions.isSingleSelectAndGuest(users)
                && (!SiteUsersActions.areAllSelectedUsersServerAdmins(users) || this.serverService.isSessionServerAdmin()));
        };
        SiteUsersActions.isSingleSelectAndGuest = function (users) {
            return (users.size() === 1 && users.first().siteRole === VizPortal.ServerApi.SiteRoles.Guest);
        };
        SiteUsersActions.areAllSelectedUsersServerAdmins = function (users) {
            return _.every(users.toArray(), function (user) {
                // return true if every user is server admin
                return (user.siteRole === VizPortal.ServerApi.SiteRoles.ServerAdministrator);
            });
        };
        SiteUsersActions.$inject = [
            'EditGroupMembershipAction',
            'RemoveUsersFromSiteAction',
            'SetSiteUsersSiteRoleAction',
            'ServerService',
            'UpdateUserAuthenticationAction'
        ];
        return SiteUsersActions;
    })();
    VizPortal.SiteUsersActions = SiteUsersActions;
    ;
    VizPortal.Module.instance().service('SiteUsersActions', SiteUsersActions);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../models/IGroupDetailsInfo.ts" />
/// <reference path="../models/ISiteUserInfo.ts" />
/// <reference path="ActiveDirectoryGroupAction.ts" />
/// <reference path="UpdateGroupsMinimumSiteRoleAction.ts" />
/// <reference path="SiteUsersActions.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.GroupUsersEvent = {
        usersRemoved: "usersRemoved",
        usersAdded: "usersAdded"
    };
    var GroupActions = (function () {
        function GroupActions($q, $translate, ActiveDirectoryGroupAction, AddUsersToGroupAction, CreateGroupDialogAction, DeleteGroupAction, UpdateGroupsMinimumSiteRoleAction, EditGroupMembershipAction, RemoveUsersFromGroupAction, SiteUsersActions, UpdateGroupNameAction) {
            this.$q = $q;
            this.$translate = $translate;
            this.ActiveDirectoryGroupAction = ActiveDirectoryGroupAction;
            this.AddUsersToGroupAction = AddUsersToGroupAction;
            this.CreateGroupDialogAction = CreateGroupDialogAction;
            this.DeleteGroupAction = DeleteGroupAction;
            this.UpdateGroupsMinimumSiteRoleAction = UpdateGroupsMinimumSiteRoleAction;
            this.EditGroupMembershipAction = EditGroupMembershipAction;
            this.RemoveUsersFromGroupAction = RemoveUsersFromGroupAction;
            this.SiteUsersActions = SiteUsersActions;
            this.UpdateGroupNameAction = UpdateGroupNameAction;
            this.groupsActionDefinition = [
                this.syncGroupsAction(),
                this.updateGroupNameAction(),
                this.setGroupSiteRoleAction(),
                this.deleteGroupAction()
            ];
            this.groupUsersActionDefinition = [
                this.editUsersGroupMembershipAction(),
                this.SiteUsersActions.setSiteUsersSiteRoleAction(),
                this.removeUsersFromGroupAction()
            ];
            this.allUsersGroupUsersActionDefinition = [
                this.SiteUsersActions.setSiteUsersSiteRoleAction()
            ];
        }
        // public api
        GroupActions.prototype.getGroupsActionButtons = function () {
            return this.groupsActionDefinition;
        };
        GroupActions.prototype.getGroupUsersActionButtons = function (isAllUsersGroup) {
            return isAllUsersGroup ? this.allUsersGroupUsersActionDefinition : this.groupUsersActionDefinition;
        };
        GroupActions.prototype.createGroup = function (dialogScope) {
            return this.CreateGroupDialogAction.showCreateGroupDialog(dialogScope);
        };
        GroupActions.prototype.deleteGroup = function (group, dialogScope) {
            var groups = new VizPortal.Set(function (group) { return group.id; });
            groups.add(group);
            return this.DeleteGroupAction.showDeleteGroupDialog(groups, dialogScope);
        };
        GroupActions.prototype.addUsersToGroup = function (group) {
            return this.AddUsersToGroupAction.showAddUsersToGroupDialog(group);
        };
        GroupActions.prototype.renameGroup = function (group, dialogScope) {
            return this.UpdateGroupNameAction.showUpdateGroupNameDialog(group, dialogScope);
        };
        GroupActions.prototype.syncAdGroup = function (group, dialogScope) {
            return this.ActiveDirectoryGroupAction.showSyncAdGroupDialog(group, dialogScope.$new(true));
        };
        // action button factories
        GroupActions.prototype.removeUsersFromGroupAction = function () {
            var _this = this;
            return {
                name: 'remove',
                translate: 'remove_action',
                isAvailable: function (items) { return items.size() > 0; },
                execute: function (items, context) {
                    var scope = context.scope;
                    _this.RemoveUsersFromGroupAction.showRemoveUsersFromGroupDialog(items, scope.group).then(function (result) {
                        if (result) {
                            VizPortal.ActionHelpers.deselectAllExceptErrors(scope.selectedItems, result, VizPortal.CommonErrorCode.SiteUserNotFound);
                            scope.refreshItems();
                            scope.$emit(VizPortal.GroupUsersEvent.usersRemoved);
                        }
                    });
                }
            };
        };
        // There is an identical action definition in SiteUsersActions.
        // This one a bit different in that it clears selection in case some users get removed from
        // the group (deselectAllExceptErrors). That way we won't have hidden selection lurking around.
        GroupActions.prototype.editUsersGroupMembershipAction = function () {
            var _this = this;
            return {
                name: 'groupMembership',
                translate: 'groupMembership_action',
                isAvailable: function (items) { return items.size() > 0; },
                execute: function (items, context) {
                    var scope = context.scope;
                    _this.EditGroupMembershipAction.showEditGroupMembershipDialog(items, context)
                        .then(function (result) {
                        if (result) {
                            VizPortal.ActionHelpers.deselectAllExceptErrors(scope.selectedItems, result, VizPortal.CommonErrorCode.SiteUserNotFound);
                            scope.refreshItems();
                        }
                    });
                }
            };
        };
        GroupActions.prototype.setGroupSiteRoleAction = function () {
            var _this = this;
            return {
                name: 'siteRole',
                translate: 'minimumSiteRole_action',
                isAvailable: function (items) { return items.size() > 0; },
                isDisabled: function (items) { return items.size() === 1 && !_this.isActiveDirectoryGroup(items.first()); },
                execute: function (items, context) {
                    var scope = context.scope;
                    _this.UpdateGroupsMinimumSiteRoleAction.showUpdateGroupsMinimumSiteRoleDialog(items, context)
                        .then(function (result) {
                        VizPortal.ActionHelpers.deselectNotFound(scope.selectedItems, result, VizPortal.CommonErrorCode.GroupNotFound);
                        scope.refreshItems();
                    });
                }
            };
        };
        GroupActions.prototype.deleteGroupAction = function () {
            var _this = this;
            return {
                name: 'delete',
                translate: 'delete_action',
                isAvailable: function (items) { return items.size() > 0; },
                isDisabled: function (items) { return items.size() === 1 && !_this.isDeletable(items.first()); },
                execute: function (items, context) {
                    var scope = context.scope;
                    _this.DeleteGroupAction.showDeleteGroupDialog(items, scope).then(function (result) {
                        if (result) {
                            VizPortal.ActionHelpers.deselectAllExceptErrors(scope.selectedItems, result, VizPortal.CommonErrorCode.GroupNotFound);
                            scope.refreshItems();
                        }
                    });
                }
            };
        };
        GroupActions.prototype.updateGroupNameAction = function () {
            var _this = this;
            return {
                name: 'rename',
                translate: 'rename_action',
                isAvailable: function (items) { return items.size() > 0; },
                isDisabled: function (items) { return items.size() !== 1 || !_this.isRenamable(items.first()); },
                execute: function (items, context) {
                    var scope = context.scope;
                    _this.UpdateGroupNameAction.showUpdateGroupNameDialog(items.first(), scope).then(function (result) {
                        if (result) {
                            VizPortal.ActionHelpers.deselectNotFound(scope.selectedItems, result, VizPortal.CommonErrorCode.GroupNotFound);
                            scope.refreshItems();
                        }
                    });
                }
            };
        };
        GroupActions.prototype.syncGroupsAction = function () {
            var _this = this;
            return {
                name: 'synchronize',
                translate: 'synchronize_action',
                isAvailable: function (items) { return items.size() > 0; },
                isDisabled: function (items) { return items.size() === 1 && !_this.isSyncable(items.first()); },
                execute: function (items, context) {
                    var scope = context.scope;
                    _this.ActiveDirectoryGroupAction.showSyncAdGroupsDialog(items.toArray(), context.scope).then(function (result) {
                        if (result) {
                            VizPortal.ActionHelpers.deselectNotFound(scope.selectedItems, result, VizPortal.CommonErrorCode.GroupNotFound);
                            scope.refreshItems();
                        }
                    });
                }
            };
        };
        // returns true if the given group can be deleted
        GroupActions.prototype.isDeletable = function (group) {
            return !group.isAllUsersGroup;
        };
        // returns true if the given group can be renamed
        GroupActions.prototype.isRenamable = function (group) {
            return !group.isAllUsersGroup && !this.isActiveDirectoryGroup(group);
        };
        // returns true if the given group can be synced from active directory
        GroupActions.prototype.isSyncable = function (group) {
            return !group.isAllUsersGroup && this.isActiveDirectoryGroup(group);
        };
        // returns true if the given group is not local
        GroupActions.prototype.isActiveDirectoryGroup = function (group) {
            return VizPortal.Groups.isActiveDirectory(group);
        };
        GroupActions.$inject = ['$q',
            '$translate',
            'ActiveDirectoryGroupAction',
            'AddUsersToGroupAction',
            'CreateGroupDialogAction',
            'DeleteGroupAction',
            'UpdateGroupsMinimumSiteRoleAction',
            'EditGroupMembershipAction',
            'RemoveUsersFromGroupAction',
            'SiteUsersActions',
            'UpdateGroupNameAction'];
        return GroupActions;
    })();
    VizPortal.GroupActions = GroupActions;
    VizPortal.Module.instance().service('GroupActions', GroupActions);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../resources/Groups.ts" />
/// <reference path="../resources/SiteRoles.ts" />
/// <reference path="../ServerApi/requests/GetGroupDetailsRequest.ts" />
/// <reference path="../services/BrowserTitleService.ts" />
/// <reference path="../services/GroupActions.ts" />
/// <reference path="../services/UpdateGroupsMinimumSiteRoleAction.ts" />
var VizPortal;
(function (VizPortal) {
    var GroupDetailsCtrl = (function () {
        function GroupDetailsCtrl($scope, $state, BrowserTitleService, canSessionUserManageUsers, groupDetails, groupActions, serverService, updateGroupsMinimumSiteRoleAction) {
            var _this = this;
            this.$scope = $scope;
            this.$state = $state;
            this.groupDetails = groupDetails;
            this.groupActions = groupActions;
            BrowserTitleService.setTitle('details', $scope.objectName);
            $scope.canSessionUserManageUsers = canSessionUserManageUsers;
            this.$scope.groupDetailsModel = {
                domainName: groupDetails.domainName,
                createdAt: groupDetails.createdAt,
                updatedAt: groupDetails.updatedAt,
                isAllUsersGroup: groupDetails.isAllUsersGroup,
                minimumSiteRole: groupDetails.minimumSiteRole
            };
            this.$scope.isLocalGroup = function () {
                var domainName = _this.$scope.groupDetailsModel.domainName;
                return !(domainName && domainName !== 'local');
            };
            this.$scope.isAllUsersGroup = function () {
                return _this.$scope.groupDetailsModel.isAllUsersGroup || false;
            };
            this.$scope.deleteGroup = function ($event) {
                _this.groupActions.deleteGroup(groupDetails, _this.$scope).then(function () {
                    $state.go('main.site.groups');
                });
            };
            $scope.allowMinimumSiteRole = serverService.isServerDomainFamilyActiveDirectory()
                && VizPortal.Groups.isActiveDirectory(groupDetails);
            if ($scope.allowMinimumSiteRole) {
                $scope.isEditingMinimumSiteRole = false;
                $scope.siteRoleOptions = VizPortal.SiteRoles.WithoutGuestOrServerAdmin;
                $scope.editSiteRole = function () {
                    $scope.isEditingMinimumSiteRole = true;
                    $scope.isSavingMinimumSiteRole = false;
                };
                var resetEditSiteRole = function () {
                    $scope.isEditingMinimumSiteRole = false;
                    $scope.groupDetailsModel.minimumSiteRole = groupDetails.minimumSiteRole;
                };
                $scope.saveSiteRole = function () {
                    $scope.isSavingMinimumSiteRole = true;
                    var savingMinimumSiteRole = $scope.groupDetailsModel.minimumSiteRole;
                    updateGroupsMinimumSiteRoleAction.executeInPlace(groupDetails, savingMinimumSiteRole)
                        .then(function () {
                        groupDetails.minimumSiteRole = savingMinimumSiteRole;
                        resetEditSiteRole();
                    })
                        .fin(function () {
                        $scope.isSavingMinimumSiteRole = false;
                    });
                };
                $scope.cancelSiteRole = resetEditSiteRole;
            }
        }
        GroupDetailsCtrl.$inject = [
            '$scope',
            '$state',
            'BrowserTitleService',
            'canSessionUserManageUsers',
            'groupDetails',
            'GroupActions',
            'ServerService',
            'UpdateGroupsMinimumSiteRoleAction'
        ];
        return GroupDetailsCtrl;
    })();
    VizPortal.GroupDetailsCtrl = GroupDetailsCtrl;
    VizPortal.Module.instance().controller('GroupDetailsCtrl', GroupDetailsCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../models/resourceInfoParts.ts" />
/// <reference path="../libs.ts" />
/// <reference path="../../app/IMainScope.ts" />
/// <reference path="../helpers/SubplaceCountsHelper.ts" />
/// <reference path="../models/IGroupInfo.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../resources/Groups.ts" />
/// <reference path="../services/BreadcrumbsService.ts" />
/// <reference path="../services/GroupActions.ts" />
var VizPortal;
(function (VizPortal) {
    var GroupPlaceCtrl = (function () {
        function GroupPlaceCtrl($scope, $state, breadcrumbs, group, groupsResource, groupActions, serverService) {
            var _this = this;
            this.$scope = $scope;
            this.$state = $state;
            this.groupsResource = groupsResource;
            this.groupActions = groupActions;
            this.serverService = serverService;
            $scope.objectName = group.name;
            $scope.group = group;
            $scope.$on(VizPortal.GroupUsersEvent.usersAdded, function () {
                _this.refreshGroup();
            });
            $scope.$on(VizPortal.GroupUsersEvent.usersRemoved, function () {
                _this.refreshGroup();
            });
            $scope.$on(VizPortal.SyncGroupEvent.groupSynced, function () {
                _this.refreshGroup();
            });
            $scope.$on(VizPortal.GroupMembershipEvent.MembershipChanged, function () {
                _this.refreshGroup();
            });
            $scope.groupsBreadcrumbUrl = function () { return breadcrumbs.groupsUrl
                ? '#' + breadcrumbs.groupsUrl
                : _this.$state.href('main.site.groups'); };
            $scope.canRename =
                function () { return !group.isAllUsersGroup && !_this.isActiveDirectoryGroup(group); };
            $scope.rename = function ($event) {
                _this.groupActions.renameGroup(group, $scope)
                    .then(function () { return _this.$state.hardReload(); });
            };
            $scope.canSynchronize =
                function () { return _this.serverService.canSessionUserManageUsers() && !group.isAllUsersGroup && _this.isActiveDirectoryGroup(group); };
            $scope.synchronize = function ($event) {
                _this.groupActions.syncAdGroup(group, _this.$scope)
                    .then(function () {
                    _this.refreshGroup();
                    $scope.$broadcast(VizPortal.SubplaceEvents.Refresh, "users");
                });
            };
            // handles refreshing the tab count and subplace
            $scope.subplaceTabClicked = function (name) {
                if (name === "users") {
                    _this.refreshGroup();
                    $scope.$broadcast(VizPortal.SubplaceEvents.Refresh, name);
                }
            };
        }
        // fetch the latest group data from server
        GroupPlaceCtrl.prototype.refreshGroup = function () {
            var _this = this;
            this.groupsResource.getById(this.$scope.group.id).then(function (group) {
                if (group) {
                    _this.$scope.group = group;
                }
                else {
                    // Group may have been deleted, or permissions changed, so do a hard reload
                    _this.$state.hardReload();
                }
            });
        };
        // returns true if the given group is not local
        GroupPlaceCtrl.prototype.isActiveDirectoryGroup = function (group) {
            return (group.domainName && group.domainName !== 'local');
        };
        GroupPlaceCtrl.$inject = [
            '$scope',
            '$state',
            'BreadcrumbsService',
            'group',
            'Groups',
            'GroupActions',
            'ServerService'
        ];
        return GroupPlaceCtrl;
    })();
    VizPortal.GroupPlaceCtrl = GroupPlaceCtrl;
    VizPortal.Module.instance().controller('GroupPlaceCtrl', GroupPlaceCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/ActiveDirectoryGroupAction.ts" />
var VizPortal;
(function (VizPortal) {
    var AddGroupsOptionsAction = (function () {
        function AddGroupsOptionsAction(modal) {
            this.modal = modal;
        }
        AddGroupsOptionsAction.prototype.showAddGroupsOptionsDialog = function (context) {
            var dialogInstance = this.modal.open({
                scope: context.scope,
                templateUrl: 'addGroupsOptionsDialog.html',
                size: VizPortal.ModalSize.fitToContent,
                position: _.extend(VizPortal.ModalService.anchoredTo(context.targetElement), { reserveHeight: AddGroupsOptionsAction.reserveHeight }),
                controller: AddGroupsOptionsDialogCtrl
            });
            return dialogInstance.result;
        };
        AddGroupsOptionsAction.$inject = ['ModalService'];
        AddGroupsOptionsAction.reserveHeight = 450;
        return AddGroupsOptionsAction;
    })();
    VizPortal.AddGroupsOptionsAction = AddGroupsOptionsAction;
    VizPortal.Module.instance().service('AddGroupsOptionsAction', AddGroupsOptionsAction);
    var AddGroupsOptionsDialogCtrl = (function () {
        function AddGroupsOptionsDialogCtrl($scope, createGroupDialogAction, activeDirectoryGroupAction) {
            this.createGroupDialogAction = createGroupDialogAction;
            this.activeDirectoryGroupAction = activeDirectoryGroupAction;
            $scope.addLocalGroup = function () {
                // Note: The order here is important, because $scope.close() will destroy the scope.
                // The promise is passed through so an action can be taken when the group creation is complete.
                var promise = createGroupDialogAction.showCreateGroupDialog($scope.$parent);
                $scope.close(promise);
            };
            $scope.importAdGroup = function () {
                // Note: The order here is important, because $scope.close() will destroy the scope.
                activeDirectoryGroupAction.showAddAdGroupDialog($scope.$parent);
                $scope.close({});
            };
        }
        AddGroupsOptionsDialogCtrl.$inject = [
            '$scope',
            'CreateGroupDialogAction',
            'ActiveDirectoryGroupAction'];
        return AddGroupsOptionsDialogCtrl;
    })();
    VizPortal.AddGroupsOptionsDialogCtrl = AddGroupsOptionsDialogCtrl;
    VizPortal.Module.instance().controller('AddGroupsOptionsDialogCtrl', AddGroupsOptionsDialogCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../../ts/libs.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var ActionsMenuColumnCell = (function (_super) {
        __extends(ActionsMenuColumnCell, _super);
        function ActionsMenuColumnCell() {
            _super.apply(this, arguments);
        }
        ActionsMenuColumnCell.prototype.render = function () {
            var _this = this;
            var actions = this.props.actions;
            var translate = this.props.translate;
            var getActionTarget = this.props.getActionTarget;
            var menu = VizPortalReact.Menu.element({
                ref: 'menu',
                menuButtonFactory: function (props) {
                    return ActionsMenuColumnCell.MenuButton.element(props);
                },
                // TODO: refactor this into a common component. Similar code in SelectableSortKeyDataGridColumn's menu panel.
                menuPanelFactory: function (props) {
                    var actionTarget = getActionTarget();
                    var menuItems = _.map(_.filter(actions, function (action) { return action.isAvailable(actionTarget.items, actionTarget.detailedItem, actionTarget.allowedActions); }), function (action) {
                        var disabled = action.isDisabled && action.isDisabled(actionTarget.items, actionTarget.detailedItem, actionTarget.allowedActions);
                        return React.DOM.div({
                            className: 'tb-popup-menu-item' + (disabled ? ' tb-disabled' : ''),
                            'data-tb-test-id': 'action-' + action.name,
                            onClick: function () {
                                _this.refs['menu'].closeMenu();
                                if (!disabled) {
                                    action.execute(actionTarget.items, actionTarget.actionContext, actionTarget.detailedItem);
                                }
                            }
                        }, translate(action.translate || action.name));
                    });
                    return React.DOM.div({
                        className: 'tb-popup-menu-content tb-padded-small'
                    }, menuItems);
                }
            });
            return React.DOM.div({
                style: {
                    position: 'relative'
                },
                'data-tb-test-id': this.props.testId
            }, 
            // Left part - the cell contents
            React.DOM.div({
                style: {
                    // Reserve enough space for the action menu button and padding
                    marginRight: VizPortalReact.DataGrid.BodyRow.InnerHeight + VizPortalReact.CommonStyles.Sizes.DefaultSpace,
                    overflow: 'hidden',
                    textOverflow: 'ellipsis'
                }
            }, this.props.children), 
            // Right part - the actions menu
            React.DOM.div({
                style: {
                    position: 'absolute',
                    right: 0,
                    top: 0
                }
            }, menu));
        };
        ActionsMenuColumnCell.displayName = 'ActionsMenuColumnCell';
        ActionsMenuColumnCell.element = React.createFactory(ActionsMenuColumnCell);
        return ActionsMenuColumnCell;
    })(React.Component);
    VizPortalReact.ActionsMenuColumnCell = ActionsMenuColumnCell;
    var ActionsMenuColumnCell;
    (function (ActionsMenuColumnCell) {
        var MenuButton = (function (_super) {
            __extends(MenuButton, _super);
            function MenuButton() {
                _super.apply(this, arguments);
            }
            MenuButton.prototype.render = function () {
                var highlight = this.props.hovered || this.props.menuOpen;
                return React.DOM.span({
                    // Using 'tb-selected' for highlight, because opacity is difficult to achieve
                    // in a cross-browser way using React inline css.
                    className: 'tb-action-icon tb-data-grid-action-menu' + (highlight ? ' tb-selected' : '')
                });
            };
            MenuButton.displayName = 'MenuButton';
            MenuButton.element = React.createFactory(MenuButton);
            return MenuButton;
        })(React.Component);
        ActionsMenuColumnCell.MenuButton = MenuButton;
    })(ActionsMenuColumnCell = VizPortalReact.ActionsMenuColumnCell || (VizPortalReact.ActionsMenuColumnCell = {}));
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    /*
     * SparseCachedList
     *
     * Caches (possibly sparse) blocks of data
     *
     */
    var SparseCachedList = (function () {
        function SparseCachedList(sliceable, transform, blockSize) {
            if (blockSize === void 0) { blockSize = SparseCachedList.DefaultBlockSize; }
            this.sliceable = sliceable;
            this.transform = transform;
            this.blockSize = blockSize;
            this.cachedData = null;
            this.fetching = [];
        }
        // Fetches blocks as necessary to cover the range from 'start' to 'end'.
        // Returns the entire cached data array.
        SparseCachedList.prototype.getItems = function (start, end) {
            var _this = this;
            start = Math.max(start, 0);
            if (this.cachedData) {
                // Empty data-set
                if (this.cachedData.length === 0) {
                    return Q.when(this.cachedData);
                }
                end = Math.min(end, this.cachedData.length - 1);
            }
            var fetches = [];
            var blockSize = this.blockSize;
            var firstBlockToFetch = Math.floor(start / blockSize);
            var lastBlockToFetch = Math.floor(end / blockSize);
            for (var blockIndex = firstBlockToFetch; blockIndex <= lastBlockToFetch; blockIndex++) {
                if (this.fetching[blockIndex] !== true) {
                    this.fetching[blockIndex] = true;
                    fetches.push(this.fetchBlock(blockIndex));
                }
            }
            return Q.all(fetches).then(function () {
                return _this.cachedData;
            });
        };
        SparseCachedList.prototype.fetchBlock = function (blockIndex) {
            var _this = this;
            return Q(this.sliceable.getSlice(blockIndex * this.blockSize, this.blockSize))
                .then(function (result) {
                // Update fetched data
                // CONSIDER: use List from immutable.js to avoid expensive copying
                var newCachedData = _.clone(_this.cachedData || []);
                newCachedData.length = result.total;
                for (var i = 0; i < result.items.length; i++) {
                    newCachedData[result.index + i] = _this.transform(result.items[i]);
                }
                _this.cachedData = newCachedData;
                return newCachedData;
            });
        };
        SparseCachedList.DefaultBlockSize = 1000;
        return SparseCachedList;
    })();
    VizPortalReact.SparseCachedList = SparseCachedList;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../libs.ts" />
/// <reference path="../controllers/AngularCtrl.ts" />
/// <reference path="../controllers/ContentPlaceCtrl.ts" />
/// <reference path="../controllers/FilterPanelCtrl.ts" />
/// <reference path="../helpers/ActionButtonsHelper.ts" />
/// <reference path="../models/ContentTypes.ts" />
/// <reference path="../models/ISliceable.ts" />
/// <reference path="../models/ITabsBannerModel.ts" />
/// <reference path="../models/ITemplate.ts" />
/// <reference path="../models/Set.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/types/IGroup.ts" />
/// <reference path="../services/AddGroupsOptionsAction.ts" />
/// <reference path="../services/BreadcrumbsService.ts" />
/// <reference path="../services/BrowserTitleService.ts" />
/// <reference path="../services/QueryService.ts" />
/// <reference path="../services/SelectionService.ts" />
/// <reference path="../services/SorterFactory.ts" />
/// <reference path="../../common/react/components/dataGrid/DataGrid.ts" />
/// <reference path="../../common/react/components/dataGrid/DataGridCells.ts" />
/// <reference path="../../common/react/components/ActionsMenuColumnCell.ts" />
/// <reference path="../../common/react/CommonDataGridColumns.ts" />
/// <reference path="../../common/react/SparseCachedList.ts" />
/// <reference path="../../ts/FeatureFlags.ts" />
var VizPortal;
(function (VizPortal) {
    var GroupsPlaceCtrl = (function () {
        function GroupsPlaceCtrl($location, $scope, $translate, AngularToReactDataGridBridge, breadcrumbs, BrowserTitleService, groups, groupActions, addGroupsOptionsAction, queryService, SelectionService, SorterFactory, ServerService, AngularContextFactory, filterPanelService) {
            var _this = this;
            this.$scope = $scope;
            this.$translate = $translate;
            this.AngularToReactDataGridBridge = AngularToReactDataGridBridge;
            this.groups = groups;
            this.groupActions = groupActions;
            this.addGroupsOptionsAction = addGroupsOptionsAction;
            this.queryService = queryService;
            this.ServerService = ServerService;
            this.AngularContextFactory = AngularContextFactory;
            this.filterPanelService = filterPanelService;
            var isActiveDirectory = this.ServerService.isServerDomainFamilyActiveDirectory();
            var canSessionUserManageUsers = this.ServerService.canSessionUserManageUsers();
            var showMinimumSiteRole = isActiveDirectory;
            $scope.reactDataGridInGroupsPlace = VizPortal.FeatureFlags.reactDataGridInGroupsPlace;
            BrowserTitleService.setTitle('groups');
            $scope.model = { itemsCount: 0 };
            $scope.selectedItems = new VizPortal.Set(function (group) { return group.id; });
            if (VizPortal.FeatureFlags.reactDataGridInGroupsPlace) {
                this.configureForReactDataGrid(showMinimumSiteRole);
            }
            $scope.rowClicked = function (row, colIndex) {
                SelectionService.rowClicked($scope.selectedItems, row, colIndex);
            };
            $scope.filterControls = {};
            $scope.filterDefinitions = showMinimumSiteRole
                ? filterPanelService.getFilterDefinitions(['groupsMinimumSiteRole'])
                : [];
            $scope.sorter = SorterFactory.create(VizPortal.GroupContentType.defaultOrder);
            var queryUpdater = this.createQueryUpdater();
            $scope.sliceChanged = function (newSlice) {
                $scope.selectedItems.updateItems(newSlice.items);
                $scope.model.itemsCount = newSlice.total;
            };
            $scope.refreshItems = function () {
                queryUpdater.refresh();
            };
            $scope.refreshItems();
            $scope.placeTitleClicked = function () {
                $scope.refreshItems();
            };
            $scope.$on(VizPortal.SyncGroupEvent.groupSynced, $scope.refreshItems);
            $scope.headerClicked = function (header) { return $scope.sorter.setPrimary(header.attrs['key'], header.attrs['direction']); };
            $scope.getDomainString = function (row) {
                return row.domainName || $translate.instant('localDomain');
            };
            $scope.isAD = isActiveDirectory;
            $scope.availableAction = function (action) { return action.isAvailable($scope.selectedItems); };
            VizPortal.ActionButtonsHelper.setupActionButtons($scope, groupActions.getGroupsActionButtons());
            $scope.listActions = [
                {
                    name: 'add-groups',
                    translate: 'addGroups',
                    isAvailable: function () { return (isActiveDirectory && canSessionUserManageUsers); },
                    execute: function ($event) {
                        addGroupsOptionsAction.showAddGroupsOptionsDialog(VizPortal.ActionContext.fromEvent($event))
                            .then(function (result) {
                            $scope.refreshItems();
                        });
                    }
                },
                {
                    name: 'create-group',
                    translate: 'createGroup',
                    isAvailable: function () { return !(isActiveDirectory && canSessionUserManageUsers); },
                    execute: function ($event) {
                        _this.groupActions.createGroup($scope).then(function (result) {
                            $scope.refreshItems();
                        });
                    }
                }
            ];
            $scope.availableListAction = function (listAction) { return listAction.isAvailable(); };
            breadcrumbs.rememberGroupsUrl($location.url());
            $scope.$on('$locationChangeSuccess', function () {
                var path = $location.path();
                if (/^(\/site\/[^\/]+)?\/groups(\/)?$/.test(path)) {
                    breadcrumbs.rememberGroupsUrl($location.url());
                }
            });
            $scope.emptyTemplateModel = GroupsPlaceCtrl.emptyTemplateModel;
            $scope.showMinimumSiteRole = showMinimumSiteRole;
        }
        GroupsPlaceCtrl.prototype.configureForReactDataGrid = function (showMinimumSiteRole) {
            var columns = this.dataGridColumns(this.$scope, showMinimumSiteRole);
            this.AngularToReactDataGridBridge.attachReactDataGridToScope(this.$scope, columns, GroupsPlaceCtrl.emptyTemplateModel);
        };
        GroupsPlaceCtrl.prototype.createQueryUpdater = function () {
            var _this = this;
            if (VizPortal.FeatureFlags.reactDataGridInGroupsPlace) {
                return this.queryService.createQueryUpdater(this.$scope, VizPortal.GroupContentType, this.groups, function (resourceQuery) {
                    _this.AngularToReactDataGridBridge.updateReactDataGridRowStore({ scope: _this.$scope, sliceable: resourceQuery });
                    _this.$scope.sliceable = resourceQuery;
                    _this.$scope.sorter.setOrder(resourceQuery.getOrder());
                    resourceQuery.getCount().then(function (result) {
                        _this.$scope.model.itemsCount = result;
                    });
                }, {});
            }
            else {
                return this.queryService.createQueryUpdater(this.$scope, VizPortal.GroupContentType, this.groups, function (resourceQuery) {
                    _this.$scope.sliceable = resourceQuery;
                    resourceQuery.getCount().then(function (result) {
                        _this.$scope.model.itemsCount = result;
                    });
                }, {});
            }
        };
        // TODO: move this into a GroupGrid class (like WorkbookGrid etc.)
        GroupsPlaceCtrl.prototype.dataGridColumns = function ($scope, showMinimumSiteRole) {
            // Group name column
            var groupNameColumn = {
                name: 'name-col',
                dataKey: 'name',
                text: this.$translate.instant('column_name'),
                direction: 'asc',
                cellFormatter: this.groupNameCellFormatter($scope),
                cellStyle: {
                    paddingRight: 0,
                    verticalAlign: 'top',
                    overflow: 'visible'
                }
            };
            var columns = [
                VizPortalReact.CommonDataGridColumns.selected($scope),
                groupNameColumn
            ];
            if (this.ServerService.isServerDomainFamilyActiveDirectory()) {
                columns.push({
                    name: 'domain-name-col',
                    dataKey: 'domainName',
                    direction: 'asc',
                    text: this.$translate.instant('column_domainName')
                });
            }
            columns.push({
                name: 'user-count-col',
                dataKey: 'userCount',
                text: this.$translate.instant('column_userCount'),
                direction: 'asc',
                cellFormatter: VizPortalReact.DataGridCells.LocalizedCount('userCount'),
                headerStyle: { textAlign: 'right' },
                cellStyle: { textAlign: 'right' }
            });
            if (showMinimumSiteRole) {
                columns.push({
                    name: 'min-site-role-col',
                    dataKey: 'minimumSiteRole',
                    text: this.$translate.instant('column_minimumSiteRole'),
                    cellFormatter: VizPortalReact.DataGridCells.SiteRoleCell('minimumSiteRole', this.$translate),
                    direction: 'asc'
                });
            }
            return columns;
        };
        GroupsPlaceCtrl.prototype.groupNameCellFormatter = function ($scope) {
            var siteUrls = new VizPortalReact.SiteUrls({
                siteUrlName: this.ServerService.sessionSiteUrlName(),
                queryString: window.location.search
            });
            var actions = this.groupActions.getGroupsActionButtons();
            var $translate = this.$translate;
            return React.createFactory(React.createClass({
                render: function () {
                    return VizPortalReact.ActionsMenuColumnCell.element({
                        actions: actions,
                        getActionTarget: function () {
                            return {
                                items: $scope.selectedItems,
                                actionContext: { scope: $scope }
                            };
                        },
                        translate: function (id) { return $translate.instant(id); }
                    }, React.DOM.span({ className: 'tb-grid-icon-group' }), React.DOM.a({ href: siteUrls.group(this.props.row.data.id) }, this.props.value));
                }
            }));
        };
        GroupsPlaceCtrl.$inject = [
            '$location',
            '$scope',
            '$translate',
            'AngularToReactDataGridBridge',
            'BreadcrumbsService',
            'BrowserTitleService',
            'Groups',
            'GroupActions',
            'AddGroupsOptionsAction',
            'QueryService',
            'SelectionService',
            'SorterFactory',
            'ServerService',
            'AngularContextFactory',
            'FilterPanelService'
        ];
        GroupsPlaceCtrl.emptyTemplateModel = { title: 'groupsEmptyMessage' };
        return GroupsPlaceCtrl;
    })();
    VizPortal.GroupsPlaceCtrl = GroupsPlaceCtrl;
    VizPortal.Module.instance().controller('GroupsPlaceCtrl', GroupsPlaceCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../common/react/CommonDataGridColumns.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var GroupUsersGrid;
    (function (GroupUsersGrid) {
        function columns(translate, scope, siteUrls, siteRoleFilter, actions) {
            var columns = [
                VizPortalReact.CommonDataGridColumns.selected(scope),
                nameColumn(translate, siteUrls, actions, scope),
                {
                    name: 'username-col',
                    dataKey: 'username',
                    text: translate('column_username'),
                    direction: 'asc'
                },
                {
                    name: 'siteRole-col',
                    dataKey: 'siteRole',
                    text: translate('column_site_role'),
                    direction: 'asc',
                    cellFormatter: VizPortalReact.DataGridCells.PlainTextCellWithTransform('siteRole', function (siteRole) { return siteRoleFilter(siteRole); })
                },
                {
                    name: 'lastSignIn-col',
                    dataKey: 'lastSignIn',
                    text: translate('column_last_sign_in'),
                    direction: 'desc',
                    cellFormatter: VizPortalReact.DataGridCells.DateTimeCell('lastSignIn')
                }
            ];
            return columns;
        }
        GroupUsersGrid.columns = columns;
        function nameColumn(translate, siteUrls, actions, scope) {
            var disabledStyle = {
                color: VizPortalReact.CommonStyles.Colors.Grey102,
                textDecoration: 'none',
                pointerEvents: 'none'
            };
            var isDisabled = function (row) {
                var user = row.data;
                return user.readOnly || user.siteRole === 'Guest';
            };
            return VizPortalReact.CommonDataGridColumns.withActions({
                name: 'displayName-col',
                dataKey: 'displayName',
                text: translate('column_fullName'),
                direction: 'asc',
                cellFormatter: VizPortalReact.DataGridCells.Link(function (row) {
                    var disabled = isDisabled(row);
                    var user = row.data;
                    return {
                        text: user.displayName,
                        url: disabled ? null : siteUrls.userContentUrl(user),
                        style: disabled ? disabledStyle : null,
                        iconClassName: 'tb-grid-icon-user',
                        iconTitle: translate('user')
                    };
                })
            }, {
                actions: actions,
                getActionTarget: function () {
                    return {
                        items: scope.selectedItems,
                        actionContext: { scope: scope }
                    };
                },
                translate: translate,
                scope: scope,
                menuDisabled: isDisabled
            });
        }
    })(GroupUsersGrid = VizPortalReact.GroupUsersGrid || (VizPortalReact.GroupUsersGrid = {}));
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../libs.ts" />
/// <reference path="../../app/content/GroupUsersGrid.ts" />
/// <reference path="../../common/react/components/dataGrid/AngularToReactDataGridBridge.ts" />
/// <reference path="../controllers/GroupPlaceCtrl.ts" />
/// <reference path="../helpers/ActionButtonsHelper.ts" />
/// <reference path="../helpers/SubplaceCountsHelper.ts" />
/// <reference path="../models/IEmptyTemplate.ts" />
/// <reference path="../models/ITemplate.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/BrowserTitleService.ts" />
/// <reference path="../services/GroupActions.ts" />
/// <reference path="../services/QueryService.ts" />
/// <reference path="../services/SelectionService.ts" />
/// <reference path="../services/SorterFactory.ts" />
var VizPortal;
(function (VizPortal) {
    var GroupUsersSubplaceCtrl = (function () {
        function GroupUsersSubplaceCtrl($scope, $translate, AngularToReactDataGridBridge, siteRoleFilter, ServerService, BrowserTitleService, SorterFactory, users, group, queryService, selectionService, groupActions) {
            var _this = this;
            this.$scope = $scope;
            this.$translate = $translate;
            this.AngularToReactDataGridBridge = AngularToReactDataGridBridge;
            this.siteRoleFilter = siteRoleFilter;
            this.ServerService = ServerService;
            var actions = groupActions.getGroupUsersActionButtons(group.isAllUsersGroup);
            if (VizPortal.FeatureFlags.reactGroupUsersGrid) {
                this.configureForReactDataGrid(actions);
            }
            BrowserTitleService.setTitle('members', group.name);
            $scope.group = group;
            // selection
            $scope.selectedItems = new VizPortal.Set(function (user) { return user.id; });
            $scope.rowClicked = function (row, colIndex) {
                selectionService.rowClicked($scope.selectedItems, row, colIndex);
            };
            // query
            var queryUpdater = queryService.createQueryUpdater($scope, VizPortal.GroupUserContentType, users, function (resourceQuery) {
                if (VizPortal.FeatureFlags.reactGroupUsersGrid) {
                    _this.AngularToReactDataGridBridge.updateReactDataGridRowStore({ scope: $scope, sliceable: resourceQuery });
                }
                $scope.sliceable = resourceQuery;
            }, { inGroup: group.id });
            // refresh
            $scope.refreshItems = function () {
                queryUpdater.refresh();
            };
            $scope.refreshItems();
            $scope.$on(VizPortal.SubplaceEvents.Refresh, function () {
                $scope.refreshItems();
            });
            // sorting
            $scope.sorter = SorterFactory.create(VizPortal.GroupUserContentType.defaultOrder);
            $scope.headerClicked = function (header) { return $scope.sorter.setPrimary(header.attrs['key'], header.attrs['direction']); };
            // actions
            $scope.availableAction = function (action) { return action.isAvailable($scope.selectedItems); };
            VizPortal.ActionButtonsHelper.setupActionButtons($scope, actions);
            $scope.listActions = [{
                    name: 'add-users-to-group',
                    translate: 'addUsers',
                    isAvailable: function () { return !group.isAllUsersGroup; },
                    execute: function ($event) {
                        groupActions.addUsersToGroup(group).then(function () {
                            $scope.refreshItems();
                            $scope.$emit(VizPortal.GroupUsersEvent.usersAdded);
                        });
                    }
                }];
            $scope.availableListAction = function (listAction) { return listAction.isAvailable(); };
            $scope.emptyTemplateModel = GroupUsersSubplaceCtrl.emptyTemplateModel;
        }
        GroupUsersSubplaceCtrl.prototype.configureForReactDataGrid = function (actions) {
            var _this = this;
            this.$scope.useReactDataGrid = true;
            var siteUrls = new VizPortalReact.SiteUrls({
                siteUrlName: this.ServerService.sessionSiteUrlName(),
                queryString: window.location.search
            });
            var columns = VizPortalReact.GroupUsersGrid.columns(function (id) { return _this.$translate.instant(id); }, this.$scope, siteUrls, this.siteRoleFilter, actions);
            this.AngularToReactDataGridBridge.attachReactDataGridToScope(this.$scope, columns, GroupUsersSubplaceCtrl.emptyTemplateModel);
        };
        GroupUsersSubplaceCtrl.$inject = [
            '$scope',
            '$translate',
            'AngularToReactDataGridBridge',
            'siteRoleFilter',
            'ServerService',
            'BrowserTitleService',
            'SorterFactory',
            'SiteUsers',
            'group',
            'QueryService',
            'SelectionService',
            'GroupActions'
        ];
        GroupUsersSubplaceCtrl.emptyTemplateModel = { title: 'usersEmptyMessage' };
        return GroupUsersSubplaceCtrl;
    })();
    VizPortal.GroupUsersSubplaceCtrl = GroupUsersSubplaceCtrl;
    VizPortal.Module.instance().controller('GroupUsersSubplaceCtrl', GroupUsersSubplaceCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var AddFavoriteRequest = (function (_super) {
            __extends(AddFavoriteRequest, _super);
            function AddFavoriteRequest(params) {
                _super.call(this, 'addFavorite', params);
            }
            return AddFavoriteRequest;
        })(ServerApi.Request);
        ServerApi.AddFavoriteRequest = AddFavoriteRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="resourceParts.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="../types/IGetItemsParams.ts" />
/// <reference path="../types/IGetItemsResult.ts" />
/// <reference path="../types/IFavorite.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetFavoritesRequest = (function (_super) {
            __extends(GetFavoritesRequest, _super);
            function GetFavoritesRequest(params) {
                _super.call(this, 'getFavorites', params);
            }
            return GetFavoritesRequest;
        })(ServerApi.Request);
        ServerApi.GetFavoritesRequest = GetFavoritesRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var RemoveFavoriteRequest = (function (_super) {
            __extends(RemoveFavoriteRequest, _super);
            function RemoveFavoriteRequest(params) {
                _super.call(this, 'removeFavorite', params);
            }
            return RemoveFavoriteRequest;
        })(ServerApi.Request);
        ServerApi.RemoveFavoriteRequest = RemoveFavoriteRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../models/IDataSourceInfo.ts" />
/// <reference path="../models/IViewInfo.ts" />
/// <reference path="../models/IWorkbookInfo.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/AddFavoriteRequest.ts" />
/// <reference path="../ServerApi/requests/GetFavoritesRequest.ts" />
/// <reference path="../ServerApi/requests/RemoveFavoriteRequest.ts" />
/// <reference path="../services/ServerService.ts" />
/// <reference path="Resource.ts" />
var VizPortal;
(function (VizPortal) {
    var FavoriteObjectType = (function () {
        function FavoriteObjectType() {
        }
        FavoriteObjectType.VIEW = 'view';
        FavoriteObjectType.WORKBOOK = 'workbook';
        return FavoriteObjectType;
    })();
    VizPortal.FavoriteObjectType = FavoriteObjectType;
    var Favorites = (function (_super) {
        __extends(Favorites, _super);
        function Favorites(server, FetcherFactory) {
            _super.call(this, FetcherFactory.getServerResourceFetcher(VizPortal.ServerApi.GetFavoritesRequest, function (result) { return result.favorites; }));
            this.server = server;
        }
        Favorites.prototype.addView = function (view) {
            return this.add(view.id, FavoriteObjectType.VIEW);
        };
        Favorites.prototype.addWorkbook = function (workbook) {
            return this.add(workbook.id, FavoriteObjectType.WORKBOOK);
        };
        Favorites.prototype.removeView = function (view) {
            return this.remove(view.id, FavoriteObjectType.VIEW);
        };
        Favorites.prototype.removeViewById = function (id) {
            return this.remove(id, FavoriteObjectType.VIEW);
        };
        Favorites.prototype.removeWorkbook = function (workbook) {
            return this.remove(workbook.id, FavoriteObjectType.WORKBOOK);
        };
        Favorites.prototype.removeWorkbookById = function (id) {
            return this.remove(id, FavoriteObjectType.WORKBOOK);
        };
        Favorites.prototype.add = function (objectId, objectType) {
            return this.server.sendRequest(new VizPortal.ServerApi.AddFavoriteRequest({
                objectId: objectId,
                objectType: objectType
            }));
        };
        Favorites.prototype.remove = function (objectId, objectType) {
            return this.server.sendRequest(new VizPortal.ServerApi.RemoveFavoriteRequest({
                objectId: objectId,
                objectType: objectType
            }));
        };
        Favorites.$inject = ['ServerService', 'FetcherFactory'];
        return Favorites;
    })(VizPortal.Resource);
    VizPortal.Favorites = Favorites;
    VizPortal.Module.instance().service('Favorites', Favorites);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var AddTagsToViewsRequest = (function (_super) {
            __extends(AddTagsToViewsRequest, _super);
            function AddTagsToViewsRequest(ids, tags) {
                _super.call(this, 'addTagsToViews', {
                    ids: ids,
                    tags: tags
                });
            }
            return AddTagsToViewsRequest;
        })(ServerApi.Request);
        ServerApi.AddTagsToViewsRequest = AddTagsToViewsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../../helpers/Helpers.ts" />
/// <reference path="../types/IFieldValue.ts" />
/// <reference path="../types/IFieldValuesParams.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetFieldValuesRequest = (function (_super) {
            __extends(GetFieldValuesRequest, _super);
            function GetFieldValuesRequest(params) {
                _super.call(this, 'getFieldValues', params);
            }
            return GetFieldValuesRequest;
        })(ServerApi.Request);
        ServerApi.GetFieldValuesRequest = GetFieldValuesRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="actionNames.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="../types/actionParams.ts" />
/// <reference path="../types/IViewActions.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetViewActionsRequest = (function (_super) {
            __extends(GetViewActionsRequest, _super);
            function GetViewActionsRequest(id) {
                _super.call(this, 'getViewActions', { id: id });
            }
            return GetViewActionsRequest;
        })(ServerApi.Request);
        ServerApi.GetViewActionsRequest = GetViewActionsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../types/IView.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetViewByPathRequest = (function (_super) {
            __extends(GetViewByPathRequest, _super);
            function GetViewByPathRequest(path) {
                _super.call(this, 'getViewByPath', { path: path });
            }
            return GetViewByPathRequest;
        })(ServerApi.Request);
        ServerApi.GetViewByPathRequest = GetViewByPathRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var HideViewsRequest = (function (_super) {
            __extends(HideViewsRequest, _super);
            function HideViewsRequest(ids) {
                _super.call(this, 'hideViews', { ids: ids });
            }
            return HideViewsRequest;
        })(ServerApi.Request);
        ServerApi.HideViewsRequest = HideViewsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var RemoveTagsFromViewsRequest = (function (_super) {
            __extends(RemoveTagsFromViewsRequest, _super);
            function RemoveTagsFromViewsRequest(ids, tags) {
                // The server returns quoted tags unquoted.  This re-adds the double quotes if needed
                var tagsList = _.map(tags, function (tag) { return VizPortal.TagsHelper.quote(tag); });
                _super.call(this, 'removeTagsFromViews', {
                    ids: ids,
                    tags: tagsList
                });
            }
            return RemoveTagsFromViewsRequest;
        })(ServerApi.Request);
        ServerApi.RemoveTagsFromViewsRequest = RemoveTagsFromViewsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/RequestHelper.ts" />
/// <reference path="../helpers/ResourceHelper.ts" />
/// <reference path="../helpers/ResultHelper.ts" />
/// <reference path="../helpers/ServerModelHelper.ts" />
/// <reference path="../models/IViewInfo.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/AddTagsToViewsRequest.ts" />
/// <reference path="../ServerApi/requests/GetFieldValuesRequest.ts" />
/// <reference path="../ServerApi/requests/GetViewActionsRequest.ts" />
/// <reference path="../ServerApi/requests/GetViewByPathRequest.ts" />
/// <reference path="../ServerApi/requests/GetViewsRequest.ts" />
/// <reference path="../ServerApi/requests/HideViewsRequest.ts" />
/// <reference path="../ServerApi/requests/MarkRecentlyViewedRequest.ts" />
/// <reference path="../ServerApi/requests/RemoveTagsFromViewsRequest.ts" />
/// <reference path="../services/ServerService.ts" />
var VizPortal;
(function (VizPortal) {
    var Views = (function () {
        function Views($q, ErrorNotifyingServer, FetcherFactory) {
            this.$q = $q;
            this.ErrorNotifyingServer = ErrorNotifyingServer;
            this.server = ErrorNotifyingServer.getServerService();
            this.listFetcher = FetcherFactory.getServerResourceFetcher(VizPortal.ServerApi.GetViewsRequest, VizPortal.ServerApiMapper.views);
            this.allQuery = new VizPortal.ResourceQuery(this.listFetcher);
            this.detailFetcher = FetcherFactory.getServerDetailFetcher('getView', VizPortal.ViewMapper.mapDetail);
            this.fieldValuesFetcher = FetcherFactory.getServerResourceFetcher(VizPortal.ServerApi.GetFieldValuesRequest, VizPortal.ServerApiMapper.fieldValues);
        }
        Views.prototype.all = function () {
            return this.allQuery;
        };
        Views.prototype.getById = function (id) {
            return this.detailFetcher.fetchById(id);
        };
        Views.prototype.getByPath = function (path) {
            var _this = this;
            return this.server.sendRequest(new VizPortal.ServerApi.GetViewByPathRequest(path))
                .then(function (viewDetail) {
                var error = viewDetail.errors && viewDetail.errors[0] && viewDetail.errors[0].code;
                if (error) {
                    return _this.$q.reject(error);
                }
                else {
                    return _this.$q.when(VizPortal.ViewMapper.mapDetail(viewDetail));
                }
            });
        };
        Views.prototype.valuesForField = function (field) {
            return new VizPortal.FieldValuesQuery(this.fieldValuesFetcher, field, VizPortal.ServerApi.FieldValueResourceType.view);
        };
        // Actions
        Views.prototype.actions = function (id) {
            return this.server.sendRequest(new VizPortal.ServerApi.GetViewActionsRequest(id));
        };
        Views.prototype.hide = function (ids) {
            return this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests(ids, function (idsBlock) { return new VizPortal.ServerApi.HideViewsRequest(idsBlock); }), VizPortal.ResultHelper.combineResults);
        };
        Views.prototype.addTags = function (ids, tags) {
            return (tags.length > 0)
                ? this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests2(ids, tags, function (idsBlock, tagsBlock) { return new VizPortal.ServerApi.AddTagsToViewsRequest(idsBlock, tagsBlock); }), VizPortal.ResultHelper.combineResults)
                : this.$q.when({});
        };
        Views.prototype.removeTags = function (ids, tags) {
            return (tags.length > 0)
                ? this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests2(ids, tags, function (idsBlock, tagsBlock) { return new VizPortal.ServerApi.RemoveTagsFromViewsRequest(idsBlock, tagsBlock); }), VizPortal.ResultHelper.combineResults)
                : this.$q.when({});
        };
        Views.prototype.changeTags = function (ids, tagsToAdd, tagsToRemove) {
            var _this = this;
            return this.removeTags(ids, tagsToRemove)
                .then(function (result) { return (VizPortal.ResultHelper.hasErrors(result) ? result : _this.addTags(ids, tagsToAdd)); });
        };
        Views.prototype.markRecentlyViewed = function (id) {
            return this.server.sendRequest(new VizPortal.ServerApi.MarkRecentlyViewedRequest({
                objectId: id,
                objectType: VizPortal.ServerApi.RecentlyViewedObjectType.View
            }));
        };
        Views.$inject = [
            '$q',
            'ErrorNotifyingServer',
            'FetcherFactory'
        ];
        return Views;
    })();
    VizPortal.Views = Views;
    VizPortal.Module.instance().service('Views', Views);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/Order.ts" />
/// <reference path="../models/OrderKeys.ts" />
/// <reference path="../resources/Favorites.ts" />
/// <reference path="../resources/Views.ts" />
/// <reference path="../resources/Workbooks.ts" />
var VizPortal;
(function (VizPortal) {
    var HomeCtrl = (function () {
        function HomeCtrl($scope, $state, Favorites, Views, Workbooks) {
            $scope.favoriteViews = [];
            Views.all().withFiltersAndOrder([VizPortal.Filter.fieldEq(VizPortal.ServerApi.FilterFieldNames.isFavorite, true)], [VizPortal.Order.asc(VizPortal.ServerApi.NamedItemKeys.name)]).getSlice(0, HomeCtrl.ItemsPerSection).then(function (result) {
                $scope.favoriteViews = result.items || [];
            });
            $scope.favoriteWorkbooks = [];
            Workbooks.all().withFiltersAndOrder([VizPortal.Filter.fieldEq(VizPortal.ServerApi.FilterFieldNames.isFavorite, true)], [VizPortal.Order.asc(VizPortal.ServerApi.NamedItemKeys.name)]).getSlice(0, HomeCtrl.ItemsPerSection).then(function (result) {
                $scope.favoriteWorkbooks = result.items || [];
            });
            $scope.recentViews = [];
            Views.all().withFiltersAndOrder([VizPortal.Filter.fieldEq(VizPortal.ServerApi.FilterFieldNames.isRecent, true)], [VizPortal.Order.asc(VizPortal.ServerApi.NamedItemKeys.name)]).getSlice(0, HomeCtrl.ItemsPerSection).then(function (result) {
                $scope.recentViews = result.items || [];
            });
            $scope.recentWorkbooks = [];
            Workbooks.all().withFiltersAndOrder([VizPortal.Filter.fieldEq(VizPortal.ServerApi.FilterFieldNames.isRecent, true)], [VizPortal.Order.asc(VizPortal.ServerApi.NamedItemKeys.name)]).getSlice(0, HomeCtrl.ItemsPerSection).then(function (result) {
                $scope.recentWorkbooks = result.items || [];
            });
            $scope.updatedWorkbooks = [];
            Workbooks.all().withFiltersAndOrder([], [{ field: VizPortal.OrderKeys.updatedAt, ascending: false }]).getSlice(0, HomeCtrl.ItemsPerSection).then(function (result) {
                $scope.updatedWorkbooks = result.items || [];
            });
            $scope.viewUrl = function (view) { return $state.href('main.site.viz', { path: view.path }); };
            $scope.workbookUrl = function (workbook) { return $state.href('main.site.content.workbook.views', { id: workbook.id }); };
            $scope.recentViewsUrl = function () { return $state.href('main.site.content.site.views') + '?recent=true'; };
            $scope.recentWorkbooksUrl = function () { return $state.href('main.site.content.site.workbooks') + '?recent=true'; };
            $scope.favoriteViewsUrl = function () { return $state.href('main.site.content.site.views') + '?favorite=true'; };
            $scope.favoriteWorkbooksUrl = function () { return $state.href('main.site.content.site.workbooks') + '?favorite=true'; };
            $scope.updatedWorkbooksUrl = function () { return $state.href('main.site.content.site.workbooks') + '?order=updatedAt:desc'; };
            $scope.addViewFavorite = function (view) { return Favorites.addView(view); };
            $scope.removeViewFavorite = function (view) { return Favorites.removeView(view); };
            $scope.addWorkbookFavorite = function (workbook) { return Favorites.addWorkbook(workbook); };
            $scope.removeWorkbookFavorite = function (workbook) { return Favorites.removeWorkbook(workbook); };
            $scope.getItemDetails = function (item) {
                var view = item;
                var workbook = item;
                if (workbook.numSheets) {
                    return Workbooks.getById(workbook.id);
                }
                else {
                    return Views.getById(view.id);
                }
            };
            $scope.scrollLeft = function (section) {
                var sectionElement = $('.tb-home-section-' + section);
                sectionElement.scrollLeft(sectionElement.scrollLeft() - sectionElement.width());
            };
            $scope.scrollRight = function (section) {
                var sectionElement = $('.tb-home-section-' + section);
                sectionElement.scrollLeft(sectionElement.scrollLeft() + sectionElement.width());
            };
            $scope.showScrollControls = function (section) {
                var sectionElement = $('.tb-home-section-' + section);
                var contentElement = sectionElement.find('.tb-home-section-items-content');
                return sectionElement.width() < contentElement.width();
            };
            $scope.canScrollLeft = function (section) {
                var sectionElement = $('.tb-home-section-' + section);
                return sectionElement.scrollLeft() > 0;
            };
            $scope.canScrollRight = function (section) {
                var sectionElement = $('.tb-home-section-' + section);
                var contentElement = sectionElement.find('.tb-home-section-items-content');
                return sectionElement.scrollLeft() + sectionElement.width() < contentElement.width();
            };
        }
        // The server only stores 12 recents,
        // so we just show 12 of each category for consistency.
        HomeCtrl.ItemsPerSection = 12;
        HomeCtrl.$inject = [
            '$scope',
            '$state',
            'Favorites',
            'Views',
            'Workbooks'
        ];
        return HomeCtrl;
    })();
    VizPortal.HomeCtrl = HomeCtrl;
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/ErrorCodes.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/ServerService.ts" />
var VizPortal;
(function (VizPortal) {
    var InitializationCtrl = (function () {
        function InitializationCtrl($scope, $state, server) {
            $scope.formData = {
                username: '',
                password: '',
                confirmPassword: '',
                displayName: ''
            };
            $scope.isActiveDirectory = function () { return server.isServerDomainFamilyActiveDirectory(); };
            $scope.isLocal = function () { return server.isServerDomainFamilyLocal(); };
            $scope.passwordFieldsAreNonEmpty = function () {
                return !$scope.isActiveDirectory() &&
                    $scope.formData.password &&
                    $scope.formData.confirmPassword &&
                    $scope.formData.password.length > 0 &&
                    $scope.formData.confirmPassword.length > 0;
            };
            $scope.maybeInitialize = function () {
                if ($scope.initializationForm.$valid) {
                    $scope.busy = true;
                    server.initialize($scope.formData.username, $scope.formData.password, $scope.formData.displayName)
                        .then(function () {
                        $scope.result = 'success';
                        $state.go('main.site.content.site.projects', { siteUrlName: '' });
                    })
                        .fail(function (errorCode) {
                        $scope.result = 'failure';
                        $scope.busy = false;
                        switch (errorCode) {
                            case VizPortal.UserErrorCode.UserInsufficientLicenses:
                                $scope.errorMessageKey = 'signInFailedUnlicensedServer';
                                break;
                            default:
                                $scope.errorMessageKey = 'initializationFailed';
                                break;
                        }
                    });
                }
                else {
                    $scope.result = 'invalidForm';
                }
            };
        }
        InitializationCtrl.$inject = [
            '$scope',
            '$state',
            'ServerService'
        ];
        return InitializationCtrl;
    })();
    VizPortal.InitializationCtrl = InitializationCtrl;
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="../types/ILicensingInfo.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetLicensingInfoRequest = (function (_super) {
            __extends(GetLicensingInfoRequest, _super);
            function GetLicensingInfoRequest(params) {
                if (params === void 0) { params = {}; }
                _super.call(this, 'getLicensingInfo', params);
            }
            return GetLicensingInfoRequest;
        })(ServerApi.Request);
        ServerApi.GetLicensingInfoRequest = GetLicensingInfoRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/types/ILicensingInfo.ts" />
/// <reference path="../ServerApi/requests/GetLicensingInfoRequest.ts" />
/// <reference path="../services/ServerService.ts" />
var VizPortal;
(function (VizPortal) {
    var LicensesService = (function () {
        function LicensesService(server) {
            this.server = server;
        }
        LicensesService.prototype.fetch = function () {
            return this.server.sendRequest(new VizPortal.ServerApi.GetLicensingInfoRequest())
                .then(function (result) {
                if (result.isCore === true) {
                    // Core Licensing
                    var totalLicensedCores = _.reduce(result.coreLicensingInfos, function (memo, info) { return memo + info.numLicensedCores; }, 0);
                    var totalCoreLicensesAvailable = (result.totalCoreLicenses - totalLicensedCores);
                    return _.extend(result, {
                        totalLicensedCores: totalLicensedCores,
                        totalCoreLicensesAvailable: totalCoreLicensesAvailable
                    });
                }
                else if (result.isCore === false) {
                    // Seat Licensing
                    var totalSeatLicenses = result.seatLicensingInfo.numRemainingSeats + result.seatLicensingInfo.numLicensedUsers;
                    return _.extend(result, {
                        totalSeatLicenses: totalSeatLicenses
                    });
                }
            });
        };
        LicensesService.$inject = ['ServerService'];
        return LicensesService;
    })();
    VizPortal.LicensesService = LicensesService;
    VizPortal.Module.instance().service('LicensesService', LicensesService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/BrowserTitleService.ts" />
/// <reference path="../services/LicensesService.ts" />
var VizPortal;
(function (VizPortal) {
    var LicensesCtrl = (function () {
        function LicensesCtrl($scope, $translate, BrowserTitleService, licensingInfo) {
            BrowserTitleService.setTitle('serverSettings_licenses');
            $scope.licensingInfo = licensingInfo;
            $scope.isEmpty = !licensingInfo.productKeyInfos || !licensingInfo.productKeyInfos.length;
            $scope.formatExpirationDate = function (date) {
                if (!date || LicensesCtrl.TrialRegExp.test(date)) {
                    return '';
                }
                else if (LicensesCtrl.PermanentRegExp.test(date)) {
                    return $translate.instant('never');
                }
                else {
                    return VizPortal.L10n.localizedDate(date);
                }
            };
        }
        LicensesCtrl.PermanentRegExp = /permanent/i;
        LicensesCtrl.TrialRegExp = /trial/i;
        LicensesCtrl.$inject = [
            '$scope',
            '$translate',
            'BrowserTitleService',
            'licensingInfo'
        ];
        return LicensesCtrl;
    })();
    VizPortal.LicensesCtrl = LicensesCtrl;
    VizPortal.Module.instance().controller('LicensesCtrl', LicensesCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var ErrorMessageHandler = (function () {
        function ErrorMessageHandler(server, $translate) {
            this.server = server;
            this.$translate = $translate;
        }
        ErrorMessageHandler.prototype.getSignInErrorMessages = function (errorCode) {
            var _this = this;
            var isClientCertWithFallback = this.server.authenticationType() === VizPortal.ServerApi.AuthenticationType.ClientCertificateWithFallback;
            var errorMessageKeys = [];
            switch (errorCode) {
                case VizPortal.CommonErrorCode.SiteNotFound:
                case VizPortal.CommonErrorCode.SiteUserNotFound:
                    errorMessageKeys.push('signInFailedSiteNotFound');
                    errorMessageKeys.push('contactServerAdmin');
                    break;
                case VizPortal.CommonErrorCode.SystemUserNotFound:
                case VizPortal.UserErrorCode.UserOpenIdUserNotFound:
                    errorMessageKeys.push('errorUserNotFound');
                    errorMessageKeys.push('contactServerAdmin');
                    break;
                case VizPortal.UserErrorCode.UserOpenIdConflictingUserAccount:
                    errorMessageKeys.push('conflictingUserAccount');
                    errorMessageKeys.push('contactServerAdmin');
                    break;
                case VizPortal.SiteSwitchErrorCodes.UserUnlicensedForSite:
                    errorMessageKeys.push('signInFailedUserUnlicensedForSite');
                    errorMessageKeys.push('contactServerAdmin');
                    break;
                case VizPortal.SiteSwitchErrorCodes.SiteLocked:
                    errorMessageKeys.push('signInFailedSiteLocked');
                    errorMessageKeys.push('contactServerAdmin');
                    break;
                case VizPortal.SiteSwitchErrorCodes.SiteSuspended:
                    errorMessageKeys.push('signInFailedSiteSuspended');
                    errorMessageKeys.push('contactServerAdmin');
                    break;
                case VizPortal.LoginErrorCodes.ClientCertificateNotFound:
                    errorMessageKeys.push('signinFailedClientCertificateNotFound');
                    errorMessageKeys.push(isClientCertWithFallback ?
                        'signInUsingTableauServerCredentialsOption' : 'contactServerAdmin');
                    break;
                case VizPortal.LoginErrorCodes.ClientCertificateUserNotFoundInCertificate:
                    errorMessageKeys.push('signinFailedClientCertificateUserNotFoundInCertificate');
                    errorMessageKeys.push(isClientCertWithFallback ?
                        'signInUsingTableauServerCredentialsOption' : 'contactServerAdmin');
                    break;
                case VizPortal.LoginErrorCodes.ClientCertificateUserNotFoundOnServer:
                    errorMessageKeys.push('signinFailedClientCertificateUserNotFoundOnServer');
                    errorMessageKeys.push(isClientCertWithFallback ?
                        'signInUsingTableauServerCredentialsOption' : 'contactServerAdmin');
                    break;
                case VizPortal.LoginErrorCodes.KerberosFailed:
                case VizPortal.LoginErrorCodes.SspiFailed:
                    errorMessageKeys.push('signInFailedAutoSignin');
                    errorMessageKeys.push('signInUsingTableauServerCredentials');
                    break;
                case VizPortal.LoginErrorCodes.BadCredentials:
                    errorMessageKeys.push('signInFailedBadCredentials');
                    break;
                case VizPortal.CommonErrorCode.InvalidSession:
                    errorMessageKeys.push('sessionExpired');
                    break;
                case VizPortal.CommonErrorCode.UnlicensedServer:
                    errorMessageKeys.push('signInFailedUnlicensedServer');
                    errorMessageKeys.push('contactServerAdmin');
                    break;
                case VizPortal.UserErrorCode.UserOpenIdIdpNotReachable:
                    errorMessageKeys.push('cannotReachOpenIdIdp');
                    errorMessageKeys.push('contactServerAdmin');
                    break;
                case VizPortal.UserErrorCode.UserOpenIdBadConfig:
                    errorMessageKeys.push('openIdBadConfig');
                    errorMessageKeys.push('contactServerAdmin');
                    break;
                case VizPortal.LoginErrorCodes.OpenIdFailed:
                    errorMessageKeys.push('signInFailedUnknownReason');
                    errorMessageKeys.push('contactServerAdmin');
                    break;
                default:
                    errorMessageKeys.push('signInFailedUnknownReason');
                    break;
            }
            return _.map(errorMessageKeys, function (key) { return _this.$translate.instant(key); });
        };
        ErrorMessageHandler.$inject = [
            'ServerService',
            '$translate'
        ];
        return ErrorMessageHandler;
    })();
    VizPortal.ErrorMessageHandler = ErrorMessageHandler;
    VizPortal.Module.instance().service('ErrorMessageHandler', ErrorMessageHandler);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var ExternalAuthService = (function () {
        function ExternalAuthService($stateParams, $location, serverService, windowLocationService) {
            this.$stateParams = $stateParams;
            this.$location = $location;
            this.serverService = serverService;
            this.windowLocationService = windowLocationService;
        }
        ExternalAuthService.prototype.getLoginUrl = function () {
            if (this.serverService.isAuthenticationSaml()) {
                return ExternalAuthService.SamlLoginUrl;
            }
            else if (this.serverService.isAuthenticationOpenId()) {
                return ExternalAuthService.OpenIdLoginUrl;
            }
            return "";
        };
        ExternalAuthService.prototype.login = function () {
            if (!this.serverService.isAuthenticationExternal()) {
                throw new Error("This server doesn't use external authentication");
            }
            var closePopupWhenDone = Helpers.BooleanQueryParamRegex.test(this.$location.search()[VizPortal.UrlParamKeys.ClosePopupWhenDone]);
            var redirect;
            if (this.$stateParams.externalRedirect) {
                redirect = this.$stateParams.externalRedirect;
            }
            else if (this.$stateParams.redirect) {
                redirect = this.windowLocationService.getPathQuery() + '#' + this.$stateParams.redirect;
            }
            else if (closePopupWhenDone) {
                redirect = '/' + this.serverService.serverLanguage() + '/closePopup.html';
            }
            else {
                redirect = '/';
            }
            var siteUrlName;
            if (_.isString(this.$stateParams.site)) {
                siteUrlName = this.$stateParams.site;
            }
            else if (_.isString(this.$stateParams.redirect)) {
                var match = this.$stateParams.redirect.match('^/site/([^/]*).*$');
                siteUrlName = match && match[1];
            }
            var url = this.getLoginUrl() + '?' + this.buildQueryParams(redirect, siteUrlName, closePopupWhenDone);
            this.windowLocationService.navigateToWithoutAddingToHistory(url);
        };
        ExternalAuthService.prototype.buildQueryParams = function (redirect, siteUrlName, sendPodInfo) {
            var redirectKey, siteUrlNameKey;
            if (this.serverService.isAuthenticationSaml()) {
                redirectKey = 'dest';
                siteUrlNameKey = 'target_site';
            }
            else if (this.serverService.isAuthenticationOpenId()) {
                redirectKey = 'path';
                siteUrlNameKey = 'siteUrlName';
            }
            var queryParams = {};
            queryParams[redirectKey] = redirect;
            if (siteUrlName && _.isString(siteUrlName)) {
                queryParams[siteUrlNameKey] = siteUrlName;
            }
            // This parameter ensures that the server doesn't try to redirect the close-pop-up page to
            // the correct POD for the site. Instead, it redirects to a different page on the destination
            // POD which can send the POD info back to the parent window.
            if (sendPodInfo) {
                queryParams.sendPodInfo = sendPodInfo;
            }
            return $.param(queryParams);
        };
        ExternalAuthService.SamlLoginUrl = 'vizportal/api/saml';
        ExternalAuthService.OpenIdLoginUrl = 'vizportal/api/web/v1/auth/openId';
        ExternalAuthService.$inject = [
            '$stateParams',
            '$location',
            'ServerService',
            'WindowLocationService'
        ];
        return ExternalAuthService;
    })();
    VizPortal.ExternalAuthService = ExternalAuthService;
    VizPortal.Module.instance().service('ExternalAuthService', ExternalAuthService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../FeatureFlags.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var StartPageService = (function () {
        function StartPageService($location, $state, server, stateWrapperService) {
            this.$location = $location;
            this.$state = $state;
            this.server = server;
            this.stateWrapperService = stateWrapperService;
        }
        // Given a startPageUrl and a siteUrlName, returns the navigable start page. i.e.:
        //  1. If start page url is invalid, returns default start page for current site
        //  2. Prepends site prefix to the startPageUrl if site prefix is needed (not needed for default site
        //     urls and for non-site urls)
        StartPageService.prototype.getStartPageForSite = function (startPageUrl, siteUrlName) {
            var startPageState = this.getStartPageState(startPageUrl);
            var isDefaultSite = !!siteUrlName;
            if (!startPageState) {
                return this.getDefaultStartPageForSite(siteUrlName);
            }
            else if (this.isStartPageInASite(startPageState) && isDefaultSite) {
                return '/site/' + siteUrlName + startPageUrl;
            }
            else {
                return startPageUrl;
            }
        };
        // Gets a navigable start page url for the current user on the given site
        StartPageService.prototype.getCurrentUserStartPageForSite = function (siteUrlName) {
            return this.getStartPageForSite(this.server.getStartPage(), siteUrlName);
        };
        // Gets the navigable start page url for the current user on the current site
        StartPageService.prototype.getCurrentUserStartPageForCurrentSite = function () {
            return this.getStartPageForSite(this.server.getStartPage(), this.server.sessionSiteUrlName());
        };
        // Get the current $location with the site prefix removed
        StartPageService.prototype.getCurrentUrlAsStartPage = function () {
            return this.$location.url().replace(VizPortal.SiteUrlNameCapturingRegex, '');
        };
        // Get's state that matches the given startPageUrl, or a falsy value if no match
        StartPageService.prototype.getStartPageState = function (savedStartPageUrl) {
            if (!savedStartPageUrl) {
                return null;
            }
            var split = savedStartPageUrl.split('?');
            var path = split[0];
            // tl;dr: Assuming no query parameters shouldn't cause any bugs right now, but it might cause weird ones in the future
            // Long version: Given our current state configuration, we only need the path to resolve the correct state.
            // I think it's possible this changes in the future. For example we could have two states that share a path
            // but take different query parameters. We should still be able to ignore the query params in this case because
            // all we're trying to do is tell whether it's a site url or not, and if they share a path they must be
            // in the same site.
            var search = {};
            return this.stateWrapperService.getMatchingState(path, search);
        };
        StartPageService.prototype.isStartPageInASite = function (startPageState) {
            return this.stateWrapperService.isDescendantOf(startPageState, 'main.site');
        };
        StartPageService.prototype.getDefaultStartPageForSite = function (siteUrlName) {
            var startState = 'main.site.content.site.projects';
            if (VizPortal.FeatureFlags.homePlaceEnabled) {
                startState = 'main.site.home';
            }
            // $state.href returns the # at the front. We need to remove it
            var href = this.$state.href(startState, { siteUrlName: siteUrlName });
            return href.replace(/^#/, '');
        };
        StartPageService.$inject = ['$location', '$state', 'ServerService', 'StateWrapperService'];
        return StartPageService;
    })();
    VizPortal.StartPageService = StartPageService;
    VizPortal.Module.instance().service('StartPageService', StartPageService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/ErrorCodes.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/ErrorMessageHandler.ts" />
/// <reference path="../services/ExternalAuthService.ts" />
/// <reference path="../services/ServerService.ts" />
/// <reference path="../services/StartPageService.ts" />
/// <reference path="../services/WindowLocationService.ts" />
/// <reference path="../services/WindowPopupService.ts" />
/// <reference path="../ServerApi/types/IError.ts" />
var VizPortal;
(function (VizPortal) {
    var LoginCtrl = (function () {
        function LoginCtrl($scope, server, $state, $stateParams, $location, $translate, externalAuthService, startPageService, windowLocationService, windowPopupService, errorMessageHandler) {
            function authenticatedRedirect() {
                // if we are a popup, window simply gets closed, no need to redirect
                if (windowPopupService.maybeNotifyAndClose()) {
                    return;
                }
                // if we're not a popup, redirect user to the appropriate place
                var redirect = $stateParams.redirect;
                var externalRedirect = $stateParams.externalRedirect;
                var isSigninToSpecificSite = _.isString($stateParams.site);
                // If this is a multisite session and the user did not specify a url,
                // let the user choose which site to enter
                if (externalRedirect) {
                    // External: does not require hash prefix
                    windowLocationService.setPathQueryFragment(externalRedirect);
                }
                else if (redirect) {
                    // In-app: uses hash prefix
                    $location.url(redirect);
                }
                else if (server.isSessionMultiSite() && !isSigninToSpecificSite) {
                    $state.go('login.site');
                }
                else {
                    $location.url(startPageService.getCurrentUserStartPageForCurrentSite());
                }
            }
            function handleLoginErrorCode(errorCode) {
                $scope.errorMessages = errorMessageHandler.getSignInErrorMessages(errorCode);
                if (errorCode === VizPortal.LoginErrorCodes.KerberosFailed || errorCode === VizPortal.LoginErrorCodes.SspiFailed) {
                    $scope.autoLoginDidFail = true;
                }
            }
            $scope.maybeLogin = function () {
                if (server.authenticationType() === VizPortal.ServerApi.AuthenticationType.ClientCertificate) {
                    // Username and password is not valid for client certificate without fallback, so attempt to autoLogin
                    $scope.autoLogin();
                }
                else if ($scope.loginForm.$valid) {
                    $scope.errorMessages = [];
                    $scope.busy = true;
                    server.login($scope.credentials.username, $scope.credentials.password, $stateParams.site)
                        .then(authenticatedRedirect, function (error) {
                        if (error && error.code === VizPortal.CommonErrorCode.RedirectToOtherPod) {
                            var redirectUrl = $stateParams.externalRedirect;
                            if (!redirectUrl && _.isString($stateParams.redirect)) {
                                redirectUrl = '/#' + $stateParams.redirect;
                            }
                            if (!redirectUrl && _.isString($stateParams.site)) {
                                redirectUrl = '/#/site/' + $stateParams.site + '/';
                            }
                            if (!redirectUrl) {
                                redirectUrl = '/#' + $location.url();
                            }
                            server.redirectToOtherPod(error, redirectUrl);
                            return;
                        }
                        // Clear the password if credentials failed
                        $scope.credentials.password = '';
                        // This is really not how error should be handled. However, somehow in the development of the project,
                        // some promise are rejected using ServerAPI.IError, and other simply with the error code. For example,
                        // 401 errors returns only the code. To handle those scenarios, the error is coerced to either
                        // error.code or simply error. In the future, it would be important to have a standard on how promises
                        // can be rejected. A suggested approach is that promises should always be rejected with an instance of Error.
                        handleLoginErrorCode(error && error.code || error);
                        $scope.busy = false;
                    });
                }
                else if ($scope.loginForm.$error.required) {
                    if (!$scope.credentials.username) {
                        $scope.errorMessages = [$translate.instant('enterYourUsername')];
                        angular.element('input[name="username"]').focus();
                    }
                    else if (!$scope.credentials.password) {
                        $scope.errorMessages = [$translate.instant('enterYourPassword')];
                        angular.element('input[name="password"]').focus();
                    }
                }
            };
            $scope.shouldDisplayWindowsCredentialsLink = function () {
                return server.isWindowsCredentialsAutoLogin() && !$scope.autoLoginDidFail;
            };
            $scope.isUsernameAndPasswordEnabled = function () {
                return !server.isAuthenticationExternal() &&
                    server.authenticationType() !== VizPortal.ServerApi.AuthenticationType.ClientCertificate;
            };
            $scope.autoLogin = function () {
                $scope.busy = true;
                return server.autoLogin($stateParams.site)
                    .then(authenticatedRedirect, function (errorCode) {
                    handleLoginErrorCode(errorCode);
                    $scope.busy = false;
                    $scope.initialized = true;
                });
            };
            $scope.windowsCredentialsDisplayName = function () { return server.sessionUserDisplayName(); };
            var licenseExpirationDateIfWithinWarningPeriod = server.licenseExpirationDateIfWithinWarningPeriod();
            if ($stateParams.error) {
                // coerce to number
                var errorCode = +$stateParams.error;
                handleLoginErrorCode(errorCode);
            }
            else if (licenseExpirationDateIfWithinWarningPeriod) {
                $scope.errorMessages = [
                    $translate.instant('licenseExpirationDateWarningMessage', {
                        LICENSE_EXPIRATION_DATE: VizPortal.L10n.localizedDateTime(licenseExpirationDateIfWithinWarningPeriod)
                    })
                ];
            }
            $scope.preloginCustomization = server.preloginCustomization();
            var allowAutoSignin = !Helpers.BooleanQueryParamRegex.test($stateParams.disableAutoSignin);
            if (!server.inSession() && server.isAuthenticationAutoLogin() && allowAutoSignin) {
                // Attempt auto login unless there is a query parameter saying not to
                $scope.autoLogin();
            }
            else if (server.isAuthenticationExternal()) {
                externalAuthService.login();
            }
            else {
                $scope.initialized = true;
            }
            $scope.credentials = {
                username: '',
                password: ''
            };
        }
        LoginCtrl.$inject = [
            '$scope',
            'ServerService',
            '$state',
            '$stateParams',
            '$location',
            '$translate',
            'ExternalAuthService',
            'StartPageService',
            'WindowLocationService',
            'WindowPopupService',
            'ErrorMessageHandler'
        ];
        return LoginCtrl;
    })();
    VizPortal.LoginCtrl = LoginCtrl;
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    (function (Keys) {
        Keys[Keys["Backspace"] = 8] = "Backspace";
        Keys[Keys["Tab"] = 9] = "Tab";
        Keys[Keys["Enter"] = 13] = "Enter";
        Keys[Keys["Escape"] = 27] = "Escape";
        Keys[Keys["Space"] = 32] = "Space";
        Keys[Keys["End"] = 35] = "End";
        Keys[Keys["Home"] = 36] = "Home";
        Keys[Keys["ArrowLeft"] = 37] = "ArrowLeft";
        Keys[Keys["ArrowUp"] = 38] = "ArrowUp";
        Keys[Keys["ArrowRight"] = 39] = "ArrowRight";
        Keys[Keys["ArrowDown"] = 40] = "ArrowDown";
        Keys[Keys["Delete"] = 46] = "Delete";
    })(VizPortal.Keys || (VizPortal.Keys = {}));
    var Keys = VizPortal.Keys;
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../types/IGetItemsParams.ts" />
/// <reference path="../types/IGetItemsResult.ts" />
/// <reference path="../types/ISiteNameWithId.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetSiteNamesRequest = (function (_super) {
            __extends(GetSiteNamesRequest, _super);
            function GetSiteNamesRequest(params) {
                _super.call(this, 'getSiteNames', params);
            }
            return GetSiteNamesRequest;
        })(ServerApi.Request);
        ServerApi.GetSiteNamesRequest = GetSiteNamesRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/GetSiteNamesRequest.ts" />
/// <reference path="Resource.ts" />
var VizPortal;
(function (VizPortal) {
    var SiteNameSansIds = (function (_super) {
        __extends(SiteNameSansIds, _super);
        function SiteNameSansIds(FetcherFactory) {
            _super.call(this, FetcherFactory.getServerResourceFetcher(VizPortal.ServerApi.GetSiteNamesAcrossAllPodsRequest, function (result) { return result.siteNames; }));
        }
        SiteNameSansIds.$inject = ['FetcherFactory'];
        return SiteNameSansIds;
    })(VizPortal.Resource);
    VizPortal.SiteNameSansIds = SiteNameSansIds;
    VizPortal.Module.instance().service('SiteNamesAcrossAllPods', SiteNameSansIds);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../types/IGetItemsParams.ts" />
/// <reference path="../types/IGetItemsResult.ts" />
/// <reference path="../types/ISiteNameSansId.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetSiteNamesAcrossAllPodsRequest = (function (_super) {
            __extends(GetSiteNamesAcrossAllPodsRequest, _super);
            function GetSiteNamesAcrossAllPodsRequest(params) {
                _super.call(this, 'getSiteNamesAcrossAllPods', params);
            }
            return GetSiteNamesAcrossAllPodsRequest;
        })(ServerApi.Request);
        ServerApi.GetSiteNamesAcrossAllPodsRequest = GetSiteNamesAcrossAllPodsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var SiteSwitchService = (function () {
        function SiteSwitchService($location, $q, $rootScope, $state, $translate, server, stateWrapper, toaster, windowLocation) {
            var _this = this;
            this.$location = $location;
            this.$q = $q;
            this.$rootScope = $rootScope;
            this.$state = $state;
            this.$translate = $translate;
            this.server = server;
            this.stateWrapper = stateWrapper;
            this.toaster = toaster;
            this.windowLocation = windowLocation;
            $rootScope.$on('$locationChangeSuccess', function () {
                var toState = _this.stateWrapper.getMatchingState(_this.$location.path(), _this.$location.search());
                if (_this.stateWrapper.isDescendantOf(toState, 'main.server')) {
                    _this.previousServerUrl = _this.$location.url();
                }
                else if (stateWrapper.isDescendantOf(toState, 'main.site')) {
                    _this.previousSiteUrl = _this.$location.url();
                }
            });
        }
        SiteSwitchService.prototype.serverUrl = function () {
            if (this.previousServerUrl) {
                return '/#' + this.previousServerUrl;
            }
            else {
                return this.$state.href('main.server.status');
            }
        };
        SiteSwitchService.prototype.siteUrl = function () {
            if (this.previousSiteUrl) {
                return '/#' + this.previousSiteUrl;
            }
            else {
                return this.$state.href('main.site.content.site.projects', { siteUrlName: this.server.sessionSiteUrlName() });
            }
        };
        SiteSwitchService.prototype.switchToSite = function (urlName) {
            var _this = this;
            if (this.server.isCurrentSiteUrlName(urlName)) {
                if (this.inServerState()) {
                    // server -> current site
                    if (this.previousSiteUrl) {
                        this.$location.url(this.previousSiteUrl);
                    }
                    else {
                        this.$state.go('main.site.content.site.projects', { siteUrlName: urlName });
                    }
                }
                else {
                }
            }
            else {
                // server/site -> other site
                // TFSID: 404042 reload page afterwards
                this.switchIfNeeded(urlName, '/#/site/' + urlName + '/').then(function () {
                    _this.windowLocation.navigateTo(_this.$state.href('main.site.content.site.projects', { siteUrlName: urlName }, { absolute: true }));
                    _this.windowLocation.reload();
                });
            }
        };
        /**
        * Switches the site if the given urLName if it's not the current site's urlName
        *
        * Use this instead of ServerService.switchSiteIfNeeded in order to give proper
        * feedback in the error conditions
        */
        SiteSwitchService.prototype.switchIfNeeded = function (urlName, podRedirectPath) {
            var _this = this;
            this.previousSiteUrl = null;
            return this.server.switchSiteIfNeeded(urlName, podRedirectPath)
                .fail(function (error) {
                var errorLocKey = _this.getSwitchSiteErrorLocKey(error);
                // Site switch failed
                if (_this.server.isSessionMultiSite()) {
                    // If multi-site, let the user choose which site to go to
                    _this.$state.go('login.error.noSite', {
                        detailsLocKey: errorLocKey,
                        redirectState: 'login.site',
                        redirectLocKey: 'goToSiteList'
                    });
                }
                else {
                    // We're single site, or this is our first state  (from a full page reload)
                    // TODO: Should have a redirect on error page to precise last state or user's start page
                    _this.$state.go('login.error.noSite', {
                        detailsLocKey: errorLocKey
                    });
                }
                return _this.$q.reject(error);
            });
        };
        SiteSwitchService.prototype.getSwitchSiteErrorLocKey = function (error) {
            switch (error.code) {
                case VizPortal.SiteSwitchErrorCodes.UserNotMemberOfSiteOrSiteNotExist:
                    return 'switchSiteFailedNotMemberOrNotExist';
                case VizPortal.SiteSwitchErrorCodes.SiteLocked:
                    return 'switchSiteFailedSiteLocked';
                case VizPortal.SiteSwitchErrorCodes.SiteSuspended:
                    return 'switchSiteFailedSiteSuspended';
                case VizPortal.SiteSwitchErrorCodes.UserUnlicensedForSite:
                    return 'switchSiteFailedUserUnlicensed';
                default:
                    return 'switchSiteFailedUnknown';
            }
        };
        SiteSwitchService.prototype.switchIfNeededNoFeedback = function (urlName) {
            this.previousSiteUrl = null;
            return this.server.switchSiteIfNeeded(urlName);
        };
        SiteSwitchService.prototype.inServerState = function () {
            return this.$state.includes('main.server.**');
        };
        SiteSwitchService.$inject = [
            '$location',
            '$q',
            '$rootScope',
            '$state',
            '$translate',
            'ServerService',
            'StateWrapperService',
            'ToasterService',
            'WindowLocationService'
        ];
        return SiteSwitchService;
    })();
    VizPortal.SiteSwitchService = SiteSwitchService;
    VizPortal.Module.instance().service('SiteSwitchService', SiteSwitchService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/Filter.ts" />
/// <reference path="../helpers/Keys.ts" />
/// <reference path="../models/ISliceable.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../resources/SiteNameSansIds.ts" />
/// <reference path="../ServerApi/requests/GetSiteNamesAcrossAllPodsRequest.ts" />
/// <reference path="../services/ServerService.ts" />
/// <reference path="../services/SiteSwitchService.ts" />
/// <reference path="../services/StartPageService.ts" />
var VizPortal;
(function (VizPortal) {
    var LoginSitePickerCtrl = (function () {
        function LoginSitePickerCtrl($scope, $location, siteNames, siteSwitchService, startPageService) {
            $scope.siteSearchValue = '';
            $scope.$watch('siteSearchValue', function (newValue) {
                var query = siteNames.all();
                if (_.isString(newValue) && newValue.length > 0) {
                    query = query.withFilters([VizPortal.Filter.search(newValue)]);
                }
                $scope.sliceableSiteNames = query;
            });
            $scope.currentRow = {
                index: 0
            };
            $scope.select = function (siteName) {
                var siteUrl = siteName.urlName;
                siteSwitchService.switchIfNeeded(siteUrl, '/#/site/' + siteUrl + '/').then(function () {
                    return $location.url(startPageService.getCurrentUserStartPageForCurrentSite());
                });
            };
            $scope.$watch('site', function (newSiteName) {
                if (!newSiteName)
                    return;
                $scope.select(newSiteName);
            });
            $scope.handleKeyEvent = function ($event) {
                switch ($event.which) {
                    case VizPortal.Keys.ArrowDown:
                        $event.preventDefault();
                        $scope.currentRow.index++;
                        break;
                    case VizPortal.Keys.ArrowUp:
                        $event.preventDefault();
                        $scope.currentRow.index--;
                        break;
                    case VizPortal.Keys.Enter:
                        $scope.select($scope.currentRow.object);
                        break;
                    case VizPortal.Keys.Escape:
                        $scope.siteSearchValue = '';
                        break;
                }
            };
        }
        LoginSitePickerCtrl.$inject = [
            '$scope',
            '$location',
            'SiteNamesAcrossAllPods',
            'SiteSwitchService',
            'StartPageService'
        ];
        return LoginSitePickerCtrl;
    })();
    VizPortal.LoginSitePickerCtrl = LoginSitePickerCtrl;
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../types/IGetItemsParams.ts" />
/// <reference path="../types/IGetItemsResult.ts" />
/// <reference path="../types/IWorkbookRevision.ts" />
/// <reference path="../types/actionParams.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetWorkbookVersionsRequest = (function (_super) {
            __extends(GetWorkbookVersionsRequest, _super);
            function GetWorkbookVersionsRequest(params) {
                _super.call(this, 'getWorkbookVersions', params);
            }
            return GetWorkbookVersionsRequest;
        })(ServerApi.Request);
        ServerApi.GetWorkbookVersionsRequest = GetWorkbookVersionsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var DeleteWorkbookVersionsRequest = (function (_super) {
            __extends(DeleteWorkbookVersionsRequest, _super);
            function DeleteWorkbookVersionsRequest(ids) {
                _super.call(this, 'deleteWorkbookVersions', { ids: ids });
            }
            return DeleteWorkbookVersionsRequest;
        })(ServerApi.Request);
        ServerApi.DeleteWorkbookVersionsRequest = DeleteWorkbookVersionsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../ServerApi/requests/getWorkbookVersionsRequest.ts" />
/// <reference path="../ServerApi/requests/DeleteWorkbookVersionsRequest.ts" />
var VizPortal;
(function (VizPortal) {
    var WorkbookRevisions = (function (_super) {
        __extends(WorkbookRevisions, _super);
        function WorkbookRevisions(ErrorNotifyingServer, FetcherFactory) {
            _super.call(this, FetcherFactory.getServerResourceFetcher(VizPortal.ServerApi.GetWorkbookVersionsRequest, function (result) { return result.versions; }));
            this.ErrorNotifyingServer = ErrorNotifyingServer;
            this.server = ErrorNotifyingServer.getServerService();
        }
        WorkbookRevisions.prototype.del = function (id) {
            return this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests([id], function (idsBlock) { return new VizPortal.ServerApi.DeleteWorkbookVersionsRequest(idsBlock); }), VizPortal.ResultHelper.combineResults);
        };
        WorkbookRevisions.$inject = ['ErrorNotifyingServer', 'FetcherFactory'];
        return WorkbookRevisions;
    })(VizPortal.Resource);
    VizPortal.WorkbookRevisions = WorkbookRevisions;
    VizPortal.Module.instance().service('WorkbookRevisions', WorkbookRevisions);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var PreviewWorkbookRevisionAction = (function () {
        function PreviewWorkbookRevisionAction($translate, toaster, windowLocationService) {
            this.$translate = $translate;
            this.toaster = toaster;
            this.windowLocationService = windowLocationService;
        }
        PreviewWorkbookRevisionAction.prototype.openPreview = function (revision) {
            this.windowLocationService.open('http://www.google.com');
        };
        PreviewWorkbookRevisionAction.$inject = ['$translate',
            'ToasterService',
            'WindowLocationService'];
        return PreviewWorkbookRevisionAction;
    })();
    VizPortal.PreviewWorkbookRevisionAction = PreviewWorkbookRevisionAction;
    VizPortal.Module.instance().service('PreviewWorkbookRevisionAction', PreviewWorkbookRevisionAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/ResultHelper.ts" />
var VizPortal;
(function (VizPortal) {
    var DeleteWorkbookRevisionAction = (function () {
        function DeleteWorkbookRevisionAction($translate, ConfirmActionDialog, toasterService, WorkbookRevisions) {
            this.$translate = $translate;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.toasterService = toasterService;
            this.WorkbookRevisions = WorkbookRevisions;
        }
        DeleteWorkbookRevisionAction.prototype.showDialogForAction = function (revision, context) {
            var _this = this;
            return this.ConfirmActionDialog.open({
                scope: context.scope,
                title: this.$translate.instant('delete'),
                bodyText: this.$translate.instant('deleteWorkbookRevisionConfirm'),
                actionName: this.$translate.instant('delete'),
                isDeleteAction: true,
                action: function (dialogInstance) {
                    return _this.WorkbookRevisions.del(revision.id).then(function (result) {
                        if (VizPortal.ResultHelper.hasErrors(result)) {
                            _this.toasterService.pop({ type: VizPortal.ToastType.Error, text: _this.$translate.instant('deleteWorkbookRevisionError') });
                        }
                        else {
                            _this.toasterService.pop({ type: VizPortal.ToastType.Info, text: _this.$translate.instant('deleteWorkbookRevisionSuccess') });
                        }
                    });
                }
            }).result;
        };
        DeleteWorkbookRevisionAction.$inject = ['$translate',
            'ConfirmActionDialog',
            'ToasterService',
            'WorkbookRevisions'];
        return DeleteWorkbookRevisionAction;
    })();
    VizPortal.DeleteWorkbookRevisionAction = DeleteWorkbookRevisionAction;
    VizPortal.Module.instance().service('DeleteWorkbookRevisionAction', DeleteWorkbookRevisionAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/types/IWorkbookRevision.ts" />
/// <reference path="PreviewWorkbookRevisionAction.ts" />
/// <reference path="DeleteWorkbookRevisionAction.ts" />
/// <reference path="DownloadActions.ts" />
var VizPortal;
(function (VizPortal) {
    var RevisionActions = (function () {
        function RevisionActions($q, $translate, PreviewWorkbookRevisionAction, DeleteWorkbookRevisionAction, DownloadActions) {
            this.$q = $q;
            this.$translate = $translate;
            this.PreviewWorkbookRevisionAction = PreviewWorkbookRevisionAction;
            this.DeleteWorkbookRevisionAction = DeleteWorkbookRevisionAction;
            this.DownloadActions = DownloadActions;
            this.workbookRevisionsActionDefinition = [
                this.previewWorkbookRevisionAction(),
                this.deleteWorkbookRevisionAction(),
                this.downloadWorkbookRevisionAction()
            ];
        }
        // public api
        RevisionActions.prototype.getWorkbookRevisionActionButtons = function () {
            return this.workbookRevisionsActionDefinition;
        };
        // action button factories
        RevisionActions.prototype.previewWorkbookRevisionAction = function () {
            var _this = this;
            return {
                name: 'preview',
                translate: 'preview_action',
                isAvailable: function (items) { return true; },
                execute: function (items) {
                    _this.PreviewWorkbookRevisionAction.openPreview(items.first());
                    console.log('TODO: previewWorkbookRevisionAction');
                    return _this.$q.when({});
                }
            };
        };
        RevisionActions.prototype.deleteWorkbookRevisionAction = function () {
            var _this = this;
            return {
                name: 'remove',
                translate: 'remove_action',
                isAvailable: function (items) { return items.size() === 1; },
                execute: function (items, context) {
                    var scope = context.scope;
                    _this.DeleteWorkbookRevisionAction.showDialogForAction(items.first(), context).then(function () { return scope.refreshItems(); });
                }
            };
        };
        RevisionActions.prototype.downloadWorkbookRevisionAction = function () {
            var _this = this;
            return {
                name: 'download',
                translate: 'download_action',
                isAvailable: function (items) { return true; },
                execute: function (items) {
                    return _this.DownloadActions.downloadWorkbookRevision(items.first());
                }
            };
        };
        RevisionActions.$inject = ['$q',
            '$translate',
            'PreviewWorkbookRevisionAction',
            'DeleteWorkbookRevisionAction',
            'DownloadActions'];
        return RevisionActions;
    })();
    VizPortal.RevisionActions = RevisionActions;
    VizPortal.Module.instance().service('RevisionActions', RevisionActions);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../filters/SizeFilter.ts" />
/// <reference path="../helpers/ActionButtonsHelper.ts" />
/// <reference path="../models/ContentTypes.ts" />
/// <reference path="../models/ISliceable.ts" />
/// <reference path="../models/resourceInfoParts.ts" />
/// <reference path="../models/Set.ts" />
/// <reference path="../resources/WorkbookRevisions.ts" />
/// <reference path="../services/ActionPanelService.ts" />
/// <reference path="../services/QueryService.ts" />
/// <reference path="../services/RevisionActions.ts" />
/// <reference path="../services/ServerService.ts" />
/// <reference path="../../common/react/components/dataGrid/DataGrid.ts" />
/// <reference path="../../common/react/components/dataGrid/DataGridCells.ts" />
/// <reference path="../../common/react/components/ActionsMenuColumnCell.ts" />
/// <reference path="../../common/react/CommonDataGridColumns.ts" />
/// <reference path="../../common/react/CommonStyles.ts" />
/// <reference path="../../common/react/SparseCachedList.ts" />
var VizPortal;
(function (VizPortal) {
    var RevisionHistoryDialogCtrl = (function () {
        function RevisionHistoryDialogCtrl($scope, $translate, AngularToReactDataGridBridge, queryService, AngularContextFactory, revisionActions, ServerService, WorkbookRevisions, sizeFilter) {
            this.$scope = $scope;
            this.$translate = $translate;
            this.AngularToReactDataGridBridge = AngularToReactDataGridBridge;
            this.queryService = queryService;
            this.AngularContextFactory = AngularContextFactory;
            this.revisionActions = revisionActions;
            this.ServerService = ServerService;
            this.WorkbookRevisions = WorkbookRevisions;
            this.sizeFilter = sizeFilter;
            this.configureForReactDataGrid();
            var queryUpdater = this.createQueryUpdater();
            $scope.refreshItems = function () {
                queryUpdater.refresh();
            };
            $scope.refreshItems();
        }
        RevisionHistoryDialogCtrl.prototype.configureForReactDataGrid = function () {
            var _this = this;
            this.$scope.dataGridProps = {
                cols: this.dataGridColumns(this.$scope),
                update: 0,
                onCellClick: function (item, columnKey) {
                    _this.$scope.$apply(function () {
                        if (!item.deleted) {
                            if (VizPortal.FeatureFlags.toggleSelectableRow) {
                                var onlySelectedRow = _this.$scope.selectedItems.size() === 1 && _this.$scope.selectedItems.contains(item);
                                var isActionMenu = columnKey === 'actions';
                                if (onlySelectedRow && !isActionMenu) {
                                    _this.$scope.selectedItems.toggle(item);
                                }
                                else {
                                    _this.$scope.selectedItems.clear();
                                    _this.$scope.selectedItems.add(item);
                                }
                            }
                            else {
                                _this.$scope.selectedItems.clear();
                                _this.$scope.selectedItems.add(item);
                            }
                            var keys = _this.$scope.selectedItems.keys();
                            _this.$scope.dataGridProps.selectedKeys = _.object(keys, keys);
                            _this.$scope.dataGridProps.update++;
                        }
                    });
                }
            };
            // TODO: find a better way to monitor changes in selected items
            this.$scope.$watch(function () { return _this.$scope.selectedItems.size(); }, function () {
                var keys = _this.$scope.selectedItems.keys();
                _this.$scope.dataGridProps.selectedKeys = _.object(keys, keys);
                _this.$scope.dataGridProps.update++;
            });
        };
        RevisionHistoryDialogCtrl.prototype.createQueryUpdater = function () {
            var _this = this;
            return this.queryService.createQueryUpdater(this.$scope, VizPortal.WorkbookRevisionContentType, this.WorkbookRevisions, function (resourceQuery) {
                _this.AngularToReactDataGridBridge.updateReactDataGridRowStore({
                    scope: _this.$scope,
                    sliceable: resourceQuery,
                    getRowStyle: _this.getRowStyle
                });
                _this.$scope.sliceable = resourceQuery;
            }, { forWorkbook: this.$scope.workbookId });
        };
        RevisionHistoryDialogCtrl.prototype.dataGridColumns = function ($scope) {
            var columns = [];
            // 'Name' columns
            columns.push({
                name: 'version-num-col',
                dataKey: 'versionNumber',
                text: this.$translate.instant('revisionHistoryRevisionNumberColumn'),
                cellFormatter: this.revisionNameCellFormatter(),
                headerStyle: { textAlign: 'left' },
                cellStyle: { textAlign: 'left' },
                resizable: false,
                growToFit: true,
                sortable: false
            });
            // 'Owner' column
            columns.push({
                name: 'owner-col',
                dataKey: 'owner',
                text: this.$translate.instant('revisionHistoryOwnerColumn'),
                cellFormatter: VizPortalReact.DataGridCells.PlainTextCell('publisher'),
                headerStyle: { textAlign: 'left' },
                cellStyle: { textAlign: 'left' },
                resizable: false,
                growToFit: true,
                sortable: false
            });
            // 'Date' column
            columns.push({
                name: 'publish-time-col',
                dataKey: 'publishTime',
                text: this.$translate.instant('revisionHistoryPublishDateColumn'),
                cellFormatter: VizPortalReact.DataGridCells.DateTimeCell('publishTime'),
                headerStyle: { textAlign: 'right' },
                cellStyle: { textAlign: 'right' },
                resizable: false,
                growToFit: true,
                sortable: false
            });
            // 'Actions' column
            columns.push({
                name: 'actions-col',
                dataKey: 'actions',
                text: '',
                cellFormatter: this.revisionActionsCellFormatter($scope),
                headerStyle: { textAlign: 'right' },
                cellStyle: { textAlign: 'right', overflow: 'visible' },
                resizable: false,
                sortable: false
            });
            return columns;
        };
        RevisionHistoryDialogCtrl.prototype.revisionNameCellFormatter = function () {
            var $translate = this.$translate;
            return React.createFactory(React.createClass({
                render: function () {
                    var props = this.props;
                    var str = $translate.instant('revisionHistoryRevisionNumberLabel', { REVISION_NUMBER: props.value });
                    return React.DOM.span({}, str);
                }
            }));
        };
        RevisionHistoryDialogCtrl.prototype.revisionActionsCellFormatter = function ($scope) {
            var actions = this.revisionActions.getWorkbookRevisionActionButtons();
            var $translate = this.$translate;
            return React.createFactory(React.createClass({
                render: function () {
                    var revision = this.props.row.data;
                    return revision.deleted
                        ? React.DOM.span({}, '👻')
                        : VizPortalReact.ActionsMenuColumnCell.element({
                            actions: actions,
                            getActionTarget: function () {
                                return {
                                    items: $scope.selectedItems,
                                    actionContext: { scope: $scope }
                                };
                            },
                            translate: function (id) { return $translate.instant(id); }
                        }, React.DOM.div({ key: 'name' }, ''));
                }
            }));
        };
        RevisionHistoryDialogCtrl.prototype.getRowStyle = function (revision) {
            return revision.deleted
                ? {
                    backgroundColor: VizPortalReact.CommonStyles.Colors.White,
                    color: VizPortalReact.CommonStyles.Colors.DisabledTextColor
                }
                : null;
        };
        RevisionHistoryDialogCtrl.$inject = [
            '$scope',
            '$translate',
            'AngularToReactDataGridBridge',
            'QueryService',
            'AngularContextFactory',
            'RevisionActions',
            'ServerService',
            'WorkbookRevisions',
            'sizeFilter'
        ];
        return RevisionHistoryDialogCtrl;
    })();
    VizPortal.RevisionHistoryDialogCtrl = RevisionHistoryDialogCtrl;
    VizPortal.Module.instance().controller('RevisionHistoryDialogCtrl', RevisionHistoryDialogCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/ErrorMessageHandler.ts" />
/// <reference path="../services/ServerService.ts" />
/// <reference path="../services/WindowLocationService.ts" />
var VizPortal;
(function (VizPortal) {
    var SignInErrorCtrl = (function () {
        function SignInErrorCtrl($scope, $stateParams, $location, windowLocationService, errorMessageHandler) {
            // Coerse error code
            var errorCode = +$stateParams.errorCode;
            var redirectPath = $stateParams.redirectPath || '/';
            $scope.tryAgain = function () {
                // Prevent redirect injection by appending the current host to the redirect
                var target = $location.protocol() + '://' + $location.host() + ':' + $location.port() + redirectPath;
                windowLocationService.navigateToWithoutAddingToHistory(target);
            };
            $scope.errorMessages = errorMessageHandler.getSignInErrorMessages(errorCode);
        }
        SignInErrorCtrl.$inject = [
            '$scope',
            '$stateParams',
            '$location',
            'WindowLocationService',
            'ErrorMessageHandler'
        ];
        return SignInErrorCtrl;
    })();
    VizPortal.SignInErrorCtrl = SignInErrorCtrl;
    VizPortal.Module.instance().controller('SignInErrorCtrl', SignInErrorCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../common/react/CommonDataGridColumns.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var ScheduleGrid;
    (function (ScheduleGrid) {
        function columns(translate, scope, actions, isServerPage, serverUrls, siteUrls, scheduleTypeNameFilter, scheduleActionNameFilter) {
            var columns = [
                VizPortalReact.CommonDataGridColumns.selected(scope),
                nameColumn(translate, isServerPage, serverUrls, siteUrls, actions, scope),
                {
                    name: 'frequency-col',
                    dataKey: 'scheduleType',
                    text: translate('column_schedule_frequency'),
                    direction: 'asc',
                    cellFormatter: VizPortalReact.DataGridCells.PlainTextCellWithTransform('scheduleType', scheduleTypeNameFilter)
                },
                {
                    name: 'task-type-col',
                    dataKey: 'scheduledAction',
                    text: translate('column_schedule_type'),
                    direction: 'asc',
                    cellFormatter: VizPortalReact.DataGridCells.PlainTextCellWithTransform('scheduledAction', scheduleActionNameFilter)
                },
                {
                    name: 'task-count-col',
                    dataKey: 'taskCount',
                    text: translate('column_schedule_task_count'),
                    cellFormatter: VizPortalReact.DataGridCells.LocalizedCount('taskCount'),
                    direction: 'asc',
                    headerStyle: { textAlign: 'right' },
                    cellStyle: { textAlign: 'right' }
                },
                {
                    name: 'execution-col',
                    dataKey: 'parallel',
                    direction: 'asc',
                    text: translate('column_schedule_behavior'),
                    cellFormatter: VizPortalReact.DataGridCells.PlainTextCellWithTransform('parallel', function (parallel) {
                        return parallel ? translate('scheduleBehaviorParallel') : translate('scheduleBehaviorSerial');
                    })
                },
                {
                    name: 'next-run-at-col',
                    dataKey: 'runNextAt',
                    text: translate('column_schedule_next_run'),
                    direction: 'asc',
                    cellFormatter: VizPortalReact.DataGridCells.DateTimeCell('runNextAt', translate('disabled'))
                }
            ];
            return columns;
        }
        ScheduleGrid.columns = columns;
        function nameColumn(translate, isServerPage, serverUrls, siteUrls, actions, scope) {
            return VizPortalReact.CommonDataGridColumns.withActions({
                name: 'name-col',
                dataKey: 'name',
                text: translate('column_name'),
                direction: 'asc',
                cellFormatter: VizPortalReact.DataGridCells.Link(function (row) {
                    return {
                        text: row.data.name,
                        url: isServerPage
                            ? serverUrls.schedule(row.data.id, row.data.scheduledAction)
                            : siteUrls.schedule(row.data.id, row.data.scheduledAction),
                        iconClassName: 'tb-grid-icon-schedule',
                        iconTitle: translate('schedule')
                    };
                })
            }, {
                actions: actions,
                getActionTarget: function () {
                    return {
                        items: scope.selectedItems,
                        actionContext: { scope: scope }
                    };
                },
                translate: translate
            });
        }
    })(ScheduleGrid = VizPortalReact.ScheduleGrid || (VizPortalReact.ScheduleGrid = {}));
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var SchedulesConfig = (function () {
        function SchedulesConfig($state) {
            this.$state = $state;
        }
        SchedulesConfig.prototype.siteUrlFor = function (schedule) {
            return this.$state.href('main.site.schedule.' + this.defaultChildState(schedule), { id: schedule.id });
        };
        SchedulesConfig.prototype.serverUrlFor = function (schedule) {
            return this.$state.href('main.server.schedule.' + this.defaultChildState(schedule), { id: schedule.id });
        };
        SchedulesConfig.prototype.defaultChildState = function (schedule) {
            return schedule.scheduledAction === VizPortal.ServerApi.ScheduleActions.Extract
                ? 'extractTasks'
                : 'subscriptions';
        };
        SchedulesConfig.$inject = ['$state'];
        return SchedulesConfig;
    })();
    VizPortal.SchedulesConfig = SchedulesConfig;
    VizPortal.Module.instance().service('SchedulesConfig', SchedulesConfig);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../../app/IMainScope.ts" />
/// <reference path="../../app/IPlaceTitleScope.ts" />
/// <reference path="../../app/content/ScheduleGrid.ts" />
/// <reference path="../../common/react/components/dataGrid/AngularToReactDataGridBridge.ts" />
/// <reference path="../helpers/ActionButtonsHelper.ts" />
/// <reference path="../models/IEmptyTemplate.ts" />
/// <reference path="../models/ITemplate.ts" />
/// <reference path="../resources/Schedules.ts" />
/// <reference path="../services/BrowserTitleService.ts" />
/// <reference path="../services/CreateScheduleAction.ts" />
/// <reference path="../services/DeleteSchedulesAction.ts" />
/// <reference path="../services/QueryService.ts" />
/// <reference path="../services/RenameScheduleAction.ts" />
/// <reference path="../services/RunServerSchedulesAction.ts" />
/// <reference path="../services/RunSchedulesAction.ts" />
/// <reference path="../services/SchedulePermissions.ts" />
/// <reference path="../services/SchedulesConfig.ts" />
/// <reference path="../services/SelectionService.ts" />
/// <reference path="../services/SetScheduleStatusAction.ts" />
/// <reference path="../services/SorterFactory.ts" />
var VizPortal;
(function (VizPortal) {
    var SchedulesCtrl = (function () {
        function SchedulesCtrl($scope, $state, $translate, AngularToReactDataGridBridge, $filter, BrowserTitleService, siteId, queryService, SchedulesConfig, SchedulePermissions, SelectionService, Schedules, SorterFactory, ServerService, CreateScheduleAction, SetScheduleStatusAction, RunServerSchedulesAction, RunSchedulesAction, DeleteSchedulesAction, RenameScheduleAction) {
            var _this = this;
            this.$scope = $scope;
            this.$state = $state;
            this.$translate = $translate;
            this.AngularToReactDataGridBridge = AngularToReactDataGridBridge;
            this.$filter = $filter;
            this.SchedulesConfig = SchedulesConfig;
            this.SchedulePermissions = SchedulePermissions;
            this.Schedules = Schedules;
            this.ServerService = ServerService;
            this.CreateScheduleAction = CreateScheduleAction;
            this.SetScheduleStatusAction = SetScheduleStatusAction;
            this.RunServerSchedulesAction = RunServerSchedulesAction;
            this.RunSchedulesAction = RunSchedulesAction;
            this.DeleteSchedulesAction = DeleteSchedulesAction;
            this.RenameScheduleAction = RenameScheduleAction;
            var selectedItems = new VizPortal.Set(function (schedule) { return schedule.id; });
            var actions = this.createActions(selectedItems, siteId);
            $scope.selectedItems = selectedItems;
            $scope.useReactDataGrid = VizPortal.FeatureFlags.reactSchedulesGrid;
            if (VizPortal.FeatureFlags.reactSchedulesGrid) {
                this.configureForReactDataGrid(actions);
            }
            BrowserTitleService.setTitle('schedules');
            $scope.sorter = SorterFactory.create(VizPortal.ScheduleContentType.defaultOrder);
            this.query = queryService.createQueryUpdater($scope, VizPortal.ScheduleContentType, Schedules, function (resourceQuery) {
                if (siteId) {
                    resourceQuery = resourceQuery.addFilter(VizPortal.Filter.fieldEq(VizPortal.ServerApi.FilterFieldNames.siteId, siteId));
                }
                if (VizPortal.FeatureFlags.reactSchedulesGrid) {
                    _this.AngularToReactDataGridBridge.updateReactDataGridRowStore({ scope: $scope, sliceable: resourceQuery });
                }
                $scope.sliceable = resourceQuery;
                $scope.sorter.setOrder(resourceQuery.getOrder());
                resourceQuery.getCount().then(function (result) {
                    _this.$scope.schedules.count = result;
                });
            }, {});
            this.query.refresh();
            $scope.placeTitleClicked = function () {
                _this.refreshSchedules();
            };
            $scope.availableAction = function (action) { return action.isAvailable($scope.selectedItems); };
            VizPortal.ActionButtonsHelper.setupActionButtons($scope, actions);
            $scope.listActions = [{
                    name: 'create-new-schedule',
                    translate: 'newSchedule',
                    isAvailable: function () { return ServerService.isSessionServerAdmin(); },
                    execute: function ($event) {
                        CreateScheduleAction.createSchedule(VizPortal.ActionContext.fromEvent($event)).then(function () { return _this.refreshSchedules(); });
                    }
                }];
            $scope.availableListAction = function (listAction) { return listAction.isAvailable(); };
            $scope.rowClicked = function (row, colIndex) {
                SelectionService.rowClicked($scope.selectedItems, row, colIndex);
            };
            $scope.sliceChanged = function (newSlice) {
                $scope.selectedItems.updateItems(newSlice.items);
                $scope.schedules.count = newSlice.total;
            };
            $scope.headerClicked = function (header) { return $scope.sorter.setPrimary(header.attrs['key'], header.attrs['direction']); };
            $scope.schedules = { count: 0 };
            $scope.scheduleUrl = function (schedule) {
                return siteId
                    ? _this.SchedulesConfig.siteUrlFor(schedule)
                    : _this.SchedulesConfig.serverUrlFor(schedule);
            };
            $scope.emptyTemplateModel = SchedulesCtrl.emptyTemplateModel;
        }
        SchedulesCtrl.prototype.configureForReactDataGrid = function (actions) {
            var _this = this;
            var siteUrls = new VizPortalReact.SiteUrls({
                siteUrlName: this.ServerService.sessionSiteUrlName(),
                queryString: window.location.search
            });
            var columns = VizPortalReact.ScheduleGrid.columns(function (id) { return _this.$translate.instant(id); }, this.$scope, actions, this.isServerPage(), new VizPortalReact.ServerUrls(window.location.search), siteUrls, this.$filter('scheduleTypeName'), this.$filter('scheduleActionName'));
            this.AngularToReactDataGridBridge.attachReactDataGridToScope(this.$scope, columns, SchedulesCtrl.emptyTemplateModel);
        };
        SchedulesCtrl.prototype.isServerPage = function () {
            return this.$state.includes("main.server.**");
        };
        SchedulesCtrl.prototype.createActions = function (selectedItems, siteId) {
            var _this = this;
            return [
                {
                    name: 'schedules-run-now',
                    translate: 'runNow_action',
                    isAvailable: function (schedules) {
                        return schedules.size() > 0 && _this.SchedulePermissions.canRunSchedule();
                    },
                    execute: function (items, context) {
                        if (!siteId) {
                            _this.RunServerSchedulesAction.execute(items, context)
                                .then(function (result) {
                                VizPortal.ActionHelpers.deselectNotFound(selectedItems, result, VizPortal.SchedulingErrorCode.SchedulingScheduleNotFound);
                                _this.refreshSchedules();
                            });
                        }
                        else {
                            _this.RunSchedulesAction.execute(items, context)
                                .then(function (result) {
                                VizPortal.ActionHelpers.deselectNotFound(selectedItems, result, VizPortal.SchedulingErrorCode.SchedulingScheduleNotFound);
                                _this.refreshSchedules();
                            });
                        }
                    }
                },
                {
                    name: 'enableSchedules',
                    translate: 'enable_action',
                    isAvailable: function (schedules) {
                        return schedules.size() > 0 && _this.SchedulePermissions.canEditSchedule();
                    },
                    isDisabled: function (schedules) {
                        return !_.any(schedules.toArray(), function (schedule) { return !_this.isScheduleEnabled(schedule); });
                    },
                    execute: function (items, context) {
                        _this.SetScheduleStatusAction.confirmEnableSchedules(items, context)
                            .then(function (result) {
                            VizPortal.ActionHelpers.deselectNotFound(selectedItems, result, VizPortal.SchedulingErrorCode.SchedulingScheduleNotFound);
                            _this.refreshSchedules();
                        });
                    }
                },
                {
                    name: 'disableSchedules',
                    translate: 'disable_action',
                    isAvailable: function (schedules) {
                        return schedules.size() > 0 && _this.SchedulePermissions.canEditSchedule();
                    },
                    isDisabled: function (schedules) {
                        return !_.any(schedules.toArray(), function (schedule) { return _this.isScheduleEnabled(schedule); });
                    },
                    execute: function (items, context) {
                        _this.SetScheduleStatusAction.confirmDisableSchedules(items, context)
                            .then(function (result) {
                            VizPortal.ActionHelpers.deselectNotFound(selectedItems, result, VizPortal.SchedulingErrorCode.SchedulingScheduleNotFound);
                            _this.refreshSchedules();
                        });
                    }
                },
                {
                    name: 'rename-schedule',
                    translate: 'rename_action',
                    isAvailable: function (schedules) {
                        return schedules.size() > 0 && _this.SchedulePermissions.canEditSchedule();
                    },
                    isDisabled: function (schedules) { return schedules.size() !== 1; },
                    execute: function (items, context) {
                        _this.RenameScheduleAction.confirmRename(items.first(), context)
                            .then(function (result) {
                            VizPortal.ActionHelpers.deselectNotFound(selectedItems, result, VizPortal.SchedulingErrorCode.SchedulingScheduleNotFound);
                            _this.refreshSchedules();
                        });
                    }
                },
                {
                    name: 'edit-schedule',
                    translate: 'editScheduleSettings_action',
                    isAvailable: function (schedules) {
                        return schedules.size() > 0 && _this.SchedulePermissions.canEditSchedule();
                    },
                    isDisabled: function (schedules) { return schedules.size() !== 1; },
                    execute: function (items, context) {
                        _this.CreateScheduleAction.editSchedule(items.first(), context)
                            .then(function (result) {
                            VizPortal.ActionHelpers.deselectNotFound(selectedItems, result, VizPortal.SchedulingErrorCode.SchedulingScheduleNotFound);
                            _this.refreshSchedules();
                        });
                    }
                },
                {
                    name: 'delete-schedule',
                    translate: 'delete_action',
                    isAvailable: function (schedules) {
                        return schedules.size() > 0 && _this.SchedulePermissions.canEditSchedule();
                    },
                    execute: function (items, context) {
                        _this.DeleteSchedulesAction.deleteSchedules(items, context)
                            .then(function (result) {
                            VizPortal.ActionHelpers.deselectAllExceptErrors(selectedItems, result, VizPortal.SchedulingErrorCode.SchedulingScheduleNotFound);
                            _this.refreshSchedules();
                        });
                    }
                }
            ];
        };
        SchedulesCtrl.prototype.refreshSchedules = function () {
            this.query.refresh();
        };
        SchedulesCtrl.prototype.isScheduleEnabled = function (schedule) {
            return !!schedule.runNextAt;
        };
        SchedulesCtrl.$inject = [
            '$scope',
            '$state',
            '$translate',
            'AngularToReactDataGridBridge',
            '$filter',
            'BrowserTitleService',
            'siteId',
            'QueryService',
            'SchedulesConfig',
            'SchedulePermissions',
            'SelectionService',
            'Schedules',
            'SorterFactory',
            'ServerService',
            'CreateScheduleAction',
            'SetScheduleStatusAction',
            'RunServerSchedulesAction',
            'RunSchedulesAction',
            'DeleteSchedulesAction',
            'RenameScheduleAction'
        ];
        SchedulesCtrl.emptyTemplateModel = { title: 'schedulesEmptyMessage' };
        return SchedulesCtrl;
    })();
    VizPortal.SchedulesCtrl = SchedulesCtrl;
    VizPortal.Module.instance().controller('SchedulesCtrl', SchedulesCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        ServerApi.WorkerProcessType = {
            clusterController: 'clustercontroller',
            gateway: 'gateway',
            vizportal: 'vizportal',
            vizqlServer: 'vizqlserver',
            cacheServer: 'cacheserver',
            searchServer: 'searchserver',
            backgrounder: 'backgrounder',
            dataServer: 'dataserver',
            dataEngine: 'dataengine',
            wgServer: 'wgserver',
            fileStore: 'filestore',
            repository: 'repository'
        };
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/IWorkerProcess.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        ServerApi.WorkerStatusType = {
            active: 'active',
            activeSyncing: 'activesyncing',
            busy: 'busy',
            decommissionFailedReadOnly: 'decommissionfailedreadonly',
            decommissioningReadOnly: 'decommissioningreadonly',
            down: 'down',
            passive: 'passive',
            readOnly: 'readonly',
            readyForRemoval: 'readyforremoval',
            statusNotAvailable: 'statusnotavailable',
            statusNotAvailableSyncing: 'statusnotavailablesyncing',
            unlicensed: 'unlicensed'
        };
        var GetWorkerProcessStatus = (function (_super) {
            __extends(GetWorkerProcessStatus, _super);
            function GetWorkerProcessStatus(params) {
                _super.call(this, 'getWorkerProcessStatus', params);
            }
            return GetWorkerProcessStatus;
        })(ServerApi.Request);
        ServerApi.GetWorkerProcessStatus = GetWorkerProcessStatus;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var ConfirmActionDialog = (function () {
        function ConfirmActionDialog($rootScope, modal, $q) {
            this.$rootScope = $rootScope;
            this.modal = modal;
            this.$q = $q;
        }
        ConfirmActionDialog.prototype.open = function (config) {
            var _this = this;
            if (!_.isUndefined(config.bodyText) && !_.isUndefined(config.bodyTemplateUrl)) {
                throw new Error('bodyTemplateUrl cannot be defined if bodyText is defined on an IConfirmActionDialogOptions object');
            }
            // Convert single button to multiple buttons
            if (!config.buttons && config.actionName) {
                config.buttons = [
                    {
                        label: config.actionName,
                        action: config.action,
                        disabled: config.confirmDisabled
                    }
                ];
            }
            var lastError = undefined;
            var buttonActor;
            var confirmActionDialogScope = (config.scope || this.$rootScope).$new();
            confirmActionDialogScope.setActor = function (button) { return buttonActor = button; };
            confirmActionDialogScope.isActor = function (button) { return buttonActor === button; };
            confirmActionDialogScope.progress = { percent: undefined };
            // Determine initial focus
            confirmActionDialogScope.initialFocus = _.find(config.buttons, function (button) { return !button.disabled || !button.disabled(); });
            var modalOptions = {
                templateUrl: 'confirmActionDialog.html',
                position: config.position,
                scope: confirmActionDialogScope,
                controller: [
                    '$scope', function (dialogScope) {
                        dialogScope.config = config;
                        dialogScope.busy = false;
                        dialogScope.confirm = function () {
                            if (!buttonActor) {
                                return;
                            }
                            dialogScope.busy = true;
                            dialogScope.errorMessage = undefined;
                            lastError = undefined;
                            dialogScope.progress.percent = undefined;
                            // prevent closing of the dialog while we are waiting for the actionPromise to resolve
                            modalOptions.keyboard = false;
                            modalOptions.backdrop = 'static'; // static backdrops don't close the modal on click.
                            // Convert the action result to a promise, if necessary
                            var actionPromise = _this.$q.when(buttonActor.action(confirmActionDialogInstance));
                            actionPromise.then(function (result) {
                                if (lastError) {
                                    dialogScope.errorMessage = lastError;
                                }
                                else {
                                    dialogScope.close(result);
                                }
                            })
                                .fin(function () {
                                dialogScope.busy = false;
                                modalOptions.backdrop = true;
                                modalOptions.keyboard = true;
                            });
                        };
                    }
                ],
                size: config.size
            };
            // Pre-load the dialog body template to avoid flickering/re-layout
            if (config.bodyTemplateUrl) {
                modalOptions.resolve = {
                    bodyTemplateContent: ['$http', '$templateCache', function ($http, $templateCache) {
                            return $http.get(config.bodyTemplateUrl, { cache: $templateCache });
                        }]
                };
            }
            var confirmActionDialogInstance = this.modal.open(modalOptions);
            confirmActionDialogInstance.showErrorMessage = function (error) {
                lastError = error;
            };
            confirmActionDialogInstance.setProgress = function (progress) {
                confirmActionDialogScope.progress.percent = progress;
            };
            confirmActionDialogInstance.result.fin(function () { return confirmActionDialogScope.$destroy(); });
            return confirmActionDialogInstance;
        };
        ConfirmActionDialog.$inject = ['$rootScope', 'ModalService', '$q'];
        return ConfirmActionDialog;
    })();
    VizPortal.ConfirmActionDialog = ConfirmActionDialog;
    VizPortal.Module.instance().service('ConfirmActionDialog', ConfirmActionDialog);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var RebuildSearchIndexRequest = (function (_super) {
            __extends(RebuildSearchIndexRequest, _super);
            function RebuildSearchIndexRequest(params) {
                if (params === void 0) { params = {}; }
                _super.call(this, 'rebuildSearchIndex', params);
            }
            return RebuildSearchIndexRequest;
        })(ServerApi.Request);
        ServerApi.RebuildSearchIndexRequest = RebuildSearchIndexRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/RebuildSearchIndexRequest.ts" />
/// <reference path="../services/ServerService.ts" />
var VizPortal;
(function (VizPortal) {
    var RebuildSearchIndexService = (function () {
        function RebuildSearchIndexService($translate, server, lrActionService, toasterService) {
            this.$translate = $translate;
            this.server = server;
            this.lrActionService = lrActionService;
            this.toasterService = toasterService;
            this.rebuildSearchIndexPercent = 0;
            this.rebuildSearchIndexPending = false;
        }
        RebuildSearchIndexService.prototype.handleCurrentJob = function () {
            var _this = this;
            return this.lrActionService.getLastByType(VizPortal.LongRunningActionType.RebuildSearchIndex)
                .then(function (action) { return _this.handleRebuildSearchIndexStatus(action); });
        };
        RebuildSearchIndexService.prototype.getRebuildSearchIndexPercent = function () {
            return this.rebuildSearchIndexPercent;
        };
        RebuildSearchIndexService.prototype.getRebuildSearchIndexPending = function () {
            return this.rebuildSearchIndexPending;
        };
        RebuildSearchIndexService.prototype.rebuildSearchIndex = function () {
            var _this = this;
            this.rebuildSearchIndexPercent = 0;
            return this.server.sendRequest(new VizPortal.ServerApi.RebuildSearchIndexRequest)
                .then(function (result) {
                var existingRebuild = !result.actionId;
                if (!existingRebuild) {
                    _this.trackRebuildSearchIndexProgress(result.actionId);
                }
                else {
                    _this.getRebuildSearchIndexStatus();
                }
            });
        };
        RebuildSearchIndexService.prototype.cancelPoll = function () {
            if (this.rebuildSearchIndexPoller) {
                this.rebuildSearchIndexPoller.cancel();
            }
            this.rebuildSearchIndexPercent = 0;
            this.rebuildSearchIndexPending = false;
        };
        RebuildSearchIndexService.prototype.trackRebuildSearchIndexProgress = function (actionId) {
            var _this = this;
            var completeFn = function (action) {
                if (action && action.succeeded === false) {
                    failFn(action && action.response && action.response.errors);
                }
                else {
                    _this.rebuildSearchIndexPercent = 100;
                    _this.toasterService.pop({ type: VizPortal.ToastType.Info, text: _this.$translate.instant('rebuildSearchIndexSuccess') });
                }
            };
            var notifyFn = function (action) {
                _this.rebuildSearchIndexPercent = action.percentComplete;
            };
            var failFn = function (reason) {
                if (reason !== VizPortal.ErrorReason.Canceled) {
                    _this.toasterService.pop({ type: VizPortal.ToastType.Error, text: _this.$translate.instant('rebuildSearchIndexError') });
                }
            };
            if (actionId) {
                this.rebuildSearchIndexPending = true;
                this.rebuildSearchIndexPoller = this.lrActionService.trackProgress(actionId);
                this.rebuildSearchIndexPoller.promise
                    .then(completeFn, failFn, notifyFn)
                    .fin(function () { return _this.rebuildSearchIndexPending = false; });
            }
            else {
                failFn(VizPortal.ErrorReason.Unknown);
            }
        };
        RebuildSearchIndexService.prototype.getRebuildSearchIndexStatus = function () {
            var _this = this;
            this.lrActionService.getLastByType(VizPortal.LongRunningActionType.RebuildSearchIndex)
                .then(function (action) { return _this.handleRebuildSearchIndexStatus(action); });
        };
        RebuildSearchIndexService.prototype.handleRebuildSearchIndexStatus = function (action) {
            if (action && action.state !== VizPortal.LongRunningActionState.Complete) {
                this.rebuildSearchIndexPercent = action.percentComplete;
                this.trackRebuildSearchIndexProgress(action.id);
            }
        };
        RebuildSearchIndexService.$inject = [
            '$translate',
            'ServerService',
            'LongRunningActionService',
            'ToasterService'
        ];
        return RebuildSearchIndexService;
    })();
    VizPortal.RebuildSearchIndexService = RebuildSearchIndexService;
    VizPortal.Module.instance().service('RebuildSearchIndexService', RebuildSearchIndexService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/IWorkerProcess.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetServerInfoRequest = (function (_super) {
            __extends(GetServerInfoRequest, _super);
            function GetServerInfoRequest(params) {
                _super.call(this, 'getServerInfo', params);
            }
            return GetServerInfoRequest;
        })(ServerApi.Request);
        ServerApi.GetServerInfoRequest = GetServerInfoRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../models/IHost.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/GetServerInfoRequest.ts" />
/// <reference path="../ServerApi/types/IWorkerProcess.ts" />
/// <reference path="../services/ServerService.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerInfoService = (function () {
        function ServerInfoService(server) {
            this.server = server;
        }
        ServerInfoService.prototype.fetch = function () {
            var _this = this;
            return this.server.sendRequest(new VizPortal.ServerApi.GetServerInfoRequest({}))
                .then(function (result) {
                return _this.makeHosts(result);
            });
        };
        // Transform the array of ServerComponentProcesses into an ordered array of Hosts
        ServerInfoService.prototype.makeHosts = function (result) {
            var groupedByHosts = _.groupBy(result.processes, 'host');
            return _.map(result.workerHosts, function (hostName) {
                var host = {
                    name: hostName,
                    processes: _.groupBy(groupedByHosts[hostName], 'type')
                };
                return host;
            });
        };
        ServerInfoService.$inject = ['ServerService'];
        return ServerInfoService;
    })();
    VizPortal.ServerInfoService = ServerInfoService;
    VizPortal.Module.instance().service('ServerInfoService', ServerInfoService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../models/IHost.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/GetWorkerProcessStatus.ts" />
/// <reference path="../ServerApi/types/IWorkerProcess.ts" />
/// <reference path="../services/BrowserTitleService.ts" />
/// <reference path="../services/ConfirmActionDialog.ts" />
/// <reference path="../services/RebuildSearchIndexService.ts" />
/// <reference path="../services/ServerInfoService.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerStatusCtrl = (function () {
        function ServerStatusCtrl($scope, $translate, $state, BrowserTitleService, server, rebuildSearchIndexService, confirmActionDialog, serverInfo, hosts) {
            var _this = this;
            this.hosts = hosts;
            BrowserTitleService.setTitle('serverStatus');
            $scope.showZiplog = server.isTabAdminServiceEnabled();
            // Server Status Grid
            this.featureFlags = server.featureFlags();
            $scope.hosts = this.hosts;
            $scope.isSingleHost = function () { return $scope.hosts.length === 1; };
            $scope.components = this.getComponents();
            $scope.legendStatuses = ServerStatusCtrl.legendStatuses;
            $scope.isPreferred = function (component, host) {
                return component === VizPortal.ServerApi.WorkerProcessType.repository
                    && _this.featureFlags.ha2Enabled
                    && host.processes
                    && host.processes[VizPortal.ServerApi.WorkerProcessType.repository]
                    && host.processes[VizPortal.ServerApi.WorkerProcessType.repository][0].preferred;
            };
            $scope.refreshStatuses = function () {
                $scope.refreshButtonBusy = true;
                serverInfo.fetch()
                    .then(function (hosts) {
                    $scope.hosts = hosts; // Update hosts if server config has changed
                    $scope.$broadcast(ServerStatusCtrl.refreshProcessStatusEvent);
                })
                    .fin(function () { return $scope.refreshButtonBusy = false; });
            };
            // Rebuild Search Index
            $scope.rebuildSearchIndexPending = function () { return rebuildSearchIndexService.getRebuildSearchIndexPending(); };
            $scope.rebuildSearchIndexPercent = function () { return rebuildSearchIndexService.getRebuildSearchIndexPercent(); };
            $scope.rebuildSearchIndex = function () {
                confirmActionDialog.open({
                    title: $translate.instant('rebuildSearchIndexConfirmTitle'),
                    bodyText: $translate.instant('rebuildSearchIndexConfirmMessage'),
                    actionName: $translate.instant('rebuildSearchIndexConfirmButton'),
                    isDeleteAction: true,
                    action: function () {
                        rebuildSearchIndexService.rebuildSearchIndex();
                    },
                    errorMessage: $translate.instant('rebuildSearchIndexError')
                });
            };
            $scope.$on('$destroy', function () { return rebuildSearchIndexService.cancelPoll(); });
        }
        ServerStatusCtrl.prototype.getComponents = function () {
            return _.without(ServerStatusCtrl.WorkerProcessTypes, (!this.featureFlags.ha2Enabled || !this.featureFlags.ha2FilestoreEnabled ? VizPortal.ServerApi.WorkerProcessType.fileStore : ''), (!this.featureFlags.ha2Enabled || this.hosts.length === 1 ? VizPortal.ServerApi.WorkerProcessType.clusterController : ''));
        };
        ServerStatusCtrl.refreshProcessStatusEvent = 'refreshProcessStatus';
        ServerStatusCtrl.legendStatuses = [
            VizPortal.ServerApi.WorkerStatusType.active,
            VizPortal.ServerApi.WorkerStatusType.busy,
            VizPortal.ServerApi.WorkerStatusType.passive,
            VizPortal.ServerApi.WorkerStatusType.unlicensed,
            VizPortal.ServerApi.WorkerStatusType.down,
            VizPortal.ServerApi.WorkerStatusType.statusNotAvailable
        ];
        ServerStatusCtrl.WorkerProcessTypes = [
            VizPortal.ServerApi.WorkerProcessType.clusterController,
            VizPortal.ServerApi.WorkerProcessType.gateway,
            VizPortal.ServerApi.WorkerProcessType.vizportal,
            VizPortal.ServerApi.WorkerProcessType.wgServer,
            VizPortal.ServerApi.WorkerProcessType.vizqlServer,
            VizPortal.ServerApi.WorkerProcessType.cacheServer,
            VizPortal.ServerApi.WorkerProcessType.searchServer,
            VizPortal.ServerApi.WorkerProcessType.backgrounder,
            VizPortal.ServerApi.WorkerProcessType.dataServer,
            VizPortal.ServerApi.WorkerProcessType.dataEngine,
            VizPortal.ServerApi.WorkerProcessType.fileStore,
            VizPortal.ServerApi.WorkerProcessType.repository
        ];
        ServerStatusCtrl.$inject = [
            '$scope',
            '$translate',
            '$state',
            'BrowserTitleService',
            'ServerService',
            'RebuildSearchIndexService',
            'ConfirmActionDialog',
            'ServerInfoService',
            'hosts' // Resolved by $stateProvider
        ];
        return ServerStatusCtrl;
    })();
    VizPortal.ServerStatusCtrl = ServerStatusCtrl;
    VizPortal.Module.instance().controller('ServerStatusCtrl', ServerStatusCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetUserSettingsRequest = (function (_super) {
            __extends(GetUserSettingsRequest, _super);
            function GetUserSettingsRequest(params) {
                _super.call(this, 'getUserSettings', params);
            }
            return GetUserSettingsRequest;
        })(ServerApi.Request);
        ServerApi.GetUserSettingsRequest = GetUserSettingsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../ServerApi/requests/GetUserSettingsRequest.ts" />
/// <reference path="../libs.ts" />
/// <reference path="../controllers/ContentPlaceCtrl.ts" />
/// <reference path="../models/IUserSettings.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerUserPlaceCtrl = (function () {
        function ServerUserPlaceCtrl($scope, serverUser, userSettings) {
            this.$scope = $scope;
            this.serverUser = serverUser;
            this.userSettings = userSettings;
            $scope.serverUser = this.serverUser;
            $scope.userSettings = userSettings;
        }
        ServerUserPlaceCtrl.$inject = [
            '$scope',
            'serverUser',
            'userSettings'
        ];
        return ServerUserPlaceCtrl;
    })();
    VizPortal.ServerUserPlaceCtrl = ServerUserPlaceCtrl;
    VizPortal.Module.instance().controller('ServerUserPlaceCtrl', ServerUserPlaceCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../common/react/CommonDataGridColumns.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var ServerUsersGrid;
    (function (ServerUsersGrid) {
        function columns(translate, scope, serverUrls, siteRoleFilter, actions, showDomainNameColumn) {
            var columns = [
                VizPortalReact.CommonDataGridColumns.selected(scope),
                nameColumn(translate, serverUrls, actions, scope),
                {
                    name: 'username-col',
                    dataKey: 'username',
                    text: translate('column_username'),
                    direction: 'asc'
                },
                {
                    name: 'maxSiteRole-col',
                    dataKey: 'maxSiteRole',
                    text: translate('column_max_site_role'),
                    direction: 'asc',
                    cellFormatter: VizPortalReact.DataGridCells.PlainTextCellWithTransform('maxSiteRole', function (maxSiteRole) { return siteRoleFilter(maxSiteRole); })
                },
                {
                    name: 'siteCount-col',
                    dataKey: 'siteCount',
                    text: translate('column_site_count'),
                    cellFormatter: VizPortalReact.DataGridCells.LocalizedCount('siteCount'),
                    direction: 'asc',
                    headerStyle: { textAlign: 'right' },
                    cellStyle: { textAlign: 'right' }
                }
            ];
            if (showDomainNameColumn) {
                columns.push({
                    name: 'domainName-col',
                    dataKey: 'domainName',
                    text: translate('column_domainName'),
                    direction: 'asc'
                });
            }
            columns.push({
                name: 'lastSignIn-col',
                dataKey: 'lastSignIn',
                text: translate('column_last_sign_in'),
                direction: 'desc',
                cellFormatter: VizPortalReact.DataGridCells.DateTimeCell('lastSignIn')
            });
            return columns;
        }
        ServerUsersGrid.columns = columns;
        function nameColumn(translate, serverUrls, actions, scope) {
            var disabledStyle = {
                color: VizPortalReact.CommonStyles.Colors.Grey102,
                textDecoration: 'none',
                pointerEvents: 'none'
            };
            var isDisabled = function (row) {
                var user = row.data;
                return user.readOnly || user.maxSiteRole === 'Guest';
            };
            return VizPortalReact.CommonDataGridColumns.withActions({
                name: 'displayName-col',
                dataKey: 'displayName',
                text: translate('column_fullName'),
                direction: 'asc',
                cellFormatter: VizPortalReact.DataGridCells.Link(function (row) {
                    var disabled = isDisabled(row);
                    var user = row.data;
                    return {
                        text: user.displayName,
                        url: disabled ? null : serverUrls.userSettingsUrl(user),
                        style: disabled ? disabledStyle : null,
                        iconClassName: 'tb-grid-icon-user',
                        iconTitle: translate('user')
                    };
                })
            }, {
                actions: actions,
                getActionTarget: function () {
                    return {
                        items: scope.selectedItems,
                        actionContext: { scope: scope }
                    };
                },
                translate: translate,
                menuDisabled: isDisabled
            });
        }
    })(ServerUsersGrid = VizPortalReact.ServerUsersGrid || (VizPortalReact.ServerUsersGrid = {}));
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var CreateLocalServerUserRequest = (function (_super) {
            __extends(CreateLocalServerUserRequest, _super);
            function CreateLocalServerUserRequest(params) {
                _super.call(this, 'createLocalServerUser', params);
            }
            return CreateLocalServerUserRequest;
        })(ServerApi.Request);
        ServerApi.CreateLocalServerUserRequest = CreateLocalServerUserRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetServerUsersRequest = (function (_super) {
            __extends(GetServerUsersRequest, _super);
            function GetServerUsersRequest(params) {
                _super.call(this, 'getServerUsers', params);
            }
            return GetServerUsersRequest;
        })(ServerApi.Request);
        ServerApi.GetServerUsersRequest = GetServerUsersRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetUserRefreshTokenCountRequest = (function (_super) {
            __extends(GetUserRefreshTokenCountRequest, _super);
            function GetUserRefreshTokenCountRequest(params) {
                _super.call(this, 'getUserRefreshTokenCount', params);
            }
            return GetUserRefreshTokenCountRequest;
        })(ServerApi.Request);
        ServerApi.GetUserRefreshTokenCountRequest = GetUserRefreshTokenCountRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/IConnectedDevice.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetUserConnectedDevicesRequest = (function (_super) {
            __extends(GetUserConnectedDevicesRequest, _super);
            function GetUserConnectedDevicesRequest(params) {
                _super.call(this, 'getUserConnectedDevices', params);
            }
            return GetUserConnectedDevicesRequest;
        })(ServerApi.Request);
        ServerApi.GetUserConnectedDevicesRequest = GetUserConnectedDevicesRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/IUserRole.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetUsersSiteRolesRequest = (function (_super) {
            __extends(GetUsersSiteRolesRequest, _super);
            function GetUsersSiteRolesRequest(params) {
                _super.call(this, 'getUsersSiteRoles', params);
            }
            return GetUsersSiteRolesRequest;
        })(ServerApi.Request);
        ServerApi.GetUsersSiteRolesRequest = GetUsersSiteRolesRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/IResponse.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var DeleteUserConnectedDevicesRequest = (function (_super) {
            __extends(DeleteUserConnectedDevicesRequest, _super);
            function DeleteUserConnectedDevicesRequest(params) {
                _super.call(this, 'deleteUserConnectedDevices', params);
            }
            return DeleteUserConnectedDevicesRequest;
        })(ServerApi.Request);
        ServerApi.DeleteUserConnectedDevicesRequest = DeleteUserConnectedDevicesRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var UpdateServerUsersAdminStatusRequest = (function (_super) {
            __extends(UpdateServerUsersAdminStatusRequest, _super);
            function UpdateServerUsersAdminStatusRequest(params) {
                _super.call(this, 'updateServerUsersAdminStatus', params);
            }
            return UpdateServerUsersAdminStatusRequest;
        })(ServerApi.Request);
        ServerApi.UpdateServerUsersAdminStatusRequest = UpdateServerUsersAdminStatusRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var UpdateServerUsersSiteMembershipRequest = (function (_super) {
            __extends(UpdateServerUsersSiteMembershipRequest, _super);
            function UpdateServerUsersSiteMembershipRequest(params) {
                _super.call(this, 'updateServerUsersSiteMembership', params);
            }
            return UpdateServerUsersSiteMembershipRequest;
        })(ServerApi.Request);
        ServerApi.UpdateServerUsersSiteMembershipRequest = UpdateServerUsersSiteMembershipRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="IUser.ts" />
/// <reference path="../libs.ts" />
/// <reference path="../helpers/RequestHelper.ts" />
/// <reference path="../helpers/ResultHelper.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/CreateLocalServerUserRequest.ts" />
/// <reference path="../ServerApi/requests/GetServerUsersRequest.ts" />
/// <reference path="../ServerApi/requests/GetUserRefreshTokenCountRequest.ts" />
/// <reference path="../ServerApi/requests/GetUserConnectedDevicesRequest.ts" />
/// <reference path="../ServerApi/requests/GetUserSettingsRequest.ts" />
/// <reference path="../ServerApi/requests/GetUsersSiteRolesRequest.ts" />
/// <reference path="../ServerApi/requests/DeleteUserConnectedDevicesRequest.ts" />
/// <reference path="../ServerApi/requests/UpdateServerUsersAdminStatusRequest.ts" />
/// <reference path="../ServerApi/requests/UpdateServerUsersSiteMembershipRequest.ts" />
/// <reference path="../ServerApi/types/IServerUser.ts" />
/// <reference path="../ServerApi/types/ISiteRole.ts" />
/// <reference path="../services/ServerService.ts" />
/// <reference path="Resource.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerUsers = (function (_super) {
        __extends(ServerUsers, _super);
        function ServerUsers(ErrorNotifyingServer, FetcherFactory, $q) {
            _super.call(this, FetcherFactory.getServerResourceFetcher(VizPortal.ServerApi.GetServerUsersRequest, function (result) { return result.users; }));
            this.ErrorNotifyingServer = ErrorNotifyingServer;
            this.$q = $q;
        }
        // returns the server user with the specified username & domainName.
        ServerUsers.prototype.getUserByUsernameAndDomain = function (username, domainName) {
            return this.all()
                .addFilter(VizPortal.Filter.stringFieldEq('username', username))
                .addFilter(VizPortal.Filter.stringFieldEq('domainName', domainName))
                .getFirst();
        };
        // returns the server users with the specified IDs
        ServerUsers.prototype.getByUserIds = function (userIds) {
            var query = this.all();
            var usersFilter = VizPortal.Filter.stringFieldInArray(VizPortal.ServerApi.NamedItemKeys.id, userIds);
            query = query.addFilter(usersFilter);
            return query.getCount().then(function (totalCount) {
                return query.getSlice(0, totalCount);
            });
        };
        ServerUsers.prototype.getUserCountsByMaxSiteRole = function (baseQuery) {
            // Remove any existing max site role filter
            var filtersWithoutMaxSiteRole = _.filter(baseQuery.getFilters(), function (filter) {
                return !(filter.field && filter.field === VizPortal.ServerApi.FilterFieldNames.maxSiteRole);
            });
            var modifiedQuery = baseQuery.withFilters(filtersWithoutMaxSiteRole);
            var counts = {};
            var promises = _.map(VizPortal.SiteRoles.WithoutGuest, function (maxSiteRole) {
                return modifiedQuery
                    .addFilter(VizPortal.Filter.stringFieldEq(VizPortal.ServerApi.FilterFieldNames.maxSiteRole, maxSiteRole))
                    .getCount()
                    .then(function (count) {
                    counts[maxSiteRole] = count;
                });
            });
            // Any site role
            promises.push(modifiedQuery.getCount().then(function (count) { counts['Any'] = count; }));
            return this.$q.all(promises).then(function () { return counts; });
        };
        ServerUsers.prototype.getUserSettings = function (username, domain) {
            var params = {
                username: username,
                domainName: domain
            };
            return this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.GetUserSettingsRequest(params));
        };
        ServerUsers.prototype.getUserRefreshTokenCount = function (username, domain) {
            var params = {
                username: username,
                domainName: domain
            };
            return this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.GetUserRefreshTokenCountRequest(params))
                .then(function (result) { return result.refreshTokenCount; });
        };
        ServerUsers.prototype.getUserConnectedDevices = function (userId) {
            var params = {
                userId: userId
            };
            return this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.GetUserConnectedDevicesRequest(params))
                .then(function (result) { return result.devices; });
        };
        ServerUsers.prototype.deleteUserConnectedDevices = function (userId, deviceIds) {
            var params = {
                userId: userId,
                deviceIds: deviceIds
            };
            return this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.DeleteUserConnectedDevicesRequest(params));
        };
        // returns the server users' roles across all sites
        ServerUsers.prototype.getSiteRoles = function (userIds) {
            return this.ErrorNotifyingServer.sendRequests(VizPortal.RequestHelper.buildRequests(userIds, function (userIdsBlock) { return new VizPortal.ServerApi.GetUsersSiteRolesRequest({ ids: userIdsBlock }); }), function (results) {
                return {
                    errors: VizPortal.ResultHelper.combineErrors(results),
                    users: VizPortal.ResultHelper.combine(results, function (result) { return result.users; })
                };
            });
        };
        // site membership - add/remove server users from sites
        ServerUsers.prototype.updateServerUsersSiteMembership = function (userIds, addToSiteRoles, removeFromSiteIds) {
            return this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests3(userIds, addToSiteRoles, removeFromSiteIds, function (userIdsBlock, addToSiteRolesBlock, removeFromSiteIdsBlock) { return new VizPortal.ServerApi.UpdateServerUsersSiteMembershipRequest({
                userIds: userIdsBlock,
                addToSiteRoles: addToSiteRolesBlock,
                removeFromSiteIds: removeFromSiteIdsBlock
            }); }), VizPortal.ResultHelper.combineResults);
        };
        // site membership - change these users' server admin status
        ServerUsers.prototype.updateServerAdminStatus = function (userIds, admin) {
            return this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests(userIds, function (userIdsBlock) { return new VizPortal.ServerApi.UpdateServerUsersAdminStatusRequest({
                userIds: userIdsBlock,
                admin: admin
            }); }), VizPortal.ResultHelper.combineResults);
        };
        // delete users from server
        ServerUsers.prototype.deleteUsers = function (userIds) {
            return this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests(userIds, function (userIdsBlock) { return new VizPortal.ServerApi.DeleteServerUsersRequest({ ids: userIdsBlock }); }), VizPortal.ResultHelper.combineUserResults);
        };
        // import users from active directory to server
        ServerUsers.prototype.importUsersFromActiveDirectory = function (usernames) {
            return this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests(usernames, function (usernamesBlock) { return new VizPortal.ServerApi.ImportServerUsersFromActiveDirectoryRequest({ usernames: usernamesBlock }); }), VizPortal.ResultHelper.combineImportUserResults);
        };
        // create a new local server user
        ServerUsers.prototype.createLocalServerUser = function (username, displayName, email, password) {
            var _this = this;
            return this.ErrorNotifyingServer.sendRequestAndDelay(new VizPortal.ServerApi.GeneratePublicKeyRequest()).
                then(function (generatePublicKeyResult) {
                var key = generatePublicKeyResult.key;
                var keyId = generatePublicKeyResult.keyId;
                var encryptedPassword = rsa.encrypt(password, key);
                var createLocalServerUserRequest = new VizPortal.ServerApi.CreateLocalServerUserRequest({
                    username: username,
                    displayName: displayName,
                    email: email,
                    encryptedPassword: encryptedPassword,
                    keyId: keyId
                });
                return _this.ErrorNotifyingServer.sendRequestAndDelay(createLocalServerUserRequest);
            });
        };
        ServerUsers.$inject = ['ErrorNotifyingServer', 'FetcherFactory', '$q'];
        return ServerUsers;
    })(VizPortal.Resource);
    VizPortal.ServerUsers = ServerUsers;
    VizPortal.Module.instance().service('ServerUsers', ServerUsers);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var UsernameHelpers;
    (function (UsernameHelpers) {
        function splitUsernames(usernamesText) {
            return _.chain(usernamesText.split(/[;,\r\n]+/))
                .map(function (username) { return username.trim(); })
                .compact() // Remove empty strings
                .unique() // Remove dupes
                .value();
        }
        UsernameHelpers.splitUsernames = splitUsernames;
    })(UsernameHelpers = VizPortal.UsernameHelpers || (VizPortal.UsernameHelpers = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/UsernameHelpers.ts" />
/// <reference path="../models/Set.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../resources/SiteUsers.ts" />
/// <reference path="../resources/SiteRoles.ts" />
/// <reference path="../ServerApi/requests/ImportUsersFromActiveDirectoryRequest.ts" />
/// <reference path="../ServerApi/types/ISiteRole.ts" />
/// <reference path="../services/AddUsersOptionsAction.ts"/>
/// <reference path="../services/ToasterService.ts" />
/// <reference path="../services/UserActionNotification.ts" />
var VizPortal;
(function (VizPortal) {
    var AddActiveDirectorySiteUsersDialogCtrl = (function () {
        function AddActiveDirectorySiteUsersDialogCtrl($scope, $q, $translate, toaster, serverAdminUpdateActionNotification, siteRoles, siteRolesUpdateActionNotification, siteUsers, userActionNotification, availableQuota) {
            var _this = this;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.toaster = toaster;
            this.serverAdminUpdateActionNotification = serverAdminUpdateActionNotification;
            this.siteRolesUpdateActionNotification = siteRolesUpdateActionNotification;
            this.siteUsers = siteUsers;
            this.userActionNotification = userActionNotification;
            // possible site roles settings for the imported group include everything except guest & admin.
            $scope.siteRoleOptions = siteRoles.optionsForCurrentUser();
            $scope.siteRole = availableQuota <= 0 ? VizPortal.ServerApi.SiteRoles.Unlicensed : VizPortal.ServerApi.SiteRoles.Interactor;
            $scope.setSiteRole = function (role) {
                $scope.siteRole = role;
            };
            $scope.addActiveDirectoryUsers = function (userTextInput) { return _this.importUsers(userTextInput); };
            // TODO: dry this out. Duplicated in AddActiveDirectoryUsersAction.ts
            $scope.availableQuota = availableQuota;
            $scope.isSiteRoleOptionDisabled = function (siteRole) {
                // when available quota is 0, only allow Unlicensed and UnlicensedWithPublish users to be added.
                return availableQuota <= 0 && siteRole !== VizPortal.ServerApi.SiteRoles.Unlicensed && siteRole !== VizPortal.ServerApi.SiteRoles.UnlicensedWithPublish;
            };
            $scope.isQuotaEnabledForSite = _.isNumber(availableQuota);
        }
        AddActiveDirectorySiteUsersDialogCtrl.prototype.importUsers = function (userTextInput) {
            var _this = this;
            this.$scope.busy = true;
            this.$scope.usersToAdd = VizPortal.UsernameHelpers.splitUsernames(userTextInput); // match strings delimited by semicolons & commas
            var siteRole = this.$scope.siteRole;
            var serverAdmin = false;
            if (siteRole === VizPortal.ServerApi.SiteRoles.ServerAdministrator) {
                siteRole = VizPortal.ServerApi.SiteRoles.Unlicensed;
                serverAdmin = true;
            }
            return this.siteUsers.importUsersFromActiveDirectory(this.$scope.usersToAdd, siteRole, serverAdmin).then(function (result) {
                _this.userActionNotification.notify({
                    users: VizPortal.Set.fromIdItemArray(result.users),
                    results: result.results,
                    errors: result.errors,
                    successCode: '12' // Added to site TODO: add enum for this
                });
                _this.$scope.$emit(VizPortal.UserAddedEvent);
                return _this.$q.when({});
            })
                .then(function (result) { return _this.$scope.close(result); });
        };
        AddActiveDirectorySiteUsersDialogCtrl.$inject = [
            '$scope',
            '$q',
            '$translate',
            'ToasterService',
            'ServerAdminUpdateActionNotification',
            'SiteRoles',
            'SiteRolesUpdateActionNotification',
            'SiteUsers',
            'UserActionNotification',
            // resolved in AddActiveDirectoryUsersAction
            'availableQuota'
        ];
        return AddActiveDirectorySiteUsersDialogCtrl;
    })();
    VizPortal.AddActiveDirectorySiteUsersDialogCtrl = AddActiveDirectorySiteUsersDialogCtrl;
    VizPortal.Module.instance().controller('AddActiveDirectorySiteUsersDialogCtrl', AddActiveDirectorySiteUsersDialogCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/GetSiteNamesRequest.ts" />
/// <reference path="Resource.ts" />
var VizPortal;
(function (VizPortal) {
    var SiteNameWithIds = (function (_super) {
        __extends(SiteNameWithIds, _super);
        function SiteNameWithIds(FetcherFactory) {
            _super.call(this, FetcherFactory.getServerResourceFetcher(VizPortal.ServerApi.GetSiteNamesRequest, function (result) { return result.siteNames; }));
        }
        SiteNameWithIds.$inject = ['FetcherFactory'];
        return SiteNameWithIds;
    })(VizPortal.Resource);
    VizPortal.SiteNameWithIds = SiteNameWithIds;
    VizPortal.Module.instance().service('SiteNames', SiteNameWithIds);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var SiteRolesPickerClientService = (function () {
        function SiteRolesPickerClientService($state, $translate, serverAdminUpdateActionNotification, serverUsers, toaster) {
            this.$state = $state;
            this.$translate = $translate;
            this.serverAdminUpdateActionNotification = serverAdminUpdateActionNotification;
            this.serverUsers = serverUsers;
            this.toaster = toaster;
        }
        // section: update site membership or roles
        // Takes userids and site role changes and package them into a parameter
        // object that can be used for backend requests.
        SiteRolesPickerClientService.prototype.siteRoleChangesToParams = function (userIds, changes) {
            var addToSiteRoles = [];
            var removeFromSiteIds = [];
            _.each(changes, function (change, siteId) {
                if (change.checkboxState === VizPortal.CheckboxState.checked) {
                    addToSiteRoles.push({
                        siteId: siteId,
                        siteRole: change.siteRole
                    });
                }
                else if (change.checkboxState === VizPortal.CheckboxState.empty) {
                    removeFromSiteIds.push(siteId);
                }
            });
            return {
                userIds: userIds,
                addToSiteRoles: addToSiteRoles,
                removeFromSiteIds: removeFromSiteIds
            };
        };
        // Exactly the same as ServerUsers.updateServerUsersSiteMembership, except that
        // this one directly takes a parameters object.
        SiteRolesPickerClientService.prototype.updateServerUsersSiteMembership = function (params) {
            return this.serverUsers.updateServerUsersSiteMembership(params.userIds, params.addToSiteRoles, params.removeFromSiteIds);
        };
        // section: update server admin
        SiteRolesPickerClientService.prototype.updateServerAdmin = function (users, newAdminState) {
            var _this = this;
            var userIds = users.pluck('id');
            var promise = this.serverUsers.updateServerAdminStatus(userIds, newAdminState);
            promise.then(function (result) {
                _this.serverAdminUpdateActionNotification.notify(result, users, newAdminState);
            });
            return promise;
        };
        SiteRolesPickerClientService.$inject = [
            '$state',
            '$translate',
            'ServerAdminUpdateActionNotification',
            'ServerUsers',
            'ToasterService'];
        return SiteRolesPickerClientService;
    })();
    VizPortal.SiteRolesPickerClientService = SiteRolesPickerClientService;
    VizPortal.Module.instance().service('SiteRolesPickerClientService', SiteRolesPickerClientService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../../common/components/checkboxes/CheckboxState.ts" />
/// <reference path="../fetchers/ListResult.ts" />
/// <reference path="../helpers/Filter.ts" />
/// <reference path="../helpers/SliceableHelper.ts" />
/// <reference path="../models/ColumnWidths.ts" />
/// <reference path="../models/IEmptyTemplate.ts" />
/// <reference path="../models/ISliceable.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../resources/SiteNameWithIds.ts" />
/// <reference path="../resources/SiteRoles.ts" />
/// <reference path="../services/SiteRolesPickerClientService.ts" />
/// <reference path="../services/SliceableFactory.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.SiteMembershipDialogFilters = {
        AllSites: "siteMembershipAllSites",
        AssignedSites: "siteMembershipAssignedSites",
        SearchResults: "siteMembershipSearchResults"
    };
    var SiteRolesPickerCtrl = (function () {
        function SiteRolesPickerCtrl($scope, serverService, siteNamesResource, BrowserSupportService, sliceableFactory) {
            var _this = this;
            this.$scope = $scope;
            this.serverService = serverService;
            this.siteNamesResource = siteNamesResource;
            this.sliceableFactory = sliceableFactory;
            this.uncheckedAssignedSites = 0;
            $scope.siteFilter = { selection: VizPortal.SiteMembershipDialogFilters.AllSites };
            this.userCountsAndRolesBySiteId = {};
            $scope.searchInput = { text: '' };
            if (!$scope.changes) {
                $scope.changes = {
                    siteRoles: {},
                    serverAdmin: undefined
                };
            }
            $scope.emptyTemplateModel = {
                title: 'noAssignedSites',
                action: function () { return $scope.siteFilter.selection = VizPortal.SiteMembershipDialogFilters.AllSites; }
            };
            $scope.needsAssignedSitesRefresh = false;
            $scope.siteNames = this.siteNamesResource.all();
            $scope.sliceable = $scope.siteNames;
            $scope.columnWidths = {
                getActual: this.getColumnWidths,
                getMin: this.getColumnWidths,
                hasPreferredWidths: function () { return true; }
            };
            $scope.adminCheckboxClicked = function () {
                var newState = VizPortal.CheckboxState.toggle(_this.$scope.adminCheckboxState());
                if ($scope.siteFilter.selection === VizPortal.SiteMembershipDialogFilters.AssignedSites) {
                    //all selected -> empty. Use each checkbox's state without admin information to determine what should be in the new slice.
                    if (newState === VizPortal.CheckboxState.empty) {
                        _this.getAssignedSitesList().then(function (slice) {
                            $scope.sliceable = slice;
                            _this.updateAdminState(newState);
                        });
                    }
                    else {
                        _this.updateAdminState(newState);
                        $scope.refreshAssignedSites();
                    }
                }
                else {
                    _this.updateAdminState(newState);
                }
            };
            $scope.adminCheckboxState = function () {
                if ($scope.changes.serverAdmin) {
                    return $scope.changes.serverAdmin;
                }
                return _this.originalAdminState;
            };
            $scope.checkboxState = function (site) {
                // if server admin is checked, all sites should be checked
                if ($scope.adminCheckboxState() === VizPortal.CheckboxState.checked) {
                    return VizPortal.CheckboxState.checked;
                }
                // if some of the selected users are server admins, site role is always mixed
                if ($scope.adminCheckboxState() === VizPortal.CheckboxState.mixed) {
                    return VizPortal.CheckboxState.mixed;
                }
                return _this.checkboxStateWithoutAdmin(site);
            };
            $scope.siteRole = function (site) {
                // if server admin is checked, all site roles should be server admin
                if ($scope.adminCheckboxState() === VizPortal.CheckboxState.checked) {
                    return VizPortal.ServerApi.SiteRoles.ServerAdministrator;
                }
                // if some of the selected users are server admins, site role is always mixed
                if ($scope.adminCheckboxState() === VizPortal.CheckboxState.mixed) {
                    return VizPortal.SiteRoles.Mixed;
                }
                // local changes override what we have from the server
                if ($scope.changes.siteRoles[site.id] &&
                    $scope.changes.siteRoles[site.id].siteRole) {
                    return $scope.changes.siteRoles[site.id].siteRole;
                }
                var siteInfo = _this.userCountsAndRolesBySiteId[site.id];
                var numSelectedSiteMembers = siteInfo ? siteInfo.count : 0;
                if (numSelectedSiteMembers === _this.numSelectedUsers) {
                    // if all of the selected users are in all the sites, use the aggregated role
                    return siteInfo.siteRole;
                }
                else if (numSelectedSiteMembers > 0) {
                    // some of the selected users are site members.
                    return VizPortal.SiteRoles.Mixed;
                }
                else {
                    // numSelectedSiteMembers === 0
                    return VizPortal.ServerApi.SiteRoles.Unlicensed;
                }
            };
            //$scope.siteRoleOptions = SiteRoles.WithoutGuestOrServerAdmin;
            // TODO: Replace siteRoleOptions back once a tb:select component is added back to siteRolesPicker.jade
            $scope.selectCtrl = {
                options: VizPortal.SiteRoles.WithoutGuestOrServerAdmin
            };
            $scope.checkboxClicked = function (site, colIndex) {
                //if the site role select menu is visible, clicking on the column should not toggle the row.
                var roleSelectColumnIndex = 2;
                if ((colIndex === roleSelectColumnIndex && $scope.checkboxState(site) !== VizPortal.CheckboxState.empty) || $scope.modifySiteRolesDisabled()) {
                    return;
                }
                var siteId = site.id;
                if (!$scope.changes.siteRoles[siteId]) {
                    $scope.changes.siteRoles[siteId] = { siteName: site.name };
                }
                var siteRoleChange = $scope.changes.siteRoles[siteId];
                if ($scope.siteFilter.selection === VizPortal.SiteMembershipDialogFilters.AssignedSites) {
                    if (_this.$scope.checkboxState(site) === VizPortal.CheckboxState.empty) {
                        _this.uncheckedAssignedSites--;
                    }
                    else if (_this.$scope.checkboxState(site) === VizPortal.CheckboxState.checked) {
                        _this.uncheckedAssignedSites++;
                    }
                    $scope.needsAssignedSitesRefresh = _this.uncheckedAssignedSites > 0;
                }
                siteRoleChange.checkboxState = VizPortal.CheckboxState.toggle(_this.$scope.checkboxState(site));
                // if the user has unchecked the checkbox, or if the user is adding the user to the site but hasn't picked a role yet,
                // set the site role to Interactor
                if (siteRoleChange.checkboxState === VizPortal.CheckboxState.empty || !siteRoleChange.siteRole) {
                    siteRoleChange.siteRole = VizPortal.ServerApi.SiteRoles.Interactor;
                }
                // we only want to keep changes that differ from the original state (server state).
                // if the checkbox-click returned the checkbox to its original state, remove the locally stored change.
                // otherwise leave the change.
                if (_this.getOriginalCheckboxStateForSite(siteId) === _this.$scope.checkboxState(site)) {
                    delete $scope.changes.siteRoles[siteId];
                }
            };
            $scope.setSiteRole = function (site, role) {
                var siteId = site.id;
                $scope.changes.siteRoles[siteId] = {
                    siteRole: role,
                    checkboxState: VizPortal.CheckboxState.checked,
                    siteName: site.name
                };
            };
            // $note-ltan-2014-2-23:
            // Even though we no longer allow changing user selection while the panel is open,
            // this watch is still needed to give the parent of the SiteRolesPicker some time
            // to compute the site roles. This watch will then be able to pick them up.
            $scope.$watch('usersWithSiteRoles', function () {
                _this.updateModel();
            });
            $scope.refreshAssignedSites = function () {
                $scope.needsAssignedSitesRefresh = false;
                if (_this.$scope.adminCheckboxState() !== VizPortal.CheckboxState.empty) {
                    _this.$scope.sliceable = $scope.siteNames;
                }
                else {
                    _this.getAssignedSitesList().then(function (slice) {
                        _this.$scope.sliceable = slice;
                    });
                }
            };
            $scope.$watch('siteFilter.selection', function (newFilter) {
                _this.updateSiteFilters();
                if (newFilter === VizPortal.SiteMembershipDialogFilters.AssignedSites) {
                    $scope.refreshAssignedSites();
                }
                if (newFilter === VizPortal.SiteMembershipDialogFilters.AllSites) {
                    $scope.sliceable = $scope.siteNames;
                }
                if (newFilter !== VizPortal.SiteMembershipDialogFilters.SearchResults) {
                    $scope.lastSiteFilter = newFilter;
                    $scope.searchInput.text = '';
                }
                $scope.needsAssignedSitesRefresh = false;
            });
            $scope.isRowDirty = function (site) {
                return !!$scope.changes.siteRoles[site.id] && ($scope.adminCheckboxState() === VizPortal.CheckboxState.empty);
            };
            $scope.modifySiteRolesDisabled = function () {
                return ($scope.adminCheckboxState() !== VizPortal.CheckboxState.empty);
            };
            $scope.submitSearch = function (searchText, $event) {
                $scope.emptyTemplateModel.title = 'noMatchingResults';
                if (!searchText) {
                    $scope.siteFilter.selection = $scope.lastSiteFilter;
                }
                else {
                    if ($scope.siteFilter.selection !== VizPortal.SiteMembershipDialogFilters.SearchResults) {
                        $scope.siteFilter.selection = VizPortal.SiteMembershipDialogFilters.SearchResults;
                    }
                    $scope.sliceable = siteNamesResource.all().withFilters([VizPortal.Filter.search(searchText)]);
                }
                if (BrowserSupportService.isTouch() && $event) {
                    // blur to retract the keyboard when search is explicitly submitted
                    $($event.target).blur();
                }
            };
            // This call is important. It computes the initial state of things.
            this.updateModel();
        }
        // Get the original/current state of server admins of the users.
        SiteRolesPickerCtrl.adminStateFromUsers = function (adminCount, totalUsersCount) {
            if (adminCount === 0) {
                return VizPortal.CheckboxState.empty;
            }
            else if (adminCount < totalUsersCount) {
                return VizPortal.CheckboxState.mixed;
            }
            else {
                return VizPortal.CheckboxState.checked;
            }
        };
        SiteRolesPickerCtrl.prototype.updateAdminState = function (newState) {
            if (newState === this.originalAdminState) {
                this.$scope.changes.serverAdmin = undefined;
            }
            else {
                this.$scope.changes.serverAdmin = newState;
            }
        };
        SiteRolesPickerCtrl.prototype.checkboxStateWithoutAdmin = function (site) {
            // local changes override what we have from the server
            if (this.$scope.changes.siteRoles[site.id] &&
                this.$scope.changes.siteRoles[site.id].checkboxState) {
                return this.$scope.changes.siteRoles[site.id].checkboxState;
            }
            var siteInfo = this.userCountsAndRolesBySiteId[site.id];
            var numSelectedSiteMembers = siteInfo ? siteInfo.count : 0;
            if (numSelectedSiteMembers === this.numSelectedUsers) {
                // all selected users are members of this site.
                return VizPortal.CheckboxState.checked;
            }
            else if (numSelectedSiteMembers > 0) {
                // some users are members of the site.
                return VizPortal.CheckboxState.mixed;
            }
            else {
                // numSelectedSiteMembers === 0
                return VizPortal.CheckboxState.empty;
            }
        };
        //The second column's width is dependent on whether or not the scroll bar is visible.
        SiteRolesPickerCtrl.prototype.getColumnWidths = function (index) {
            var resizeableColumnIndex = 2;
            //checkbox column and group name column are constant. These should be kept in sync with the design spec for the dialog.
            var widths = [27, 185];
            var calcMemberCountWidth = $('.tb-picker-container .tb-data-grid-body-background').width() - widths[0] - widths[1];
            return index === resizeableColumnIndex ? calcMemberCountWidth : widths[index];
        };
        SiteRolesPickerCtrl.prototype.updateSiteFilters = function () {
            var filters = [
                VizPortal.SiteMembershipDialogFilters.AllSites,
                VizPortal.SiteMembershipDialogFilters.AssignedSites
            ];
            if (this.$scope.siteFilter.selection === VizPortal.SiteMembershipDialogFilters.SearchResults) {
                filters.push(VizPortal.SiteMembershipDialogFilters.SearchResults);
            }
            this.$scope.siteFilters = filters;
        };
        SiteRolesPickerCtrl.prototype.getAssignedSitesList = function () {
            var _this = this;
            return VizPortal.SliceableHelper.fetchAll(this.siteNamesResource.all())
                .then(function (sites) {
                var assignedList = _.filter(sites.items, function (site) { return _this.checkboxStateWithoutAdmin(site) !== VizPortal.CheckboxState.empty; });
                _this.uncheckedAssignedSites = 0;
                _this.$scope.emptyTemplateModel.title = 'noAssignedSites';
                return _this.sliceableFactory.fromArray(assignedList);
            });
        };
        SiteRolesPickerCtrl.prototype.updateModel = function () {
            if (this.$scope.usersWithSiteRoles) {
                this.updateSelectedUserCounts();
                this.userCountsAndRolesBySiteId =
                    SiteRolesPickerCtrl.calculateUserCountsAndRolesBySite(this.$scope.usersWithSiteRoles.userRoles);
            }
            else {
                this.numSelectedUsers = 1;
                this.numSelectedServerAdmins = 0;
                this.userCountsAndRolesBySiteId = {};
            }
            // If server admin change state is the same as that of the current user(s),
            // it really means there is no change.
            this.originalAdminState = SiteRolesPickerCtrl.adminStateFromUsers(this.numSelectedServerAdmins, this.numSelectedUsers);
            if (this.originalAdminState === this.$scope.changes.serverAdmin) {
                this.$scope.changes.serverAdmin = undefined;
            }
        };
        SiteRolesPickerCtrl.calculateUserCountsAndRolesBySite = function (userRoles) {
            var userCountsAndRolesBySiteId = {};
            _.each(userRoles, function (userRole) {
                _.each(userRole.sites, function (site) {
                    var siteUserInfo = userCountsAndRolesBySiteId[site.siteId];
                    if (siteUserInfo) {
                        ++siteUserInfo.count;
                        if (siteUserInfo.siteRole !== site.siteRole) {
                            siteUserInfo.siteRole = VizPortal.SiteRoles.Mixed;
                        }
                    }
                    else {
                        userCountsAndRolesBySiteId[site.siteId] = {
                            count: 1,
                            siteRole: site.siteRole
                        };
                    }
                });
            });
            return userCountsAndRolesBySiteId;
        };
        SiteRolesPickerCtrl.prototype.updateSelectedUserCounts = function () {
            this.numSelectedUsers = this.$scope.usersWithSiteRoles.users.size();
            this.numSelectedServerAdmins = this.$scope.usersWithSiteRoles.serverAdmins.length;
        };
        // input a site ID, returns the initial checkbox state for the given site (checked, empty, or mixed)
        SiteRolesPickerCtrl.prototype.getOriginalCheckboxStateForSite = function (siteId) {
            if (!this.userCountsAndRolesBySiteId[siteId]) {
                return VizPortal.CheckboxState.empty;
            }
            else if (this.userCountsAndRolesBySiteId[siteId].count === this.$scope.usersWithSiteRoles.users.size()) {
                return VizPortal.CheckboxState.checked;
            }
            else {
                return VizPortal.CheckboxState.mixed;
            }
        };
        SiteRolesPickerCtrl.$inject = [
            '$scope',
            'ServerService',
            'SiteNames',
            'BrowserSupportService',
            'SliceableFactory'];
        return SiteRolesPickerCtrl;
    })();
    VizPortal.SiteRolesPickerCtrl = SiteRolesPickerCtrl;
    // controller
    VizPortal.Module.instance().controller('SiteRolesPickerCtrl', SiteRolesPickerCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../../common/components/checkboxes/CheckboxState.ts" />
/// <reference path="../controllers/SiteRolesPickerCtrl.ts" />
/// <reference path="../helpers/UsernameHelpers.ts" />
/// <reference path="../models/IUserInfo.ts" />
/// <reference path="../models/Set.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../resources/ServerUsers.ts" />
/// <reference path="../resources/SiteRoles.ts" />
/// <reference path="../ServerApi/requests/ImportUsersFromActiveDirectoryRequest.ts" />
/// <reference path="../services/AddUsersOptionsAction.ts" />
/// <reference path="../services/SiteRolesPickerClientService.ts" />
/// <reference path="../services/ToasterService.ts" />
/// <reference path="../services/UserActionNotification.ts" />
var VizPortal;
(function (VizPortal) {
    var AddActiveDirectoryServerUsersDialogCtrl = (function () {
        function AddActiveDirectoryServerUsersDialogCtrl($scope, $q, $translate, toaster, serverAdminUpdateActionNotification, siteMembershipUpdateActionNotification, siteRoles, rolesPickerClient, serverUsers, userActionNotification) {
            var _this = this;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.toaster = toaster;
            this.serverAdminUpdateActionNotification = serverAdminUpdateActionNotification;
            this.siteMembershipUpdateActionNotification = siteMembershipUpdateActionNotification;
            this.rolesPickerClient = rolesPickerClient;
            this.serverUsers = serverUsers;
            this.userActionNotification = userActionNotification;
            // site role changes will be stored here
            this.$scope.siteRoleChanges = {
                siteRoles: {},
                serverAdmin: undefined
            };
            this.$scope.addActiveDirectoryUsers = function (userTextInput) { return _this.importUsers(userTextInput); };
        }
        AddActiveDirectoryServerUsersDialogCtrl.prototype.importUsers = function (userTextInput) {
            var _this = this;
            this.$scope.busy = true;
            this.$scope.usersToAdd = VizPortal.UsernameHelpers.splitUsernames(userTextInput); // match strings delimited by semicolons & commas
            return this.serverUsers.importUsersFromActiveDirectory(this.$scope.usersToAdd).then(function (result) {
                var users = VizPortal.Set.fromIdItemArray(result.users);
                var promise = _this.$q.when({});
                if (!_this.$scope.siteRoleChanges.serverAdmin && _.isEmpty(_this.$scope.siteRoleChanges.siteRoles)) {
                    // if no site membership or server admin has been selected, toast for adding the users to the server
                    _this.userActionNotification.notify({
                        users: users,
                        results: result.results,
                        errors: result.errors,
                        successCode: '10'
                    });
                }
                else {
                    // otherwise, we will toast based on the site membership results
                    promise = _this.setRoles(users).then(function () {
                        if (result.errors && result.errors.length > 0) {
                            // if there were any errors creating the users on the server, we need to notify about those.
                            _this.userActionNotification.notifyErrors({
                                users: users,
                                errors: result.errors
                            });
                        }
                        return {};
                    });
                }
                return promise.then(function () { return _this.$scope.$emit(VizPortal.UserAddedEvent); });
            })
                .then(function () { return _this.$scope.close({}); });
        };
        /**
        * adds the users that were sucessfully created on the server to any sites and roles (including server admin)
        * that were selected in the site roles picker.
        */
        AddActiveDirectoryServerUsersDialogCtrl.prototype.setRoles = function (users) {
            if (users.isEmpty()) {
                return this.$q.when({});
            }
            else if (!!this.$scope.siteRoleChanges.serverAdmin) {
                return this.updateServerAdmin(users);
            }
            else if (!_.isEmpty(this.$scope.siteRoleChanges.siteRoles)) {
                return this.updateSiteMembership(users);
            }
        };
        // section: update server admin
        AddActiveDirectoryServerUsersDialogCtrl.prototype.updateServerAdmin = function (users) {
            var newAdminState = (this.$scope.siteRoleChanges.serverAdmin === VizPortal.CheckboxState.checked);
            return this.rolesPickerClient.updateServerAdmin(users, newAdminState);
        };
        // section: update site membership or roles
        AddActiveDirectoryServerUsersDialogCtrl.prototype.updateSiteMembership = function (users) {
            var _this = this;
            var userIds = users.keys();
            var params = this.rolesPickerClient.siteRoleChangesToParams(userIds, this.$scope.siteRoleChanges.siteRoles);
            return this.rolesPickerClient.updateServerUsersSiteMembership(params).then(function (result) {
                var addedToSiteName = (params.addToSiteRoles.length > 0) ?
                    _this.$scope.siteRoleChanges.siteRoles[params.addToSiteRoles[0].siteId].siteName : "";
                var removedFromSiteName = (params.removeFromSiteIds.length > 0) ?
                    _this.$scope.siteRoleChanges.siteRoles[params.removeFromSiteIds[0]].siteName : "";
                // show toast
                _this.siteMembershipUpdateActionNotification.notify(result, users, userIds.length, users.get(userIds[0]), params.addToSiteRoles.length, addedToSiteName, params.removeFromSiteIds.length, removedFromSiteName);
            });
        };
        AddActiveDirectoryServerUsersDialogCtrl.$inject = [
            '$scope',
            '$q',
            '$translate',
            'ToasterService',
            'ServerAdminUpdateActionNotification',
            'SiteMembershipUpdateActionNotification',
            'SiteRoles',
            'SiteRolesPickerClientService',
            'ServerUsers',
            'UserActionNotification'
        ];
        return AddActiveDirectoryServerUsersDialogCtrl;
    })();
    VizPortal.AddActiveDirectoryServerUsersDialogCtrl = AddActiveDirectoryServerUsersDialogCtrl;
    VizPortal.Module.instance().controller('AddActiveDirectoryServerUsersDialogCtrl', AddActiveDirectoryServerUsersDialogCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../controllers/AddActiveDirectorySiteUsersDialogCtrl.ts" />
/// <reference path="../controllers/AddActiveDirectoryServerUsersDialogCtrl.ts" />
var VizPortal;
(function (VizPortal) {
    var AddActiveDirectoryUsersAction = (function () {
        function AddActiveDirectoryUsersAction($translate, ConfirmActionDialog, modal, siteUsers) {
            this.$translate = $translate;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.modal = modal;
            this.siteUsers = siteUsers;
        }
        AddActiveDirectoryUsersAction.prototype.showAddActiveDirectoryUsersToSiteDialog = function (dialogScope) {
            var _this = this;
            var dialogInstance = this.modal.open({
                scope: dialogScope,
                templateUrl: 'addActiveDirectorySiteUsersDialog.html',
                size: VizPortal.ModalSize.fitToContent,
                controller: VizPortal.AddActiveDirectorySiteUsersDialogCtrl,
                resolve: {
                    availableQuota: function () { return _this.siteUsers.getRemainingUserQuota(); }
                }
            });
            return dialogInstance.result;
        };
        AddActiveDirectoryUsersAction.prototype.showAddActiveDirectoryUsersToServerDialog = function (dialogScope) {
            var dialogInstance = this.modal.open({
                scope: dialogScope,
                templateUrl: 'addActiveDirectoryServerUsersDialog.html',
                size: VizPortal.ModalSize.fitToContent,
                controller: VizPortal.AddActiveDirectoryServerUsersDialogCtrl
            });
            return dialogInstance.result;
        };
        AddActiveDirectoryUsersAction.$inject = ['$translate',
            'ConfirmActionDialog',
            'ModalService',
            'SiteUsers'];
        return AddActiveDirectoryUsersAction;
    })();
    VizPortal.AddActiveDirectoryUsersAction = AddActiveDirectoryUsersAction;
    VizPortal.Module.instance().service('AddActiveDirectoryUsersAction', AddActiveDirectoryUsersAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var EMAIL_REGEXP = /^[^@ ]+@[^@ ]+$/;
    var EmailValidationHelper;
    (function (EmailValidationHelper) {
        function isValidEmail(email) {
            return EMAIL_REGEXP.test(email);
        }
        EmailValidationHelper.isValidEmail = isValidEmail;
        function getInvalidEmails(emails) {
            return _.reject(emails, isValidEmail);
        }
        EmailValidationHelper.getInvalidEmails = getInvalidEmails;
    })(EmailValidationHelper = VizPortal.EmailValidationHelper || (VizPortal.EmailValidationHelper = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../helpers/EmailValidationHelper.ts" />
/// <reference path="../resources/SiteRoles.ts" />
var VizPortal;
(function (VizPortal) {
    var splitEmails = function (emailText) { return _.chain(emailText.split(/[;,\r\n]+/))
        .map(function (email) { return email.trim(); })
        .compact() // Remove empty strings
        .unique() // Remove dupes
        .value(); };
    var AddExternalUsersAction = (function () {
        function AddExternalUsersAction($translate, $q, ConfirmActionDialog, Toaster, SiteUsers, SiteRolesUpdateActionNotification, Server) {
            this.$translate = $translate;
            this.$q = $q;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.Toaster = Toaster;
            this.SiteUsers = SiteUsers;
            this.SiteRolesUpdateActionNotification = SiteRolesUpdateActionNotification;
            this.Server = Server;
        }
        AddExternalUsersAction.prototype.showAddExternalUsersToSiteDialog = function (dialogScope) {
            var _this = this;
            var addUserScope = this.configureScope(dialogScope);
            var dialogInstance = this.ConfirmActionDialog.open({
                scope: addUserScope,
                bodyTemplateUrl: 'confirmActionDialogAddExternalUsers.html',
                title: this.$translate.instant('addExternalUsersTitle'),
                actionName: this.$translate.instant('addUsersDialogSubmit'),
                action: function () {
                    var emails = splitEmails(addUserScope.input.text);
                    addUserScope.invalidEmails = VizPortal.EmailValidationHelper.getInvalidEmails(emails);
                    if (addUserScope.invalidEmails.length > 0)
                        return _this.$q.reject();
                    if (addUserScope.input.thirdPartyUsers) {
                        return _this.SiteUsers.importThirdPartyUsers(emails, addUserScope.siteRoleSelect.model);
                    }
                    else {
                        return _this.SiteUsers.importExternalUsers(emails, addUserScope.siteRoleSelect.model);
                    }
                },
                size: VizPortal.ModalSize.fitToContent
            });
            dialogInstance.result.then(function (result) {
                _this.handleImportResult(result, addUserScope);
            })
                .fin(function () { return addUserScope.$destroy(); });
            return dialogInstance.result;
        };
        AddExternalUsersAction.prototype.configureScope = function (dialogScope) {
            var _this = this;
            var addUserScope = dialogScope.$new();
            addUserScope.showAuthenticationSelector = this.Server.isThirdPartyAuthEnabled();
            addUserScope.input = {
                text: '',
                thirdPartyUsers: this.Server.isThirdPartyAuthEnabled()
            };
            addUserScope.siteRoleSelect = {
                // possible site roles settings for the imported group include everything except guest & admin.
                options: VizPortal.SiteRoles.WithoutGuestOrServerAdmin,
                model: VizPortal.ServerApi.SiteRoles.Interactor
            };
            this.SiteUsers.getRemainingUserQuota().then(function (quota) {
                addUserScope.userQuotaMessage = _.isNumber(quota)
                    ? _this.$translate.instant('availableQuota', { NUM_USERS: quota }, VizPortal.L10n.Interpolations.Count)
                    : null;
            });
            return addUserScope;
        };
        AddExternalUsersAction.prototype.handleImportResult = function (result, addUserScope) {
            //TODO: Replace with generic user error result handling
            // Both error AND success can occur in the same response
            if (result.errors.length > 0) {
                this.Toaster.pop({ type: VizPortal.ToastType.Error, text: this.$translate.instant('addUsersFailed') });
            }
            if (result.users.length > 0) {
                var newUsers = VizPortal.Set.fromIdItemArray(result.users);
                this.Toaster.pop({
                    type: VizPortal.ToastType.Info,
                    text: this.$translate.instant('usersAdded', {
                        USER_NAME: VizPortal.L10n.elideIfLong(newUsers.first().displayName),
                        USER_COUNT: newUsers.size()
                    }, VizPortal.L10n.Interpolations.Count)
                });
                addUserScope.$emit(VizPortal.UserAddedEvent);
            }
        };
        AddExternalUsersAction.$inject = ['$translate', '$q', 'ConfirmActionDialog', 'ToasterService', 'SiteUsers', 'SiteRolesUpdateActionNotification', 'ServerService'];
        return AddExternalUsersAction;
    })();
    VizPortal.AddExternalUsersAction = AddExternalUsersAction;
    VizPortal.Module.instance().service('AddExternalUsersAction', AddExternalUsersAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../../ts/libs.ts" />
/// <reference path="CheckboxState.ts" />
var VizPortal;
(function (VizPortal) {
    /*
     * Tri-state version of custom checkbox control.  See tbCheckbox.ts for the dual-state checkbox.
     */
    VizPortal.Module.instance().directive('tbCheckboxTristate', function () {
        return {
            restrict: 'E',
            replace: true,
            require: '?ngModel',
            templateUrl: 'checkboxTristate.html',
            scope: {
                state: '&',
                click: '&'
            },
            link: function (scope, elm, attrs, ctrl) {
                scope.toggle = function () {
                    // do nothing if disabled
                    if (elm.hasClass('tb-disabled'))
                        return;
                    if (ctrl) {
                        ctrl.$setViewValue(VizPortal.CheckboxState.toggle(ctrl.$viewValue));
                        ctrl.$render();
                    }
                    scope.click();
                };
                if (ctrl) {
                    scope.state = function () { return ctrl.$viewValue; };
                }
            }
        };
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="IUserInfo.ts" />
/// <reference path="../libs.ts" />
/// <reference path="../../common/components/checkboxes/tbCheckboxTristate.ts" />
/// <reference path="../controllers/SiteRolesPickerCtrl.ts" />
/// <reference path="../fetchers/ListResult.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../models/IApplyCancelButtons.ts" />
/// <reference path="../models/IServerUserInfo.ts" />
/// <reference path="../models/Set.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../resources/ServerUsers.ts" />
/// <reference path="../ServerApi/requests/GetUsersSiteRolesRequest.ts" />
/// <reference path="../ServerApi/requests/UpdateServerUsersSiteMembershipRequest.ts" />
/// <reference path="../ServerApi/types/IServerUser.ts" />
/// <reference path="../ServerApi/types/ISiteRole.ts" />
/// <reference path="../services/SiteRolesPickerClientService.ts" />
/// <reference path="../services/ToasterService.ts" />
/// <reference path="../services/UserActionNotification.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.SiteRolesEvent = {
        SiteRolesChanged: "SiteRolesChanged"
    };
    var SiteMembershipDialogCtrl = (function () {
        function SiteMembershipDialogCtrl($scope, $q, $translate, serverUsers, siteMembershipUpdateActionNotification, rolesPickerClient, toaster) {
            var _this = this;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.serverUsers = serverUsers;
            this.siteMembershipUpdateActionNotification = siteMembershipUpdateActionNotification;
            this.rolesPickerClient = rolesPickerClient;
            this.toaster = toaster;
            // IApplyCancelButtons
            $scope.applyCancelButtons = {
                applyString: $translate.instant("save"),
                cancelString: $translate.instant("cancel"),
                apply: function () { return _this.apply(); },
                cancel: function () { return $scope.dismiss(); },
                disableApply: function () { return (!_this.isDirty() || $scope.busy); },
                disableCancel: function () { return $scope.busy; },
                isBusy: function () { return $scope.busy; }
            };
            var displayName = ($scope.users.size() > 0) ? $scope.users.first().displayName : '';
            $scope.editSiteMembershipDescription =
                $translate.instant('editSiteMembershipDescription', { USER_COUNT: $scope.users.size(), USER_NAME: VizPortal.L10n.elideIfLong(displayName) }, VizPortal.L10n.Interpolations.Count);
            $scope.changes = {
                siteRoles: {},
                serverAdmin: undefined
            };
            $scope.usersWithSiteRoles = null;
            $scope.busy = false;
            $scope.haveSelectedUsers = function () { return $scope.users.size() > 0; };
            // get data for initial state
            this.getSiteRolesForSelectedUsers();
        }
        SiteMembershipDialogCtrl.prototype.apply = function () {
            var _this = this;
            var scope = this.$scope;
            scope.busy = true;
            var users = _.clone(scope.users); // clone for independence from further selection
            var promise;
            if (scope.changes.serverAdmin !== undefined) {
                // server admin changed
                promise = this.updateServerAdmin(users).then(function () {
                    if (scope.changes.serverAdmin === VizPortal.CheckboxState.empty && !_.isEmpty(scope.changes.siteRoles)) {
                        // server admin got unchecked, site roles changed
                        return _this.updateSiteMembership(users);
                    }
                });
            }
            else {
                // server admin did not change
                var originalAdminState = VizPortal.SiteRolesPickerCtrl.adminStateFromUsers(this.getServerAdminCount(), scope.users.size());
                if (originalAdminState === VizPortal.CheckboxState.empty && !_.isEmpty(scope.changes.siteRoles)) {
                    // server is not checked, site roles changed
                    promise = this.updateSiteMembership(users);
                }
            }
            // After all the requests dance, fire events and close the dialog, we're done here.
            return promise.then(function (result) {
                scope.$emit(VizPortal.SiteRolesEvent.SiteRolesChanged);
                scope.close(result);
            });
        };
        SiteMembershipDialogCtrl.prototype.getServerAdminCount = function () {
            return this.$scope.usersWithSiteRoles ? this.$scope.usersWithSiteRoles.serverAdmins.length : 0;
        };
        SiteMembershipDialogCtrl.prototype.isDirty = function () {
            var scope = this.$scope;
            var originalAdminState = VizPortal.SiteRolesPickerCtrl.adminStateFromUsers(this.getServerAdminCount(), scope.users.size());
            var serverAdminChanged = scope.changes.serverAdmin && (scope.changes.serverAdmin !== originalAdminState);
            var siteRolesChanged = (originalAdminState === VizPortal.CheckboxState.empty && !_.isEmpty(scope.changes.siteRoles));
            return serverAdminChanged || siteRolesChanged;
        };
        // section: update server admin
        SiteMembershipDialogCtrl.prototype.updateServerAdmin = function (users) {
            var _this = this;
            // users in the set might be stale, so ask the server for the latest admin status
            return this.getServerAdmins(users.keys()).then(function (serverAdmins) {
                var filteredServerUsers;
                var newAdminState = (_this.$scope.changes.serverAdmin === VizPortal.CheckboxState.checked);
                if (newAdminState) {
                    // promote non admin users only
                    filteredServerUsers = users.filter(function (user) { return !_.contains(serverAdmins, user.id); });
                }
                else {
                    // demote admin users only
                    filteredServerUsers = users.filter(function (user) { return _.contains(serverAdmins, user.id); });
                }
                return _this.rolesPickerClient.updateServerAdmin(filteredServerUsers, newAdminState);
            });
        };
        // section: update site membership or roles
        SiteMembershipDialogCtrl.prototype.updateSiteMembership = function (users) {
            var _this = this;
            var userIds = users.keys();
            var params = this.rolesPickerClient.siteRoleChangesToParams(userIds, this.$scope.changes.siteRoles);
            return this.rolesPickerClient.updateServerUsersSiteMembership(params).then(function (result) {
                var addedToSiteName = (params.addToSiteRoles.length > 0) ?
                    _this.$scope.changes.siteRoles[params.addToSiteRoles[0].siteId].siteName : "";
                var removedFromSiteName = (params.removeFromSiteIds.length > 0) ?
                    _this.$scope.changes.siteRoles[params.removeFromSiteIds[0]].siteName : "";
                // show toast
                _this.siteMembershipUpdateActionNotification.notify(result, users, userIds.length, users.get(userIds[0]), params.addToSiteRoles.length, addedToSiteName, params.removeFromSiteIds.length, removedFromSiteName);
            });
        };
        // triggered by watch on the users object
        SiteMembershipDialogCtrl.prototype.getSiteRolesForSelectedUsers = function () {
            var _this = this;
            // return if there are no selected users.
            if (this.$scope.users.size() === 0) {
                return this.$q.when({});
            }
            // get site role data for the selected users.
            var userIds = this.$scope.users.keys();
            return this.serverUsers.getSiteRoles(userIds).then(function (result) {
                var newState = {
                    users: _this.$scope.users,
                    userRoles: result.users,
                    serverAdmins: []
                };
                // now get server admin data
                // $todo: right now we have to use getServerUsers, ideally we'll have a getServerAdmins API
                return _this.getServerAdmins(userIds).then(function (serverAdmins) {
                    // now calculate number of server admins since it is not included in getSiteRoles
                    newState.serverAdmins = serverAdmins;
                    // update this watched model only when we are absolutely ready (ie. server admin state also updated)
                    _this.$scope.usersWithSiteRoles = newState;
                });
            });
        };
        SiteMembershipDialogCtrl.prototype.getServerAdmins = function (userIds) {
            var _this = this;
            var serverAdmins = [];
            return this.serverUsers.getByUserIds(userIds).then(function (usersList) {
                // now calculate number of server admins since it is not included in the results
                _.each(usersList.items, function (user) {
                    if (user.maxSiteRole === VizPortal.ServerApi.SiteRoles.ServerAdministrator) {
                        serverAdmins.push(user.id);
                    }
                });
                return _this.$q.when(serverAdmins);
            });
        };
        SiteMembershipDialogCtrl.$inject = [
            '$scope',
            '$q',
            '$translate',
            'ServerUsers',
            'SiteMembershipUpdateActionNotification',
            'SiteRolesPickerClientService',
            'ToasterService'
        ];
        return SiteMembershipDialogCtrl;
    })();
    VizPortal.SiteMembershipDialogCtrl = SiteMembershipDialogCtrl;
    VizPortal.Module.instance().controller('SiteMembershipDialogCtrl', SiteMembershipDialogCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var SetOfUsers = (function (_super) {
        __extends(SetOfUsers, _super);
        function SetOfUsers() {
            _super.call(this, SetOfUsers.usernameSelector);
        }
        SetOfUsers.singleton = function (user) {
            return VizPortal.Set.singleton(user, SetOfUsers.usernameSelector);
        };
        SetOfUsers.usernameSelector = function (user) { return user.username + (user.domainName ? user.domainName : ''); };
        return SetOfUsers;
    })(VizPortal.Set);
    VizPortal.SetOfUsers = SetOfUsers;
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var CheckUserNamesRequest = (function (_super) {
            __extends(CheckUserNamesRequest, _super);
            function CheckUserNamesRequest(params) {
                _super.call(this, 'checkUserNames', params);
            }
            return CheckUserNamesRequest;
        })(ServerApi.Request);
        ServerApi.CheckUserNamesRequest = CheckUserNamesRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/RequestHelper.ts" />
/// <reference path="../helpers/ResultHelper.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../resources/SiteRoles.ts" />
/// <reference path="../ServerApi/requests/CheckUserNamesRequest.ts" />
/// <reference path="../ServerApi/requests/GetUsersRequest.ts" />
/// <reference path="../ServerApi/types/IUser.ts" />
/// <reference path="../services/ServerService.ts" />
/// <reference path="Resource.ts" />
var VizPortal;
(function (VizPortal) {
    var Users = (function (_super) {
        __extends(Users, _super);
        function Users(server, FetcherFactory) {
            _super.call(this, FetcherFactory.getServerResourceFetcher(VizPortal.ServerApi.GetUsersRequest, function (result) { return result.users; }));
            this.server = server;
        }
        Users.prototype.checkUserNames = function (usernames) {
            var params = {
                usernames: usernames
            };
            return this.server.sendRequests(VizPortal.RequestHelper.buildRequests(usernames, function (usernamesBlock) { return new VizPortal.ServerApi.CheckUserNamesRequest({ usernames: usernamesBlock }); }), function (results) {
                return {
                    errors: VizPortal.ResultHelper.combineErrors(results),
                    users: VizPortal.ResultHelper.combine(results, function (result) { return result.users; })
                };
            });
        };
        // gets the user with the specified username & domainName.
        Users.prototype.getUserByUsernameAndDomain = function (username, domainName) {
            return this.all()
                .addFilter(VizPortal.Filter.stringFieldEq('username', username))
                .addFilter(VizPortal.Filter.stringFieldEq('domainName', domainName))
                .getFirst();
        };
        Users.AdminsOnlyFilter = VizPortal.Filter.stringFieldInArray(VizPortal.ServerApi.FilterFieldNames.siteRole, [
            VizPortal.ServerApi.SiteRoles.ServerAdministrator,
            VizPortal.ServerApi.SiteRoles.SiteAdministrator
        ]);
        Users.WithoutGuestFilter = VizPortal.Filter.stringFieldInArray(VizPortal.ServerApi.FilterFieldNames.siteRole, _.without(VizPortal.SiteRoles.All, VizPortal.ServerApi.SiteRoles.Guest, VizPortal.ServerApi.SiteRoles.Unlicensed));
        Users.$inject = ['ServerService', 'FetcherFactory'];
        return Users;
    })(VizPortal.Resource);
    VizPortal.Users = Users;
    VizPortal.Module.instance().service('Users', Users);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../../common/components/checkboxes/CheckboxState.ts" />
/// <reference path="../controllers/SiteMembershipDialogCtrl.ts" />
/// <reference path="../controllers/SiteRolesPickerCtrl.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../models/IUserInfo.ts" />
/// <reference path="../models/SetOfUsers.ts" />
/// <reference path="../resources/ServerUsers.ts" />
/// <reference path="../resources/SiteUsers.ts" />
/// <reference path="../resources/Users.ts" />
/// <reference path="../services/AddUsersOptionsAction.ts" />
/// <reference path="../services/SiteRolesPickerClientService.ts" />
/// <reference path="../services/UserActionNotification.ts" />
var VizPortal;
(function (VizPortal) {
    // Possible states that the form can get into.
    // Aside from the initial state, the form has 3 other different flows
    // depending on availability of the specified username.
    VizPortal.AddLocalUserFormState = {
        Initial: "initial",
        NewUser: "newUser",
        OtherSite: "otherSite",
        NotAvailable: "notAvailable"
    };
    var AddLocalUserDialogCtrl = (function () {
        function AddLocalUserDialogCtrl($scope, $q, $translate, addUserToSiteActionNotification, userActionNotification, mode, ServerUsers, serverAdminUpdateActionNotification, siteMembershipUpdateActionNotification, siteRoles, rolesPickerClient, siteRolesUpdateActionNotification, SiteUsers, toaster, Users, 
            // resolved in AddLocalUsersAction
            availableQuota) {
            var _this = this;
            this.$scope = $scope;
            this.$q = $q;
            this.$translate = $translate;
            this.addUserToSiteActionNotification = addUserToSiteActionNotification;
            this.userActionNotification = userActionNotification;
            this.mode = mode;
            this.ServerUsers = ServerUsers;
            this.serverAdminUpdateActionNotification = serverAdminUpdateActionNotification;
            this.siteMembershipUpdateActionNotification = siteMembershipUpdateActionNotification;
            this.siteRoles = siteRoles;
            this.rolesPickerClient = rolesPickerClient;
            this.siteRolesUpdateActionNotification = siteRolesUpdateActionNotification;
            this.SiteUsers = SiteUsers;
            this.toaster = toaster;
            this.Users = Users;
            this.availableQuota = availableQuota;
            // site or server
            $scope.mode = mode;
            $scope.isServerMode = function () {
                return $scope.mode === 'server';
            };
            $scope.isSiteMode = function () {
                return $scope.mode === 'site';
            };
            // setup site role stuff
            if ($scope.isServerMode()) {
                // site role changes will be stored here
                $scope.siteRoleChanges = {
                    siteRoles: {},
                    serverAdmin: undefined
                };
            }
            else if ($scope.isSiteMode()) {
                // possible site roles settings for the imported group include everything except guest & admin.
                $scope.siteRoleOptions = siteRoles.optionsForCurrentUser();
                $scope.siteRole = availableQuota <= 0 ? VizPortal.ServerApi.SiteRoles.Unlicensed : VizPortal.ServerApi.SiteRoles.Interactor;
                $scope.setSiteRole = function (role) {
                    $scope.siteRole = role;
                };
            }
            else {
                throw new Error('Unknown mode, it is neither "site" or "server"');
            }
            // initial state of the form
            $scope.formModel = {
                username: "",
                formState: VizPortal.AddLocalUserFormState.Initial,
                errorText: "",
                newUserFlowModel: {
                    authId: "",
                    displayName: "",
                    password: "",
                    confirmPassword: "",
                    email: "",
                    usernameInfo: ""
                },
                otherSiteFlowModel: {
                    displayName: "",
                    warningText: "",
                    proceedClicked: false
                },
                notAvailableFlowModel: {
                    displayName: "",
                    errorText: ""
                }
            };
            // proceed button on Flow #2 (username exist on another site)
            $scope.proceed = function () {
                _this.getOtherSiteFlowModel().proceedClicked = true;
            };
            // returns true when the proceed button has been clicked on Flow #2.
            $scope.proceedClicked = function () {
                return _this.getOtherSiteFlowModel().proceedClicked;
            };
            // called when "Add User" button gets clicked
            $scope.confirm = function () {
                _this.confirm();
            };
            // determines whether the "Add User" button is disabled
            $scope.isConfirmDisabled = function () {
                return _this.isConfirmDisabled();
            };
            // called everytime the username field changes
            $scope.checkDoesUsernameExists = function (username) {
                Users.checkUserNames([username]).then(function (results) {
                    if (results.users.length === 0) {
                        $scope.formModel.formState = VizPortal.AddLocalUserFormState.Initial;
                        return;
                    }
                    var result = results.users[0];
                    // $note-ltan:
                    // We can not assume we are dealing with site users even when existsOnSite is true.
                    // Thus the explicity mode check.
                    if ($scope.isSiteMode() && result.existsOnSite) {
                        _this.setupFormForNotAvailable(result.displayName, "usernameExistsOnCurrentSite");
                    }
                    else if (result.existsOnServer) {
                        if ($scope.isSiteMode()) {
                            _this.setupFormForAddUserToSite(result.displayName);
                        }
                        else {
                            _this.setupFormForNotAvailable(result.displayName, "usernameExistsOnServer");
                        }
                    }
                    else {
                        _this.setupFormForAvailable();
                    }
                });
            };
            // true if the passwords & confirm password fields are both non-empty
            $scope.passwordFieldsAreNonEmpty = function () {
                var model = $scope.formModel.newUserFlowModel;
                return model.password &&
                    model.confirmPassword &&
                    model.password.length > 0 &&
                    model.confirmPassword.length > 0;
            };
            // TODO: dry this out. Duplicated in AddActiveDirectorySiteUsersDialogCtrl
            $scope.availableQuota = availableQuota;
            $scope.isSiteRoleOptionDisabled = function (siteRole) {
                // when available quota is 0, only allow Unlicensed and UnlicensedWithPublish users to be added.
                return availableQuota <= 0 && siteRole !== VizPortal.ServerApi.SiteRoles.Unlicensed && siteRole !== VizPortal.ServerApi.SiteRoles.UnlicensedWithPublish;
            };
            $scope.isQuotaEnabledForSite = _.isNumber(availableQuota);
        }
        AddLocalUserDialogCtrl.prototype.setupFormForAddUserToSite = function (displayName) {
            this.$scope.formModel.formState = VizPortal.AddLocalUserFormState.OtherSite;
            this.getOtherSiteFlowModel().displayName = displayName;
            this.getOtherSiteFlowModel().warningText = this.$translate.instant('usernameExistsOnAnotherSite', { USER_NAME: VizPortal.L10n.elideIfLong(displayName) });
            this.getOtherSiteFlowModel().proceedClicked = false;
        };
        AddLocalUserDialogCtrl.prototype.setupFormForNotAvailable = function (displayName, errorStringId) {
            this.$scope.formModel.formState = VizPortal.AddLocalUserFormState.NotAvailable;
            this.getNotAvailableFlowModel().displayName = displayName;
            this.getNotAvailableFlowModel().errorText = this.$translate.instant(errorStringId, { USER_NAME: VizPortal.L10n.elideIfLong(displayName) });
        };
        AddLocalUserDialogCtrl.prototype.setupFormForAvailable = function () {
            this.$scope.formModel.formState = VizPortal.AddLocalUserFormState.NewUser;
            this.getNewUserFlowModel().usernameInfo = this.$translate.instant('usernameAvailable');
        };
        // various logic that depends on the state of the form
        AddLocalUserDialogCtrl.prototype.confirm = function () {
            this.$scope.busy = true;
            var username = this.$scope.formModel.username;
            switch (this.getFormState()) {
                case VizPortal.AddLocalUserFormState.NewUser:
                    if (this.$scope.isSiteMode()) {
                        this.createLocalSiteUser(username, this.getNewUserFlowModel());
                    }
                    else if (this.$scope.isServerMode()) {
                        this.createLocalServerUser(username, this.getNewUserFlowModel());
                    }
                    break;
                case VizPortal.AddLocalUserFormState.OtherSite:
                    this.addUserToSite(username, this.getOtherSiteFlowModel());
                    break;
            }
        };
        AddLocalUserDialogCtrl.prototype.isConfirmDisabled = function () {
            if (this.$scope.busy) {
                return true;
            }
            if (this.$scope.addLocalUserForm.$invalid) {
                return true;
            }
            switch (this.getFormState()) {
                case VizPortal.AddLocalUserFormState.Initial:
                case VizPortal.AddLocalUserFormState.NewUser:
                    return false;
                case VizPortal.AddLocalUserFormState.OtherSite:
                    return !this.getOtherSiteFlowModel().proceedClicked;
                case VizPortal.AddLocalUserFormState.NotAvailable:
                    return true;
            }
            return false;
        };
        // section: create local user
        AddLocalUserDialogCtrl.prototype.createLocalSiteUser = function (username, model) {
            var _this = this;
            // get the currently selected site role off the scope
            var siteRoleToGiveNewUser = this.$scope.siteRole;
            // set a flag to true if the currently selected role is Server Admin
            var makeServerAdmin = (siteRoleToGiveNewUser === VizPortal.ServerApi.SiteRoles.ServerAdministrator) || null;
            // if setting to server admin, we don't pass the role to the backend.
            // because the server admin flag & the site role string are mutually exclusive.
            if (makeServerAdmin) {
                siteRoleToGiveNewUser = null;
            }
            this.SiteUsers.createLocalUser(username, model.displayName, model.email, model.password, makeServerAdmin, siteRoleToGiveNewUser).then(function (result) {
                _this.showNotificationForCreateUser(result);
                if (!!result.errors && result.errors.length > 0) {
                    _this.reenableButtons();
                }
                else {
                    _this.$scope.$emit(VizPortal.UserAddedEvent);
                    _this.$scope.close(result);
                }
            });
        };
        AddLocalUserDialogCtrl.prototype.createLocalServerUser = function (username, model) {
            var _this = this;
            this.ServerUsers.createLocalServerUser(username, model.displayName, model.email, model.password)
                .then(function (result) {
                _this.showNotificationForCreateUser(result);
                if (!!result.errors && result.errors.length > 0) {
                    _this.reenableButtons();
                }
                else {
                    _this.onServerUserCreateSuccess(result);
                }
            });
        };
        AddLocalUserDialogCtrl.prototype.onServerUserCreateSuccess = function (result) {
            this.$scope.$emit(VizPortal.UserAddedEvent);
            // create an interfaced object for the created user
            var addedUser = {
                id: result.users[0].id,
                authId: result.users[0].authId,
                username: result.users[0].username,
                displayName: result.users[0].displayName
            };
            // update site membership
            if (!!this.$scope.siteRoleChanges.serverAdmin) {
                this.updateServerAdmin(addedUser);
            }
            else if (!_.isEmpty(this.$scope.siteRoleChanges.siteRoles)) {
                this.updateSiteMembership(addedUser.id, addedUser.authId, addedUser.username, addedUser.displayName);
            }
            this.$scope.close(result);
        };
        // section: update server admin
        AddLocalUserDialogCtrl.prototype.updateServerAdmin = function (user) {
            var _this = this;
            var users = VizPortal.SetOfUsers.singleton(user);
            var newAdminState = (this.$scope.siteRoleChanges.serverAdmin === VizPortal.CheckboxState.checked);
            this.rolesPickerClient.updateServerAdmin(users, newAdminState).then(function () {
                _this.$scope.$emit(VizPortal.SiteRolesEvent.SiteRolesChanged);
            });
        };
        // section: update site membership or roles
        AddLocalUserDialogCtrl.prototype.updateSiteMembership = function (userId, authUserId, username, userDisplayName) {
            var _this = this;
            var params = this.rolesPickerClient.siteRoleChangesToParams([userId], this.$scope.siteRoleChanges.siteRoles);
            this.rolesPickerClient.updateServerUsersSiteMembership(params)
                .then(function (result) {
                var addedToSiteName = (params.addToSiteRoles.length > 0) ?
                    _this.$scope.siteRoleChanges.siteRoles[params.addToSiteRoles[0].siteId].siteName : "";
                // create a Set<T> object for the result notification system
                var addedUser = {
                    id: userId,
                    authId: authUserId,
                    username: username,
                    displayName: userDisplayName
                };
                var users = VizPortal.SetOfUsers.singleton(addedUser);
                _this.siteMembershipUpdateActionNotification.notify(result, users, 1, addedUser, params.addToSiteRoles.length, addedToSiteName, 0, "");
                _this.$scope.$emit(VizPortal.SiteRolesEvent.SiteRolesChanged);
            });
        };
        // section: update site role
        AddLocalUserDialogCtrl.prototype.updateSiteRole = function (user) {
            var _this = this;
            var siteRole = this.$scope.siteRole;
            var userIds = [user.id];
            var userSet = VizPortal.SetOfUsers.singleton(user);
            if (siteRole === VizPortal.ServerApi.SiteRoles.ServerAdministrator) {
                this.SiteUsers.updateServerAdminStatusAndDelay(userIds, true).then(function (result) {
                    _this.serverAdminUpdateActionNotification.notify(result, userSet, true);
                    _this.$scope.$emit(VizPortal.SiteRolesEvent.SiteRolesChanged);
                });
            }
            else {
                this.SiteUsers.updateUsersSiteRole(userIds, siteRole).then(function (result) {
                    _this.siteRolesUpdateActionNotification.notify(result, userSet, siteRole);
                    _this.$scope.$emit(VizPortal.SiteRolesEvent.SiteRolesChanged);
                });
            }
        };
        // section: add user to site
        AddLocalUserDialogCtrl.prototype.addUserToSite = function (username, model) {
            var _this = this;
            var selectedSiteRole = this.$scope.siteRole;
            var promoteToServerAdmin = false;
            if (selectedSiteRole === VizPortal.ServerApi.SiteRoles.ServerAdministrator) {
                promoteToServerAdmin = true;
                // ServerAdmin isn't a real site role.
                // We will add the user with no site role and then promote them to Server Admin.
                selectedSiteRole = VizPortal.ServerApi.SiteRoles.Unlicensed;
            }
            this.SiteUsers.addUsersToSite([username], selectedSiteRole)
                .then(function (result) {
                _this.showNotificationForAddUserToSite(result, username, selectedSiteRole);
                if (!!result.errors && result.errors.length > 0) {
                    _this.reenableButtons();
                }
                else {
                    var promoteAdminPromise = promoteToServerAdmin ? _this.promoteToServerAdmin(username) : _this.$q.when({});
                    promoteAdminPromise.then(function (promoteAdminResult) {
                        if (!!promoteAdminResult.errors && promoteAdminResult.errors.length > 0) {
                            _this.reenableButtons();
                        }
                        else {
                            _this.$scope.$emit(VizPortal.UserAddedEvent);
                            _this.$scope.close(result);
                        }
                    });
                }
            });
        };
        AddLocalUserDialogCtrl.prototype.promoteToServerAdmin = function (username) {
            var _this = this;
            // TODO: if the backend can give us the IServerUser info (id is all we need) in the IUserNameAvailability result,
            //       we won't have to make this first request to get the Server User.
            var serverUser;
            return this.ServerUsers.getUserByUsernameAndDomain(username, 'local')
                .then(function (user) {
                serverUser = user;
                return _this.ServerUsers.updateServerAdminStatus([user.id], true);
            })
                .then(function (result) {
                _this.serverAdminUpdateActionNotification.notify(result, VizPortal.SetOfUsers.singleton(serverUser), true);
                return result;
            });
        };
        // helpers
        AddLocalUserDialogCtrl.prototype.reenableButtons = function () {
            this.$scope.busy = false;
        };
        AddLocalUserDialogCtrl.prototype.getFormState = function () {
            return this.$scope.formModel.formState;
        };
        AddLocalUserDialogCtrl.prototype.showNotificationForCreateUser = function (result) {
            var _this = this;
            var params = {
                users: VizPortal.Set.fromIdItemArray(result.users),
                results: result.results,
                errors: result.errors,
                successCode: '30',
                showErrorMsgFunc: function (errorMsg) {
                    _this.$scope.formModel.errorText = errorMsg;
                }
            };
            this.userActionNotification.notify(params);
        };
        AddLocalUserDialogCtrl.prototype.showNotificationForAddUserToSite = function (result, username, siteRole) {
            var _this = this;
            this.addUserToSiteActionNotification.notify(function (errorMsg) {
                _this.$scope.formModel.errorText = errorMsg;
            }, result, username, siteRole);
        };
        // for UX FLOW #1 -- username is available
        AddLocalUserDialogCtrl.prototype.isNewUserFlow = function () {
            return this.getFormState() === VizPortal.AddLocalUserFormState.NewUser;
        };
        AddLocalUserDialogCtrl.prototype.getNewUserFlowModel = function () {
            return this.$scope.formModel.newUserFlowModel;
        };
        // for UX FLOW #2 -- username exists on another site
        AddLocalUserDialogCtrl.prototype.isOtherSiteFlow = function () {
            return this.getFormState() === VizPortal.AddLocalUserFormState.OtherSite;
        };
        AddLocalUserDialogCtrl.prototype.getOtherSiteFlowModel = function () {
            return this.$scope.formModel.otherSiteFlowModel;
        };
        // for UX FLOW #3 -- username exists on current site, thus not available
        AddLocalUserDialogCtrl.prototype.getNotAvailableFlowModel = function () {
            return this.$scope.formModel.notAvailableFlowModel;
        };
        AddLocalUserDialogCtrl.$inject = [
            '$scope',
            '$q',
            '$translate',
            'AddUserToSiteActionNotification',
            'UserActionNotification',
            'mode',
            'ServerUsers',
            'ServerAdminUpdateActionNotification',
            'SiteMembershipUpdateActionNotification',
            'SiteRoles',
            'SiteRolesPickerClientService',
            'SiteRolesUpdateActionNotification',
            'SiteUsers',
            'ToasterService',
            'Users',
            'availableQuota'
        ];
        return AddLocalUserDialogCtrl;
    })();
    VizPortal.AddLocalUserDialogCtrl = AddLocalUserDialogCtrl;
    VizPortal.Module.instance().controller('AddLocalUserDialogCtrl', AddLocalUserDialogCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../controllers/AddLocalUserDialogCtrl.ts" />
var VizPortal;
(function (VizPortal) {
    var AddLocalUserAction = (function () {
        function AddLocalUserAction(modal, siteUsers) {
            this.modal = modal;
            this.siteUsers = siteUsers;
        }
        AddLocalUserAction.prototype.showAddLocalUserDialogForSite = function (dialogScope) {
            var _this = this;
            var dialogInstance = this.modal.open({
                scope: dialogScope,
                templateUrl: 'addLocalUserDialog.html',
                size: VizPortal.ModalSize.fitToContent,
                controller: VizPortal.AddLocalUserDialogCtrl,
                resolve: {
                    mode: function () { return "site"; },
                    availableQuota: function () { return _this.siteUsers.getRemainingUserQuota(); }
                }
            });
            return dialogInstance.result;
        };
        AddLocalUserAction.prototype.showAddLocalUserDialogForServer = function (dialogScope) {
            var dialogInstance = this.modal.open({
                scope: dialogScope,
                templateUrl: 'addLocalUserDialog.html',
                size: VizPortal.ModalSize.fitToContent,
                controller: VizPortal.AddLocalUserDialogCtrl,
                resolve: {
                    mode: function () { return "server"; },
                    availableQuota: function () { return undefined; } // no quota on server
                }
            });
            return dialogInstance.result;
        };
        AddLocalUserAction.$inject = ['ModalService', 'SiteUsers'];
        return AddLocalUserAction;
    })();
    VizPortal.AddLocalUserAction = AddLocalUserAction;
    VizPortal.Module.instance().service('AddLocalUserAction', AddLocalUserAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/AddActiveDirectoryUsersAction.ts" />
/// <reference path="../services/ActiveDirectoryGroupAction.ts" />
/// <reference path="../services/AddExternalUsersAction.ts" />
/// <reference path="../services/AddLocalUserAction.ts" />
var VizPortal;
(function (VizPortal) {
    // triggered by sub-dialogs when one or more users have been added to the site or server
    VizPortal.UserAddedEvent = 'UserAddedEvent';
    var AddUsersOptionsAction = (function () {
        function AddUsersOptionsAction(modal, serverService) {
            this.modal = modal;
            this.serverService = serverService;
        }
        AddUsersOptionsAction.prototype.showAddSiteUsersOptionsDialog = function (context) {
            var dialogInstance = this.createDialogInstance(context, AddSiteUsersOptionsDialogCtrl);
            return dialogInstance.result;
        };
        AddUsersOptionsAction.prototype.showAddServerUsersOptionsDialog = function (context) {
            var dialogInstance = this.createDialogInstance(context, AddServerUsersOptionsDialogCtrl);
            return dialogInstance.result;
        };
        AddUsersOptionsAction.prototype.createDialogInstance = function (context, controller) {
            var _this = this;
            return this.modal.open({
                scope: context.scope,
                templateUrl: 'addUsersOptionsDialog.html',
                size: VizPortal.ModalSize.fitToContent,
                position: _.extend(VizPortal.ModalService.anchoredTo(context.targetElement)),
                controller: controller,
                resolve: {
                    domainFamily: function () { return _this.serverService.domainFamily(); }
                }
            });
        };
        AddUsersOptionsAction.$inject = ['ModalService', 'ServerService'];
        return AddUsersOptionsAction;
    })();
    VizPortal.AddUsersOptionsAction = AddUsersOptionsAction;
    VizPortal.Module.instance().service('AddUsersOptionsAction', AddUsersOptionsAction);
    var AddSiteUsersOptionsDialogCtrl = (function () {
        function AddSiteUsersOptionsDialogCtrl($scope, addLocalUserAction, activeDirectoryGroupAction, addActiveDirectoryUsersAction, addExternalUsersAction, bulkImportUsersAction, domainFamily) {
            $scope.title = 'addUsersToSite';
            if (domainFamily === VizPortal.ServerApi.DomainFamily.Local) {
                $scope.addLocalUser = function () {
                    // Note: The order here is important, because $scope.close() will destroy the scope.
                    addLocalUserAction.showAddLocalUserDialogForSite($scope.$parent);
                    $scope.close({});
                };
            }
            if (domainFamily === VizPortal.ServerApi.DomainFamily.ActiveDirectory) {
                $scope.importAdUser = function () {
                    // Note: The order here is important, because $scope.close() will destroy the scope.
                    addActiveDirectoryUsersAction.showAddActiveDirectoryUsersToSiteDialog($scope.$parent);
                    $scope.close({});
                };
                $scope.importAdGroup = function () {
                    // Note: The order here is important, because $scope.close() will destroy the scope.
                    activeDirectoryGroupAction.showAddAdGroupDialog($scope.$parent);
                    $scope.close({});
                };
            }
            if (domainFamily === VizPortal.ServerApi.DomainFamily.External) {
                $scope.importExternalUser = function () {
                    // Note: The order here is important, because $scope.close() will destroy the scope.
                    addExternalUsersAction.showAddExternalUsersToSiteDialog($scope.$parent);
                    $scope.close({});
                };
            }
            $scope.importFromBulk = function () {
                // Note: The order here is important, because $scope.close() will destroy the scope.
                bulkImportUsersAction.showBulkImportSiteUsersDialog($scope.$parent);
                $scope.close({});
            };
        }
        AddSiteUsersOptionsDialogCtrl.$inject = [
            '$scope',
            'AddLocalUserAction',
            'ActiveDirectoryGroupAction',
            'AddActiveDirectoryUsersAction',
            'AddExternalUsersAction',
            'BulkImportUsersAction',
            'domainFamily'];
        return AddSiteUsersOptionsDialogCtrl;
    })();
    VizPortal.AddSiteUsersOptionsDialogCtrl = AddSiteUsersOptionsDialogCtrl;
    var AddServerUsersOptionsDialogCtrl = (function () {
        function AddServerUsersOptionsDialogCtrl($scope, addLocalUserAction, addActiveDirectoryUsersAction, bulkImportUsersAction, domainFamily) {
            $scope.title = 'addUsersToServer';
            if (domainFamily === VizPortal.ServerApi.DomainFamily.Local) {
                $scope.addLocalUser = function () {
                    // Note: The order here is important, because $scope.close() will destroy the scope.
                    addLocalUserAction.showAddLocalUserDialogForServer($scope.$parent);
                    $scope.close({});
                };
            }
            if (domainFamily === VizPortal.ServerApi.DomainFamily.ActiveDirectory) {
                $scope.importAdUser = function () {
                    // Note: The order here is important, because $scope.close() will destroy the scope.
                    addActiveDirectoryUsersAction.showAddActiveDirectoryUsersToServerDialog($scope.$parent);
                    $scope.close({});
                };
            }
            $scope.importFromBulk = function () {
                // Note: The order here is important, because $scope.close() will destroy the scope.
                bulkImportUsersAction.showBulkImportServerUsersDialog($scope.$parent);
                $scope.close({});
            };
        }
        AddServerUsersOptionsDialogCtrl.$inject = [
            '$scope',
            'AddLocalUserAction',
            'AddActiveDirectoryUsersAction',
            'BulkImportUsersAction',
            'domainFamily'];
        return AddServerUsersOptionsDialogCtrl;
    })();
    VizPortal.AddServerUsersOptionsDialogCtrl = AddServerUsersOptionsDialogCtrl;
    VizPortal.Module.instance().controller('AddSiteUsersOptionsDialogCtrl', AddSiteUsersOptionsDialogCtrl);
    VizPortal.Module.instance().controller('AddServerUsersOptionsDialogCtrl', AddServerUsersOptionsDialogCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../controllers/SiteMembershipDialogCtrl.ts" />
/// <reference path="../ServerApi/types/ISiteUser.ts" />
var VizPortal;
(function (VizPortal) {
    var EditSiteMembershipAction = (function () {
        function EditSiteMembershipAction(modalService) {
            this.modalService = modalService;
        }
        // TODO: use ConfimActionDialog
        EditSiteMembershipAction.prototype.showEditSiteMembershipDialog = function (users, context) {
            var scope = context.scope.$new(true);
            scope.users = users;
            var dialogInstance = this.modalService.open({
                scope: scope,
                templateUrl: 'siteMembershipDialog.html',
                size: VizPortal.ModalSize.fitToContent,
                controller: VizPortal.SiteMembershipDialogCtrl
            });
            return dialogInstance.result.fin(function () { return scope.$destroy(); });
        };
        EditSiteMembershipAction.$inject = ['ModalService'];
        return EditSiteMembershipAction;
    })();
    VizPortal.EditSiteMembershipAction = EditSiteMembershipAction;
    VizPortal.Module.instance().service('EditSiteMembershipAction', EditSiteMembershipAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/ActionHelpers.ts" />
/// <reference path="../services/EditSiteMembershipAction.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerUsersActions = (function () {
        function ServerUsersActions(DeleteUsersFromServerAction, EditSiteMembershipAction, serverService) {
            this.DeleteUsersFromServerAction = DeleteUsersFromServerAction;
            this.EditSiteMembershipAction = EditSiteMembershipAction;
            this.serverService = serverService;
            this.serverUsersActionDefinition = [
                this.editSiteMembershipAction(),
                this.deleteUsersFromServerAction()
            ];
        }
        // public API
        ServerUsersActions.prototype.getServerUsersActionsButtons = function () {
            return this.serverUsersActionDefinition;
        };
        // action button factory
        ServerUsersActions.prototype.editSiteMembershipAction = function () {
            var _this = this;
            return {
                name: 'siteMembership',
                isAvailable: function (items) { return _this.canEditSiteMembership(items); },
                execute: function (items, context) {
                    var scope = context.scope;
                    _this.EditSiteMembershipAction.showEditSiteMembershipDialog(items, context)
                        .then(function (result) {
                        if (result) {
                            VizPortal.ActionHelpers.deselectNotFound(scope.selectedItems, result, VizPortal.CommonErrorCode.SystemUserNotFound);
                        }
                    });
                }
            };
        };
        ServerUsersActions.prototype.canEditSiteMembership = function (serverUsers) {
            return (serverUsers.size() > 0) && !ServerUsersActions.isSingleSelectAndGuest(serverUsers);
        };
        ServerUsersActions.prototype.deleteUsersFromServerAction = function () {
            var _this = this;
            return {
                name: 'delete',
                isAvailable: function (items) { return _this.canDelete(items); },
                execute: function (items, context) {
                    var scope = context.scope;
                    _this.DeleteUsersFromServerAction.showDeleteUsersFromServerDialog(items, context)
                        .then(function (result) {
                        if (result) {
                            VizPortal.ActionHelpers.deselectAllExceptErrors(scope.selectedItems, result, VizPortal.CommonErrorCode.SystemUserNotFound);
                            scope.refreshItems();
                        }
                    });
                }
            };
        };
        ServerUsersActions.prototype.canDelete = function (serverUsers) {
            return (serverUsers.size() > 0) && !ServerUsersActions.isSingleSelectAndGuest(serverUsers);
        };
        ServerUsersActions.isSingleSelectAndGuest = function (serverUsers) {
            return (serverUsers.size() === 1 && serverUsers.first().maxSiteRole === VizPortal.ServerApi.SiteRoles.Guest);
        };
        ServerUsersActions.$inject = [
            'DeleteUsersFromServerAction',
            'EditSiteMembershipAction',
            'ServerService'];
        return ServerUsersActions;
    })();
    VizPortal.ServerUsersActions = ServerUsersActions;
    VizPortal.Module.instance().service('ServerUsersActions', ServerUsersActions);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../../app/content/ServerUsersGrid.ts" />
/// <reference path="../../common/react/components/dataGrid/AngularToReactDataGridBridge.ts" />
/// <reference path="../controllers/ContentPlaceCtrl.ts" />
/// <reference path="../controllers/FilterPanelCtrl.ts" />
/// <reference path="../helpers/ActionButtonsHelper.ts" />
/// <reference path="../helpers/SiteRoleFilterHelper.ts" />
/// <reference path="../models/ContentTypes.ts" />
/// <reference path="../models/ISliceable.ts" />
/// <reference path="../models/ITabsBannerModel.ts" />
/// <reference path="../models/ITemplate.ts" />
/// <reference path="../models/Set.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../resources/ServerUsers.ts" />
/// <reference path="../ServerApi/types/IServerUser.ts" />
/// <reference path="../services/AddUsersOptionsAction.ts" />
/// <reference path="../services/BrowserTitleService.ts" />
/// <reference path="../services/QueryService.ts" />
/// <reference path="../services/SelectionService.ts" />
/// <reference path="../services/ServerUsersActions.ts" />
/// <reference path="../services/SorterFactory.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerUsersPlaceCtrl = (function () {
        function ServerUsersPlaceCtrl($scope, $translate, AngularToReactDataGridBridge, siteRoleFilter, addUsersOptionsAction, BrowserTitleService, queryService, selectionService, serverService, users, serverUsersActions, sorterFactory, filterPanelService) {
            var _this = this;
            this.$scope = $scope;
            this.$translate = $translate;
            this.AngularToReactDataGridBridge = AngularToReactDataGridBridge;
            this.siteRoleFilter = siteRoleFilter;
            this.serverService = serverService;
            this.users = users;
            var actions = serverUsersActions.getServerUsersActionsButtons();
            if (VizPortal.FeatureFlags.reactServerUsersGrid) {
                this.configureForReactDataGrid(actions);
            }
            BrowserTitleService.setTitle('serverUsers');
            $scope.server = serverService;
            $scope.selectedItems = new VizPortal.Set(function (user) { return user.id; });
            $scope.availableAction = function (action) { return action.isAvailable($scope.selectedItems); };
            VizPortal.ActionButtonsHelper.setupActionButtons($scope, actions);
            $scope.listActions = [{
                    name: 'add-users',
                    translate: 'addUsers',
                    isAvailable: function () { return true; },
                    execute: function ($event) {
                        addUsersOptionsAction.showAddServerUsersOptionsDialog(VizPortal.ActionContext.fromEvent($event));
                    }
                }];
            $scope.availableListAction = function (listAction) { return listAction.isAvailable(); };
            $scope.rowClicked = function (row, colIndex) {
                selectionService.rowClicked($scope.selectedItems, row, colIndex);
            };
            $scope.filterControls = {};
            $scope.filterDefinitions = filterPanelService.getFilterDefinitions(['maxSiteRole']);
            this.maxSiteRoleFilterDefinition = $scope.filterDefinitions[0];
            $scope.sorter = sorterFactory.create(VizPortal.ServerUserContentType.defaultOrder);
            var queryUpdater = queryService.createQueryUpdater($scope, VizPortal.ServerUserContentType, users, function (resourceQuery) {
                if (VizPortal.FeatureFlags.reactServerUsersGrid) {
                    _this.AngularToReactDataGridBridge.updateReactDataGridRowStore({ scope: _this.$scope, sliceable: resourceQuery });
                }
                $scope.sliceable = resourceQuery;
                $scope.sorter.setOrder(resourceQuery.getOrder());
                _this.updateMaxSiteRoleCounts(resourceQuery);
                resourceQuery.getCount().then(function (result) {
                    _this.$scope.model.itemsCount = result;
                });
            }, {});
            $scope.sliceChanged = function (newSlice) {
                $scope.selectedItems.updateItems(newSlice.items);
                $scope.model.itemsCount = newSlice.total;
            };
            $scope.refreshItems = function () {
                queryUpdater.refresh();
            };
            $scope.refreshItems();
            $scope.placeTitleClicked = function () {
                $scope.refreshItems();
            };
            $scope.$on(VizPortal.UserAddedEvent, function () {
                $scope.refreshItems();
            });
            $scope.$on(VizPortal.SiteRolesEvent.SiteRolesChanged, function () {
                $scope.refreshItems();
            });
            $scope.headerClicked = function (header) { return $scope.sorter.setPrimary(header.attrs['key'], header.attrs['direction']); };
            $scope.model = { itemsCount: 0 };
            $scope.emptyTemplateModel = ServerUsersPlaceCtrl.emptyTemplateModel;
        }
        ServerUsersPlaceCtrl.prototype.configureForReactDataGrid = function (actions) {
            var _this = this;
            this.$scope.useReactDataGrid = true;
            var columns = VizPortalReact.ServerUsersGrid.columns(function (id) { return _this.$translate.instant(id); }, this.$scope, new VizPortalReact.ServerUrls(window.location.search), this.siteRoleFilter, actions, this.serverService.isServerDomainFamilyActiveDirectory());
            this.AngularToReactDataGridBridge.attachReactDataGridToScope(this.$scope, columns, ServerUsersPlaceCtrl.emptyTemplateModel);
        };
        ServerUsersPlaceCtrl.prototype.updateMaxSiteRoleCounts = function (baseQuery) {
            var _this = this;
            this.users.getUserCountsByMaxSiteRole(baseQuery).then(function (userCountsByRole) {
                _this.maxSiteRoleFilterDefinition.options =
                    VizPortal.SiteRoleFilterHelper.siteRoleOptions(VizPortal.SiteRoles.WithoutGuest, userCountsByRole);
            });
        };
        ServerUsersPlaceCtrl.$inject = [
            '$scope',
            '$translate',
            'AngularToReactDataGridBridge',
            'siteRoleFilter',
            'AddUsersOptionsAction',
            'BrowserTitleService',
            'QueryService',
            'SelectionService',
            'ServerService',
            'ServerUsers',
            'ServerUsersActions',
            'SorterFactory',
            'FilterPanelService'
        ];
        ServerUsersPlaceCtrl.emptyTemplateModel = { title: 'usersEmptyMessage' };
        return ServerUsersPlaceCtrl;
    })();
    VizPortal.ServerUsersPlaceCtrl = ServerUsersPlaceCtrl;
    VizPortal.Module.instance().controller('ServerUsersPlaceCtrl', ServerUsersPlaceCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerSettings = (function () {
        function ServerSettings(server) {
            this.server = server;
        }
        ServerSettings.prototype.fetch = function () {
            return this.server.sendRequest(new VizPortal.ServerApi.GetServerSettingsRequest({}))
                .then(function (result) { return result.serverSettings; });
        };
        ServerSettings.prototype.updateBoolean = function (setting, value) {
            var request = new VizPortal.ServerApi.UpdateBooleanServerSettingRequest({
                setting: setting,
                value: value
            });
            return this.server.sendRequest(request);
        };
        ServerSettings.prototype.updateString = function (setting, value) {
            var request = new VizPortal.ServerApi.UpdateStringServerSettingRequest({
                setting: setting,
                value: value
            });
            return this.server.sendRequest(request);
        };
        ServerSettings.prototype.updateScheduleFrequency = function (setting, value) {
            var request = new VizPortal.ServerApi.UpdateScheduleFrequencyServerSettingRequest({
                setting: setting,
                value: value
            });
            return this.server.sendRequest(request);
        };
        ServerSettings.$inject = ['ServerService'];
        return ServerSettings;
    })();
    VizPortal.ServerSettings = ServerSettings;
    VizPortal.Module.instance().service('ServerSettings', ServerSettings);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var ClearConnectedDevicesRequest = (function (_super) {
            __extends(ClearConnectedDevicesRequest, _super);
            function ClearConnectedDevicesRequest(params) {
                _super.call(this, 'deleteUserRefreshTokens', params);
            }
            return ClearConnectedDevicesRequest;
        })(ServerApi.Request);
        ServerApi.ClearConnectedDevicesRequest = ClearConnectedDevicesRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/ClearConnectedDevicesRequest.ts" />
/// <reference path="../services/ConfirmActionDialog.ts" />
/// <reference path="../services/ServerService.ts" />
/// <reference path="../services/ToasterService.ts" />
var VizPortal;
(function (VizPortal) {
    var ClearConnectedDevicesAction = (function () {
        function ClearConnectedDevicesAction($translate, $q, ConfirmActionDialog, serverService, ToasterService) {
            this.$translate = $translate;
            this.$q = $q;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.serverService = serverService;
            this.ToasterService = ToasterService;
        }
        ClearConnectedDevicesAction.prototype.showConfirmationDialog = function (userId, userRefreshTokenCount) {
            var _this = this;
            var confirmActionDialogInstance = this.ConfirmActionDialog.open({
                title: this.$translate.instant('clearConnectedDevices'),
                bodyText: this.$translate.instant('clearConnectedDevicesConfirmMessage', { TOKEN_COUNT: userRefreshTokenCount }, VizPortal.L10n.Interpolations.Count),
                actionName: this.$translate.instant('clearConnectedDevicesConfirmButton'),
                isDeleteAction: true,
                action: function (confirmActionDialogInstance) {
                    var ClearConnectedDevicesParams = {
                        userId: userId
                    };
                    return _this.serverService.sendRequest(new VizPortal.ServerApi.ClearConnectedDevicesRequest(ClearConnectedDevicesParams))
                        .then(VizPortal.ResultHelper.rejectResultOnError(_this.$q))
                        .then(_.identity, function () { return confirmActionDialogInstance.showErrorMessage(_this.$translate.instant('clearConnectedDevicesError')); });
                }
            });
            confirmActionDialogInstance.result.then(function (result) {
                _this.ToasterService.pop({ type: VizPortal.ToastType.Info, text: _this.$translate.instant('clearConnectedDevicesSuccess') });
            });
            return confirmActionDialogInstance.result;
        };
        ClearConnectedDevicesAction.$inject = ['$translate', '$q', 'ConfirmActionDialog', 'ServerService', 'ToasterService'];
        return ClearConnectedDevicesAction;
    })();
    VizPortal.ClearConnectedDevicesAction = ClearConnectedDevicesAction;
    VizPortal.Module.instance().service('ClearConnectedDevicesAction', ClearConnectedDevicesAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var ChangeUserPasswordRequest = (function (_super) {
            __extends(ChangeUserPasswordRequest, _super);
            function ChangeUserPasswordRequest(params) {
                _super.call(this, 'changeUserPassword', params);
            }
            return ChangeUserPasswordRequest;
        })(ServerApi.Request);
        ServerApi.ChangeUserPasswordRequest = ChangeUserPasswordRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var UpdateUserEmailRequest = (function (_super) {
            __extends(UpdateUserEmailRequest, _super);
            function UpdateUserEmailRequest(params) {
                _super.call(this, 'updateUserEmail', params);
            }
            return UpdateUserEmailRequest;
        })(ServerApi.Request);
        ServerApi.UpdateUserEmailRequest = UpdateUserEmailRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var UpdateUserDisplayNameRequest = (function (_super) {
            __extends(UpdateUserDisplayNameRequest, _super);
            function UpdateUserDisplayNameRequest(params) {
                _super.call(this, 'updateUserDisplayName', params);
            }
            return UpdateUserDisplayNameRequest;
        })(ServerApi.Request);
        ServerApi.UpdateUserDisplayNameRequest = UpdateUserDisplayNameRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var UpdateUserLanguageRequest = (function (_super) {
            __extends(UpdateUserLanguageRequest, _super);
            function UpdateUserLanguageRequest(params) {
                _super.call(this, 'updateUserLanguage', params);
            }
            return UpdateUserLanguageRequest;
        })(ServerApi.Request);
        ServerApi.UpdateUserLanguageRequest = UpdateUserLanguageRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var UpdateUserLocaleRequest = (function (_super) {
            __extends(UpdateUserLocaleRequest, _super);
            function UpdateUserLocaleRequest(params) {
                _super.call(this, 'updateUserLocale', params);
            }
            return UpdateUserLocaleRequest;
        })(ServerApi.Request);
        ServerApi.UpdateUserLocaleRequest = UpdateUserLocaleRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var UpdateUserStartPageRequest = (function (_super) {
            __extends(UpdateUserStartPageRequest, _super);
            function UpdateUserStartPageRequest(params) {
                _super.call(this, 'updateUserStartPage', params);
            }
            return UpdateUserStartPageRequest;
        })(ServerApi.Request);
        ServerApi.UpdateUserStartPageRequest = UpdateUserStartPageRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/ServerService.ts" />
/// <reference path="../ServerApi/requests/ChangeUserPasswordRequest.ts" />
/// <reference path="../ServerApi/requests/UpdateUserEmailRequest.ts" />
/// <reference path="../ServerApi/requests/UpdateUserDisplayNameRequest.ts" />
/// <reference path="../ServerApi/requests/UpdateUserLanguageRequest.ts" />
/// <reference path="../ServerApi/requests/UpdateUserLocaleRequest.ts" />
/// <reference path="../ServerApi/requests/UpdateUserStartPageRequest.ts" />
var VizPortal;
(function (VizPortal) {
    var UserSettings = (function () {
        function UserSettings(ErrorNotifyingServer) {
            this.ErrorNotifyingServer = ErrorNotifyingServer;
            this.server = ErrorNotifyingServer.getServerService();
        }
        UserSettings.prototype.updateUserDisplayName = function (userId, displayName) {
            var params = {
                userId: userId,
                displayName: displayName
            };
            return this.ErrorNotifyingServer.sendRequestAndDelay(new VizPortal.ServerApi.UpdateUserDisplayNameRequest(params));
        };
        UserSettings.prototype.updateUserEmail = function (userId, email) {
            var params = {
                userId: userId,
                email: email
            };
            return this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.UpdateUserEmailRequest(params));
        };
        UserSettings.prototype.updateUserEmailAndDelay = function (userId, email) {
            var params = {
                userId: userId,
                email: email
            };
            return this.ErrorNotifyingServer.sendRequestAndDelay(new VizPortal.ServerApi.UpdateUserEmailRequest(params));
        };
        UserSettings.prototype.updateUserLanguage = function (userId, language) {
            var params = {
                userId: userId,
                language: language
            };
            return this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.UpdateUserLanguageRequest(params));
        };
        UserSettings.prototype.updateUserLocale = function (userId, locale) {
            var params = {
                userId: userId,
                locale: locale
            };
            return this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.UpdateUserLocaleRequest(params));
        };
        UserSettings.prototype.updateUserStartPage = function (userId, startPage) {
            var params = {
                startPage: startPage
            };
            if (userId !== UserSettings.SameUserId) {
                params.userId = userId;
            }
            return this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.UpdateUserStartPageRequest(params));
        };
        UserSettings.prototype.updateCurrentUsersStartPage = function (startPage) {
            var params = {
                startPage: startPage
            };
            return this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.UpdateUserStartPageRequest(params));
        };
        UserSettings.prototype.resetUserStartPage = function (userId) {
            return this.updateUserStartPage(userId, UserSettings.ResetStartPage);
        };
        UserSettings.prototype.changeUserPassword = function (userId, newPassword, oldPassword) {
            var _this = this;
            return this.server.sendRequest(new VizPortal.ServerApi.GeneratePublicKeyRequest()).
                then(function (generatePublicKeyResult) {
                var key = generatePublicKeyResult.key;
                var keyId = generatePublicKeyResult.keyId;
                // server admin does not need to enter old password to change a user's password
                var oldEncryptedPassword;
                if (oldPassword && oldPassword.length > 0) {
                    oldEncryptedPassword = rsa.encrypt(oldPassword, key);
                }
                var newEncryptedPassword = rsa.encrypt(newPassword, key);
                var changePasswordRequest = new VizPortal.ServerApi.ChangeUserPasswordRequest({
                    userId: userId,
                    oldEncryptedPassword: oldEncryptedPassword,
                    newEncryptedPassword: newEncryptedPassword,
                    keyId: keyId
                });
                return _this.ErrorNotifyingServer.sendRequest(changePasswordRequest);
            });
        };
        UserSettings.$inject = ['ErrorNotifyingServer'];
        // Const
        UserSettings.ResetStartPage = 'unspecified';
        // Note: This is used as sentinel value. It should not be mutated.
        UserSettings.SameUserId = null;
        return UserSettings;
    })();
    VizPortal.UserSettings = UserSettings;
    VizPortal.Module.instance().service('UserSettings', UserSettings);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../../common/react/Dispatcher.ts" />
/// <reference path="../models/IUserInfo.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/types/IResponse.ts" />
/// <reference path="../resources/UserSettings.ts" />
/// <reference path="../services/ConfirmActionDialog.ts" />
/// <reference path="../services/ServerService.ts" />
/// <reference path="../services/StartPageService.ts" />
/// <reference path="../services/ToasterService.ts" />
var VizPortal;
(function (VizPortal) {
    var UserSettingsActions = (function () {
        function UserSettingsActions($translate, toaster, userSettings, confirmActionDialog, startPageService, server) {
            this.$translate = $translate;
            this.toaster = toaster;
            this.userSettings = userSettings;
            this.confirmActionDialog = confirmActionDialog;
            this.startPageService = startPageService;
            this.server = server;
        }
        UserSettingsActions.prototype.updateStartPage = function (userInfo, startPage) {
            var _this = this;
            // TODO: error handling for this action is still handled by callers. Fix that. Then there will be no need to return this promise.
            return this.userSettings.updateUserStartPage(userInfo.id, startPage)
                .then(function (result) {
                if (result && !result.errors) {
                    _this.toaster.pop({ type: VizPortal.ToastType.Info, text: _this.$translate.instant('userStartPageSuccess') });
                    _this.fetchUserSettings(userInfo.username, userInfo.domainName);
                }
                return result;
            });
        };
        UserSettingsActions.prototype.confirmChangeUserStartPage = function () {
            var _this = this;
            this.confirmActionDialog.open({
                title: this.$translate.instant('userStartPageChange'),
                bodyText: this.$translate.instant('userStartPageConfirm'),
                actionName: this.$translate.instant('userStartPageButton'),
                action: function (dialogInstance) {
                    return _this.updateCurrentUsersStartPage(_this.startPageService.getCurrentUrlAsStartPage())
                        .then(function (result) {
                        if (!result || result.errors) {
                            dialogInstance.showErrorMessage(_this.$translate.instant('userStartPageError'));
                        }
                    });
                }
            });
        };
        UserSettingsActions.prototype.confirmChangeDefaultStartPage = function () {
            var _this = this;
            this.confirmActionDialog.open({
                title: this.$translate.instant('defaultStartPageChange'),
                bodyText: this.$translate.instant('defaultStartPageConfirm'),
                actionName: this.$translate.instant('defaultStartPageButton'),
                action: function (dialogInstance) {
                    return _this.server.sendRequest(new VizPortal.ServerApi.UpdateStringServerSettingRequest({
                        setting: 'defaultStartPage',
                        value: _this.startPageService.getCurrentUrlAsStartPage()
                    })).then(function (result) {
                        if (!result || result.errors) {
                            dialogInstance.showErrorMessage(_this.$translate.instant('defaultStartPageError'));
                        }
                        else {
                            _this.server.refreshSessionInfo().then(function () {
                                _this.toaster.pop({ type: VizPortal.ToastType.Info, text: _this.$translate.instant('defaultStartPageSuccess') });
                            });
                        }
                    });
                }
            });
        };
        UserSettingsActions.prototype.updateCurrentUsersStartPage = function (startPage) {
            var _this = this;
            // TODO: error handling for this action is still handled by callers. Fix that. Then there will be no need to return this promise.
            return this.userSettings.updateCurrentUsersStartPage(startPage)
                .then(function (result) {
                if (result && !result.errors) {
                    _this.toaster.pop({ type: VizPortal.ToastType.Info, text: _this.$translate.instant('userStartPageSuccess') });
                    _this.fetchCurrentUsersUserSettings();
                }
                return result;
            });
        };
        UserSettingsActions.prototype.resetStartPage = function (user) {
            var _this = this;
            // TODO: error handling for this action is still handled by callers. Fix that. Then there will be no need to return this promise.
            return this.userSettings.resetUserStartPage(user.id).then(function (result) {
                if (result && !result.errors) {
                    _this.toaster.pop({ type: VizPortal.ToastType.Info, text: _this.$translate.instant('resetStartPageSuccess') });
                    _this.fetchUserSettings(user.username, user.domainName);
                }
                return result;
            });
        };
        UserSettingsActions.prototype.fetchUserSettings = function (username, domain) {
            VizPortalReact.Dispatcher.instance.dispatch({
                actionType: UserSettingsActions.FetchUserSettingsActionType,
                username: username,
                domain: domain
            });
        };
        UserSettingsActions.prototype.fetchCurrentUsersUserSettings = function () {
            VizPortalReact.Dispatcher.instance.dispatch({
                actionType: UserSettingsActions.FetchUserSettingsActionType,
                username: this.server.sessionUsername(),
                domain: this.server.sessionUserDomainName()
            });
        };
        UserSettingsActions.FetchUserSettingsActionType = 'fetch-user-settings';
        UserSettingsActions.$inject = ['$translate', 'ToasterService', 'UserSettings', 'ConfirmActionDialog', 'StartPageService', 'ServerService'];
        return UserSettingsActions;
    })();
    VizPortal.UserSettingsActions = UserSettingsActions;
    VizPortal.Module.instance().service('UserSettingsActions', UserSettingsActions);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../../common/react/Dispatcher.ts" />
/// <reference path="../../common/react/Store.ts" />
/// <reference path="../actions/UserSettingsActions.ts" />
/// <reference path="../models/IUserSettings.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../resources/ServerUsers.ts" />
/// <reference path="../resources/UserSettings.ts" />
/// <reference path="../services/ServerService.ts" />
var VizPortal;
(function (VizPortal) {
    /**
     * Store to interact with user settings. At this time, most part of the application still depend on
     * {@link VizPortal.UserSettings}.
     *
     * NOTE:  The long term goal is that the store should be the only one interacting with that service.
     *        Other components would simply listen for the 'user-settings-change' event and take action accordingly.
     */
    var UserSettingsStore = (function (_super) {
        __extends(UserSettingsStore, _super);
        function UserSettingsStore($q, serverService, serverUsers, userSettings) {
            _super.call(this);
            this.$q = $q;
            this.serverService = serverService;
            this.serverUsers = serverUsers;
            this.userSettings = userSettings;
            VizPortalReact.Dispatcher.instance.register(this.handleAction.bind(this));
        }
        UserSettingsStore.prototype.getUserSettings = function (username, domain) {
            return this.fetchUserSettings(username, domain);
        };
        UserSettingsStore.prototype.fetchUserSettings = function (username, domain) {
            var _this = this;
            return this.serverUsers.getUserSettings(username, domain)
                .then(function (userSettings) {
                _this.maybeRefreshSessionInfo(username, domain);
                _this.broadcast(UserSettingsStore.ChangeEvent, {
                    username: username,
                    domain: domain,
                    userSettings: userSettings
                });
                return userSettings;
            });
        };
        UserSettingsStore.prototype.handleAction = function (action) {
            switch (action.actionType) {
                case VizPortal.UserSettingsActions.FetchUserSettingsActionType:
                    this.fetchUserSettings(action.username, action.domain);
                    break;
            }
        };
        // TODO: this logic should ultimately live in the SessionInfoStore.
        // ServerService itself can't listen for 'user-settings-changed' because that would
        // cause a circular dependency between ServerService and UserSettingsStore.
        UserSettingsStore.prototype.maybeRefreshSessionInfo = function (username, domain) {
            if (username === this.serverService.sessionUsername() && domain === this.serverService.sessionUserDomainName()) {
                this.serverService.refreshSessionInfo();
            }
        };
        UserSettingsStore.ChangeEvent = 'user-settings-changed';
        UserSettingsStore.$inject = [
            '$q',
            'ServerService',
            'ServerUsers',
            'UserSettings'
        ];
        return UserSettingsStore;
    })(VizPortalReact.Store);
    VizPortal.UserSettingsStore = UserSettingsStore;
    VizPortal.Module.instance().service('UserSettingsStore', UserSettingsStore);
    VizPortal.Module.registerEagerService('UserSettingsStore');
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../models/IServerUserInfo.ts" />
/// <reference path="../models/ISiteUserInfo.ts" />
/// <reference path="../models/IUserSettings.ts" />
/// <reference path="../resources/ServerSettings.ts" />
/// <reference path="../ServerApi/types/IEditableServerSettings.ts" />
/// <reference path="../ServerApi/types/ISiteUser.ts" />
/// <reference path="../services/ClearConnectedDevicesAction.ts" />
/// <reference path="../services/ServerService.ts" />
/// <reference path="../services/StartPageService.ts" />
/// <reference path="../stores/UserSettingsStore.ts" />
var VizPortal;
(function (VizPortal) {
    var UserSettingsCtrlCommon = (function () {
        function UserSettingsCtrlCommon($q, $state, $translate, clearConnectedDevicesAction, serverService, startPageService, serverSettings, userSettingsStore) {
            this.$q = $q;
            this.$state = $state;
            this.$translate = $translate;
            this.clearConnectedDevicesAction = clearConnectedDevicesAction;
            this.serverService = serverService;
            this.startPageService = startPageService;
            this.serverSettings = serverSettings;
            this.userSettingsStore = userSettingsStore;
        }
        UserSettingsCtrlCommon.prototype.initScope = function (scope, isViewerSelf, serverUser, siteUser, userSettings, userRefreshTokenCount) {
            var _this = this;
            this.scope = scope;
            // setup change listener for user settings
            this.setupUserSettingsChangeListener();
            scope.isDomainFamilyAD = this.serverService.isServerDomainFamilyActiveDirectory();
            scope.isDomainFamilyExternal = this.serverService.isServerDomainFamilyExternal();
            scope.isDomainFamilyLocal = this.serverService.isServerDomainFamilyLocal();
            scope.isViewerSelf = isViewerSelf;
            scope.isViewerServerAdmin = this.serverService.isSessionServerAdmin();
            scope.changePasswordUrl = this.serverService.changePasswordUrl(); // might be undefined
            scope.updateDisplayNameAllowed = this.serverService.updateDisplayNameAllowed();
            scope.controls = {
                editDisplayNameControls: null,
                editEmailControls: null
            };
            scope.userSettings = userSettings;
            scope.serverUser = serverUser;
            // section: username, display name, email
            scope.disableNameAndEmailSaveButton = function () {
                var displayCtrl = scope.controls.editDisplayNameControls;
                var emailCtrl = scope.controls.editEmailControls;
                // if neither exists, disable
                if (!displayCtrl && !emailCtrl) {
                    return true;
                }
                // if any controls is busy, disable
                if (displayCtrl && displayCtrl.isBusy()) {
                    return true;
                }
                if (emailCtrl && emailCtrl.isBusy()) {
                    return true;
                }
                // if no control is dirty, disable
                if (!emailCtrl && displayCtrl && !displayCtrl.isDirty()) {
                    return true;
                }
                if (!displayCtrl && emailCtrl && !emailCtrl.isDirty()) {
                    return true;
                }
                if (displayCtrl && !displayCtrl.isDirty() && emailCtrl && !emailCtrl.isDirty()) {
                    return true;
                }
                // if any control is dirty but invalid, disable
                if (displayCtrl && displayCtrl.isDirty() && !displayCtrl.isValid()) {
                    return true;
                }
                if (emailCtrl && emailCtrl.isDirty() && !emailCtrl.isValid()) {
                    return true;
                }
                // no reason to disable the button
                return false;
            };
            scope.saveChangesToEmailAndDisplayName = function () {
                var displayCtrl = scope.controls.editDisplayNameControls;
                var emailCtrl = scope.controls.editEmailControls;
                // When the site user auth setting is SAML, the username is the email address
                var userNameIsSameAsEmail = !!siteUser && siteUser.authSetting === VizPortal.ServerApi.SiteUserAuthSetting.Saml;
                var displayPromise = _this.$q.when({});
                if (displayCtrl && displayCtrl.isDirty()) {
                    displayPromise = displayCtrl.submit(serverUser.id, serverUser.username);
                }
                var emailPromise = _this.$q.when({});
                if (emailCtrl && emailCtrl.isDirty()) {
                    emailPromise = emailCtrl.submit(serverUser.id, serverUser.username);
                    // If username is tied to email address, update the username in the application state to allow proper page
                    // refresh/reload
                    if (userNameIsSameAsEmail) {
                        emailPromise = emailPromise.then(function (result) {
                            _this.$state.params['username'] = result;
                        });
                    }
                }
                // reload state once display name and email update requests are done
                _this.$q.all([displayPromise, emailPromise]).then(function () { return _this.$state.hardReload(); });
            };
            // TODO: most of this logic should be encapsulated elsewhere, like in the StartPageService
            scope.updateUserStartPage = function (startPage) {
                // Show server default start page if not set by user
                if (!startPage) {
                    if (scope.isViewerServerAdmin) {
                        _this.serverSettings.fetch().then(function (serverSettings) {
                            var serverDefaultStartPage = serverSettings.defaultStartPage || '/';
                            scope.updateUserStartPage(serverDefaultStartPage);
                        });
                        return;
                    }
                    else {
                        // Start page from sessionInfo
                        startPage = _this.serverService.getStartPage();
                    }
                }
                var currentSiteUrlName = _this.serverService.sessionSiteUrlName();
                scope.startPageText = startPage;
                scope.startPageHref = _this.startPageService.getStartPageForSite(startPage, currentSiteUrlName);
            };
            scope.updateUserStartPage(scope.userSettings.startPage);
            // Connected Devices
            scope.clearConnectedDevices = function () {
                return _this.clearConnectedDevicesAction.showConfirmationDialog(serverUser.id, userRefreshTokenCount);
            };
        };
        UserSettingsCtrlCommon.prototype.updateUserSettingsOnScope = function (userSettings) {
            this.scope.userSettings = userSettings;
            this.scope.updateUserStartPage(userSettings.startPage);
        };
        UserSettingsCtrlCommon.prototype.isSameUser = function (userSettingsChange) {
            var username = userSettingsChange.username;
            var domain = userSettingsChange.domain;
            return this.scope.serverUser.username === username
                && this.scope.serverUser.domainName === domain;
        };
        UserSettingsCtrlCommon.prototype.setupUserSettingsChangeListener = function () {
            var _this = this;
            var onUserSettingsChanged = function (changeEvent, userSettingsChange) {
                if (changeEvent === VizPortal.UserSettingsStore.ChangeEvent && _this.isSameUser(userSettingsChange)) {
                    _this.updateUserSettingsOnScope(userSettingsChange.userSettings);
                }
            };
            this.userSettingsStore.addChangeListener(onUserSettingsChanged);
            this.scope.$on('$destroy', function () {
                _this.userSettingsStore.removeChangeListener(onUserSettingsChanged);
            });
        };
        UserSettingsCtrlCommon.$inject = [
            '$q',
            '$state',
            '$translate',
            'ClearConnectedDevicesAction',
            'ServerService',
            'StartPageService',
            'ServerSettings',
            'UserSettingsStore'];
        return UserSettingsCtrlCommon;
    })();
    VizPortal.UserSettingsCtrlCommon = UserSettingsCtrlCommon;
    VizPortal.Module.instance().service('UserSettingsCtrlCommon', UserSettingsCtrlCommon);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../models/IServerUserInfo.ts" />
/// <reference path="../models/ISiteUserInfo.ts" />
/// <reference path="../models/IUserSettings.ts" />
/// <reference path="../services/BrowserTitleService.ts" />
/// <reference path="../services/UserSettingsCtrlCommon.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerUserSettingsSubplaceCtrl = (function () {
        function ServerUserSettingsSubplaceCtrl($scope, BrowserTitleService, userSettingsCtrlCommon, isSessionUserSelf, userSettings, userRefreshTokenCount, serverUser) {
            this.$scope = $scope;
            this.userSettingsCtrlCommon = userSettingsCtrlCommon;
            BrowserTitleService.setTitle('serverSettings', serverUser.displayName);
            userSettingsCtrlCommon.initScope($scope, isSessionUserSelf, serverUser, null, userSettings, userRefreshTokenCount);
        }
        ServerUserSettingsSubplaceCtrl.$inject = [
            '$scope',
            'BrowserTitleService',
            'UserSettingsCtrlCommon',
            // resolved in state router
            'isSessionUserSelf',
            'userSettings',
            'userRefreshTokenCount',
            'serverUser'
        ];
        return ServerUserSettingsSubplaceCtrl;
    })();
    VizPortal.ServerUserSettingsSubplaceCtrl = ServerUserSettingsSubplaceCtrl;
    VizPortal.Module.instance().controller('ServerUserSettingsSubplaceCtrl', ServerUserSettingsSubplaceCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../services/BrowserTitleService.ts" />
var VizPortal;
(function (VizPortal) {
    function setBrowserTitleCtrl(place) {
        return [
            '$scope',
            'BrowserTitleService',
            function ($scope, BrowserTitleService) {
                BrowserTitleService.setTitle(place, $scope.objectName);
            }
        ];
    }
    VizPortal.setBrowserTitleCtrl = setBrowserTitleCtrl;
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/ServerService.ts" />
/// <reference path="../services/ExternalAuthService.ts" />
var VizPortal;
(function (VizPortal) {
    var SignedOutCtrl = (function () {
        function SignedOutCtrl($scope, $state, externalAuthService, server) {
            $scope.tryAgainLink = server.isAuthenticationExternal() ? externalAuthService.getLoginUrl() : $state.href('login.authenticate');
        }
        SignedOutCtrl.$inject = [
            '$scope',
            '$state',
            'ExternalAuthService',
            'ServerService'
        ];
        return SignedOutCtrl;
    })();
    VizPortal.SignedOutCtrl = SignedOutCtrl;
    VizPortal.Module.instance().controller('SignedOutCtrl', SignedOutCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var LinkTargetAttributes = (function () {
        function LinkTargetAttributes() {
        }
        LinkTargetAttributes.Blank = '_blank';
        LinkTargetAttributes.Self = '_self';
        LinkTargetAttributes.Parent = '_parent';
        LinkTargetAttributes.Top = '_top';
        return LinkTargetAttributes;
    })();
    VizPortal.LinkTargetAttributes = LinkTargetAttributes;
    // Linkify a loc string. Use ng-bind-html. Samples:
    //
    // Jade where linkifyMe is an ILocLinkifierModel on the scope.
    // span(ng-bind-html="linkifyMe | locLinkifier")
    //
    // Input without any links.
    //{
    //  localizedStatement: 'Literal string without any links.',
    //}
    //
    // Linkify an entire statement. Localized statement and link key for the one link is undefined.
    //{
    //  links: [{
    //    localizedValueKey: 'linkLocKey',
    //    url: 'http://www.abc.com'
    //  }]
    //}
    //
    // Input with two links.
    //{
    //  localizedStatementKey: 'locKeyForStringWithTwoLinks'
    //  links: [
    //    {
    //      key: '{LINK_A_TOKEN}',
    //      localizedValueKey: 'linkALocKey',
    //      url: 'http://www.a.com'
    //    },{
    //      key: '{LINK_B_TOKEN}',
    //      localizedValue: 'Link b literal string.',
    //      url: 'http://www.b.com'
    //    }
    //  ]
    //}
    VizPortal.Module.instance().filter('locLinkifier', [
        '$translate',
        function ($translate) {
            return function (model) {
                var buildInterpolationValuesFn = function (links) {
                    var result = {};
                    for (var i = 0; i < links.length; i++) {
                        // remove the wrapping braces
                        var key = links[i].key;
                        var prop = key.substring(1, key.length - 1);
                        result[prop] = links[i].key;
                    }
                    return result;
                };
                var linkifyFn = function (value, url, target) {
                    target = target || LinkTargetAttributes.Blank;
                    return '<a href="' + url + '" target="' + target + '">' + value + '</a>';
                };
                // If localized statement is empty/null the entire value is linkified. Assumes there is one link available.
                if (!model.localizedStatement && !model.localizedStatementKey) {
                    var link = model.links[0];
                    var value = link.localizedValue || $translate.instant(link.localizedValueKey);
                    return linkifyFn(value, link.url, link.target);
                }
                // Otherwise, replace all link keys with linkified values.
                var result = '';
                if (!model.links) {
                    result = model.localizedStatement || $translate.instant(model.localizedStatementKey);
                }
                else {
                    result = model.localizedStatement || $translate.instant(model.localizedStatementKey, buildInterpolationValuesFn(model.links));
                    for (var i = 0; i < model.links.length; i++) {
                        var link = model.links[i];
                        var value = link.localizedValue || $translate.instant(link.localizedValueKey);
                        result = result.replace(link.key, linkifyFn(value, link.url, link.target));
                    }
                }
                return result;
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.CookieKeys = {
        XsrfToken: 'XSRF-TOKEN'
    };
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="resourceParts.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/ISiteSAMLConfiguration.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetSiteSAMLConfigurationRequest = (function (_super) {
            __extends(GetSiteSAMLConfigurationRequest, _super);
            function GetSiteSAMLConfigurationRequest() {
                _super.call(this, 'getSiteSAMLConfiguration', null);
            }
            return GetSiteSAMLConfigurationRequest;
        })(ServerApi.Request);
        ServerApi.GetSiteSAMLConfigurationRequest = GetSiteSAMLConfigurationRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/ISiteSAMLConfiguration.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var SetSiteSAMLEnabledRequest = (function (_super) {
            __extends(SetSiteSAMLEnabledRequest, _super);
            function SetSiteSAMLEnabledRequest(params) {
                _super.call(this, 'setSiteSAMLEnabled', params);
            }
            return SetSiteSAMLEnabledRequest;
        })(ServerApi.Request);
        ServerApi.SetSiteSAMLEnabledRequest = SetSiteSAMLEnabledRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/ISiteSAMLConfiguration.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var RemoveIdentityProviderRequest = (function (_super) {
            __extends(RemoveIdentityProviderRequest, _super);
            function RemoveIdentityProviderRequest() {
                _super.call(this, 'removeIdentityProvider', {});
            }
            return RemoveIdentityProviderRequest;
        })(ServerApi.Request);
        ServerApi.RemoveIdentityProviderRequest = RemoveIdentityProviderRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/ISiteSAMLConfiguration.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var SetSiteAttributeMappingRequest = (function (_super) {
            __extends(SetSiteAttributeMappingRequest, _super);
            function SetSiteAttributeMappingRequest(mapping) {
                _super.call(this, 'setSiteAttributeMapping', mapping);
            }
            return SetSiteAttributeMappingRequest;
        })(ServerApi.Request);
        ServerApi.SetSiteAttributeMappingRequest = SetSiteAttributeMappingRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var UpdateSiteSettingsForSiteAdminRequest = (function (_super) {
            __extends(UpdateSiteSettingsForSiteAdminRequest, _super);
            function UpdateSiteSettingsForSiteAdminRequest(params) {
                _super.call(this, 'updateSiteSettingsForSiteAdmin', params);
            }
            return UpdateSiteSettingsForSiteAdminRequest;
        })(ServerApi.Request);
        ServerApi.UpdateSiteSettingsForSiteAdminRequest = UpdateSiteSettingsForSiteAdminRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../filters/LocLinkifierFilter.ts" />
/// <reference path="../helpers/ActionContext.ts" />
/// <reference path="../helpers/ErrorCodes.ts" />
/// <reference path="../models/IVizPortalCookies.ts" />
/// <reference path="../ServerApi/requests/GetSiteSAMLConfigurationRequest.ts" />
/// <reference path="../ServerApi/requests/SetSiteSAMLEnabledRequest.ts" />
/// <reference path="../ServerApi/requests/RemoveIdentityProviderRequest.ts" />
/// <reference path="../ServerApi/requests/SetSiteAttributeMapping.ts" />
/// <reference path="../ServerApi/requests/UpdateSiteSettingsForSiteAdminRequest.ts" />
/// <reference path="../services/AddUsersOptionsAction.ts" />
/// <reference path="../services/WindowLocationService.ts" />
var VizPortal;
(function (VizPortal) {
    var SiteAuthenticationCtrl = (function () {
        function SiteAuthenticationCtrl($scope, $translate, $cookies, windowLocation, server, configuration, siteSettingsForSiteAdmin, toaster, addUsersOptionsAction, restApiPrefix) {
            $scope.siteSettingsForSiteAdmin = siteSettingsForSiteAdmin;
            $scope.$watch('siteSettingsForSiteAdmin.siteAdminSettings.refreshTokenEnabled', function (newVal, oldVal) {
                if (newVal !== oldVal) {
                    server.sendRequest(new VizPortal.ServerApi.UpdateSiteSettingsForSiteAdminRequest($scope.siteSettingsForSiteAdmin));
                }
            });
            // TODO: if server.thirdPartyAuthState.isAllowed === false, don't show anything.
            $scope.configuration = configuration;
            $scope.$watch('configuration.enabled', function (newVal, oldVal) {
                if (newVal !== oldVal) {
                    $scope.setEnabled(newVal);
                }
            });
            $scope.isEnabled = function () {
                return $scope.configuration.enabled;
            };
            $scope.isIdentityProviderConfigured = function () {
                return ($scope.isEnabled()
                    && !!$scope.configuration.identityProviderEntityId);
            };
            $scope.download = function (evt, url) {
                evt.preventDefault();
                windowLocation.download(url);
            };
            $scope.downloadLogUrl = function () { return restApiPrefix + configuration.downloadLogEndpoint; };
            $scope.openAddExternalUsersDialog = function ($event) {
                addUsersOptionsAction.showAddSiteUsersOptionsDialog(VizPortal.ActionContext.fromEvent($event));
            };
            $scope.testLogin = function () {
                if (!$scope.isIdentityProviderConfigured()) {
                    return;
                }
                windowLocation.open(configuration.testLoginUrl, 'testLogin', 'left=20,top=20,width=500,height=600,toolbar=1,resizable=1');
            };
            $scope.entityIdFormUrl = function () {
                if (server.sessionSiteUrlName() === '') {
                    return '/admin/site_saml';
                }
                return '/t/' + server.sessionSiteUrlName() + '/admin/site_saml';
            };
            $scope.returnUrl = function () {
                return windowLocation.getPathQueryFragment();
            };
            $scope.setEnabled = function (enable) {
                server.sendRequest(new VizPortal.ServerApi.SetSiteSAMLEnabledRequest({ enable: enable })).then(function (result) {
                    $scope.configuration = result;
                    server.refreshSessionInfo();
                    toaster.pop({ type: VizPortal.ToastType.Info, text: $translate.instant(enable ? 'siteAuthenticationSAMLEnabled' : 'siteAuthenticationSAMLDisabled') });
                });
            };
            $scope.removeIdentityProvider = function () {
                server.sendRequest(new VizPortal.ServerApi.RemoveIdentityProviderRequest()).then(function (result) {
                    $scope.configuration = result;
                    server.refreshSessionInfo();
                });
            };
            $scope.setSiteAttributeMapping = function () {
                server.sendRequest(new VizPortal.ServerApi.SetSiteAttributeMappingRequest($scope.configuration.siteSAMLAttributeMapping)).then(function () {
                    toaster.pop({ type: VizPortal.ToastType.Info, text: $translate.instant('siteAuthenticationAttributesSaved') });
                });
            };
            $scope.endpoint = restApiPrefix + "updateIdentityProvider";
            $scope.handleFormSubmitResult = function (result) {
                //if result is a number, it represents an error code
                if (typeof (result) == 'number') {
                    switch (result) {
                        case VizPortal.CommonErrorCode.InsecureSAMLEndpoint:
                            toaster.pop({ type: VizPortal.ToastType.Error, text: $translate.instant('siteAuthenticationIdPImportFailureInsecureEndpoint') });
                            break;
                        default:
                            toaster.pop({ type: VizPortal.ToastType.Error, text: $translate.instant('unexpectedError') });
                    }
                }
                else {
                    $scope.configuration = result;
                    toaster.pop({ type: VizPortal.ToastType.Info, text: $translate.instant('siteAuthenticationIdPImportSuccess') });
                }
                server.refreshSessionInfo();
            };
            $scope.xsrfToken = $cookies[VizPortal.CookieKeys.XsrfToken];
            $scope.allowed = server.isThirdPartyAuthAllowed();
            var customerSupportLink = "mailto:customerservice@tableau.com?Subject=Tableau%20Online%20Single%20Sign-on%20request&Body=Site%20Name%3A%20" + server.sessionSiteName() + "%0ASite%20Admin%20email%3A%20" + server.sessionUsername() + "%0AIdentity%20Provider%3A%20%28e.g.%20Ping%2C%20Okta%2C%20OneLogin%2C%20Shibboleth%2C%20Salesforce%2C%20other%3F%29";
            $scope.contactCustomerSupport = function () {
                return {
                    localizedStatementKey: 'siteAuthenticationFunctionalityInfo',
                    links: [{
                            key: '{CUSTOMER_SUPPORT_MAILTO_LINK}',
                            localizedValueKey: 'tableauSupport',
                            url: customerSupportLink
                        }]
                };
            };
        }
        SiteAuthenticationCtrl.$inject = [
            '$scope',
            '$translate',
            '$cookies',
            'WindowLocationService',
            'ServerService',
            'configuration',
            'siteSettingsForSiteAdmin',
            'ToasterService',
            'AddUsersOptionsAction',
            'RestApiPrefix'
        ];
        return SiteAuthenticationCtrl;
    })();
    VizPortal.SiteAuthenticationCtrl = SiteAuthenticationCtrl;
    VizPortal.Module.instance().controller('SiteAuthenticationCtrl', SiteAuthenticationCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../controllers/ContentPlaceCtrl.ts" />
/// <reference path="../helpers/SubplaceCountsHelper.ts" />
/// <reference path="../models/IPlace.ts" />
/// <reference path="../services/CreateSiteAction.ts" />
var VizPortal;
(function (VizPortal) {
    var SitesPlaceCtrl = (function () {
        function SitesPlaceCtrl($location, $scope, $state, CreateSiteAction, place) {
            VizPortal.SubplaceCountsHelper.keepSubplaceCountsUpdated($scope, place);
            $scope.placeTitleClicked = function () {
                $scope.$broadcast(VizPortal.SubplaceEvents.Refresh);
            };
        }
        SitesPlaceCtrl.$inject = [
            '$location',
            '$scope',
            '$state',
            'CreateSiteAction',
            'place'
        ];
        return SitesPlaceCtrl;
    })();
    VizPortal.SitesPlaceCtrl = SitesPlaceCtrl;
    VizPortal.Module.instance().controller('SitesPlaceCtrl', SitesPlaceCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../controllers/ContentPlaceCtrl.ts" />
/// <reference path="../helpers/ActionButtonsHelper.ts" />
/// <reference path="../helpers/SiteRoleFilterHelper.ts" />
/// <reference path="../models/ContentTypes.ts" />
/// <reference path="../models/ISliceable.ts" />
/// <reference path="../models/ITabsBannerModel.ts" />
/// <reference path="../models/ITemplate.ts" />
/// <reference path="../models/Set.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../resources/SiteUsers.ts" />
/// <reference path="../ServerApi/types/ISiteUser.ts" />
/// <reference path="../services/AddUsersOptionsAction.ts" />
/// <reference path="../services/BrowserTitleService.ts" />
/// <reference path="../services/QueryService.ts" />
/// <reference path="../services/SelectionService.ts" />
/// <reference path="../services/SiteUsersActions.ts" />
/// <reference path="../services/SorterFactory.ts" />
/// <reference path="../../common/react/components/dataGrid/DataGridCells.ts" />
/// <reference path="../../common/react/components/dataGrid/DataGrid.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../../ts/FeatureFlags.ts" />
var VizPortal;
(function (VizPortal) {
    var SiteUsersPlaceCtrl = (function () {
        function SiteUsersPlaceCtrl($scope, $translate, AngularToReactDataGridBridge, addUsersOptionsAction, BrowserTitleService, queryService, selectionService, serverService, canSessionUserManageUsers, users, siteUsersActions, sorterFactory, angularContextFactory, filterPanelService) {
            this.$scope = $scope;
            this.$translate = $translate;
            this.AngularToReactDataGridBridge = AngularToReactDataGridBridge;
            this.queryService = queryService;
            this.serverService = serverService;
            this.users = users;
            this.angularContextFactory = angularContextFactory;
            $scope.multisite = serverService.isSessionMultiSite();
            $scope.reactDataGridInSiteUsersPlace = VizPortal.FeatureFlags.reactDataGridInSiteUsersPlace;
            BrowserTitleService.setTitle($scope.multisite ? 'siteUsers' : 'users');
            $scope.model = { itemsCount: 0 };
            $scope.server = serverService;
            $scope.sorter = sorterFactory.create(VizPortal.SiteUserContentType.defaultOrder);
            $scope.selectedItems = new VizPortal.Set(function (user) { return user.id; });
            if (VizPortal.FeatureFlags.reactDataGridInSiteUsersPlace) {
                this.configureForReactDataGrid();
            }
            $scope.availableAction = function (action) {
                return action.isAvailable($scope.selectedItems);
            };
            VizPortal.ActionButtonsHelper.setupActionButtons($scope, siteUsersActions.getSiteUsersActionsButtons());
            $scope.listActions = [{
                    name: 'add-users',
                    translate: 'addUsers',
                    isAvailable: function () { return canSessionUserManageUsers; },
                    execute: function ($event) {
                        addUsersOptionsAction.showAddSiteUsersOptionsDialog(VizPortal.ActionContext.fromEvent($event));
                    }
                }];
            $scope.availableListAction = function (listAction) { return listAction.isAvailable(); };
            $scope.rowClicked = function (row, colIndex) {
                selectionService.rowClicked($scope.selectedItems, row, colIndex);
            };
            $scope.filterControls = {};
            $scope.filterDefinitions = filterPanelService.getFilterDefinitions(['siteRole']);
            this.siteRoleFilterDefinition = $scope.filterDefinitions[0];
            var queryUpdater = this.createQueryUpdater();
            $scope.sliceChanged = function (newSlice) {
                $scope.selectedItems.updateItems(newSlice.items);
                $scope.model.itemsCount = newSlice.total;
            };
            $scope.refreshItems = function () {
                queryUpdater.refresh();
            };
            $scope.refreshItems();
            $scope.placeTitleClicked = function () {
                $scope.refreshItems();
            };
            $scope.$on(VizPortal.UserAddedEvent, function () {
                $scope.refreshItems();
            });
            $scope.$on(VizPortal.SiteRolesEvent.SiteRolesChanged, function () {
                $scope.refreshItems();
            });
            $scope.$on(VizPortal.SyncGroupEvent.groupSynced, function () {
                $scope.refreshItems();
            });
            $scope.headerClicked = function (header) { return $scope.sorter.setPrimary(header.attrs['key'], header.attrs['direction']); };
            $scope.thirdPartyAuthEditable = serverService.isThirdPartyAuthEditable();
            $scope.emptyTemplateModel = { title: 'usersEmptyMessage' };
        }
        SiteUsersPlaceCtrl.prototype.updateSiteRoleCounts = function (baseQuery) {
            var _this = this;
            this.users.getUserCountsBySiteRole(baseQuery).then(function (userCountsByRole) {
                _this.siteRoleFilterDefinition.options =
                    VizPortal.SiteRoleFilterHelper.siteRoleOptions(VizPortal.SiteRoles.WithoutGuest, userCountsByRole);
            });
        };
        SiteUsersPlaceCtrl.prototype.configureForReactDataGrid = function () {
            var _this = this;
            this.$scope.dataGridProps = {
                translate: this.$translate.instant,
                cols: this.dataGridColumns(this.$scope),
                data: null,
                emptyChild: React.DOM.div({
                    className: 'tb-data-grid-empty'
                }, React.DOM.div({ className: 'tb-data-grid-empty-title' }, this.$translate.instant('usersEmptyMessage'))),
                update: 0,
                onHeaderClicked: function (columnKey, direction) {
                    _this.$scope.$apply(function () {
                        _this.$scope.sorter.setPrimary(columnKey, direction);
                    });
                },
                onCellClick: function (item, columnKey) {
                    _this.$scope.$apply(function () {
                        if (VizPortal.FeatureFlags.toggleSelectableRow) {
                            var onlySelectedRow = _this.$scope.selectedItems.size() === 1 && _this.$scope.selectedItems.contains(item);
                            var isActionMenu = columnKey === 'actions';
                            if (onlySelectedRow && !isActionMenu) {
                                _this.$scope.selectedItems.toggle(item);
                            }
                            else {
                                _this.$scope.selectedItems.clear();
                                _this.$scope.selectedItems.add(item);
                            }
                        }
                        else {
                            _this.$scope.selectedItems.clear();
                            _this.$scope.selectedItems.add(item);
                        }
                        var keys = _this.$scope.selectedItems.keys();
                        _this.$scope.dataGridProps.selectedKeys = _.object(keys, keys);
                        _this.$scope.dataGridProps.update++;
                    });
                }
            };
            this.$scope.$watch(function () { return _this.$scope.sorter.selectedColumnKey() + ';' + _this.$scope.sorter.isSortAscending(); }, function () {
                _this.$scope.dataGridProps.sortKey = _this.$scope.sorter.selectedColumnKey();
                _this.$scope.dataGridProps.sortAscending = _this.$scope.sorter.isSortAscending();
                _this.$scope.dataGridProps.update++;
            });
            // TODO: find a better way to monitor changes in selected items
            this.$scope.$watch(function () { return _this.$scope.selectedItems.size(); }, function () {
                var keys = _this.$scope.selectedItems.keys();
                _this.$scope.dataGridProps.selectedKeys = _.object(keys, keys);
                _this.$scope.dataGridProps.update++;
            });
        };
        SiteUsersPlaceCtrl.prototype.createQueryUpdater = function () {
            var _this = this;
            if (VizPortal.FeatureFlags.reactDataGridInSiteUsersPlace) {
                return this.queryService.createQueryUpdater(this.$scope, VizPortal.SiteUserContentType, this.users, function (resourceQuery) {
                    _this.AngularToReactDataGridBridge.updateReactDataGridRowStore({ scope: _this.$scope, sliceable: resourceQuery });
                    _this.$scope.sliceable = resourceQuery;
                    _this.$scope.sorter.setOrder(resourceQuery.getOrder());
                    resourceQuery.getCount().then(function (result) {
                        _this.$scope.model.itemsCount = result;
                    });
                }, {});
            }
            else {
                return this.queryService.createQueryUpdater(this.$scope, VizPortal.SiteUserContentType, this.users, function (resourceQuery) {
                    _this.$scope.sliceable = resourceQuery;
                    _this.$scope.sorter.setOrder(resourceQuery.getOrder());
                    _this.updateSiteRoleCounts(resourceQuery);
                    resourceQuery.getCount().then(function (result) {
                        _this.$scope.model.itemsCount = result;
                    });
                }, {});
            }
        };
        SiteUsersPlaceCtrl.prototype.dataGridColumns = function ($scope) {
            var translate = this.$translate.instant;
            var SiteRoleCell = React.createFactory(React.createClass({
                render: function () {
                    return React.DOM.span({}, translate('siteRole_' + this.props.value));
                }
            }));
            var LastSignInCell = React.createFactory(React.createClass({
                render: function () {
                    var props = this.props;
                    var lastSignIn = props.row.data.lastSignIn;
                    return React.DOM.span({}, VizPortal.L10n.localizedDateTime(lastSignIn));
                }
            }));
            var angularContext = this.angularContextFactory.create($scope);
            var columns = [
                VizPortalReact.CommonDataGridColumns.selected($scope),
                {
                    name: 'display-name-col',
                    dataKey: 'displayName',
                    text: this.$translate.instant('column_fullName'),
                    direction: 'asc',
                    cellFormatter: VizPortalReact.DataGridCells.UserDisplayNameCell()
                },
                {
                    name: 'actions-col',
                    dataKey: 'actions',
                    text: '',
                    cellFormatter: VizPortalReact.DataGridCells.AngularActionsCell(angularContext),
                    resizable: false,
                    sortable: false,
                    cellStyle: {
                        padding: 0
                    }
                },
                {
                    name: 'username-col',
                    dataKey: 'username',
                    text: this.$translate.instant('column_username'),
                    direction: 'asc'
                },
                {
                    name: 'site-role-col',
                    dataKey: 'siteRole',
                    text: this.$translate.instant('column_site_role'),
                    direction: 'asc',
                    cellFormatter: SiteRoleCell
                },
                {
                    name: 'group-count-col',
                    dataKey: 'groupCount',
                    text: this.$translate.instant('column_groupCount'),
                    direction: 'asc',
                    headerStyle: { textAlign: 'right' },
                    cellStyle: { textAlign: 'right' }
                }
            ];
            if (this.serverService.isServerDomainFamilyActiveDirectory()) {
                columns.push({
                    name: 'domain-name-col',
                    dataKey: 'domainName',
                    direction: 'asc',
                    text: this.$translate.instant('column_domainName')
                });
            }
            if ($scope.thirdPartyAuthEditable) {
                columns.push({
                    name: 'authentication-col',
                    dataKey: 'authentication',
                    direction: 'asc',
                    text: this.$translate.instant('column_authentication')
                });
            }
            columns.push({
                name: 'last-sign-in-col',
                dataKey: 'lastSignIn',
                text: this.$translate.instant('column_last_sign_in'),
                direction: 'desc',
                cellFormatter: LastSignInCell
            });
            return columns;
        };
        SiteUsersPlaceCtrl.$inject = [
            '$scope',
            '$translate',
            'AngularToReactDataGridBridge',
            'AddUsersOptionsAction',
            'BrowserTitleService',
            'QueryService',
            'SelectionService',
            'ServerService',
            'canSessionUserManageUsers',
            'SiteUsers',
            'SiteUsersActions',
            'SorterFactory',
            'AngularContextFactory',
            'FilterPanelService'
        ];
        return SiteUsersPlaceCtrl;
    })();
    VizPortal.SiteUsersPlaceCtrl = SiteUsersPlaceCtrl;
    VizPortal.Module.instance().controller('SiteUsersPlaceCtrl', SiteUsersPlaceCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../common/react/CommonDataGridColumns.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var SubscriptionGrid;
    (function (SubscriptionGrid) {
        function columns(translate, scope, actions, isServerPage, serverUrls, siteUrls, scheduleFrequencyDescriptionFilter, showUserNameColumn, showHasSubscriptionColumn, showWorkbookViewColumn, showScheduleColumn, showSiteColumn) {
            var columns = [
                VizPortalReact.CommonDataGridColumns.selected(scope)
            ];
            if (showUserNameColumn) {
                columns.push({
                    name: 'user-col',
                    dataKey: 'userName',
                    text: translate('column_task_user'),
                    cellFormatter: VizPortalReact.DataGridCells.Link(function (row) {
                        var subscription = row.data;
                        return {
                            text: subscription.user.displayName,
                            url: siteUrls.forSiteUrlName(subscription.site.urlName).userContentUrl(subscription.user),
                            iconClassName: 'tb-grid-icon-user',
                            iconTitle: translate('user')
                        };
                    })
                });
            }
            if (showHasSubscriptionColumn) {
                columns.push({
                    name: 'subscription-col',
                    dataKey: 'targetName',
                    text: translate('column_task_subscription'),
                    direction: 'asc',
                    cellFormatter: targetLinkFormatter(siteUrls, translate)
                });
            }
            if (showWorkbookViewColumn) {
                columns.push({
                    name: 'workbook-view-col',
                    dataKey: 'targetName',
                    text: translate('column_task_workbook_view'),
                    direction: 'asc',
                    cellFormatter: targetLinkFormatter(siteUrls, translate)
                });
            }
            columns.push({
                name: 'subject-col',
                dataKey: 'subject',
                text: translate('column_task_subject'),
                direction: 'asc'
            });
            if (showScheduleColumn) {
                columns.push({
                    name: 'schedule-name-col',
                    dataKey: 'scheduleName',
                    direction: 'asc',
                    text: translate('column_task_schedule'),
                    cellFormatter: VizPortalReact.DataGridCells.ScheduleDescriptionCell(function (row) {
                        var subscription = row.data;
                        // This cast to ISchedule shouldn't be necessary, but for some reason
                        // subscription.schedule is of type INamedItemInfo.
                        // TODO: figure out why this is the case and refactor the types accordingly.
                        var schedule = subscription.schedule;
                        return isServerPage
                            ? serverUrls.schedule(schedule.id, schedule.scheduledAction)
                            : siteUrls.forSiteUrlName(subscription.site.urlName).schedule(schedule.id, schedule.scheduledAction);
                    }, scheduleFrequencyDescriptionFilter)
                });
            }
            if (showSiteColumn) {
                columns.push({
                    name: 'site-name-col',
                    dataKey: 'siteName',
                    direction: 'asc',
                    text: translate('column_task_site'),
                    cellFormatter: VizPortalReact.DataGridCells.PlainTextCellWithTransform('site', function (site) { return site.name; })
                });
            }
            columns.push({
                name: 'last-sent-at-col',
                dataKey: 'lastSentAt',
                text: translate('column_task_last_update'),
                direction: 'desc',
                cellFormatter: VizPortalReact.DataGridCells.DateTimeCell('lastSentAt', translate('never'))
            });
            columns.push({
                name: 'next-run-at-col',
                dataKey: 'runNextAt',
                text: translate('column_task_next_update'),
                direction: 'asc',
                cellFormatter: VizPortalReact.DataGridCells.DateTimeCell('runNextAt', translate('disabled'))
            });
            // Add the actions menu to whichever column was first (not including the 'selected' column)
            columns[1] = VizPortalReact.CommonDataGridColumns.withActions(columns[1], {
                actions: actions,
                getActionTarget: function () {
                    return {
                        items: scope.selectedItems,
                        actionContext: { scope: scope }
                    };
                },
                translate: translate
            });
            return columns;
        }
        SubscriptionGrid.columns = columns;
        function targetLinkFormatter(siteUrls, translate) {
            return VizPortalReact.DataGridCells.Link(function (row) {
                var subscription = row.data;
                var siteUrlsForRow = siteUrls.forSiteUrlName(subscription.site.urlName);
                if (subscription.targetType === VizPortal.SubscriptionTargetTypes.view) {
                    return {
                        text: subscription.targetName,
                        url: siteUrlsForRow.viewUrl(subscription.targetPath),
                        iconClassName: 'tb-grid-icon-view',
                        iconTitle: translate('view')
                    };
                }
                else {
                    return {
                        text: subscription.targetName,
                        url: siteUrlsForRow.workbookUrl(subscription.targetId),
                        iconClassName: 'tb-grid-icon-workbook',
                        iconTitle: translate('workbook')
                    };
                }
            });
        }
    })(SubscriptionGrid = VizPortalReact.SubscriptionGrid || (VizPortalReact.SubscriptionGrid = {}));
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var DeleteSubscriptionsAction = (function () {
        function DeleteSubscriptionsAction(ConfirmActionDialog, ContentActionNotification, $translate, Subscriptions) {
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.ContentActionNotification = ContentActionNotification;
            this.$translate = $translate;
            this.Subscriptions = Subscriptions;
        }
        DeleteSubscriptionsAction.prototype.deleteSubscriptions = function (subscriptions, context) {
            var _this = this;
            var description;
            if (subscriptions.size() === 1) {
                var sub = subscriptions.first();
                if (sub.targetType === VizPortal.SubscriptionTargetTypes.view) {
                    description = this.$translate.instant('confirmDeleteSubscriptionView', { TARGET_NAME: VizPortal.L10n.elideIfLong(sub.targetName) });
                }
                else if (sub.targetType === VizPortal.SubscriptionTargetTypes.workbook) {
                    description = this.$translate.instant('confirmDeleteSubscriptionWorkbook', { TARGET_NAME: VizPortal.L10n.elideIfLong(sub.targetName) });
                }
            }
            else {
                description = this.$translate.instant('confirmDeleteSubscriptions', { SUBSCRIPTION_COUNT: subscriptions.size() }, VizPortal.L10n.Interpolations.Count);
            }
            return this.ConfirmActionDialog.open({
                scope: context.scope,
                title: this.$translate.instant('delete'),
                bodyText: description,
                actionName: this.$translate.instant('confirmDeleteButton', { ITEM_COUNT: subscriptions.size() }, VizPortal.L10n.Interpolations.Count),
                isDeleteAction: true,
                action: function (dialogInstance) {
                    return _this.Subscriptions.del(subscriptions.keys()).then(function (result) {
                        var notification = VizPortal.MultipleResultNotificationOptions.create(new VizPortal.MultipleItemResult(subscriptions, result), {
                            describeSuccessSummary: function (successCount) {
                                return _this.$translate.instant('deleteSubscriptionsSuccess', { ITEM_COUNT: successCount }, VizPortal.L10n.Interpolations.Count);
                            },
                            describeErrorSummary: function (errorCount) {
                                return _this.$translate.instant('deleteSubscriptionsError', { ERROR_COUNT: errorCount }, VizPortal.L10n.Interpolations.Count);
                            },
                            describeErrorDetail: function (errorItem) {
                                return {
                                    itemName: errorItem.item.subject,
                                    errorMessage: _this.errorMessageFor(errorItem)
                                };
                            }
                        });
                        _this.ContentActionNotification.notify(notification);
                    });
                }
            }).result;
        };
        DeleteSubscriptionsAction.prototype.errorMessageFor = function (errorItem) {
            switch (errorItem.error.code) {
                case VizPortal.CommonErrorCode.SubscriptionNotFound:
                    return this.$translate.instant('errorSubscriptionNotFound', { SUBSCRIPTION_NAME: VizPortal.L10n.elideIfLong(errorItem.item.subject) });
                default:
                    return this.$translate.instant('errorUnknown');
            }
        };
        DeleteSubscriptionsAction.$inject = ['ConfirmActionDialog', 'ContentActionNotification', '$translate', 'Subscriptions'];
        return DeleteSubscriptionsAction;
    })();
    VizPortal.DeleteSubscriptionsAction = DeleteSubscriptionsAction;
    VizPortal.Module.instance().service('DeleteSubscriptionsAction', DeleteSubscriptionsAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/ErrorCodes.ts" />
/// <reference path="ContentActionNotification.ts" />
var VizPortal;
(function (VizPortal) {
    var ChangeSubscriptionSubjectAction = (function () {
        function ChangeSubscriptionSubjectAction(ConfirmActionDialog, $translate, toaster, Subscriptions) {
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.$translate = $translate;
            this.toaster = toaster;
            this.Subscriptions = Subscriptions;
        }
        ChangeSubscriptionSubjectAction.prototype.changeSubject = function (subscription, context) {
            var _this = this;
            var scope = context.scope.$new();
            scope.description = ''; // This should only be used if the server returns bad data.
            switch (subscription.targetType) {
                case VizPortal.SubscriptionTargetTypes.view:
                    scope.description = this.$translate.instant('confirmChangeViewSubscriptionSubject', { VIEW_NAME: VizPortal.L10n.elideIfLong(subscription.targetName) });
                    break;
                case VizPortal.SubscriptionTargetTypes.workbook:
                    scope.description = this.$translate.instant('confirmChangeWorkbookSubscriptionSubject', { WORKBOOK_NAME: VizPortal.L10n.elideIfLong(subscription.targetName) });
                    break;
            }
            scope.input = {
                text: subscription.subject,
                maxLength: 255
            };
            return this.ConfirmActionDialog.open({
                title: this.$translate.instant('changeSubject'),
                bodyTemplateUrl: 'confirmActionDialogInput.html',
                scope: scope,
                actionName: this.$translate.instant('changeSubject'),
                action: function (dialogInstance) {
                    return _this.Subscriptions.changeSubject(subscription.id, scope.input.text).then(function (result) {
                        if (result.errors && result.errors.length) {
                            dialogInstance.showErrorMessage(_this.$translate.instant('changeSubjectFailure', {
                                SUBJECT: subscription.subject
                            }));
                        }
                        else {
                            _this.toaster.pop({
                                type: VizPortal.ToastType.Info,
                                text: _this.$translate.instant('changeSubjectSuccess', {
                                    SUBJECT: scope.input.text
                                })
                            });
                            subscription.subject = scope.input.text;
                        }
                        return result;
                    });
                }
            }).result.fin(function () { return scope.$destroy(); });
        };
        ChangeSubscriptionSubjectAction.$inject = ['ConfirmActionDialog', '$translate', 'ToasterService', 'Subscriptions'];
        return ChangeSubscriptionSubjectAction;
    })();
    VizPortal.ChangeSubscriptionSubjectAction = ChangeSubscriptionSubjectAction;
    VizPortal.Module.instance().service('ChangeSubscriptionSubjectAction', ChangeSubscriptionSubjectAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../../app/content/SubscriptionGrid.ts" />
/// <reference path="../../common/react/components/dataGrid/AngularToReactDataGridBridge.ts" />
/// <reference path="../helpers/ActionButtonsHelper.ts" />
/// <reference path="../helpers/SubplaceCountsHelper.ts" />
/// <reference path="../models/IEmptyTemplate.ts" />
/// <reference path="../models/ITemplate.ts" />
/// <reference path="../resources/Schedules.ts" />
/// <reference path="../resources/Subscriptions.ts" />
/// <reference path="../services/BrowserTitleService.ts" />
/// <reference path="../services/SorterFactory.ts" />
/// <reference path="../services/DeleteSubscriptionsAction.ts" />
/// <reference path="../services/ChangeScheduleAction.ts" />
/// <reference path="../services/ChangeSubscriptionSubjectAction.ts" />
/// <reference path="../services/QueryService.ts" />
/// <reference path="../services/SelectionService.ts" />
/// <reference path="TasksCtrl.ts" />
var VizPortal;
(function (VizPortal) {
    var SubscriptionsCtrl = (function () {
        function SubscriptionsCtrl($scope, $translate, AngularToReactDataGridBridge, $state, $filter, BrowserTitleService, subplace, queryService, selectionService, sorterFactory, ServerService, DeleteSubscriptionsAction, changeScheduleAction, ChangeSubscriptionSubjectAction) {
            var _this = this;
            this.$scope = $scope;
            this.$translate = $translate;
            this.AngularToReactDataGridBridge = AngularToReactDataGridBridge;
            this.$state = $state;
            this.$filter = $filter;
            this.ServerService = ServerService;
            this.DeleteSubscriptionsAction = DeleteSubscriptionsAction;
            this.changeScheduleAction = changeScheduleAction;
            this.ChangeSubscriptionSubjectAction = ChangeSubscriptionSubjectAction;
            BrowserTitleService.setTitle('subscriptions', $scope.objectName);
            var selectedItems = new VizPortal.Set(function (subscription) { return subscription.id; });
            $scope.selectedItems = selectedItems;
            var actions = this.createActions(selectedItems);
            $scope.useReactDataGrid = VizPortal.FeatureFlags.reactSubscriptionsGrid;
            if (VizPortal.FeatureFlags.reactSubscriptionsGrid) {
                this.configureForReactDataGrid(actions);
            }
            $scope.rowClicked = function (row, colIndex) {
                selectionService.rowClicked($scope.selectedItems, row, colIndex);
            };
            $scope.sorter = sorterFactory.create(VizPortal.SubscriptionContentType.defaultOrder);
            this.query = queryService.createQueryUpdaterFromSubplace($scope, subplace, function (resourceQuery) {
                if (VizPortal.FeatureFlags.reactSubscriptionsGrid) {
                    _this.AngularToReactDataGridBridge.updateReactDataGridRowStore({ scope: _this.$scope, sliceable: resourceQuery });
                }
                $scope.sliceable = resourceQuery;
                $scope.sorter.setOrder(resourceQuery.getOrder());
            });
            this.refreshSubscriptions();
            $scope.$on(VizPortal.SubplaceEvents.Refresh, function () {
                _this.refreshSubscriptions();
            });
            $scope.showUserNameColumn = this.showUserNameColumn();
            $scope.showWorkbookViewColumn = this.showWorkbookViewColumn();
            $scope.showHasSubscriptionColumn = this.showHasSubscriptionColumn();
            $scope.availableAction = function (action) { return action.isAvailable($scope.selectedItems); };
            VizPortal.ActionButtonsHelper.setupActionButtons($scope, actions);
            $scope.headerClicked = function (header) { return $scope.sorter.setPrimary(header.attrs['key'], header.attrs['direction']); };
            $scope.sliceChanged = function (newSlice) {
                $scope.selectedItems.updateItems(newSlice.items);
                VizPortal.SubplaceCountsHelper.updateCountsFromSubplace($scope, subplace, newSlice.total);
            };
            $scope.emptyTemplateModel = SubscriptionsCtrl.emptyTemplateModel;
        }
        SubscriptionsCtrl.prototype.isServerPage = function () {
            return this.$state.includes("main.server.**");
        };
        SubscriptionsCtrl.prototype.showUserNameColumn = function () {
            return !this.$state.includes("**.user.**");
        };
        SubscriptionsCtrl.prototype.showHasSubscriptionColumn = function () {
            return !this.$state.includes("**.workbook.**") && !this.$state.includes("**.user.**");
        };
        SubscriptionsCtrl.prototype.showWorkbookViewColumn = function () {
            return this.$state.includes("**.user.**");
        };
        SubscriptionsCtrl.prototype.showScheduleColumn = function () {
            return !this.$state.includes("**.schedule.**");
        };
        SubscriptionsCtrl.prototype.showSiteColumn = function () {
            return this.isServerPage();
        };
        SubscriptionsCtrl.prototype.configureForReactDataGrid = function (actions) {
            var _this = this;
            var queryString = window.location.search;
            var columns = VizPortalReact.SubscriptionGrid.columns(function (id) { return _this.$translate.instant(id); }, this.$scope, actions, this.isServerPage(), new VizPortalReact.ServerUrls(queryString), new VizPortalReact.SiteUrls({ siteUrlName: this.ServerService.sessionSiteUrlName(), queryString: queryString }), this.$filter('scheduleFrequencyDescription'), this.showUserNameColumn(), this.showHasSubscriptionColumn(), this.showWorkbookViewColumn(), this.showScheduleColumn(), this.showSiteColumn());
            this.AngularToReactDataGridBridge.attachReactDataGridToScope(this.$scope, columns, SubscriptionsCtrl.emptyTemplateModel);
        };
        SubscriptionsCtrl.prototype.createActions = function (selectedItems) {
            var _this = this;
            return [
                {
                    name: 'tasks-change-schedule',
                    translate: 'changeSchedule_action',
                    isAvailable: function (subscriptions) { return !subscriptions.isEmpty(); },
                    isDisabled: function (subscriptions) {
                        return subscriptions.size() === 1 && _this.isCreatorOrAdminOnly(subscriptions.first());
                    },
                    execute: function (items, context) {
                        _this.changeScheduleAction.forSubscriptions(items, context)
                            .then(function (result) {
                            VizPortal.ActionHelpers.deselectNotFound(selectedItems, result, VizPortal.CommonErrorCode.SubscriptionNotFound);
                            _this.refreshSubscriptions();
                        });
                    }
                },
                {
                    name: 'tasks-change-subject',
                    translate: 'changeSubject_action',
                    isAvailable: function (subscriptions) { return !subscriptions.isEmpty(); },
                    isDisabled: function (subscriptions) {
                        return subscriptions.size() !== 1 || _this.isCreatorOrAdminOnly(subscriptions.first());
                    },
                    execute: function (subscriptions, context) {
                        _this.ChangeSubscriptionSubjectAction.changeSubject(subscriptions.first(), context)
                            .then(function (result) {
                            VizPortal.ActionHelpers.deselectNotFound(selectedItems, result, VizPortal.CommonErrorCode.SubscriptionNotFound);
                            _this.refreshSubscriptions();
                        });
                    }
                },
                {
                    name: 'delete-subscriptions',
                    translate: 'delete_action',
                    isAvailable: function (subscriptions) { return !subscriptions.isEmpty(); },
                    isDisabled: function (subscriptions) {
                        return subscriptions.size() === 1 && _this.isCreatorOrAdminOnly(subscriptions.first());
                    },
                    execute: function (subscriptions, context) {
                        _this.DeleteSubscriptionsAction.deleteSubscriptions(subscriptions, context)
                            .then(function (result) {
                            VizPortal.ActionHelpers.deselectAllExceptErrors(selectedItems, result, VizPortal.CommonErrorCode.SubscriptionNotFound);
                            _this.refreshSubscriptions();
                        });
                    }
                }
            ];
        };
        SubscriptionsCtrl.prototype.isCreatorOrAdminOnly = function (subscription) {
            return subscription.user.id !== this.ServerService.sessionUserId()
                && !this.ServerService.isSessionSiteOrServerAdmin();
        };
        SubscriptionsCtrl.prototype.refreshSubscriptions = function () {
            this.query.refresh();
        };
        SubscriptionsCtrl.$inject = [
            '$scope',
            '$translate',
            'AngularToReactDataGridBridge',
            '$state',
            '$filter',
            'BrowserTitleService',
            'subplace',
            'QueryService',
            'SelectionService',
            'SorterFactory',
            'ServerService',
            'DeleteSubscriptionsAction',
            'ChangeScheduleAction',
            'ChangeSubscriptionSubjectAction'
        ];
        SubscriptionsCtrl.emptyTemplateModel = { title: 'subscriptionsEmptyMessage' };
        return SubscriptionsCtrl;
    })();
    VizPortal.SubscriptionsCtrl = SubscriptionsCtrl;
    VizPortal.Module.instance().controller('SubscriptionsCtrl', SubscriptionsCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../ts/libs.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    /*
     * Constructs urls for server pages, given a query string.
     *
     * e.g.
     *
     *   var serverUrls = new ServerUrls('foo=bar');
     *
     *   serverUrls.sitesUrl();    // returns '/?foo=bar#/server/sites'
     *
     */
    var ServerUrls = (function () {
        function ServerUrls(queryString) {
            // Sanitize inputs and calculate prefix
            queryString = _.isString(queryString) ? queryString : '';
            // Insert a '?' if necessary
            if (queryString && queryString.length > 0 && queryString[0] !== '?') {
                queryString = '?' + queryString;
            }
            this.prefix = '/' + queryString + '#';
        }
        ServerUrls.prototype.sitesUrl = function () {
            return this.prefix + '/server/sites';
        };
        ServerUrls.prototype.usersUrl = function () {
            return this.prefix + '/server/users';
        };
        ServerUrls.prototype.schedule = function (scheduleId, scheduledAction) {
            return this.prefix + '/server/schedules/' + scheduleId + '/' +
                (scheduledAction === VizPortal.ServerApi.ScheduleActions.Extract ? 'extractRefreshes' : 'subscriptions');
        };
        ServerUrls.prototype.schedules = function () {
            return this.prefix + '/server/schedules';
        };
        ServerUrls.prototype.tasks = function () {
            return this.prefix + '/server/tasks';
        };
        ServerUrls.prototype.status = function () {
            return this.prefix + '/server/status';
        };
        ServerUrls.prototype.settings = function () {
            return this.prefix + '/server/settings';
        };
        ServerUrls.prototype.userSettingsUrl = function (user) {
            return this.prefix + '/server/user/' + user.domainName + '/' + user.username + '/settings';
        };
        return ServerUrls;
    })();
    VizPortalReact.ServerUrls = ServerUrls;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var HeaderStyles;
    (function (HeaderStyles) {
        HeaderStyles.bluePalette = !VizPortal.FeatureFlags.reactTopBarDark;
        HeaderStyles.LetterSpacing = '0.08em';
        HeaderStyles.MenuPanelStyle = {
            width: 240,
            height: 308,
            backgroundColor: VizPortalReact.CommonStyles.Colors.White,
            borderWidth: VizPortalReact.CommonStyles.Sizes.LineWidth,
            borderColor: VizPortalReact.CommonStyles.Colors.BorderColor,
            borderStyle: 'solid',
            fontSize: VizPortalReact.CommonStyles.Sizes.NormalFontSize,
            position: 'relative' // Ensure absolutely positioned elements are relative to the parent menu panel
        };
        HeaderStyles.AlertsCountFontSize = VizPortal.FeatureFlags.useUpdatedFontStyles ? '10px' : 'inherit';
        // Images
        HeaderStyles.HeaderDividerImage = HeaderStyles.bluePalette ? 'header_divider.png' : 'header_divider_black.png';
        HeaderStyles.SiteSwitcherDropdownRestImage = HeaderStyles.bluePalette ? 'signature_dropdown_small_white_normal.png' : 'signature_dropdown_small_normal.png';
        HeaderStyles.SiteSwitcherDropdownHoverImage = HeaderStyles.bluePalette ? 'signature_dropdown_small_white_normal.png' : 'signature_dropdown_small_hover.png';
        // Colors
        HeaderStyles.HeaderBackgroundColor = HeaderStyles.bluePalette ? 'rgb(55,102,129)' : VizPortalReact.CommonStyles.Colors.Grey40;
        HeaderStyles.HeaderLinkSelectedColor = HeaderStyles.bluePalette ? VizPortalReact.CommonStyles.Colors.White : VizPortalReact.CommonStyles.Colors.ActionOrange;
        HeaderStyles.HeaderLinkSelectedBackgroundColor = HeaderStyles.bluePalette ? 'rgb(36,68,87)' : 'inherit';
        HeaderStyles.HeaderLinkHoverBackgroundColor = HeaderStyles.bluePalette ? 'rgb(45,85,108)' : 'inherit';
        HeaderStyles.SiteSwitcherRestColor = HeaderStyles.bluePalette ? VizPortalReact.CommonStyles.Colors.White : VizPortalReact.CommonStyles.Colors.ActionOrange;
        HeaderStyles.SiteSwitcherHoverColor = HeaderStyles.bluePalette ? VizPortalReact.CommonStyles.Colors.White : VizPortalReact.CommonStyles.Colors.ActionOrangeDark;
        // Opacity
        HeaderStyles.HoverOpacity = 1.0;
        HeaderStyles.RestOpacity = HeaderStyles.bluePalette ? 0.85 : 0.50;
        HeaderStyles.SiteSwitcherHoverOpacity = HeaderStyles.bluePalette ? HeaderStyles.HoverOpacity : 1.0;
        HeaderStyles.SiteSwitcherRestOpacity = HeaderStyles.bluePalette ? HeaderStyles.RestOpacity : 1.0;
    })(HeaderStyles = VizPortalReact.HeaderStyles || (VizPortalReact.HeaderStyles = {}));
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../common/react/CommonStyles.ts" />
/// <reference path="HeaderStyles.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var HeaderLink = (function (_super) {
        __extends(HeaderLink, _super);
        function HeaderLink(props) {
            var _this = this;
            _super.call(this, props);
            this.state = {
                hovered: false
            };
            this.boundMouseEnter = function () { return _this.setState({ hovered: true }); };
            this.boundMouseLeave = function () { return _this.setState({ hovered: false }); };
        }
        HeaderLink.prototype.render = function () {
            var backgroundColor = 'inherit';
            var color = VizPortalReact.CommonStyles.Colors.White;
            var opacity = VizPortalReact.HeaderStyles.RestOpacity;
            if (this.props.isSelected) {
                color = VizPortalReact.HeaderStyles.HeaderLinkSelectedColor;
                backgroundColor = VizPortalReact.HeaderStyles.HeaderLinkSelectedBackgroundColor;
                opacity = VizPortalReact.HeaderStyles.HoverOpacity;
            }
            else if (this.state.hovered) {
                backgroundColor = VizPortalReact.HeaderStyles.HeaderLinkHoverBackgroundColor;
                opacity = VizPortalReact.HeaderStyles.HoverOpacity;
            }
            var style = _.extend({}, HeaderLink.linkStyle, {
                color: color,
                backgroundColor: backgroundColor
            }, this.props.style);
            return React.DOM.a({
                href: this.props.url,
                style: style,
                onMouseEnter: this.boundMouseEnter,
                onMouseLeave: this.boundMouseLeave
            }, React.DOM.span({ style: { opacity: opacity } }, this.props.label));
        };
        HeaderLink.displayName = 'HeaderLink';
        HeaderLink.element = React.createFactory(HeaderLink);
        HeaderLink.linkStyle = {
            textDecoration: 'none',
            display: 'inline-block',
            fontFamily: VizPortalReact.CommonStyles.Fonts.HeaderFont,
            fontSize: VizPortalReact.CommonStyles.Sizes.HeaderFontSize,
            letterSpacing: VizPortalReact.HeaderStyles.LetterSpacing
        };
        return HeaderLink;
    })(React.Component);
    VizPortalReact.HeaderLink = HeaderLink;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../common/react/CommonStyles.ts" />
/// <reference path="../ServerUrls.ts" />
/// <reference path="../SiteUrls.ts" />
/// <reference path="HeaderLink.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var Navigation = (function (_super) {
        __extends(Navigation, _super);
        function Navigation() {
            _super.apply(this, arguments);
        }
        Navigation.prototype.render = function () {
            var _this = this;
            var navLinks = Navigation.isServerLocation(this.props.currentLocation)
                ? this.serverLinks()
                : this.siteLinks();
            var links = _.map(navLinks, function (link) {
                return VizPortalReact.HeaderLink.element({
                    key: link.label,
                    label: link.label,
                    url: link.url,
                    isSelected: _this.props.currentLocation === link.location,
                    style: Navigation.linkStyle
                });
            });
            // The dividers at the left and right of the navigation links are implemented
            // with background images on nested divs. The reason for this is so when the far
            // left and right links are selected or hovered, their background color covers
            // up the divider.
            var linksWrapper = React.DOM.div({
                style: {
                    background: this.props.hideRightDivider ? 'inherit' : 'url(img/' + VizPortalReact.HeaderStyles.HeaderDividerImage + ') right center no-repeat'
                }
            }, links);
            return React.DOM.div({ style: Navigation.containerStyle }, linksWrapper);
        };
        Navigation.prototype.siteLinks = function () {
            var siteLinks = [];
            if (VizPortal.FeatureFlags.homePlaceEnabled) {
                siteLinks.push({
                    label: this.props.translate('home'),
                    location: Navigation.Location.SiteHome,
                    url: this.props.siteUrls.home()
                });
            }
            siteLinks = siteLinks.concat([
                {
                    label: this.props.translate('content'),
                    location: Navigation.Location.SiteContent,
                    url: this.props.siteUrls.projectsUrl()
                },
                {
                    label: this.props.translate('users'),
                    location: Navigation.Location.SiteUsers,
                    url: this.props.siteUrls.usersUrl()
                },
                {
                    label: this.props.translate('groups'),
                    location: Navigation.Location.SiteGroups,
                    url: this.props.siteUrls.groupsUrl()
                },
                {
                    label: this.props.translate('schedules'),
                    location: Navigation.Location.SiteSchedules,
                    url: this.props.siteUrls.schedulesUrl()
                },
                {
                    label: this.props.translate('tasks'),
                    location: Navigation.Location.SiteTasks,
                    url: this.props.siteUrls.tasksUrl()
                },
                {
                    label: this.props.translate('status'),
                    location: Navigation.Location.SiteStatus,
                    url: this.props.siteUrls.statusUrl()
                },
                {
                    label: this.props.translate('settings'),
                    location: Navigation.Location.SiteSettings,
                    url: this.props.siteUrls.settingsUrl()
                }
            ]);
            return siteLinks;
        };
        Navigation.prototype.serverLinks = function () {
            return [
                {
                    label: this.props.translate('sites'),
                    location: Navigation.Location.ServerSites,
                    url: this.props.serverUrls.sitesUrl()
                },
                {
                    label: this.props.translate('users'),
                    location: Navigation.Location.ServerUsers,
                    url: this.props.serverUrls.usersUrl()
                },
                {
                    label: this.props.translate('schedules'),
                    location: Navigation.Location.ServerSchedules,
                    url: this.props.serverUrls.schedules()
                },
                {
                    label: this.props.translate('tasks'),
                    location: Navigation.Location.ServerTasks,
                    url: this.props.serverUrls.tasks()
                },
                {
                    label: this.props.translate('status'),
                    location: Navigation.Location.ServerStatus,
                    url: this.props.serverUrls.status()
                },
                {
                    label: this.props.translate('settings'),
                    location: Navigation.Location.ServerSettings,
                    url: this.props.serverUrls.settings()
                }
            ];
        };
        Navigation.displayName = 'Navigation';
        Navigation.element = React.createFactory(Navigation);
        Navigation.linkPadding = 15;
        Navigation.linkStyle = {
            paddingLeft: Navigation.linkPadding,
            paddingRight: Navigation.linkPadding
        };
        Navigation.containerStyle = {
            background: 'url(img/' + VizPortalReact.HeaderStyles.HeaderDividerImage + ') left center no-repeat',
            marginLeft: Navigation.linkPadding,
            marginRight: Navigation.linkPadding,
            lineHeight: '45px'
        };
        return Navigation;
    })(React.Component);
    VizPortalReact.Navigation = Navigation;
    var Navigation;
    (function (Navigation) {
        // CAREFUL: if the Location enum values are re-ordered, be sure to update this function.
        function isServerLocation(location) {
            return location >= Location.ServerSites;
        }
        Navigation.isServerLocation = isServerLocation;
        (function (Location) {
            // If the Location is ever Unknown, we have a bug: a missing entry in
            // TopBarCtrl.stateNameToNavigationLocationMap.
            Location[Location["Unknown"] = 0] = "Unknown";
            // Site locations
            Location[Location["SiteHome"] = 1] = "SiteHome";
            Location[Location["SiteContent"] = 2] = "SiteContent";
            Location[Location["SiteUsers"] = 3] = "SiteUsers";
            Location[Location["SiteGroups"] = 4] = "SiteGroups";
            Location[Location["SiteSchedules"] = 5] = "SiteSchedules";
            Location[Location["SiteTasks"] = 6] = "SiteTasks";
            Location[Location["SiteStatus"] = 7] = "SiteStatus";
            Location[Location["SiteSettings"] = 8] = "SiteSettings";
            // Server locations
            Location[Location["ServerSites"] = 9] = "ServerSites";
            Location[Location["ServerUsers"] = 10] = "ServerUsers";
            Location[Location["ServerSchedules"] = 11] = "ServerSchedules";
            Location[Location["ServerTasks"] = 12] = "ServerTasks";
            Location[Location["ServerStatus"] = 13] = "ServerStatus";
            Location[Location["ServerSettings"] = 14] = "ServerSettings";
        })(Navigation.Location || (Navigation.Location = {}));
        var Location = Navigation.Location;
    })(Navigation = VizPortalReact.Navigation || (VizPortalReact.Navigation = {}));
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../libs.ts" />
/// <reference path="resourceParts.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="../types/IAlert.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        ServerApi.AlertTarget = {
            datasource: 'datasource',
            workbook: 'workbook'
        };
        var GetAlertRequest = (function (_super) {
            __extends(GetAlertRequest, _super);
            function GetAlertRequest(params) {
                _super.call(this, 'getAlert', params);
            }
            return GetAlertRequest;
        })(ServerApi.Request);
        ServerApi.GetAlertRequest = GetAlertRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../types/IAlert.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetUserAlertListRequest = (function (_super) {
            __extends(GetUserAlertListRequest, _super);
            function GetUserAlertListRequest(params) {
                if (params === void 0) { params = {}; }
                _super.call(this, 'getUserAlertList', params);
            }
            return GetUserAlertListRequest;
        })(ServerApi.Request);
        ServerApi.GetUserAlertListRequest = GetUserAlertListRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/ServerModelHelper.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/GetAlertRequest.ts" />
/// <reference path="../ServerApi/requests/GetUserAlertListRequest.ts" />
var VizPortal;
(function (VizPortal) {
    var Alerts = (function () {
        function Alerts(ServerService) {
            this.ServerService = ServerService;
        }
        Alerts.prototype.getCount = function () {
            return this.ServerService.sendRequest(new VizPortal.ServerApi.GetUserAlertCountRequest())
                .then(function (result) {
                return result.totalCount;
            });
        };
        Alerts.prototype.getList = function () {
            return this.ServerService.sendRequest(new VizPortal.ServerApi.GetUserAlertListRequest())
                .then(function (result) {
                return VizPortal.ServerApiMapper.alertList(result);
            });
        };
        Alerts.prototype.getForDatasource = function (id) {
            return this.getForType(VizPortal.ServerApi.AlertTarget.datasource, id);
        };
        Alerts.prototype.getForWorkbook = function (id) {
            return this.getForType(VizPortal.ServerApi.AlertTarget.workbook, id);
        };
        Alerts.prototype.getForType = function (type, id) {
            return this.ServerService.sendRequest(new VizPortal.ServerApi.GetAlertRequest({
                targetType: type,
                targetId: id
            })).then(function (result) {
                return VizPortal.ServerApiMapper.alertList(result);
            });
        };
        Alerts.$inject = [
            'ServerService'
        ];
        return Alerts;
    })();
    VizPortal.Alerts = Alerts;
    VizPortal.Module.instance().service('Alerts', Alerts);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetGettingStartedNotificationsRequest = (function (_super) {
            __extends(GetGettingStartedNotificationsRequest, _super);
            function GetGettingStartedNotificationsRequest(params) {
                _super.call(this, 'getGettingStartedNotifications', params);
            }
            return GetGettingStartedNotificationsRequest;
        })(ServerApi.Request);
        ServerApi.GetGettingStartedNotificationsRequest = GetGettingStartedNotificationsRequest;
        var SetSuppressGettingStartedNotification = (function (_super) {
            __extends(SetSuppressGettingStartedNotification, _super);
            function SetSuppressGettingStartedNotification(params) {
                _super.call(this, 'setSuppressGettingStartedNotifications', params);
            }
            return SetSuppressGettingStartedNotification;
        })(ServerApi.Request);
        ServerApi.SetSuppressGettingStartedNotification = SetSuppressGettingStartedNotification;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/GetGettingStartedNotificationsRequest.ts" />
var VizPortal;
(function (VizPortal) {
    var GettingStartedNotifications = (function () {
        function GettingStartedNotifications($sce, $q, $window, $rootScope, $state, modal, ServerService) {
            this.$sce = $sce;
            this.$q = $q;
            this.$window = $window;
            this.$rootScope = $rootScope;
            this.$state = $state;
            this.modal = modal;
            this.ServerService = ServerService;
            this.notificationsShown = false;
            this.notificationsEnabled = false;
        }
        GettingStartedNotifications.prototype.enableNotifications = function () {
            this.notificationsEnabled = true;
        };
        GettingStartedNotifications.prototype.forceShowNotifications = function () {
            return this.showNotifications({ checkUserPrefs: false });
        };
        GettingStartedNotifications.prototype.showNotificationsIfEnabled = function () {
            var _this = this;
            // Don't show notifications if we're going to a viz state
            if (!this.notificationsEnabled || this.notificationsShown || this.$state.is('main.site.viz')) {
                return this.$q.when(null);
            }
            return this.showNotifications({ checkUserPrefs: true })
                .fin(function () { return _this.notificationsShown = true; }); // Suppress in case of future $state.hardReload()
        };
        GettingStartedNotifications.prototype.shouldShowGettingStartedLink = function () {
            return this.fetchNotificationsUrl({ checkUserPrefs: false }).then(function (url) { return !!url; });
        };
        GettingStartedNotifications.prototype.showNotifications = function (params) {
            var _this = this;
            return this.fetchNotificationsUrl(params).then(function (url) {
                if (!url) {
                    return;
                }
                var templateUrl = 'gettingStartedNotifications.html';
                var scope = _this.$rootScope.$new();
                var eventNamespace = '.gettingStartedNotification' + scope.$id;
                var host = _this.getHostName(url);
                url += '?' + $.param({ __displayName: _this.ServerService.sessionUserDisplayName() });
                scope.notificationsUrl = _this.$sce.trustAsResourceUrl(url);
                scope.dialog = {
                    showNotificationsOnLogIn: true
                };
                var modalInstance = _this.modal.open({
                    scope: scope,
                    templateUrl: templateUrl,
                    size: VizPortal.ModalSize.fitToContent,
                    classes: 'tb-modal-external-content',
                    backdropClasses: 'tb-backdrop-dark',
                    closeX: false,
                    resolve: {
                        // Pre-load the dialog body template to avoid flickering/re-layout
                        bodyTemplate: ['$http', '$templateCache',
                            function ($http, $templateCache) {
                                return $http.get(templateUrl, { cache: $templateCache });
                            }]
                    },
                    tbTestId: 'getting-started-notifications-modal'
                });
                $(_this.$window).on('message' + eventNamespace, function (evt) {
                    var originalEvt = evt.originalEvent;
                    var originHost = _this.getHostName(originalEvt.origin);
                    if (originHost && originHost === host &&
                        originalEvt.data === GettingStartedNotifications.CloseModalMessage) {
                        modalInstance.dismiss();
                    }
                });
                scope.$on('$destroy', function () {
                    $(_this.$window).off(eventNamespace);
                });
                return modalInstance.result
                    .fin(function () { return _this.updateUserPreference(scope); })
                    .fin(function () { return scope.$destroy(); });
            });
        };
        GettingStartedNotifications.prototype.getHostName = function (url) {
            var urlParsingNode = document.createElement('a');
            urlParsingNode.setAttribute('href', url);
            return urlParsingNode.hostname;
        };
        GettingStartedNotifications.prototype.fetchNotificationsUrl = function (params) {
            return this.ServerService.sendRequest(new VizPortal.ServerApi.GetGettingStartedNotificationsRequest(params))
                .then(function (result) { return result.contentUrl; });
        };
        GettingStartedNotifications.prototype.updateUserPreference = function (scope) {
            return this.ServerService.sendRequest(new VizPortal.ServerApi.SetSuppressGettingStartedNotification({
                suppressGettingStartedNotifications: !scope.dialog.showNotificationsOnLogIn
            }));
        };
        GettingStartedNotifications.CloseModalMessage = 'tableau.closeModal';
        GettingStartedNotifications.$inject = ['$sce', '$q', '$window', '$rootScope', '$state', 'ModalService', 'ServerService'];
        return GettingStartedNotifications;
    })();
    VizPortal.GettingStartedNotifications = GettingStartedNotifications;
    VizPortal.Module.instance().service('GettingStartedNotifications', GettingStartedNotifications);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/ServerService.ts" />
var VizPortal;
(function (VizPortal) {
    var LogoService = (function () {
        function LogoService(server, startPageService) {
            this.server = server;
            this.startPageService = startPageService;
            this.serverCustomization = server.serverCustomization();
            this.siteCustomization = function () { return server.siteLogo(); };
            this.isSiteCustomizationEnabled = server.isSiteCustomizationEnabled();
        }
        LogoService.prototype.resetSiteLogoToDefault = function () {
            return this.server.updateSiteLogo(undefined, true);
        };
        LogoService.prototype.uploadSiteLogo = function (file) {
            return this.server.updateSiteLogo(file, false);
        };
        LogoService.prototype.isUsingCustomSiteLogo = function () {
            return this.siteCustomization() && this.siteCustomization().useCustomLogo && this.isSiteCustomizationEnabled;
        };
        LogoService.prototype.getTopBarLogo = function () {
            if (this.isUsingCustomSiteLogo()) {
                return this.getSiteCustomLogo();
            }
            else {
                return this.getServerTopBarLogo();
            }
        };
        LogoService.prototype.getServerTopBarLogo = function () {
            if (this.serverCustomization && this.serverCustomization.useCustomLogo) {
                return this.getServerCustomLogo();
            }
            else {
                return {
                    image: LogoService.DefaultTopBarLogoImage + '?' + VizPortal.BuildId,
                    width: LogoService.DefaultTopBarLogoWidth,
                    height: LogoService.DefaultTopBarLogoHeight,
                    href: this.getStartPageHref(),
                    title: this.server.serverName()
                };
            }
        };
        LogoService.prototype.getSignInLogo = function () {
            if (this.serverCustomization && this.serverCustomization.useCustomLogo) {
                return this.getServerCustomLogo();
            }
            else {
                return {
                    image: LogoService.DefaultSignInLogoImage + '?' + VizPortal.BuildId,
                    width: LogoService.DefaultSignInLogoWidth,
                    height: LogoService.DefaultSignInLogoHeight,
                    href: '',
                    title: this.server.serverName()
                };
            }
        };
        LogoService.prototype.getStartPageHref = function () {
            return '#' + this.startPageService.getCurrentUserStartPageForCurrentSite();
        };
        LogoService.prototype.getServerCustomLogo = function () {
            return {
                image: this.serverCustomization.customLogoPath,
                width: Math.min(Math.max(this.serverCustomization.customLogoWidth, 0), LogoService.MaximumLogoWidth),
                height: Math.min(Math.max(this.serverCustomization.customLogoHeight, 0), LogoService.MaximumLogoHeight),
                href: this.serverCustomization.customLogoLink || this.getStartPageHref(),
                title: this.server.serverName()
            };
        };
        LogoService.prototype.getSiteCustomLogo = function () {
            var siteCustomization = this.siteCustomization();
            return {
                image: siteCustomization.customLogoPath,
                width: Math.min(Math.max(siteCustomization.customLogoWidth, 0), LogoService.MaximumLogoWidth),
                height: Math.min(Math.max(siteCustomization.customLogoHeight, 0), LogoService.MaximumLogoHeight),
                href: siteCustomization.customLogoLink || this.getStartPageHref(),
                title: this.server.sessionSiteName()
            };
        };
        LogoService.DefaultSignInLogoImage = 'img/tableau_sign_in_logo.png';
        LogoService.DefaultSignInLogoWidth = 277;
        LogoService.DefaultSignInLogoHeight = 58;
        LogoService.DefaultTopBarLogoImage = 'img/tableau_mono_logo.png';
        LogoService.DefaultTopBarLogoWidth = 132;
        LogoService.DefaultTopBarLogoHeight = 27;
        // These maximums are known by tabadmin.
        LogoService.MaximumLogoWidth = 160;
        LogoService.MaximumLogoHeight = 160;
        LogoService.$inject = [
            'ServerService',
            'StartPageService'
        ];
        return LogoService;
    })();
    VizPortal.LogoService = LogoService;
    VizPortal.Module.instance().service('LogoService', LogoService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../../app/header/Navigation.ts" />
/// <reference path="../actions/UserSettingsActions.ts" />
/// <reference path="../controllers/AngularCtrl.ts" />
/// <reference path="../resources/Alerts.ts" />
/// <reference path="../resources/Favorites.ts" />
/// <reference path="../resources/SiteNameSansIds.ts" />
/// <reference path="../services/DisplaySettingsService.ts" />
/// <reference path="../services/GettingStartedNotifications.ts" />
/// <reference path="../services/HelpService.ts" />
/// <reference path="../services/LogoService.ts" />
/// <reference path="../services/ModalService.ts" />
/// <reference path="../services/ServerService.ts" />
/// <reference path="../services/SiteSwitchService.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.TopBarEvents = {
        HeightChanged: 'HeightChanged'
    };
    var TopBarCtrl = (function () {
        function TopBarCtrl($rootScope, $scope, $state, $timeout, server, SiteSwitchService, LogoService, $translate, siteNames, favorites, angularContextFactory, alerts, extractTasks, userSettingsActions, help, gettingStartedNotifications, modalService, logoService, datasources, workbooks) {
            this.$scope = $scope;
            this.$state = $state;
            this.server = server;
            this.$translate = $translate;
            this.siteNames = siteNames;
            this.favorites = favorites;
            this.angularContextFactory = angularContextFactory;
            this.alerts = alerts;
            this.extractTasks = extractTasks;
            this.userSettingsActions = userSettingsActions;
            this.help = help;
            this.gettingStartedNotifications = gettingStartedNotifications;
            this.modalService = modalService;
            this.logoService = logoService;
            this.datasources = datasources;
            this.workbooks = workbooks;
            $scope.logo = function () { return LogoService.getTopBarLogo(); };
            $scope.inServerArea = function () { return $state.includes('main.server.**'); };
            $scope.showServerSiteButtons = function () { return server.isSessionMultiSite() && server.isSessionServerAdmin(); };
            $scope.showSiteSwitcher = function () { return server.isSessionMultiSite() && !$scope.inServerArea(); };
            $scope.showSiteControls = function () { return !(server.isSessionMultiSite() && $scope.inServerArea()); };
            $scope.showNav = function () { return server.isSessionSiteOrServerAdmin(); };
            var updateHeight = function (showNav) {
                var newHeight = 0;
                if (!$scope.settings.collapsed) {
                    var logo = $scope.logo();
                    var logoHeight = (logo && logo.height) ? logo.height : 0;
                    newHeight = _.max([TopBarCtrl.MinTopBarHeight, logoHeight]) + 2 * TopBarCtrl.VerticalPadding;
                    // Note that the React TopBar does not increase height when showNav is true
                    if (showNav && !VizPortal.FeatureFlags.reactTopBar) {
                        newHeight += TopBarCtrl.NavHeight;
                    }
                }
                if ($scope.settings.height !== newHeight) {
                    $scope.settings.height = newHeight;
                    // Allow time for the elements to render and change size before triggering the event.
                    $timeout(function () { return $rootScope.$broadcast(VizPortal.TopBarEvents.HeightChanged); });
                }
            };
            $scope.$watch(function () { return $scope.settings.collapsed; }, function () { return updateHeight($scope.showNav()); });
            $scope.$watch(function () { return $scope.showNav(); }, updateHeight);
            // Watch for custom logo updates
            $scope.$watch(function () { return $scope.logo().height; }, function () { return updateHeight($scope.showNav()); });
            $scope.serverUrl = function () { return SiteSwitchService.serverUrl(); };
            $scope.siteUrl = function () { return SiteSwitchService.siteUrl(); };
            $scope.siteSelected = function (urlName) {
                SiteSwitchService.switchToSite(urlName);
            };
            $scope.toggleCollapsed = function () {
                $scope.settings.collapsed = !$scope.settings.collapsed;
            };
            $scope.server = server;
            // Configure React TopBar
            if (VizPortal.FeatureFlags.reactTopBar) {
                this.configureReactTopBar();
            }
        }
        TopBarCtrl.prototype.configureReactTopBar = function () {
            var _this = this;
            this.$scope.topBarProps = {
                logo: this.logoService.getTopBarLogo(),
                angularContext: this.angularContextFactory.create(this.$scope),
                translate: this.$translate.instant,
                siteStore: new VizPortalReact.SiteStore(this.siteNames),
                favoritesStore: new VizPortalReact.FavoritesStore(this.favorites),
                alertsStore: new VizPortalReact.AlertsStore(),
                alertActions: new VizPortalReact.AlertActions(this.alerts, this.extractTasks, this.datasources, this.workbooks),
                userActions: new VizPortalReact.UserActions(this.server, this.userSettingsActions),
                user: this.server.sessionUserInfo(),
                serverUrls: new VizPortalReact.ServerUrls(window.location.search),
                navLocation: this.topBarLocationFromState(this.$state),
                isLogoutEnabled: this.server.isLogoutEnabled(),
                isSessionMultiSite: this.server.isSessionMultiSite(),
                isSessionServerAdmin: this.server.isSessionServerAdmin(),
                authenticationType: this.server.authenticationType(),
                // Help menu
                helpActions: new VizPortalReact.HelpActions(this.help, this.server, this.$scope, this.gettingStartedNotifications, this.modalService),
                isOfflineHelpEnabled: this.server.offlineHelpEnabled(),
                serverHelpLabel: this.$translate.instant(this.help.getHelpLinkLocKey()),
                serverHelpUrl: this.help.getServerHelpUrlByCategory(),
                supportUrl: this.help.getGeneralSupportUrl(),
                serverName: this.server.serverName(),
                showGettingStartedLink: false,
                // Site is updated in updateSite() function below
                currentSite: null,
                siteUrls: null
            };
            // Update show/hide Getting Started menu item when user's admin status changes (e.g., site switch)
            this.$scope.$watch(function () { return _this.server.isSessionSiteOrServerAdmin(); }, function () {
                // $watch listener fn will always run (async) when first registered
                _this.gettingStartedNotifications.shouldShowGettingStartedLink()
                    .then(function (shouldShowLink) {
                    _this.$scope.topBarProps = _.extend({}, _this.$scope.topBarProps, {
                        showGettingStartedLink: shouldShowLink
                    });
                });
            });
            var updateSite = function () {
                _this.$scope.topBarProps = _.extend({}, _this.$scope.topBarProps, {
                    currentSite: _this.server.sessionSite(),
                    siteUrls: new VizPortalReact.SiteUrls({
                        siteUrlName: _this.server.sessionSiteUrlName(),
                        queryString: window.location.search
                    })
                });
            };
            updateSite();
            this.$scope.$watch(function () { return _this.server.sessionSiteUrlName(); }, updateSite);
            // Update the navLocation when the state changes
            this.$scope.$watch(function () { return _this.$state.current.name; }, function () {
                _this.$scope.topBarProps = _.extend({}, _this.$scope.topBarProps, {
                    navLocation: _this.topBarLocationFromState(_this.$state)
                });
            });
        };
        TopBarCtrl.prototype.topBarLocationFromState = function ($state) {
            var matchingStateName = _.find(_.keys(TopBarCtrl.stateNameToNavigationLocationMap), function (stateName) { return $state.includes(stateName); });
            if (!matchingStateName) {
                console.error('Unexpected state: ' + $state.current.name);
                return VizPortalReact.Navigation.Location.Unknown;
            }
            return TopBarCtrl.stateNameToNavigationLocationMap[matchingStateName];
        };
        // Should match $topBarVerticalPadding in topBar.styl.
        TopBarCtrl.VerticalPadding = 9;
        // Should match $topBarNavHeight in topBar.styl.
        TopBarCtrl.NavHeight = 30;
        // Should match $minimumPreviewBarHeight in updateSiteLogoForm.styl.
        TopBarCtrl.MinTopBarHeight = 27;
        TopBarCtrl.stateNameToNavigationLocationMap = {
            'main.error': VizPortalReact.Navigation.Location.Unknown,
            'main.site.content': VizPortalReact.Navigation.Location.SiteContent,
            'main.site.home': VizPortalReact.Navigation.Location.SiteHome,
            'main.site.group': VizPortalReact.Navigation.Location.SiteGroups,
            'main.site.groups': VizPortalReact.Navigation.Location.SiteGroups,
            'main.site.schedule': VizPortalReact.Navigation.Location.SiteSchedules,
            'main.site.schedules': VizPortalReact.Navigation.Location.SiteSchedules,
            'main.site.settings': VizPortalReact.Navigation.Location.SiteSettings,
            'main.site.status': VizPortalReact.Navigation.Location.SiteStatus,
            'main.site.tasks': VizPortalReact.Navigation.Location.SiteTasks,
            'main.site.user': VizPortalReact.Navigation.Location.SiteUsers,
            'main.site.users': VizPortalReact.Navigation.Location.SiteUsers,
            'main.site.viz': VizPortalReact.Navigation.Location.SiteContent,
            'main.server.analysis': VizPortalReact.Navigation.Location.ServerStatus,
            'main.server.schedule': VizPortalReact.Navigation.Location.ServerSchedules,
            'main.server.schedules': VizPortalReact.Navigation.Location.ServerSchedules,
            'main.server.settings': VizPortalReact.Navigation.Location.ServerSettings,
            'main.server.sites': VizPortalReact.Navigation.Location.ServerSites,
            'main.server.status': VizPortalReact.Navigation.Location.ServerStatus,
            'main.server.tasks': VizPortalReact.Navigation.Location.ServerTasks,
            'main.server.user': VizPortalReact.Navigation.Location.ServerUsers,
            'main.server.users': VizPortalReact.Navigation.Location.ServerUsers
        };
        TopBarCtrl.$inject = [
            '$rootScope',
            '$scope',
            '$state',
            '$timeout',
            'ServerService',
            'SiteSwitchService',
            'LogoService',
            '$translate',
            'SiteNamesAcrossAllPods',
            'Favorites',
            'AngularContextFactory',
            'Alerts',
            'ExtractTasks',
            'UserSettingsActions',
            'HelpService',
            'GettingStartedNotifications',
            'ModalService',
            'LogoService',
            'DataSources',
            'Workbooks'
        ];
        return TopBarCtrl;
    })();
    VizPortal.TopBarCtrl = TopBarCtrl;
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../controllers/TopBarCtrl.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var hasMaxCssValue = function (maxCssValue) { return (maxCssValue !== 'none'); };
    var hasMinCssValue = function (minCssValue) { return (parseInt(minCssValue, 10) !== 0 && minCssValue !== 'auto'); };
    // Usage: tb:viz(viz="viz"), where  $scope.viz is an IViz
    //
    // $scope.viz.path will be changed to reflect viz changes. You can $watch it
    VizPortal.Module.instance().directive('tbViz', ['VizService', '$timeout',
        function (VizService, $timeout) {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'viz.html',
                scope: {
                    viz: '=',
                    onVizSized: '&'
                },
                link: function ($scope, elm) {
                    // Toolbar should always be on top in VizPortal
                    var vizCreateOptions = {
                        toolbarPosition: tableau.ToolbarPosition.TOP,
                        instanceIdToClone: $scope.viz.instanceId,
                        onFirstVizSizeKnown: function (evt) {
                            // Set the viz size limits on the tbViz element
                            var vizSize = evt.getVizSize();
                            var sheetSize = vizSize.sheetSize;
                            // Note: Don't overwrite styles imposed from the outside
                            if (sheetSize.minSize) {
                                if (_.isNumber(sheetSize.minSize.height) && !hasMinCssValue(elm.css('minHeight'))) {
                                    elm.css('minHeight', sheetSize.minSize.height + (vizSize.chromeHeight || 0));
                                }
                                if (_.isNumber(sheetSize.minSize.width) && !hasMinCssValue(elm.css('minWidth'))) {
                                    elm.css('minWidth', sheetSize.minSize.width);
                                }
                            }
                            if (sheetSize.maxSize) {
                                if (_.isNumber(sheetSize.maxSize.height) && !hasMaxCssValue(elm.css('maxHeight'))) {
                                    elm.css('maxHeight', sheetSize.maxSize.height + (vizSize.chromeHeight || 0));
                                }
                                if (_.isNumber(sheetSize.maxSize.width) && !hasMaxCssValue(elm.css('maxWidth'))) {
                                    elm.css('maxWidth', sheetSize.maxSize.width);
                                }
                            }
                            $scope.$apply($scope.onVizSized);
                        },
                        onFirstInteractive: function () {
                            $scope.$apply(function () {
                                $scope.viz.instanceId = viz.getInstanceId();
                            });
                        }
                    };
                    // Include any custom viz parameters in the viz create options
                    var params = _.extend(vizCreateOptions, $scope.viz.params);
                    params[':openAuthoringInTopWindow'] = true;
                    params[':browserBackButtonUndo'] = true;
                    params[':reloadOnCustomViewSave'] = true;
                    params[':showShareOptions'] = true;
                    var uri = VizService.getUri($scope.viz);
                    var viz = new tableau.Viz(elm.get(0), uri, params);
                    $scope.$on(VizPortal.TopBarEvents.HeightChanged, function () {
                        viz.refreshSize();
                    });
                    // Ensure we remove the viz when navigating away
                    $scope.$on('$destroy', function () { return viz.dispose(); });
                    // note: The event handlers below are to update the url from changes in the viz, such as tab
                    // switches or custom view loads. Ideally the JS API would tell us when the url changes in a
                    // URL_CHANGED event, but we didn't have enough time to do that for 9.0.
                    // warning: the custom view events fire at very strange times, for example see BUGZID: 132554
                    var urlChangeEvents = [
                        tableau.TableauEventName.CUSTOM_VIEW_LOAD,
                        tableau.TableauEventName.CUSTOM_VIEW_SAVE,
                        tableau.TableauEventName.TAB_SWITCH
                    ];
                    _.each(urlChangeEvents, function (eventName) {
                        viz.addEventListener(eventName, function (e) {
                            viz.getCurrentUrlAsync().then(function (url) {
                                $scope.$apply(function () {
                                    $scope.viz.instanceId = viz.getInstanceId();
                                    $scope.viz.path = VizService.getPath(url);
                                    $scope.viz.isExplicitOriginalViz = VizService.getIsExplicitOriginalVizFromUrl(url);
                                });
                            });
                        });
                    });
                }
            };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/IExtractTask.ts" />
/// <reference path="../types/IResponse.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var UpdateCommentRequest = (function (_super) {
            __extends(UpdateCommentRequest, _super);
            function UpdateCommentRequest(params) {
                _super.call(this, 'updateComment', params);
            }
            return UpdateCommentRequest;
        })(ServerApi.Request);
        ServerApi.UpdateCommentRequest = UpdateCommentRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/IExtractTask.ts" />
/// <reference path="../types/IResponse.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var DeleteCommentRequest = (function (_super) {
            __extends(DeleteCommentRequest, _super);
            function DeleteCommentRequest(params) {
                _super.call(this, 'deleteComment', params);
            }
            return DeleteCommentRequest;
        })(ServerApi.Request);
        ServerApi.DeleteCommentRequest = DeleteCommentRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/IExtractTask.ts" />
/// <reference path="../types/IResponse.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var CreateCommentRequest = (function (_super) {
            __extends(CreateCommentRequest, _super);
            function CreateCommentRequest(params) {
                _super.call(this, 'createComment', params);
            }
            return CreateCommentRequest;
        })(ServerApi.Request);
        ServerApi.CreateCommentRequest = CreateCommentRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../fetchers/IListFetcher.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/GetCommentsRequest.ts" />
/// <reference path="../ServerApi/requests/UpdateCommentRequest.ts" />
/// <reference path="../ServerApi/requests/DeleteCommentRequest.ts" />
/// <reference path="../ServerApi/requests/CreateCommentRequest.ts" />
/// <reference path="../services/ServerService.ts" />
/// <reference path="Resource.ts" />
var VizPortal;
(function (VizPortal) {
    var Comments = (function (_super) {
        __extends(Comments, _super);
        function Comments(ErrorNotifyingServer, FetcherFactory) {
            _super.call(this, FetcherFactory.getServerResourceFetcher(VizPortal.ServerApi.GetCommentsRequest, VizPortal.ServerApiMapper.comments));
            this.ErrorNotifyingServer = ErrorNotifyingServer;
            this.commentFetcher = FetcherFactory.getServerResourceFetcher(VizPortal.ServerApi.GetCommentsRequest, VizPortal.ServerApiMapper.comments);
        }
        Comments.prototype.createComment = function (viewId, text) {
            return this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.CreateCommentRequest({
                viewId: viewId,
                text: text
            }));
        };
        Comments.prototype.getSliceableCommentsForViz = function (viewId) {
            var _this = this;
            return {
                getSlice: function (start, size) { return _this.commentFetcher.fetchList({
                    viewId: viewId, page: VizPortal.ResourceQuery.getPage(start, size)
                }); }
            };
        };
        Comments.prototype.editComment = function (commentId, commentText) {
            return this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.UpdateCommentRequest({
                id: commentId,
                text: commentText
            }));
        };
        Comments.prototype.deleteComment = function (commentId) {
            return this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.DeleteCommentRequest({
                id: commentId
            }));
        };
        Comments.$inject = ['ErrorNotifyingServer', 'FetcherFactory'];
        return Comments;
    })(VizPortal.Resource);
    VizPortal.Comments = Comments;
    VizPortal.Module.instance().service('Comments', Comments);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../models/ICommentInfo.ts" />
/// <reference path="../resources/Comments.ts" />
var VizPortal;
(function (VizPortal) {
    var DeleteCommentActions = (function () {
        function DeleteCommentActions($translate, ConfirmActionDialog, Comments, toaster) {
            this.$translate = $translate;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.Comments = Comments;
            this.toaster = toaster;
        }
        DeleteCommentActions.prototype.deleteComment = function (commentToDelete, $event) {
            return this.showDeleteCommentDialog(commentToDelete, VizPortal.ActionContext.fromEvent($event));
        };
        DeleteCommentActions.prototype.showDeleteCommentDialog = function (comment, context) {
            var _this = this;
            var dialogInstance = this.ConfirmActionDialog.open({
                scope: context.scope,
                title: this.$translate.instant('delete'),
                bodyText: this.$translate.instant('confirmDeleteComment'),
                actionName: this.$translate.instant('confirmDeleteButton', { ITEM_COUNT: 1 }, VizPortal.L10n.Interpolations.Count),
                isDeleteAction: true,
                action: function () { return _this.Comments.deleteComment(comment.id); }
            });
            dialogInstance.result.then(function (result) {
                if (!!result.errors) {
                    _this.toaster.pop({ type: VizPortal.ToastType.Error, text: _this.$translate.instant('deleteFailed') });
                }
                else {
                    _this.toaster.pop({ type: VizPortal.ToastType.Info, text: _this.$translate.instant('commentDeleted') });
                }
            });
            return dialogInstance.result;
        };
        DeleteCommentActions.$inject = ['$translate',
            'ConfirmActionDialog',
            'Comments',
            'ToasterService'];
        return DeleteCommentActions;
    })();
    VizPortal.DeleteCommentActions = DeleteCommentActions;
    VizPortal.Module.instance().service('DeleteCommentActions', DeleteCommentActions);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../controllers/ErrorCtrl.ts" />
/// <reference path="../directives/tbViz.ts" />
/// <reference path="../helpers/ErrorCodes.ts" />
/// <reference path="../models/IViewInfo.ts" />
/// <reference path="../models/Viz.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../resources/Comments.ts" />
/// <reference path="../resources/Favorites.ts" />
/// <reference path="../resources/Views.ts" />
/// <reference path="../services/BreadcrumbsService.ts" />
/// <reference path="../services/BrowserTitleService.ts" />
/// <reference path="../services/ContentActions.ts" />
/// <reference path="../services/DeleteCommentActions.ts" />
/// <reference path="../services/VizService.ts" />
/// <reference path="../services/WindowLocationService.ts" />
var VizPortal;
(function (VizPortal) {
    var VizViewerCtrl = (function () {
        function VizViewerCtrl($scope, $state, $q, $stateParams, breadcrumbs, BrowserTitleService, comments, contentActions, deleteCommentActions, views, server, vizService, Favorites, BrowserSupportService, windowLocationService) {
            var _this = this;
            this.$scope = $scope;
            this.$q = $q;
            this.breadcrumbs = breadcrumbs;
            this.BrowserTitleService = BrowserTitleService;
            this.comments = comments;
            this.contentActions = contentActions;
            this.views = views;
            this.server = server;
            // Initial viz state
            $scope.viz = {
                path: $stateParams.path,
                isAdminViz: false,
                params: vizService.getVizParams(),
                siteUrlName: server.sessionSiteUrlName(),
                instanceId: vizService.getInstanceId(),
                isExplicitOriginalViz: vizService.getIsExplicitOriginalViz()
            };
            $scope.onVizSized = function () { return $scope.vizInitialized = true; };
            $scope.vizProps = {};
            $scope.commentsAndTagsInitialized = false;
            $scope.contentBreadcrumbUrl = function () { return breadcrumbs.siteUrl
                ? '#' + breadcrumbs.siteUrl
                : $state.href('main.site.content.site.projects'); };
            $scope.projectBreadcrumbUrl = function () { return breadcrumbs.projectUrl
                ? '#' + breadcrumbs.projectUrl
                : $state.href('main.site.content.project.workbooks', { id: $scope.vizProps.view.workbook.project.id }); };
            $scope.workbookBreadcrumbUrl = function () { return breadcrumbs.workbookUrl
                ? '#' + breadcrumbs.workbookUrl
                : $state.href('main.site.content.workbook.views', { id: $scope.vizProps.view.workbook.id }); };
            $scope.addFavorite = function () { return Favorites.addView($scope.vizProps.view); };
            $scope.removeFavorite = function () { return Favorites.removeView($scope.vizProps.view); };
            function getByPathError() {
                var vizErrorState = {
                    detailsLocKey: 'viewCannotBeAccessed',
                    redirectState: 'main.site.content.site.views',
                    redirectLocKey: 'backToViews'
                };
                $state.go('main.error', vizErrorState);
            }
            $scope.$watch('viz.path', function (newPath) {
                if (!newPath) {
                    getByPathError();
                    return;
                }
                vizService.updatePath($scope, { path: newPath });
                _this.hasError = false;
                views.getByPath(newPath)
                    .then(function (viewInfo) { return _this.loadNewViewInfo(viewInfo); })
                    .then(function () { return _this.$scope.commentsAndTagsInitialized = true; })
                    .fail(function (errorCode) {
                    // B153202 - If user does not have permission to view the viz they will get ViewNotFound error even if Guest does
                    // have permission to view. So, if ViewNotFound error, Guest is enabled for the server, and user is not site or
                    // server admin, automatically redirect to the embedded view in case Guest can view it (might still get a 404 page)
                    if (errorCode === VizPortal.CommonErrorCode.ViewNotFound && server.isGuestEnabled() && !server.isSessionSiteOrServerAdmin()) {
                        windowLocationService.navigateToWithoutAddingToHistory(vizService.getEmbeddedVizqlUrl());
                    }
                    else {
                        getByPathError();
                    }
                });
            });
            $scope.$watch('viz.instanceId', function (newInstanceId) {
                if (newInstanceId) {
                    vizService.updateInstanceId($scope, newInstanceId);
                }
            });
            $scope.$watch('viz.isExplicitOriginalViz', function (isExplicitOriginalViz) {
                vizService.updateExplicitOriginalViz($scope, isExplicitOriginalViz);
            });
            // TODO: comments and tags should be broken out of here into there own views and controllers
            $scope.changeTags = function (newTagsList) { return (_this.contentActions.setTagsOnView($scope.vizProps.view, newTagsList)
                .then(function (result) {
                return (result.errors && result.errors.length)
                    ? $q.reject(result)
                    : $q.when(result);
            })
                .then(function () { return views.getById($scope.vizProps.view.id).then(function (viewInfo) { return _this.loadNewViewInfo(viewInfo); }); })); };
            $scope.increaseCommentList = function () {
                _this.loadNewCommentInfo(VizViewerCtrl.COMMENT_PAGE_SIZE);
            };
            $scope.deleteComment = function (event, comment) {
                $scope.deletingCommentId = comment.id;
                deleteCommentActions.deleteComment(comment, event)
                    .then(function () {
                    $scope.comments.items = _.filter($scope.comments.items, function (item) { return (item.id !== comment.id); });
                    _this.loadNewCommentInfo();
                }).fin(function () { return $scope.deletingCommentId = ""; });
            };
            $scope.editComment = function (commentText, commentId) { return _this.comments.editComment(commentId, commentText)
                .then(function () { return _this.loadNewCommentInfo(); }); };
            $scope.createComment = function (newText) { return _this.comments.createComment($scope.vizProps.view.id, newText)
                .then(function () { return _this.loadNewCommentInfo(1); }); };
            $scope.canCurrentUserModifyComment = function (comment) {
                return server.isSessionSiteOrServerAdmin() || _this.isCurrentUserId(comment.owner.id);
            };
            $scope.isTouch = function () { return BrowserSupportService.isTouch(); };
            $scope.shouldShowWhoHasSeenThisView = function () {
                return $scope.vizProps.view && (server.isSessionSiteOrServerAdmin() ||
                    _this.isCurrentUserId($scope.vizProps.view.workbook.owner.id));
            };
            vizService.reloadOnLocationChange($scope);
        }
        VizViewerCtrl.prototype.isCurrentUserId = function (id) {
            // TODO: figure out what this parseInt is for. It shouldn't be necessary.
            return parseInt(this.server.sessionUserId(), 10) === parseInt(id, 10);
        };
        VizViewerCtrl.prototype.loadNewCommentInfo = function (numberOfAdditionalCommentToRequest) {
            var _this = this;
            if (numberOfAdditionalCommentToRequest === void 0) { numberOfAdditionalCommentToRequest = 0; }
            return this.comments.getSliceableCommentsForViz(this.$scope.vizProps.view.id)
                .getSlice(0, this.$scope.comments.items.length + numberOfAdditionalCommentToRequest)
                .then(function (comments) {
                _this.$scope.comments = comments;
            });
        };
        VizViewerCtrl.prototype.loadNewViewInfo = function (viewInfo) {
            var _this = this;
            //TODO: Update viz meta data like comments and tags
            this.BrowserTitleService.setVizTitle(viewInfo.name, viewInfo.workbook.name);
            this.$scope.vizProps.view = viewInfo;
            this.$scope.comments = new VizPortal.ListResult([]);
            this.breadcrumbs.workbookChanged(viewInfo.workbook);
            this.views.markRecentlyViewed(viewInfo.id);
            return this.$q.all([
                this.loadNewCommentInfo(VizViewerCtrl.COMMENT_PAGE_SIZE),
                this.views.actions(viewInfo.id).then(function (actions) {
                    _this.$scope.canSetTags = function () { return (actions.setTags); };
                    _this.$scope.allowedAction = actions;
                })
            ]);
        };
        VizViewerCtrl.$inject = [
            '$scope',
            '$state',
            '$q',
            '$stateParams',
            'BreadcrumbsService',
            'BrowserTitleService',
            'Comments',
            'ContentActions',
            'DeleteCommentActions',
            'Views',
            'ServerService',
            'VizService',
            'Favorites',
            'BrowserSupportService',
            'WindowLocationService'
        ];
        VizViewerCtrl.COMMENT_PAGE_SIZE = 10;
        return VizViewerCtrl;
    })();
    VizPortal.VizViewerCtrl = VizViewerCtrl;
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var SettingsCoordinatorCtrl = (function () {
        function SettingsCoordinatorCtrl(scope, $q, $translate, $state, toaster, server) {
            var _this = this;
            this.forms = [];
            scope.server = server;
            scope.forms = {
                save: function () {
                    var savePromises = _.map(_this.forms, function (form) { return form.save(); });
                    var onSavePromises = _.map(_this.forms, function (form) {
                        if (form.onSave)
                            return form.onSave();
                    });
                    return $q.all(savePromises)
                        .then(
                    // Save success
                    // Save success
                    function () { return $q.all(onSavePromises).then(function () { return toaster.pop({ type: VizPortal.ToastType.Info, text: $translate.instant('settingsUpdateSuccess') }); }); }, 
                    // At least one save failed
                    // At least one save failed
                    function (error) { return toaster.pop({ type: VizPortal.ToastType.Error, text: $translate.instant('settingsUpdateFailure') }); });
                },
                cancel: function () {
                    _.each(_this.forms, function (form) { return form.cancel(); });
                    toaster.pop({ type: VizPortal.ToastType.Info, text: $translate.instant('settingsReverted') });
                },
                isBusy: function () { return _.some(_this.forms, function (form) { return form.isBusy(); }); },
                isValid: function () { return _.every(_this.forms, function (form) { return form.isValid ? form.isValid() : true; }); },
                isFormUnchanged: function () { return _.every(_this.forms, function (form) { return form.isFormUnchanged(); }); },
                resetSettings: function () {
                    _.each(_this.forms, function (form) {
                        if (form.resetSettings)
                            form.resetSettings();
                    });
                }
            };
            scope.showResetSettingsBtn = function () { return _.some(_this.forms, function (form) { return !!form.resetSettings; }); };
        }
        SettingsCoordinatorCtrl.prototype.registerFormState = function (state) {
            this.forms.push(state);
        };
        SettingsCoordinatorCtrl.$inject = [
            '$scope',
            '$q',
            '$translate',
            '$state',
            'ToasterService',
            'ServerService'
        ];
        return SettingsCoordinatorCtrl;
    })();
    VizPortal.SettingsCoordinatorCtrl = SettingsCoordinatorCtrl;
    VizPortal.Module.instance().directive('tbSettingsCoordinator', function () {
        return {
            restrict: 'E',
            replace: true,
            transclude: true,
            templateUrl: 'settingsCoordinator.html',
            controller: SettingsCoordinatorCtrl
        };
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../controllers/ExtractTasksCtrl.ts" />
/// <reference path="../controllers/SubscriptionsCtrl.ts" />
/// <reference path="../services/ServerService.ts" />
var VizPortal;
(function (VizPortal) {
    var ConfigHelper;
    (function (ConfigHelper) {
        var defaultResolveExtractTasksContext = ['ServerService', function (ServerService) {
                return {
                    modifyExtractTasksPermission: ServerService.isSessionSiteOrServerAdmin(),
                    createExtractTaskFn: undefined
                };
            }];
        function addExtractTasksState($stateProvider, parentName, resolveExtractTasksContext) {
            $stateProvider
                .state(parentName + '.extractTasks', {
                url: '/extractRefreshes',
                templateUrl: 'extractTasks.html',
                resolve: {
                    subplace: ['place', function (place) { return place.subplace('extractTasks'); }],
                    extractTasksContext: resolveExtractTasksContext || defaultResolveExtractTasksContext
                },
                controller: VizPortal.ExtractTasksCtrl
            });
        }
        ConfigHelper.addExtractTasksState = addExtractTasksState;
        function addSubscriptionsState($stateProvider, parentName) {
            $stateProvider
                .state(parentName + '.subscriptions', {
                url: '/subscriptions',
                templateUrl: 'subscriptions.html',
                resolve: {
                    subplace: ['place', function (place) { return place.subplace('subscriptions'); }]
                },
                controller: VizPortal.SubscriptionsCtrl
            });
        }
        ConfigHelper.addSubscriptionsState = addSubscriptionsState;
        function addTaskSubstates($stateProvider, parentName) {
            addExtractTasksState($stateProvider, parentName);
            addSubscriptionsState($stateProvider, parentName);
        }
        ConfigHelper.addTaskSubstates = addTaskSubstates;
    })(ConfigHelper = VizPortal.ConfigHelper || (VizPortal.ConfigHelper = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var CreateSiteRequest = (function (_super) {
            __extends(CreateSiteRequest, _super);
            function CreateSiteRequest(params) {
                _super.call(this, 'createSite', params);
            }
            return CreateSiteRequest;
        })(ServerApi.Request);
        ServerApi.CreateSiteRequest = CreateSiteRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var DeleteSitesRequest = (function (_super) {
            __extends(DeleteSitesRequest, _super);
            function DeleteSitesRequest(params) {
                _super.call(this, 'deleteSites', params);
            }
            return DeleteSitesRequest;
        })(ServerApi.Request);
        ServerApi.DeleteSitesRequest = DeleteSitesRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../types/IGetItemsParams.ts" />
/// <reference path="../types/IGetItemsResult.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetSitesRequest = (function (_super) {
            __extends(GetSitesRequest, _super);
            function GetSitesRequest(params) {
                _super.call(this, 'getSites', params);
            }
            return GetSitesRequest;
        })(ServerApi.Request);
        ServerApi.GetSitesRequest = GetSitesRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var UpdateSiteAvailabilityRequest = (function (_super) {
            __extends(UpdateSiteAvailabilityRequest, _super);
            function UpdateSiteAvailabilityRequest(params) {
                _super.call(this, 'updateSiteAvailability', params);
            }
            return UpdateSiteAvailabilityRequest;
        })(ServerApi.Request);
        ServerApi.UpdateSiteAvailabilityRequest = UpdateSiteAvailabilityRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var UpdateSiteSettingsForServerAdminRequest = (function (_super) {
            __extends(UpdateSiteSettingsForServerAdminRequest, _super);
            function UpdateSiteSettingsForServerAdminRequest(params) {
                _super.call(this, 'updateSiteSettingsForServerAdmin', params);
            }
            return UpdateSiteSettingsForServerAdminRequest;
        })(ServerApi.Request);
        ServerApi.UpdateSiteSettingsForServerAdminRequest = UpdateSiteSettingsForServerAdminRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    (function (LongRunningActionState) {
        LongRunningActionState[LongRunningActionState["Queued"] = 0] = "Queued";
        LongRunningActionState[LongRunningActionState["InProgress"] = 1] = "InProgress";
        LongRunningActionState[LongRunningActionState["Complete"] = 2] = "Complete";
    })(VizPortal.LongRunningActionState || (VizPortal.LongRunningActionState = {}));
    var LongRunningActionState = VizPortal.LongRunningActionState;
    ;
    (function (LongRunningActionType) {
        LongRunningActionType[LongRunningActionType["RebuildSearchIndex"] = 0] = "RebuildSearchIndex";
        LongRunningActionType[LongRunningActionType["DeleteSites"] = 1] = "DeleteSites";
        LongRunningActionType[LongRunningActionType["AssignPermissionsToContents"] = 2] = "AssignPermissionsToContents";
    })(VizPortal.LongRunningActionType || (VizPortal.LongRunningActionType = {}));
    var LongRunningActionType = VizPortal.LongRunningActionType;
    ;
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/IActionInfo.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetActionInfoRequest = (function (_super) {
            __extends(GetActionInfoRequest, _super);
            function GetActionInfoRequest(params) {
                _super.call(this, 'getActionInfo', params);
            }
            return GetActionInfoRequest;
        })(ServerApi.Request);
        ServerApi.GetActionInfoRequest = GetActionInfoRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../models/ILongRunningAction.ts" />
/// <reference path="../ServerApi/requests/GetActionInfoRequest.ts" />
/// <reference path="../ServerApi/types/IActionResult.ts" />
var VizPortal;
(function (VizPortal) {
    var LongRunningActionService = (function () {
        function LongRunningActionService(server, pollService, $q, $timeout) {
            this.server = server;
            this.pollService = pollService;
            this.$q = $q;
            this.$timeout = $timeout;
            this.StringToStateDict = {
                queued: VizPortal.LongRunningActionState.Queued,
                inProgress: VizPortal.LongRunningActionState.InProgress,
                completed: VizPortal.LongRunningActionState.Complete
            };
            this.StringToTypeDict = {
                rebuildSearchIndex: VizPortal.LongRunningActionType.RebuildSearchIndex,
                deleteSites: VizPortal.LongRunningActionType.DeleteSites
            };
            // Inverted StringToTypeDict
            this.TypeToStringDict = Helpers.swapDict(this.StringToTypeDict);
        }
        /**
         * Get the last LongRunningAction of a type.
         * Clients should handle promise rejection.
         */
        LongRunningActionService.prototype.getLastByType = function (type) {
            var _this = this;
            var stringType = this.TypeToStringDict[type];
            return this.server.sendRequest(new VizPortal.ServerApi.GetActionInfoRequest({ actionType: stringType }))
                .then(function (result) {
                if (!result.actions || !result.actions.length) {
                    return null;
                }
                return _this.toLongRunningAction(result.actions[0]);
            });
        };
        /**
         * Track the progress of a LongRunningAction
         * The promise will be fullfilled with the LongRunningAction when it is complete
         * The promise will be rejected with ResourceNotFound if there is no action of given id
         */
        LongRunningActionService.prototype.trackProgress = function (id) {
            var _this = this;
            var isComplete = function (result) {
                if (!result.actions || !result.actions.length) {
                    return true;
                }
                else {
                    return _this.StringToStateDict[result.actions[0].state] === VizPortal.LongRunningActionState.Complete;
                }
            };
            var actionInfoPoller = this.pollService.poll(new VizPortal.ServerApi.GetActionInfoRequest({ actionId: id }), isComplete);
            var lrActionPromise = actionInfoPoller.promise
                .then(function (result) {
                if (!result.actions || !result.actions.length) {
                    return _this.$q.reject(VizPortal.ErrorReason.ResourceNotFound);
                }
                return _this.$q.when(_this.toLongRunningAction(result.actions[0]));
            })
                .progress(function (result) {
                return _this.toLongRunningAction(result.actions[0]);
            });
            // We have to return a new IPoller because type of the promise changes
            var lrActionPoller = {
                promise: lrActionPromise,
                cancel: actionInfoPoller.cancel
            };
            return lrActionPoller;
        };
        // Pass in an optional method to catch the poller if it's needed to cancel the request
        LongRunningActionService.prototype.startProgressTrackingForResult = function (getPoller) {
            var _this = this;
            if (getPoller === void 0) { getPoller = angular.noop; }
            return function (result) {
                if (!result.actionId) {
                    return _this.$q.reject(result);
                }
                var poller = _this.trackProgress(result.actionId);
                getPoller(poller);
                return poller.promise.then(function (longRunningAction) {
                    return _this.getLongRunningActionResult(longRunningAction);
                });
            };
        };
        //TODO: Remove this type hack, change ILongRunningAction to ITypedLongRunningAction
        LongRunningActionService.prototype.getLongRunningActionResult = function (action) {
            var typedAction = action;
            return typedAction.response;
        };
        // TODO: This is temporary to get this method to work with the current APIs
        //       This method should be removed once there are consistent responses for long running actions.
        LongRunningActionService.prototype.startProgressTrackingForResponse = function (getPoller) {
            var _this = this;
            if (getPoller === void 0) { getPoller = angular.noop; }
            return function (result) {
                var poller = _this.trackProgress(result.actionId);
                getPoller(poller);
                return poller.promise.then(function (longRunningAction) {
                    var response = _this.getLongRunningActionResult(longRunningAction);
                    return response ? response.result : undefined;
                });
            };
        };
        // Convert a server result to an ILongRunningAction
        LongRunningActionService.prototype.toLongRunningAction = function (actionInfo) {
            var action = {
                id: actionInfo.id,
                type: this.StringToTypeDict[actionInfo.type],
                state: this.StringToStateDict[actionInfo.state],
                percentComplete: actionInfo.percentComplete,
                response: actionInfo.response,
                succeeded: actionInfo.succeeded
            };
            return action;
        };
        // Used if a list is refreshed.  This is needed
        LongRunningActionService.prototype.delayResultForSolr = function () {
            var _this = this;
            return function (result) {
                return _this.$timeout(function () { return result; }, VizPortal.ErrorNotifyingServer.ResponseDelay);
            };
        };
        LongRunningActionService.$inject = ['ServerService', 'PollService', '$q', '$timeout'];
        return LongRunningActionService;
    })();
    VizPortal.LongRunningActionService = LongRunningActionService;
    VizPortal.Module.instance().service('LongRunningActionService', LongRunningActionService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/RequestHelper.ts" />
/// <reference path="../helpers/ResultHelper.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/CreateSiteRequest.ts" />
/// <reference path="../ServerApi/requests/DeleteSitesRequest.ts" />
/// <reference path="../ServerApi/requests/GetSitesRequest.ts" />
/// <reference path="../ServerApi/requests/UpdateSiteAvailabilityRequest.ts" />
/// <reference path="../ServerApi/requests/UpdateSiteSettingsForServerAdminRequest.ts" />
/// <reference path="../ServerApi/requests/UpdateSiteSettingsForSiteAdminRequest.ts" />
/// <reference path="../ServerApi/types/ISite.ts" />
/// <reference path="../ServerApi/types/ISiteSettingsForSiteAdmin.ts" />
/// <reference path="../services/LongRunningActionService.ts" />
/// <reference path="../services/ServerService.ts" />
/// <reference path="Resource.ts" />
var VizPortal;
(function (VizPortal) {
    var SiteAvailabilityState = (function () {
        function SiteAvailabilityState() {
        }
        SiteAvailabilityState.ACTIVE = 'active';
        SiteAvailabilityState.SUSPENDED = 'suspended';
        SiteAvailabilityState.LOCKED = 'locked'; // importing or exporting
        return SiteAvailabilityState;
    })();
    VizPortal.SiteAvailabilityState = SiteAvailabilityState;
    var Sites = (function (_super) {
        __extends(Sites, _super);
        function Sites($q, $translate, $timeout, LongRunningActionService, errorNotifyingServer, sizeFilter, FetcherFactory) {
            _super.call(this, FetcherFactory.getServerResourceFetcher(VizPortal.ServerApi.GetSitesRequest, function (result) { return result.sites; }));
            this.$q = $q;
            this.$translate = $translate;
            this.$timeout = $timeout;
            this.LongRunningActionService = LongRunningActionService;
            this.errorNotifyingServer = errorNotifyingServer;
            this.sizeFilter = sizeFilter;
        }
        Sites.prototype.getSiteSettingsForServerAdminById = function (id) {
            return this.errorNotifyingServer.sendRequest(new VizPortal.ServerApi.GetDetailRequest('getSiteSettingsForServerAdmin', id));
        };
        Sites.prototype.getSiteSettingsForSiteAdminById = function (id) {
            return this.errorNotifyingServer.sendRequest(new VizPortal.ServerApi.GetDetailRequest('getSiteSettingsForSiteAdmin', id));
        };
        Sites.prototype.getCurrentSiteSettingsForServerAdmin = function () {
            return this.getSiteSettingsForServerAdminById(this.errorNotifyingServer.getServerService().sessionSiteId());
        };
        Sites.prototype.getCurrentSiteSettingsForSiteAdmin = function () {
            return this.getSiteSettingsForSiteAdminById(this.errorNotifyingServer.getServerService().sessionSiteId());
        };
        Sites.prototype.updateSiteAvailability = function (ids, availability) {
            return this.errorNotifyingServer.sendRequests(VizPortal.RequestHelper.buildRequests(ids, function (idsBlock) { return new VizPortal.ServerApi.UpdateSiteAvailabilityRequest({
                ids: idsBlock,
                availability: availability
            }); }), VizPortal.ResultHelper.combineResults);
        };
        Sites.prototype.suspend = function (ids) {
            return this.updateSiteAvailability(ids, SiteAvailabilityState.SUSPENDED);
        };
        Sites.prototype.activate = function (ids) {
            return this.updateSiteAvailability(ids, SiteAvailabilityState.ACTIVE);
        };
        Sites.prototype.updateSiteSettingsForServerAdmin = function (id, settings, subscriptionSettings) {
            var params = {
                id: id,
                settings: settings
            };
            if (subscriptionSettings) {
                params.subscriptionSettings = subscriptionSettings;
            }
            return this.errorNotifyingServer.sendRequest(new VizPortal.ServerApi.UpdateSiteSettingsForServerAdminRequest(params));
        };
        Sites.prototype.updateSiteSettingsForSiteAdmin = function (id, siteAdminSettings) {
            var params = {
                id: id,
                siteAdminSettings: siteAdminSettings
            };
            return this.errorNotifyingServer.sendRequest(new VizPortal.ServerApi.UpdateSiteSettingsForSiteAdminRequest(params));
        };
        Sites.prototype.createSite = function (settings, siteAdminSettings, subscriptionSettings) {
            var _this = this;
            var params = {
                settings: settings
            };
            if (siteAdminSettings) {
                params.siteAdminSettings = siteAdminSettings;
            }
            if (subscriptionSettings) {
                params.subscriptionSettings = subscriptionSettings;
            }
            return this.errorNotifyingServer.sendRequestAndDelay(new VizPortal.ServerApi.CreateSiteRequest(params))
                .then(function (result) {
                if (result.errors) {
                    return _this.$q.reject(result.errors);
                }
            });
        };
        Sites.prototype.del = function (ids) {
            var _this = this;
            // Note: We don't send multiple "delete sites" requests because the result is a long running action,
            // and tracking more than one long running action at once would be complicated.
            // Since we don't, attempts to delete more than the server-allowed maximum will fail.
            // This isn't so bad, because the maximum is 1000, and that's a *lot* of sites
            // to try to delete all at once.  It's likely the server can't handle that anyway.
            return this.errorNotifyingServer.sendRequest(new VizPortal.ServerApi.DeleteSitesRequest({
                ids: ids
            })).then(function (result) {
                if (result.actionId) {
                    return _this.LongRunningActionService.trackProgress(result.actionId).promise;
                }
                else {
                    return _this.$q.reject(VizPortal.ErrorReason.Unknown);
                }
            }).then(function (action) { return _this.$timeout(function () { return action; }, VizPortal.ErrorNotifyingServer.ResponseDelay); });
        };
        Sites.prototype.errorMessage = function (code, site) {
            switch (code) {
                case VizPortal.SiteSettingsErrorCode.SiteNotFound:
                    return this.$translate.instant('siteSettingsFailedSiteNotFound');
                case VizPortal.SiteSettingsErrorCode.SiteNameIsEmptyOrNull:
                    return this.$translate.instant('siteSettingsFailedSiteNameIsEmptyOrNull');
                case VizPortal.SiteSettingsErrorCode.SiteAdminCannotAddUsersButUserQuotaIsSet:
                    return this.$translate.instant('siteSettingsFailedSiteAdminCannotAddUsersButUserQuotaIsSet');
                case VizPortal.SiteSettingsErrorCode.InvalidUserQuotaOrStorageQuota:
                    return this.$translate.instant('siteSettingsFailedInvalidUserQuotaOrStorageQuota');
                case VizPortal.SiteSettingsErrorCode.UserQuotaGreaterThanServerLicenseLimit:
                    return this.$translate.instant('siteSettingsFailedUserQuotaGreaterThanServerLicenseLimit');
                case VizPortal.SiteSettingsErrorCode.InvalidCustomEmailAddress:
                    return this.$translate.instant('siteSettingsFailedInvalidCustomEmailAddress');
                case VizPortal.SiteSettingsErrorCode.SiteNameOrUrlNameAlreadyExists:
                    return this.$translate.instant('siteSettingsFailedSiteNameOrUrlNameAlreadyExists');
                case VizPortal.SiteSettingsErrorCode.SiteSubscriptionsSetWithDisabledServerSubscriptions:
                    return this.$translate.instant('siteSettingsFailedSiteSubscriptionsSetWithDisabledServerSubscriptions');
                case VizPortal.SiteSettingsErrorCode.AttemptedToUpdateDefaultSiteUrlName:
                    return this.$translate.instant('siteSettingsFailedAttemptedToUpdateDefaultSiteUrlName');
                case VizPortal.SiteSettingsErrorCode.AttemptedToSuspendDefaultSite:
                    return this.$translate.instant('siteSettingsFailedAttemptedToSuspendDefaultSite');
                case VizPortal.SiteSettingsErrorCode.SiteNameTooLong:
                    return this.$translate.instant('siteSettingsFailedSiteNameTooLong');
                case VizPortal.SiteSettingsErrorCode.SiteUrlNameTooLong:
                    return this.$translate.instant('siteSettingsFailedSiteUrlNameTooLong');
                case VizPortal.SiteSettingsErrorCode.StorageQuotaLessThanStorageUsed:
                    return this.$translate.instant('siteSettingsFailedStorageQuotaLessThanStorageUsed', {
                        STORAGE_USED: this.sizeFilter(site.storageUsedBytes)
                    });
                default:
                    return this.$translate.instant('settingsUpdateFailure');
            }
        };
        Sites.$inject = [
            '$q',
            '$translate',
            '$timeout',
            'LongRunningActionService',
            'ErrorNotifyingServer',
            'sizeFilter',
            'FetcherFactory'
        ];
        return Sites;
    })(VizPortal.Resource);
    VizPortal.Sites = Sites;
    VizPortal.Module.instance().service('Sites', Sites);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/Order.ts" />
/// <reference path="../models/ContentTypes.ts" />
/// <reference path="../models/IPlace.ts" />
/// <reference path="../resources/Sites.ts" />
/// <reference path="../ServerApi/types/IOrderClause.ts" />
var VizPortal;
(function (VizPortal) {
    var SitesPlace = (function () {
        function SitesPlace($location, Sites) {
            var _this = this;
            this.$location = $location;
            this.Sites = Sites;
            this.urlParamsFn = function () { return _this.$location.search(); };
        }
        SitesPlace.prototype.create = function () {
            var place = new VizPortal.Place();
            place.addSubplace(VizPortal.Subplace.create('sites', VizPortal.SitesContentType, this.Sites, this.urlParamsFn));
            return place;
        };
        SitesPlace.$inject = [
            '$location',
            'Sites'
        ];
        return SitesPlace;
    })();
    VizPortal.SitesPlace = SitesPlace;
    VizPortal.Module.instance().service('SitesPlace', SitesPlace);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetMastheadNotificationsRequest = (function (_super) {
            __extends(GetMastheadNotificationsRequest, _super);
            function GetMastheadNotificationsRequest() {
                _super.call(this, 'getMastheadNotifications', {});
            }
            return GetMastheadNotificationsRequest;
        })(ServerApi.Request);
        ServerApi.GetMastheadNotificationsRequest = GetMastheadNotificationsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/GetMastheadNotificationsRequest.ts" />
/// <reference path="../FeatureFlags.ts" />
var VizPortal;
(function (VizPortal) {
    var MastheadNotifications = (function () {
        function MastheadNotifications($sce, $q, toaster, ServerService) {
            this.$sce = $sce;
            this.$q = $q;
            this.toaster = toaster;
            this.ServerService = ServerService;
            this.notificationsShown = false;
        }
        MastheadNotifications.prototype.showNotificationsIfEnabled = function () {
            var _this = this;
            if (this.notificationsShown) {
                return this.$q.when(null);
            }
            return this.fetchNotificationsUrl().then(function (url) {
                if (url) {
                    if (VizPortal.FeatureFlags.reactToasts) {
                        var contentComponent = React.createClass({
                            render: function () {
                                return React.DOM.iframe({
                                    src: this.$sce.trustAsResourceUrl(url),
                                    style: {
                                        verticalAlign: 'top',
                                        width: '100%',
                                        height: '36px',
                                        frameborder: '0',
                                        scrolling: 'no'
                                    }
                                });
                            }
                        });
                        _this.toaster.pop({
                            type: VizPortal.ToastType.External,
                            content: React.createElement(contentComponent, {}),
                            timeoutDelay: VizPortal.ToasterService.NoTimeout
                        });
                    }
                    else {
                        _this.toaster.pop({
                            type: VizPortal.ToastType.External,
                            templateUrl: 'mastheadNotificationToast.html',
                            data: {
                                contentUrl: _this.$sce.trustAsResourceUrl(url)
                            },
                            timeout: VizPortal.ToasterService.NoTimeout
                        });
                    }
                }
            }).fin(function () { return _this.notificationsShown = true; }); // Suppress in case of future $state.hardReload()
        };
        MastheadNotifications.prototype.fetchNotificationsUrl = function () {
            return this.ServerService.sendRequest(new VizPortal.ServerApi.GetMastheadNotificationsRequest())
                .then(function (result) { return result.contentUrl; });
        };
        MastheadNotifications.$inject = ['$sce', '$q', 'ToasterService', 'ServerService'];
        return MastheadNotifications;
    })();
    VizPortal.MastheadNotifications = MastheadNotifications;
    VizPortal.Module.instance().service('MastheadNotifications', MastheadNotifications);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetPostLoginNotificationsRequest = (function (_super) {
            __extends(GetPostLoginNotificationsRequest, _super);
            function GetPostLoginNotificationsRequest() {
                _super.call(this, 'getPostLoginNotifications', {});
            }
            return GetPostLoginNotificationsRequest;
        })(ServerApi.Request);
        ServerApi.GetPostLoginNotificationsRequest = GetPostLoginNotificationsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/GetPostLoginNotificationsRequest.ts" />
var VizPortal;
(function (VizPortal) {
    var PostLoginNotifications = (function () {
        function PostLoginNotifications($sce, $q, modal, $rootScope, ServerService) {
            this.$sce = $sce;
            this.$q = $q;
            this.modal = modal;
            this.$rootScope = $rootScope;
            this.ServerService = ServerService;
            this.notificationsShown = false;
            this.notificationsEnabled = false;
        }
        PostLoginNotifications.prototype.enableNotifications = function () {
            this.notificationsEnabled = true;
        };
        PostLoginNotifications.prototype.showNotificationsIfEnabled = function () {
            var _this = this;
            if (!this.notificationsEnabled || this.notificationsShown) {
                return this.$q.when(null);
            }
            return this.fetchNotificationsUrl().then(function (url) {
                if (url) {
                    var scope = _this.$rootScope.$new();
                    scope.notificationsUrl = _this.$sce.trustAsResourceUrl(url);
                    return _this.modal.open({
                        scope: scope,
                        templateUrl: 'postLoginNotifications.html',
                        size: VizPortal.ModalSize.fitToContent
                    }).result.fin(function () { return scope.$destroy(); });
                }
            }).fin(function () { return _this.notificationsShown = true; }); // Suppress in case of future $state.hardReload()
        };
        PostLoginNotifications.prototype.fetchNotificationsUrl = function () {
            return this.ServerService.sendRequest(new VizPortal.ServerApi.GetPostLoginNotificationsRequest())
                .then(function (result) { return result.contentUrl; });
        };
        PostLoginNotifications.$inject = ['$sce', '$q', 'ModalService', '$rootScope', 'ServerService'];
        return PostLoginNotifications;
    })();
    VizPortal.PostLoginNotifications = PostLoginNotifications;
    VizPortal.Module.instance().service('PostLoginNotifications', PostLoginNotifications);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.SiteUrlNameCapturingRegex = /^\/site\/([^\/]+)/;
    /**
     * A wrapper around UI-Router's UrlMatcher. UI-Router doesn't have built-in functionality
     * to support site prefixes in the way that we'd like, so we need this custom UrlMatcher.
     *
     * This enables:
     *
     *     $state.go('sitestate', {siteUrlName: 'blah'}) to create url '/site/blah/...'
     *     url '/site/blah/...' to make $stateParams.siteUrlName === 'blah'
     *
     * For more detailed documentation on this class and its methods, see:
     * http://angular-ui.github.io/ui-router/site/#/api/ui.router.util.type:UrlMatcher
     */
    var SiteUrlMatcher = (function () {
        function SiteUrlMatcher(matcher) {
            this.matcher = matcher;
        }
        /**
         * Add a pattern to the end of this pattern, returning a new SiteUrlMatcher
         */
        SiteUrlMatcher.prototype.concat = function (pattern) {
            return new SiteUrlMatcher(this.matcher.concat(pattern));
        };
        /**
         * Extracts site into siteUrlName if the site is present
         */
        SiteUrlMatcher.prototype.exec = function (path, searchParams) {
            var siteUrlName = '';
            var match = path.match(VizPortal.SiteUrlNameCapturingRegex);
            // If site is present, extract it
            if (match) {
                siteUrlName = match[1];
                // Get rest of the string without the site part
                path = path.split(match[0])[1];
            }
            var urlParams = this.matcher.exec(path, searchParams);
            if (urlParams !== null) {
                urlParams[VizPortal.UrlParamKeys.SiteUrlName] = siteUrlName;
            }
            return urlParams;
        };
        /**
         * Return unsorted array of parameter names
         */
        SiteUrlMatcher.prototype.parameters = function () {
            var params = this.matcher.parameters();
            params.push(VizPortal.UrlParamKeys.SiteUrlName);
            return params;
        };
        /**
         * Create a url with the site, if a site is given
         */
        SiteUrlMatcher.prototype.format = function (values) {
            var prefix = '';
            // If a truthy value, add to site prefix
            if (values[VizPortal.UrlParamKeys.SiteUrlName]) {
                prefix = '/site/' + values[VizPortal.UrlParamKeys.SiteUrlName];
            }
            // Remove property so matcher.format doesn't add a query string param
            if (_.has(values, VizPortal.UrlParamKeys.SiteUrlName)) {
                values = angular.copy(values);
                delete values[VizPortal.UrlParamKeys.SiteUrlName];
            }
            return prefix + this.matcher.format(values);
        };
        return SiteUrlMatcher;
    })();
    VizPortal.SiteUrlMatcher = SiteUrlMatcher;
    /**
     * Can be used in config block or by other providers under the
     * name "SiteUrlMatcherFactoryProvider".
     */
    var SiteUrlMatcherFactory = (function () {
        function SiteUrlMatcherFactory($urlMatcherFactory) {
            this.$urlMatcherFactory = $urlMatcherFactory;
        }
        SiteUrlMatcherFactory.prototype.compile = function (pattern) {
            return new SiteUrlMatcher(this.$urlMatcherFactory.compile(pattern));
        };
        SiteUrlMatcherFactory.prototype.$get = function () {
            return this;
        };
        SiteUrlMatcherFactory.$inject = ['$urlMatcherFactoryProvider'];
        return SiteUrlMatcherFactory;
    })();
    VizPortal.SiteUrlMatcherFactory = SiteUrlMatcherFactory;
    // Register as a provider to be available to other providers.
    VizPortal.Module.instance().provider('SiteUrlMatcherFactory', SiteUrlMatcherFactory);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/IDataConnectionAuthInfo.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetDataConnectionAuthInfoRequest = (function (_super) {
            __extends(GetDataConnectionAuthInfoRequest, _super);
            function GetDataConnectionAuthInfoRequest(params) {
                _super.call(this, 'getDataConnectionAuthInfo', params);
            }
            return GetDataConnectionAuthInfoRequest;
        })(ServerApi.Request);
        ServerApi.GetDataConnectionAuthInfoRequest = GetDataConnectionAuthInfoRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetLastActiveDirectoryGroupsSyncTimeRequest = (function (_super) {
            __extends(GetLastActiveDirectoryGroupsSyncTimeRequest, _super);
            function GetLastActiveDirectoryGroupsSyncTimeRequest(params) {
                if (params === void 0) { params = {}; }
                _super.call(this, 'getLastActiveDirectoryGroupsSyncTime', params);
            }
            return GetLastActiveDirectoryGroupsSyncTimeRequest;
        })(ServerApi.Request);
        ServerApi.GetLastActiveDirectoryGroupsSyncTimeRequest = GetLastActiveDirectoryGroupsSyncTimeRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="libs.ts" />
/// <reference path="../app/IMainScope.ts" />
/// <reference path="../app/IPlaceTitleScope.ts" />
/// <reference path="../app/UrlParamKeys.ts" />
/// <reference path="controllers/AddSiteCtrl.ts" />
/// <reference path="controllers/AdminVizViewerCtrl.ts" />
/// <reference path="controllers/AuthenticateConnectionCtrl.ts" />
/// <reference path="controllers/ContentSubplaceCtrl.ts" />
/// <reference path="controllers/ErrorCtrl.ts" />
/// <reference path="controllers/ExtractTasksCtrl.ts" />
/// <reference path="controllers/GroupDetailsCtrl.ts" />
/// <reference path="controllers/GroupPlaceCtrl.ts" />
/// <reference path="controllers/GroupsPlaceCtrl.ts" />
/// <reference path="controllers/GroupUsersSubplaceCtrl.ts" />
/// <reference path="controllers/HomeCtrl.ts" />
/// <reference path="controllers/InitializationCtrl.ts" />
/// <reference path="controllers/LicensesCtrl.ts" />
/// <reference path="controllers/LoginCtrl.ts" />
/// <reference path="controllers/LoginSitePickerCtrl.ts" />
/// <reference path="controllers/RevisionHistoryDialogCtrl.ts" />
/// <reference path="controllers/SigninErrorCtrl.ts" />
/// <reference path="controllers/ScheduleCtrl.ts" />
/// <reference path="controllers/SchedulesCtrl.ts" />
/// <reference path="controllers/ServerStatusCtrl.ts" />
/// <reference path="controllers/ServerUserPlaceCtrl.ts" />
/// <reference path="controllers/ServerUsersPlaceCtrl.ts" />
/// <reference path="controllers/ServerUserSettingsSubplaceCtrl.ts" />
/// <reference path="controllers/SetBrowserTitleCtrl.ts" />
/// <reference path="controllers/SignedOutCtrl.ts" />
/// <reference path="controllers/SiteAuthenticationCtrl.ts" />
/// <reference path="controllers/SitesPlaceCtrl.ts" />
/// <reference path="controllers/SiteUsersPlaceCtrl.ts" />
/// <reference path="controllers/SubscriptionsCtrl.ts" />
/// <reference path="controllers/TasksCtrl.ts" />
/// <reference path="controllers/VizViewerCtrl.ts" />
/// <reference path="directives/tbSettingsCoordinator.ts" />
/// <reference path="FeatureFlags.ts" />
/// <reference path="helpers/ConfigHelper.ts" />
/// <reference path="helpers/SubplaceCountsHelper.ts" />
/// <reference path="models/ContentFilters.ts" />
/// <reference path="models/SitesPlace.ts" />
/// <reference path="Module.ts" />
/// <reference path="services/DisplaySettingsService.ts" />
/// <reference path="services/GettingStartedNotifications.ts" />
/// <reference path="services/LicensesService.ts" />
/// <reference path="services/MastheadNotifications.ts" />
/// <reference path="services/PostLoginNotifications.ts" />
/// <reference path="services/RebuildSearchIndexService.ts" />
/// <reference path="services/ServerInfoService.ts" />
/// <reference path="services/ServerService.ts" />
/// <reference path="services/SiteUrlMatcherFactory.ts" />
/// <reference path="ServerApi/requests/GetDataConnectionAuthInfoRequest.ts" />
/// <reference path="ServerApi/requests/getLastActiveDirectoryGroupsSyncTimeRequest.ts" />
/// <reference path="ServerApi/requests/GetSiteSAMLConfigurationRequest.ts" />
/// <reference path="ServerApi/requests/UpdateDisplayModeRequest.ts" />
/// <reference path="ServerApi/types/ISessionInfo.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().config([
        '$httpProvider',
        '$sceProvider',
        '$stateProvider',
        '$urlRouterProvider',
        'SiteUrlMatcherFactoryProvider',
        'ApiPrefix',
        function ($httpProvider, $sceProvider, $stateProvider, $urlRouterProvider, siteUrlMatcherFactory, ApiPrefix) {
            // Make ui-router's internal state object accessible on the state config.
            // This is hackery, but community endorsed hackery. To limit our dependence
            // on this, the $$state object should never be accessed by anything outside
            // of the StateWrapperService, so it should not be added to the typescript
            // definition
            $stateProvider.decorator('parent', function (state, parent) {
                state.self.$$state = state;
                // B147816. This adds a resolve to every state that waits for all pending session info requests (like a
                // switch site) to finish before continuing with the state transition. We don't want to let the
                // controllers act on stale session data.
                var getSessionInfoPromise = ['ServerService', function (server) {
                        // Swallow any errors. We just want to know when it's done.
                        return server.getSessionInfoPromise().fail(angular.noop);
                    }];
                var resolve = _.extend({ getSessionInfoPromise: getSessionInfoPromise }, state.self.resolve);
                state.self.resolve = resolve;
                state.resolve = state.self.resolve;
                return parent(state);
            });
            $httpProvider.interceptors.push(function () {
                var apiRequestRegex = new RegExp('^' + ApiPrefix);
                return {
                    request: function (config) {
                        var isGet = config.method === 'GET';
                        var isInline = /^inline_/.test(config.url);
                        var isApi = apiRequestRegex.test(config.url);
                        if (isGet && !isInline && !isApi) {
                            var isHtml = /\.html$/.test(config.url);
                            var separator = (config.url.indexOf('?') >= 0) ? '&' : '?';
                            config.url = config.url + separator + VizPortal.BuildId;
                            if (VizPortal.L10n.language && isHtml) {
                                // Only prefix the request with the language if:
                                // - We have a valid language.
                                // - The request is a GET for an html file.
                                // - It's not a request for an inlined template.
                                config.url = VizPortal.L10n.language + '/' + config.url;
                            }
                        }
                        return config;
                    }
                };
            });
            // Angular does not support SCE on IE7-.
            // This browser detection matches the check that Angular performs internally.
            if (navigator.userAgent.match(/msie/i) && document.documentMode > 0 && document.documentMode < 8) {
                $sceProvider.enabled(false);
            }
            var siteUrl = function (url) { return siteUrlMatcherFactory.compile(url); };
            // Create a redirect handler for a site url. See $urlRouterProvider documentation for details
            var siteUrlRedirect = function (url) { return ['$match', function ($match) { return siteUrl(url).format($match); }]; };
            $urlRouterProvider
                .when(siteUrl('/groups/{id}'), siteUrlRedirect('/groups/{id}/users'))
                .when(siteUrl('/user/{domainName}/{username}'), siteUrlRedirect('/user/{domainName}/{username}/workbooks'))
                .when(siteUrl('/user/{domainName}/{username}/'), siteUrlRedirect('/user/{domainName}/{username}/workbooks'))
                .when(siteUrl('/tasks'), siteUrlRedirect('/tasks/extractRefreshes'))
                .when('/server', '/server/status')
                .when('/server/user/{domain}/{username}', '/server/user/{domain}/{username}/settings')
                .when('/server/user/{domain}/{username}/', '/server/user/{domain}/{username}/settings')
                .when('/server/tasks', '/server/tasks/extractRefreshes')
                .otherwise(function ($injector) {
                // Handle nonsensical URLs
                if ($injector.get('ServerService').inSession()) {
                    $injector.get('$state').go('main.error');
                }
                else {
                    // If not signed in, remember the redirect so they get an error page after sign in
                    var redirect = $injector.get('$location').url();
                    $injector.get('$state').go('login.authenticate', { redirect: redirect });
                }
            });
            /**
             * State Configurations
             */
            // B147151. Ideally we would process and remove the saml query param earlier in the flow (i.e. run.ts), but
            // we can't change the url through angular's $location object then because that disrupts the bootstrapping
            // process. We would have to parse and modify the window.location directly, and that's a non-trivial task.
            var processAndRemoveSamlQueryParam = ['$location', 'GettingStartedNotifications', 'PostLoginNotifications', function ($location, GettingStartedNotifications, PostLoginNotifications) {
                    var search = $location.search();
                    if (_.has(search, VizPortal.UrlParamKeys.IsFromSaml)) {
                        if (Helpers.BooleanQueryParamRegex.test(search[VizPortal.UrlParamKeys.IsFromSaml])) {
                            GettingStartedNotifications.enableNotifications();
                            PostLoginNotifications.enableNotifications();
                        }
                        $location.search(VizPortal.UrlParamKeys.IsFromSaml, null);
                    }
                }];
            // Login
            $stateProvider
                .state('login', {
                abstract: true,
                template: '<div ui-view></div>',
                data: {
                    authLevel: VizPortal.AuthLevel.Anonymous
                },
                onEnter: processAndRemoveSamlQueryParam
            })
                .state('login.interstitial', {
                template: '<tb:signing-in></tb:signing-in>'
            })
                .state('login.authenticate', {
                url: '/signin?redirect&error&externalRedirect&site&closePopupWhenDone&disableAutoSignin',
                templateUrl: 'login.html',
                controller: VizPortal.LoginCtrl
            })
                .state('login.signedOut', {
                url: '/signedOut',
                templateUrl: 'signedOut.html',
                controller: VizPortal.SignedOutCtrl
            })
                .state('login.site', {
                url: '/site',
                templateUrl: 'loginSitePicker.html',
                data: {
                    authLevel: VizPortal.AuthLevel.Authenticated
                },
                controller: VizPortal.LoginSitePickerCtrl
            })
                .state('login.init', {
                templateUrl: 'initialization.html',
                controller: VizPortal.InitializationCtrl
            })
                .state('login.untrusted', {
                templateUrl: 'untrusted.html'
            })
                .state('login.error', {
                url: '/error',
                templateUrl: 'errorNoSite.html'
            })
                .state('login.error.errorCode', {
                url: '/{errorCode}',
                templateUrl: 'error.html',
                controller: VizPortal.ErrorCtrl
            })
                .state('login.error.noSite', {
                templateUrl: 'error.html',
                params: [
                    VizPortal.ErrorCtrl.StateParamKeys.DetailsLocKey,
                    VizPortal.ErrorCtrl.StateParamKeys.RedirectState,
                    VizPortal.ErrorCtrl.StateParamKeys.RedirectLocKey
                ],
                controller: VizPortal.ErrorCtrl
            })
                .state('login.error.auth', {
                url: '/signin/{errorCode}?redirectPath',
                templateUrl: 'errorSignIn.html',
                controller: VizPortal.SignInErrorCtrl
            });
            // Connection Authentication
            $stateProvider
                .state('authenticate', {
                url: '/authenticate?path&attributes&sessionId&isPreview&closePopupWhenDone',
                templateUrl: 'authenticateConnection.html',
                resolve: {
                    authInfo: [
                        '$stateParams', 'ServerService',
                        function ($stateParams, serverService) {
                            return serverService.sendRequest(new VizPortal.ServerApi.GetDataConnectionAuthInfoRequest($stateParams));
                        }
                    ]
                },
                controller: VizPortal.AuthenticateConnectionCtrl,
                data: {
                    authLevel: VizPortal.AuthLevel.Anonymous
                }
            });
            // Main
            $stateProvider
                .state('main', {
                abstract: true,
                url: '',
                templateUrl: 'main.html',
                data: {
                    authLevel: VizPortal.AuthLevel.Authenticated
                },
                onEnter: processAndRemoveSamlQueryParam,
                controller: ['$scope', 'DisplaySettingsService', function ($scope, DisplaySettingsService) {
                        DisplaySettingsService.updateDisplayModeFromUrl();
                        DisplaySettingsService.maybeUpdateDisplayModeFromSession();
                        $scope.displaySettings = DisplaySettingsService;
                        $scope.$on('$locationChangeSuccess', function () {
                            DisplaySettingsService.updateDisplayModeFromUrl();
                            DisplaySettingsService.updateShowFilterPanel();
                        });
                        $scope.$watch(function () { return $scope.displaySettings.displayMode; }, function (newValue, oldValue) {
                            if (newValue !== oldValue) {
                                DisplaySettingsService.saveDisplayMode();
                            }
                        });
                    }]
            });
            $stateProvider
                .state('main.site', {
                abstract: true,
                // site url is optional. Grab it if it's there.
                url: siteUrlMatcherFactory.compile(''),
                template: '<div ui-view></div>',
                onEnter: ['PostLoginNotifications', 'GettingStartedNotifications', 'MastheadNotifications', function (PostLoginNotifications, GettingStartedNotifications, MastheadNotifications) {
                        // See http://mytableau/display/devft/Vizportal+Online+Notifications+Spec
                        PostLoginNotifications.showNotificationsIfEnabled()
                            .fin(function () { return GettingStartedNotifications.showNotificationsIfEnabled(); })
                            .fin(function () { return MastheadNotifications.showNotificationsIfEnabled(); });
                    }]
            });
            $stateProvider
                .state('main.server', {
                abstract: true,
                url: '/server',
                template: '<div ui-view></div>',
                data: {
                    authLevel: VizPortal.AuthLevel.ServerAdmin
                }
            })
                .state('main.server.status', {
                url: '/status',
                templateUrl: 'serverStatus.html',
                resolve: {
                    hosts: ['ServerInfoService', function (serverInfo) { return serverInfo.fetch(); }],
                    rebuildSearchIndexCurrentJob: ['RebuildSearchIndexService', function (rebuildSearchIndexService) {
                            return rebuildSearchIndexService.handleCurrentJob();
                        }]
                },
                controller: VizPortal.ServerStatusCtrl
            })
                .state('main.server.settings', {
                templateUrl: 'serverSettingsTabs.html',
                abstract: true,
                controller: ['$scope', 'ServerService',
                    function ($scope, server) {
                        $scope.server = server;
                    }]
            })
                .state('main.server.settings.serverSettings', {
                url: '/settings',
                templateUrl: 'serverSettings.html',
                data: {
                    authLevel: VizPortal.AuthLevel.ServerAdmin
                },
                resolve: {
                    serverSettings: ['ServerSettings', function (ServerSettings) { return ServerSettings.fetch(); }],
                    lastActiveDirectoryGroupsSyncTime: ['ServerService', function (serverService) {
                            return serverService.sendRequest(new VizPortal.ServerApi.GetLastActiveDirectoryGroupsSyncTimeRequest())
                                .then(function (result) { return result.time; });
                        }],
                    siteSettingsForServerAdmin: ['ServerService', 'Sites', function (ServerService, Sites) {
                            // Resolve the sessionInfoPromise in case we are coming from a state
                            // where the sessionInfo might be stale (e.g., logged into an arbitrary site on login)
                            return ServerService.getSessionInfoPromise().then(function () { return Sites.getCurrentSiteSettingsForServerAdmin(); });
                        }],
                    siteSettingsForSiteAdmin: ['ServerService', 'Sites', function (ServerService, Sites) {
                            // Resolve the sessionInfoPromise in case we are coming from a state
                            // where the sessionInfo might be stale (e.g., logged into an arbitrary site on login)
                            return ServerService.getSessionInfoPromise().then(function () { return Sites.getCurrentSiteSettingsForSiteAdmin(); });
                        }]
                },
                controller: ['$scope',
                    'BrowserTitleService',
                    'ServerService',
                    'siteSettingsForServerAdmin',
                    'siteSettingsForSiteAdmin',
                    'serverSettings',
                    'lastActiveDirectoryGroupsSyncTime',
                    function ($scope, BrowserTitleService, server, siteSettingsForServerAdmin, siteSettingsForSiteAdmin, serverSettings, lastActiveDirectoryGroupsSyncTime) {
                        BrowserTitleService.setTitle('serverSettings_general');
                        $scope.server = server;
                        $scope.siteSettingsForServerAdmin = siteSettingsForServerAdmin;
                        $scope.siteSettingsForSiteAdmin = siteSettingsForSiteAdmin;
                        $scope.isDefaultSite = siteSettingsForServerAdmin.settings && siteSettingsForServerAdmin.settings.urlName === '';
                        $scope.hideNameAndId = !server.isSessionMultiSite();
                        $scope.serverSettings = serverSettings;
                        $scope.liveDBAvailable = server.isLiveDBAvailable();
                        $scope.lastActiveDirectoryGroupsSyncTime = lastActiveDirectoryGroupsSyncTime;
                    }]
            })
                .state('main.server.settings.licenses', {
                url: '/licenses',
                templateUrl: 'licenses.html',
                resolve: {
                    licensingInfo: ['LicensesService', function (licenses) { return licenses.fetch(); }]
                },
                controller: VizPortal.LicensesCtrl
            })
                .state('main.server.settings.addSite', {
                url: '/addSite',
                templateUrl: 'addSite.html',
                controller: VizPortal.AddSiteCtrl
            })
                .state('main.server.analysis', {
                url: '/analysis/{sheetUrlId}',
                templateUrl: 'adminVizViewer.html',
                resolve: {
                    workbookUrlId: function () { return 'tabbed_admin_views'; }
                },
                controller: VizPortal.AdminVizViewerCtrl
            })
                .state('main.server.sites', {
                abstract: true,
                templateUrl: 'sites.html',
                resolve: {
                    place: ['SitesPlace', function (SitesPlace) { return SitesPlace.create(); }]
                },
                controller: VizPortal.SitesPlaceCtrl
            });
            var contentSubplaceResolve = {
                subplace: ['place', function (place) { return place.subplace('sites'); }],
                resource: 'Sites',
                detailsUrl: function () { return ''; },
                projectUrl: function () { return ''; },
                workbookUrl: function () { return ''; },
                defaultOrder: function () { return VizPortal.SitesContentType.defaultOrder; },
                shouldFetchDetails: function () { return (function () { return true; }); } // Fetches details by default
            };
            $stateProvider
                .state('main.server.sites.sites', {
                url: '/sites',
                templateUrl: 'contentSubplace.html',
                controller: VizPortal.ContentSubplaceCtrl,
                resolve: contentSubplaceResolve
            });
            // Content: see contentConfig.ts
            // Users
            $stateProvider
                .state('main.server.users', {
                url: '/users',
                templateUrl: 'serverUsersPlace.html',
                data: {
                    authLevel: VizPortal.AuthLevel.ServerAdmin
                },
                controller: VizPortal.ServerUsersPlaceCtrl
            });
            $stateProvider
                .state('main.site.users', {
                url: '/users',
                templateUrl: 'siteUsersPlace.html',
                data: {
                    authLevel: VizPortal.AuthLevel.SiteAdmin
                },
                resolve: {
                    canSessionUserManageUsers: ['ServerService', function (serverService) { return serverService.canSessionUserManageUsers(); }]
                },
                controller: VizPortal.SiteUsersPlaceCtrl
            });
            // Server User
            // Looking for Site User? It's in contentConfig.ts.
            // !!! ATTENTION !!!
            // If you changed the url scheme of user or user setting,
            // make sure to also update the user setting url generation code in:
            // \workgroup\vqlweb\scriptsharp\src\Authoring\ViewModels\AuthoringMastheadViewModel.cs
            $stateProvider
                .state('main.server.user', {
                abstract: true,
                url: '/user/:domainName/{username:.*}',
                templateUrl: 'serverUserPlace.html',
                controller: VizPortal.ServerUserPlaceCtrl,
                resolve: {
                    isSessionUserSelf: ['ServerService', function (serverService) {
                            return serverService.isSessionUserSelf();
                        }],
                    serverUser: ['ServerUsers', '$stateParams', function (serverUsers, $stateParams) {
                            return serverUsers.getUserByUsernameAndDomain($stateParams['username'], $stateParams['domainName']);
                        }],
                    userSettings: ['UserSettingsStore', '$stateParams', function (userSettingsStore, $stateParams) {
                            return userSettingsStore.getUserSettings($stateParams['username'], $stateParams['domainName']);
                        }],
                    userDoesNotExist: ['$state', 'serverUser', 'ServerService', function ($state, serverUser, server) {
                            if (!serverUser) {
                                if (server.canSessionUserManageUsers()) {
                                    var usersErrorState = {
                                        detailsLocKey: 'userCannotBeAccessed',
                                        redirectState: 'main.server.users',
                                        redirectLocKey: 'backToUsers'
                                    };
                                    $state.go('main.error', usersErrorState);
                                }
                                else {
                                    $state.go('main.error');
                                }
                            }
                        }]
                }
            })
                .state('main.server.user.settings', {
                url: '/settings',
                templateUrl: 'serverUserSettingsSubplace.html',
                controller: VizPortal.ServerUserSettingsSubplaceCtrl,
                resolve: {
                    serverUser: ['ServerUsers', '$stateParams', function (serverUsers, $stateParams) {
                            return serverUsers.getUserByUsernameAndDomain($stateParams['username'], $stateParams['domainName']);
                        }
                    ],
                    userRefreshTokenCount: ['ServerUsers', '$stateParams', function (serverUsers, $stateParams) {
                            return serverUsers.getUserRefreshTokenCount($stateParams['username'], $stateParams['domainName']);
                        }
                    ]
                }
            });
            // Groups
            $stateProvider
                .state('main.site.groups', {
                url: '/groups',
                templateUrl: 'groupsPlace.html',
                data: {
                    authLevel: VizPortal.AuthLevel.SiteAdmin
                },
                controller: VizPortal.GroupsPlaceCtrl
            });
            // Group
            $stateProvider
                .state('main.site.group', {
                abstract: true,
                url: '/groups/:id',
                templateUrl: 'group.html',
                data: {
                    authLevel: VizPortal.AuthLevel.SiteAdmin
                },
                resolve: {
                    group: ['Groups', '$stateParams', function (Groups, $stateParams) {
                            return Groups.getById($stateParams['id']);
                        }],
                    groupDoesNotExist: ['$state', 'group', 'ServerService',
                        function ($state, group, server) {
                            if (!group) {
                                $state.go('main.error', {
                                    detailsLocKey: 'groupCannotBeAccessed',
                                    redirectState: 'main.site.groups',
                                    redirectLocKey: 'backToGroups'
                                });
                            }
                        }]
                },
                controller: VizPortal.GroupPlaceCtrl
            })
                .state('main.site.group.users', {
                url: '/users',
                templateUrl: 'groupUsersSubplace.html',
                controller: VizPortal.GroupUsersSubplaceCtrl
            })
                .state('main.site.group.details', {
                url: '/details',
                templateUrl: 'groupDetails.html',
                resolve: {
                    groupDetails: [
                        'Groups', 'group', function (Groups, group) {
                            return Groups.getGroupDetails(group.id);
                        }],
                    canSessionUserManageUsers: ['ServerService', function (serverService) { return serverService.canSessionUserManageUsers(); }]
                },
                controller: VizPortal.GroupDetailsCtrl
            });
            // Schedules
            var serverStateProperties = {
                data: {
                    authLevel: VizPortal.AuthLevel.ServerAdmin
                },
                resolve: {
                    siteId: function () { return null; }
                }
            };
            var siteStateProperties = {
                data: {
                    authLevel: VizPortal.AuthLevel.SiteAdmin
                },
                resolve: {
                    siteId: ['ServerService', function (serverService) { return serverService.waitForSession().then(function () { return serverService.sessionSiteId(); }); }]
                }
            };
            var scheduleStates = function (stateName, extraStateProperties) {
                // List state
                var scheduleListState = {
                    url: '/schedules',
                    templateUrl: 'schedules.html',
                    controller: VizPortal.SchedulesCtrl
                };
                $.extend(true, scheduleListState, extraStateProperties);
                $stateProvider.state(stateName + 's', scheduleListState);
                // Place state
                var scheduleState = {
                    abstract: true,
                    resolve: {
                        schedule: [
                            'Schedules', '$stateParams', 'siteId',
                            function (Schedules, $stateParams, siteId) {
                                return Schedules.getByIdForSite($stateParams['id'], siteId);
                            }
                        ],
                        place: [
                            'TaskPlace', 'siteId', 'schedule',
                            function (TaskPlace, siteId, schedule) {
                                return TaskPlace.create(siteId, { schedule: schedule.id });
                            }
                        ]
                    },
                    url: '/schedules/:id',
                    templateUrl: 'schedule.html',
                    controller: VizPortal.ScheduleCtrl
                };
                $.extend(true, scheduleState, extraStateProperties);
                $stateProvider.state(stateName, scheduleState);
                // Subplace states
                $stateProvider
                    .state(stateName + '.details', {
                    url: '/details',
                    templateUrl: 'scheduleDetails.html',
                    controller: VizPortal.setBrowserTitleCtrl('details')
                });
                VizPortal.ConfigHelper.addTaskSubstates($stateProvider, stateName);
            };
            scheduleStates('main.server.schedule', serverStateProperties);
            scheduleStates('main.site.schedule', siteStateProperties);
            // Tasks
            var taskState = function (stateName, extraStateProperties) {
                var taskState = {
                    abstract: true,
                    url: '/tasks',
                    templateUrl: 'tasks.html',
                    controller: VizPortal.TasksCtrl,
                    resolve: {
                        place: ['TaskPlace', 'siteId', function (TaskPlace, siteId) { return TaskPlace.create(siteId); }]
                    }
                };
                $.extend(true, taskState, extraStateProperties);
                $stateProvider.state(stateName, taskState);
                VizPortal.ConfigHelper.addTaskSubstates($stateProvider, stateName);
            };
            taskState('main.server.tasks', serverStateProperties);
            taskState('main.site.tasks', siteStateProperties);
            // Viz
            $stateProvider
                .state('main.site.viz', {
                url: '/views/*path',
                templateUrl: 'vizViewer.html',
                controller: VizPortal.VizViewerCtrl
            });
            // Site Status/Analysis
            $stateProvider
                .state('main.site.status', {
                url: '/status',
                templateUrl: 'siteStatus.html',
                data: {
                    authLevel: VizPortal.AuthLevel.SiteAdmin
                },
                controller: VizPortal.setBrowserTitleCtrl('siteStatus')
            })
                .state('main.site.analysis', {
                url: '/analysis/{sheetUrlId}',
                templateUrl: 'adminVizViewer.html',
                data: {
                    authLevel: VizPortal.AuthLevel.SiteAdmin
                },
                resolve: {
                    workbookUrlId: function () { return 'tabbed_site_views'; }
                },
                controller: VizPortal.AdminVizViewerCtrl
            });
            // Site Settings
            $stateProvider
                .state('main.site.settings', {
                templateUrl: 'siteSettingsTabs.html',
                abstract: true,
                controller: ['$scope', 'ServerService',
                    function ($scope, server) {
                        $scope.server = server;
                    }]
            })
                .state('main.site.settings.siteSettings', {
                url: '/settings',
                templateUrl: 'siteSettings.html',
                data: {
                    authLevel: VizPortal.AuthLevel.SiteAdmin
                },
                resolve: {
                    siteSettingsForServerAdmin: ['ServerService', 'Sites', function (ServerService, Sites) {
                            // Resolve the sessionInfoPromise in case we are coming from a state
                            // where the sessionInfo might be stale (e.g., logged into an arbitrary site on login)
                            if (ServerService.isSessionServerAdmin()) {
                                return ServerService.getSessionInfoPromise().then(function () { return Sites.getCurrentSiteSettingsForServerAdmin(); });
                            }
                            else {
                                return null;
                            }
                        }],
                    siteSettingsForSiteAdmin: ['ServerService', 'Sites', function (ServerService, Sites) {
                            // Resolve the sessionInfoPromise in case we are coming from a state
                            // where the sessionInfo might be stale (e.g., logged into an arbitrary site on login)
                            return ServerService.getSessionInfoPromise().then(function () { return Sites.getCurrentSiteSettingsForSiteAdmin(); });
                        }]
                },
                controller: ['$scope', 'BrowserTitleService', 'ServerService', 'siteSettingsForServerAdmin', 'siteSettingsForSiteAdmin',
                    function ($scope, BrowserTitleService, server, siteSettingsForServerAdmin, siteSettingsForSiteAdmin) {
                        var multisite = server.isSessionMultiSite();
                        $scope.server = server;
                        $scope.siteSettingsForServerAdmin = siteSettingsForServerAdmin;
                        $scope.siteSettingsForSiteAdmin = siteSettingsForSiteAdmin;
                        $scope.liveDBAvailable = server.isLiveDBAvailable();
                        if ($scope.siteSettingsForServerAdmin !== null) {
                            $scope.isDefaultSite = $scope.siteSettingsForServerAdmin.settings && $scope.siteSettingsForServerAdmin.settings.urlName === '';
                        }
                        $scope.hideNameAndId = !multisite;
                        BrowserTitleService.setTitle(multisite ? 'siteSettings' : 'settings');
                    }]
            })
                .state('main.site.settings.authentication', {
                url: '/authentication',
                templateUrl: 'siteAuthenticationSettings.html',
                controller: VizPortal.SiteAuthenticationCtrl,
                resolve: {
                    siteSettingsForSiteAdmin: ['ServerService', 'Sites', function (ServerService, Sites) {
                            // Resolve the sessionInfoPromise in case we are coming from a state
                            // where the sessionInfo might be stale (e.g., logged into an arbitrary site on login)
                            return ServerService.getSessionInfoPromise().then(function () { return Sites.getCurrentSiteSettingsForSiteAdmin(); });
                        }],
                    configuration: ['ServerService', function (server) {
                            return server.sendRequest(new VizPortal.ServerApi.GetSiteSAMLConfigurationRequest());
                        }],
                    allowTransition: ['ServerService', function (server, $q) {
                            if (!server.isThirdPartyAuthConfiguredForServer()) {
                                return $q.reject(); // Trigger a $stateChangeError
                            }
                        }]
                },
                data: {
                    authLevel: VizPortal.AuthLevel.SiteAdmin
                }
            });
            // Error pages
            $stateProvider
                .state('main.error', {
                templateUrl: 'error.html',
                params: [
                    VizPortal.ErrorCtrl.StateParamKeys.DetailsLocKey,
                    VizPortal.ErrorCtrl.StateParamKeys.RedirectState,
                    VizPortal.ErrorCtrl.StateParamKeys.RedirectLocKey,
                    VizPortal.ErrorCtrl.StateParamKeys.RedirectSiteUrlName
                ],
                controller: VizPortal.ErrorCtrl
            });
            // Home Place
            if (VizPortal.FeatureFlags.homePlaceEnabled) {
                $stateProvider
                    .state('main.site.home', {
                    url: '/home',
                    templateUrl: 'home.html',
                    controller: VizPortal.HomeCtrl
                });
            }
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../controllers/ContentPlaceCtrl.ts" />
/// <reference path="../helpers/ActionContext.ts" />
/// <reference path="../models/IDataSourceInfo.ts" />
/// <reference path="../models/Set.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/types/IDataSource.ts" />
/// <reference path="../ServerApi/types/IRemoteRefreshProperties.ts" />
/// <reference path="../ServerApi/types/IResponse.ts" />
/// <reference path="../services/BrowserTitleService.ts" />
/// <reference path="../services/CreateExtractTasksAction.ts" />
/// <reference path="../services/EditConnectionAction.ts" />
/// <reference path="../services/ServerService.ts" />
var VizPortal;
(function (VizPortal) {
    var DatasourceDataConnectionCtrl = (function () {
        function DatasourceDataConnectionCtrl($scope, $state, BrowserTitleService, EditConnectionAction, CreateExtractTasksAction, ServerService) {
            var _this = this;
            this.$scope = $scope;
            this.$state = $state;
            this.EditConnectionAction = EditConnectionAction;
            this.CreateExtractTasksAction = CreateExtractTasksAction;
            this.ServerService = ServerService;
            BrowserTitleService.setTitle('dataConnection', $scope.objectName);
            this.isEditing = false;
            this.datasource = $scope.datasource;
            var datasourceSet = VizPortal.Set.singleton(this.datasource, function (ds) { return ds.id; });
            $scope.isOAuth = this.isOAuth();
            $scope.canEditConnection = this.canEditConnection();
            $scope.dataConnectionIsReading = function () {
                return !$scope.dataConnectionIsEditing();
            };
            $scope.dataConnectionIsEditing = function () {
                return _this.isEditing && _this.canEditConnection();
            };
            $scope.refreshNow = function ($event) {
                _this.CreateExtractTasksAction.forDatasource(_this.datasource, VizPortal.ActionContext.fromEvent($event), VizPortal.CreateExtractTasksMode.AllowRefreshNow)
                    .then(function () { return _this.$state.hardReload(); });
            };
            $scope.requestRefreshNowIsDisabled = function () {
                return _this.currentRefreshModeIsRemote();
            };
            $scope.editOAuth = function ($event) {
                $scope.oauthEditModel = _this.EditConnectionAction.createOAuthEditModel(datasourceSet);
                $scope.testConnectionResult = { isPending: false };
                _this.isEditing = true;
            };
            $scope.beginEdit = function () {
                _this.isEditing = true;
                $scope.editModel = {
                    serverName: _this.datasource.connectionDetails.serverName,
                    serverPort: _this.datasource.connectionDetails.serverPort,
                    username: _this.datasource.connectionDetails.databaseUsername,
                    password: {
                        isEmbedded: _this.datasource.connectionDetails.hasEmbeddedPassword,
                        newPassword: VizPortal.PasswordUnchanged
                    }
                };
            };
            $scope.save = function () {
                $scope.isSaving = true;
                var savePromise;
                if ($scope.canEditConnection && !$scope.isOAuth) {
                    savePromise = EditConnectionAction.applyConnectionEdits(datasourceSet, $scope.editModel);
                }
                else if ($scope.canEditConnection && $scope.isOAuth) {
                    savePromise = EditConnectionAction.updateOAuthConnections(datasourceSet, $scope.oauthEditModel);
                }
                savePromise.then(function () { return _this.$state.hardReload(); });
            };
            $scope.cancel = function () {
                _this.isEditing = false;
                $scope.testConnectionResult = { isPending: false };
                // Clear modified oauthEditModel, needed for testConnection to work properly
                $scope.oauthEditModel = _this.$scope.oauthInitialEditModel;
            };
            $scope.requestTestConnectionIsDisabled = function () {
                return _this.currentRefreshModeIsRemote();
            };
            if ($scope.isOAuth) {
                // testConnection will be set by configureEditOAuthScope
                this.EditConnectionAction.configureEditOAuthScope(this.$scope, datasourceSet);
                this.$scope.oauthInitialEditModel = this.$scope.oauthEditModel;
            }
            else {
                $scope.testConnection = function () { return _this.testConnection(); };
            }
        }
        DatasourceDataConnectionCtrl.prototype.testConnection = function () {
            this.$scope.testConnectionResult = this.isEditing
                ? this.EditConnectionAction.checkEditedConnection(this.datasource.id, this.$scope.editModel)
                : this.EditConnectionAction.checkExistingConnection(this.datasource.id);
        };
        DatasourceDataConnectionCtrl.prototype.isOAuth = function () {
            return this.datasource.connectionOAuth && (this.datasource.connectionDetails.type === VizPortal.ServerApi.ConnectionDetailType.Database);
        };
        DatasourceDataConnectionCtrl.prototype.currentUserAllowedToEdit = function () {
            return this.ServerService.isSessionSiteOrServerAdmin() || this.datasource.owner.id === this.ServerService.sessionUserId();
        };
        DatasourceDataConnectionCtrl.prototype.canEditConnection = function () {
            return this.datasource.connectionTypeEditable && this.currentUserAllowedToEdit();
        };
        DatasourceDataConnectionCtrl.prototype.hasRemoteRefreshProperties = function () {
            return this.ServerService.featureFlags().dataSyncEnabled && this.datasource.hasExtracts && !this.isOAuth();
        };
        DatasourceDataConnectionCtrl.prototype.currentRefreshModeIsRemote = function () {
            return this.hasRemoteRefreshProperties() && this.datasource.refreshMode === VizPortal.ServerApi.RefreshModeTypes.Remote;
        };
        DatasourceDataConnectionCtrl.$inject = [
            '$scope',
            '$state',
            'BrowserTitleService',
            'EditConnectionAction',
            'CreateExtractTasksAction',
            'ServerService'
        ];
        return DatasourceDataConnectionCtrl;
    })();
    VizPortal.DatasourceDataConnectionCtrl = DatasourceDataConnectionCtrl;
    VizPortal.Module.instance().controller('DatasourceDataConnectionCtrl', DatasourceDataConnectionCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../controllers/ContentPlaceCtrl.ts" />
/// <reference path="../helpers/ResultHelper.ts" />
var VizPortal;
(function (VizPortal) {
    var SiteUserPlaceCtrl = (function () {
        function SiteUserPlaceCtrl($scope, $state, ServerService, 
            // resolved in ui router
            isSessionServerAdmin, isSessionSiteAdmin, isSessionUserSelf, place, siteUser, userSettings, serverUser) {
            $scope.multisite = ServerService.isSessionMultiSite();
            if (siteUser) {
                $scope.siteRole = siteUser.siteRole;
                $scope.user = siteUser;
                $scope.objectName = siteUser.displayName;
            }
            else if (isSessionServerAdmin) {
                $scope.siteRole = VizPortal.ServerApi.SiteRoles.ServerAdministrator;
                $scope.user = _.omit(serverUser, 'lastSignIn');
                $scope.objectName = serverUser.displayName;
            }
            else {
                // UI Router should redirect to 'pageDoesNotExist' before we get here.
                throw new Error('User does not exist on this site');
            }
            $scope.userSettings = userSettings;
            $scope.hasUserSettings = !VizPortal.ResultHelper.hasErrors(userSettings);
            $scope.isSessionServerAdmin = isSessionServerAdmin;
            $scope.isSessionSiteOrServerAdmin = isSessionServerAdmin || isSessionSiteAdmin;
            $scope.isSessionUserSelf = isSessionUserSelf;
            VizPortal.SubplaceCountsHelper.keepSubplaceCountsUpdated($scope, place);
            VizPortal.SubplaceTabsHelper.refreshWhenCurrentTabClicked($scope, $state);
        }
        SiteUserPlaceCtrl.$inject = [
            '$scope',
            '$state',
            'ServerService',
            // resolved in ui router
            'isSessionServerAdmin',
            'isSessionSiteAdmin',
            'isSessionUserSelf',
            'place',
            'siteUser',
            'userSettings',
            // injected by ui router when user is a server admin and not a site member
            'serverUser'
        ];
        return SiteUserPlaceCtrl;
    })();
    VizPortal.SiteUserPlaceCtrl = SiteUserPlaceCtrl;
    VizPortal.Module.instance().controller('SiteUserPlaceCtrl', SiteUserPlaceCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var AssociateOAuthCredentialRequest = (function (_super) {
            __extends(AssociateOAuthCredentialRequest, _super);
            function AssociateOAuthCredentialRequest(params) {
                _super.call(this, 'associateOAuthCredential', params);
            }
            return AssociateOAuthCredentialRequest;
        })(ServerApi.Request);
        ServerApi.AssociateOAuthCredentialRequest = AssociateOAuthCredentialRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var DeleteOAuthCredentialsRequest = (function (_super) {
            __extends(DeleteOAuthCredentialsRequest, _super);
            function DeleteOAuthCredentialsRequest(ids) {
                _super.call(this, 'deleteOAuthCredentials', { ids: ids });
            }
            return DeleteOAuthCredentialsRequest;
        })(ServerApi.Request);
        ServerApi.DeleteOAuthCredentialsRequest = DeleteOAuthCredentialsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var DisassociateOAuthCredentialRequest = (function (_super) {
            __extends(DisassociateOAuthCredentialRequest, _super);
            function DisassociateOAuthCredentialRequest(params) {
                _super.call(this, 'disassociateOAuthCredential', params);
            }
            return DisassociateOAuthCredentialRequest;
        })(ServerApi.Request);
        ServerApi.DisassociateOAuthCredentialRequest = DisassociateOAuthCredentialRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetCommonUserOAuthCredentialRequest = (function (_super) {
            __extends(GetCommonUserOAuthCredentialRequest, _super);
            function GetCommonUserOAuthCredentialRequest(params) {
                _super.call(this, 'getCommonUserOAuthCredential', params);
            }
            return GetCommonUserOAuthCredentialRequest;
        })(ServerApi.Request);
        ServerApi.GetCommonUserOAuthCredentialRequest = GetCommonUserOAuthCredentialRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        ServerApi.OAuthCredentialTypes = {
            Salesforce: 'salesforce',
            BigQuery: 'bigquery',
            GoogleAnalytics: 'google-analytics'
        };
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/IOAuthCredential.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetOAuthCredentialAssociatedWithResourceRequest = (function (_super) {
            __extends(GetOAuthCredentialAssociatedWithResourceRequest, _super);
            function GetOAuthCredentialAssociatedWithResourceRequest(params) {
                _super.call(this, 'getOAuthCredentialAssociatedWithResource', params);
            }
            return GetOAuthCredentialAssociatedWithResourceRequest;
        })(ServerApi.Request);
        ServerApi.GetOAuthCredentialAssociatedWithResourceRequest = GetOAuthCredentialAssociatedWithResourceRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/IOAuthCredential.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetOAuthCredentialsRequest = (function (_super) {
            __extends(GetOAuthCredentialsRequest, _super);
            function GetOAuthCredentialsRequest(params) {
                _super.call(this, 'getOAuthCredentials', params);
            }
            return GetOAuthCredentialsRequest;
        })(ServerApi.Request);
        ServerApi.GetOAuthCredentialsRequest = GetOAuthCredentialsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var TestOAuthCredentialRequest = (function (_super) {
            __extends(TestOAuthCredentialRequest, _super);
            function TestOAuthCredentialRequest(id) {
                _super.call(this, 'testOAuthCredential', { id: id });
            }
            return TestOAuthCredentialRequest;
        })(ServerApi.Request);
        ServerApi.TestOAuthCredentialRequest = TestOAuthCredentialRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/AssociateOAuthCredentialRequest.ts" />
/// <reference path="../ServerApi/requests/DeleteOAuthCredentialsRequest.ts" />
/// <reference path="../ServerApi/requests/DisassociateOAuthCredentialRequest.ts" />
/// <reference path="../ServerApi/requests/GetCommonUserOAuthCredentialRequest.ts" />
/// <reference path="../ServerApi/requests/GetOAuthCredentialAssociatedWithResourceRequest.ts" />
/// <reference path="../ServerApi/requests/GetOAuthCredentialsRequest.ts" />
/// <reference path="../ServerApi/requests/TestOAuthCredentialRequest.ts" />
/// <reference path="Resource.ts" />
var VizPortal;
(function (VizPortal) {
    var OAuthCredentials = (function (_super) {
        __extends(OAuthCredentials, _super);
        function OAuthCredentials(ErrorNotifyingServer, serverService, FetcherFactory) {
            _super.call(this, FetcherFactory.getServerResourceFetcher(VizPortal.ServerApi.GetOAuthCredentialsRequest, function (result) { return result.credentials; }));
            this.ErrorNotifyingServer = ErrorNotifyingServer;
            this.serverService = serverService;
        }
        OAuthCredentials.prototype.del = function (ids) {
            return this.ErrorNotifyingServer.sendRequests(VizPortal.RequestHelper.buildRequests(ids, function (idsBlock) { return new VizPortal.ServerApi.DeleteOAuthCredentialsRequest(idsBlock); }), VizPortal.ResultHelper.combineResults);
        };
        OAuthCredentials.prototype.test = function (id) {
            return this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.TestOAuthCredentialRequest(id));
        };
        OAuthCredentials.prototype.associateWithDatasource = function (datasourceId, credentialId) {
            return this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.AssociateOAuthCredentialRequest({
                credentialId: credentialId,
                resourceId: datasourceId,
                resourceType: 'Datasource'
            }));
        };
        OAuthCredentials.prototype.disassociateFromDatasource = function (datasourceId) {
            return this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.DisassociateOAuthCredentialRequest({
                resourceId: datasourceId,
                resourceType: 'Datasource'
            }));
        };
        OAuthCredentials.prototype.credentialForDatasource = function (datasourceId) {
            return this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.GetOAuthCredentialAssociatedWithResourceRequest({
                resourceId: datasourceId,
                resourceType: 'Datasource'
            }));
        };
        OAuthCredentials.prototype.commonCredentialForDatasources = function (datasourceIds) {
            return this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.GetCommonUserOAuthCredentialRequest({
                ids: datasourceIds
            }));
        };
        OAuthCredentials.prototype.canAddForConnectionType = function (connectionType) {
            switch (connectionType) {
                case VizPortal.ServerApi.OAuthCredentialTypes.Salesforce:
                    return this.serverService.oauthSalesforceEnabled();
                case VizPortal.ServerApi.OAuthCredentialTypes.BigQuery:
                case VizPortal.ServerApi.OAuthCredentialTypes.GoogleAnalytics:
                    return this.serverService.oauthGoogleEnabled();
                default:
                    return false;
            }
        };
        OAuthCredentials.$inject = ['ErrorNotifyingServer', 'ServerService', 'FetcherFactory'];
        return OAuthCredentials;
    })(VizPortal.Resource);
    VizPortal.OAuthCredentials = OAuthCredentials;
    VizPortal.Module.instance().service('OAuthCredentials', OAuthCredentials);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/WindowLocationService.ts" />
var VizPortal;
(function (VizPortal) {
    // NOTE: Keep this in sync with the code in embeddedCommon.jade
    var AddOAuthCredentialAction = (function () {
        function AddOAuthCredentialAction($window, $rootScope, $q, WindowLocationService) {
            var _this = this;
            this.$window = $window;
            this.$rootScope = $rootScope;
            this.$q = $q;
            this.WindowLocationService = WindowLocationService;
            this.deferred = $q.defer(); // Noop deferred to remove null checking logic
            // SET UP GLOBAL LISTENERS
            $window.tableauPopupComplete = function (response) { return _this.handleResponse(response); };
            $($window).on('message', function (jqEvent) {
                // casted to <any> because JQueryEvent originalEvent is expected to be a PopStateEvent which is not compatible with MessageEvent
                var originalEvent = jqEvent.originalEvent;
                // Ignore messages that don't come from the open window, use == for checking window equivalence in IE8
                if (originalEvent.source != _this.openWindow)
                    return;
                var response = originalEvent.data;
                if (!_.isString(response))
                    return;
                _this.handleResponse(response);
            });
            // The user is navigating away from this page so the popup is no longer needed, let's try to remove it for them.
            $($window).on('unload', function () { return _this.removeOpenWindow(); });
        }
        AddOAuthCredentialAction.prototype.handleResponse = function (response) {
            if (response === void 0) { response = ''; }
            var errorCodeMatch = response.match(/errorCode=([^&]*)/);
            if (errorCodeMatch) {
                var errorCode = parseInt(errorCodeMatch[1], 10) || 0;
                this.notifyError(errorCode);
                return;
            }
            var newCredentialIdMatch = response.match(/id=([^&]*)/);
            if (newCredentialIdMatch) {
                this.notifySuccess(newCredentialIdMatch[1]);
                return;
            }
            this.notifySuccess('');
        };
        AddOAuthCredentialAction.prototype.removeOpenWindow = function () {
            try {
                this.openWindow.close();
            }
            catch (e) {
            } // Closing the window is best effort so there's nothing to do if it fails
            this.openWindow = null;
        };
        AddOAuthCredentialAction.prototype.notifySuccess = function (credentialId) {
            this.deferred.resolve(credentialId);
            this.removeOpenWindow();
        };
        AddOAuthCredentialAction.prototype.notifyError = function (errorCode) {
            this.deferred.reject(errorCode);
            this.removeOpenWindow();
        };
        AddOAuthCredentialAction.prototype.getPopupSpecs = function () {
            var popupOptions = {
                width: 800,
                height: 600,
                toolbar: 1,
                resizable: 1
            };
            // IE8 polyfills. Note that outer* ones are not quite right for IE8, but good enough. B147312
            var screenLeft = this.$window.screenLeft || this.$window.screenX;
            var outerWidth = this.$window.outerWidth || this.$window.innerWidth;
            var screenTop = this.$window.screenTop || this.$window.screenY;
            var outerHeight = this.$window.outerHeight || this.$window.innerHeight;
            // Open horizontally centered on current window
            popupOptions.left = screenLeft + (outerWidth - popupOptions.width) / 2;
            // Open a small amount from the top
            popupOptions.top = screenTop + (outerHeight - popupOptions.height) / 8;
            return popupOptions;
        };
        // Public methods
        AddOAuthCredentialAction.prototype.href = function (type) {
            return AddOAuthCredentialAction.OAuthPath + '?' + $.param({ 'data_class': type });
        };
        AddOAuthCredentialAction.prototype.attemptAuth = function (type) {
            this.cancelPendingAuthAttempt();
            this.deferred = this.$q.defer();
            this.openWindow = this.WindowLocationService.open(this.href(type), AddOAuthCredentialAction.WindowName, this.getPopupSpecs());
            try {
                this.openWindow.focus(); // Bring the newly opened window to the front
            }
            catch (e) { }
            return this.deferred.promise;
        };
        AddOAuthCredentialAction.prototype.cancelPendingAuthAttempt = function () {
            return this.notifyError();
        };
        AddOAuthCredentialAction.OAuthPath = '/auth/request_oauth';
        AddOAuthCredentialAction.WindowName = 'TableauAuth';
        AddOAuthCredentialAction.$inject = ['$window', '$rootScope', '$q', 'WindowLocationService'];
        return AddOAuthCredentialAction;
    })();
    VizPortal.AddOAuthCredentialAction = AddOAuthCredentialAction;
    VizPortal.Module.instance().service('AddOAuthCredentialAction', AddOAuthCredentialAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        // Given a user id, get their remote refresh agents.
        var GetRemoteRefreshAgentsRequest = (function (_super) {
            __extends(GetRemoteRefreshAgentsRequest, _super);
            function GetRemoteRefreshAgentsRequest(params) {
                _super.call(this, 'getRemoteRefreshAgents', params);
            }
            return GetRemoteRefreshAgentsRequest;
        })(ServerApi.Request);
        ServerApi.GetRemoteRefreshAgentsRequest = GetRemoteRefreshAgentsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var DeleteRemoteRefreshAgentsRequest = (function (_super) {
            __extends(DeleteRemoteRefreshAgentsRequest, _super);
            function DeleteRemoteRefreshAgentsRequest(params) {
                _super.call(this, 'deleteRemoteRefreshAgents', params);
            }
            return DeleteRemoteRefreshAgentsRequest;
        })(ServerApi.Request);
        ServerApi.DeleteRemoteRefreshAgentsRequest = DeleteRemoteRefreshAgentsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../fetchers/ServerResourceFetcher.ts" />
/// <reference path="../helpers/ServerModelHelper.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/GetRemoteRefreshAgentsRequest.ts" />
/// <reference path="../ServerApi/requests/DeleteRemoteRefreshAgentsRequest.ts" />
/// <reference path="../services/ErrorNotifyingServer.ts" />
/// <reference path="Resource.ts" />
var VizPortal;
(function (VizPortal) {
    var RemoteRefreshAgents = (function (_super) {
        __extends(RemoteRefreshAgents, _super);
        function RemoteRefreshAgents(ErrorNotifyingServer, FetcherFactory) {
            _super.call(this, FetcherFactory.getServerResourceFetcher(VizPortal.ServerApi.GetRemoteRefreshAgentsRequest, VizPortal.ServerApiMapper.remoteRefreshAgents));
            this.ErrorNotifyingServer = ErrorNotifyingServer;
        }
        RemoteRefreshAgents.prototype.get = function () {
            return this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.GetRemoteRefreshAgentsRequest({
                withContent: false
            }));
        };
        RemoteRefreshAgents.prototype.getWithContent = function () {
            return this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.GetRemoteRefreshAgentsRequest({
                withContent: true
            }));
        };
        RemoteRefreshAgents.prototype.del = function (agents) {
            var agentNames = _.map(agents.toArray(), function (agent) { return agent.name; });
            return this.ErrorNotifyingServer.sendRequests(VizPortal.RequestHelper.buildRequests(agentNames, function (agentNamesBlock) {
                return new VizPortal.ServerApi.DeleteRemoteRefreshAgentsRequest({ agentNames: agentNamesBlock });
            }), VizPortal.ResultHelper.combineResults);
        };
        RemoteRefreshAgents.$inject = ['ErrorNotifyingServer', 'FetcherFactory'];
        return RemoteRefreshAgents;
    })(VizPortal.Resource);
    VizPortal.RemoteRefreshAgents = RemoteRefreshAgents;
    VizPortal.Module.instance().service('RemoteRefreshAgents', RemoteRefreshAgents);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../resources/RemoteRefreshAgents.ts" />
var VizPortal;
(function (VizPortal) {
    var DeleteRemoteRefreshAgentsAction = (function () {
        function DeleteRemoteRefreshAgentsAction($translate, ConfirmActionDialog, ContentActionNotification, RemoteRefreshAgents) {
            this.$translate = $translate;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.ContentActionNotification = ContentActionNotification;
            this.RemoteRefreshAgents = RemoteRefreshAgents;
        }
        DeleteRemoteRefreshAgentsAction.prototype.execute = function (agents, context) {
            var _this = this;
            return this.ConfirmActionDialog.open({
                scope: context.scope.$new(),
                title: this.$translate.instant('delete'),
                bodyText: this.$translate.instant('confirmDeleteRemoteRefreshAgents', { COUNT: agents.size() }, VizPortal.L10n.Interpolations.Count),
                position: VizPortal.ModalService.anchoredTo(context.targetElement),
                actionName: this.$translate.instant('confirmDeleteButton', { ITEM_COUNT: agents.size() }, VizPortal.L10n.Interpolations.Count),
                action: function (dialogInstance) {
                    return _this.RemoteRefreshAgents.del(agents)
                        .then(function (result) {
                        if (result.errors && result.errors.length) {
                            var errorMessage = _this.errorMessageFor(result.errors[0]);
                            dialogInstance.showErrorMessage(errorMessage);
                        }
                        else {
                            _this.ContentActionNotification.notifySuccess(_this.$translate.instant('deleteRemoteRefreshAgentsSuccess', { ITEM_COUNT: agents.size() }, VizPortal.L10n.Interpolations.Count));
                        }
                        return result;
                    });
                }
            }).result;
        };
        DeleteRemoteRefreshAgentsAction.prototype.errorMessageFor = function (error) {
            return this.$translate.instant('errorUnknown');
        };
        DeleteRemoteRefreshAgentsAction.$inject = [
            '$translate',
            'ConfirmActionDialog',
            'ContentActionNotification',
            'RemoteRefreshAgents'
        ];
        return DeleteRemoteRefreshAgentsAction;
    })();
    VizPortal.DeleteRemoteRefreshAgentsAction = DeleteRemoteRefreshAgentsAction;
    VizPortal.Module.instance().service('DeleteRemoteRefreshAgentsAction', DeleteRemoteRefreshAgentsAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var DeleteMySavedPasswordsAndCredentialsRequest = (function (_super) {
            __extends(DeleteMySavedPasswordsAndCredentialsRequest, _super);
            function DeleteMySavedPasswordsAndCredentialsRequest(params) {
                if (params === void 0) { params = {}; }
                _super.call(this, 'deleteMySavedPasswordsAndCredentials', params);
            }
            return DeleteMySavedPasswordsAndCredentialsRequest;
        })(ServerApi.Request);
        ServerApi.DeleteMySavedPasswordsAndCredentialsRequest = DeleteMySavedPasswordsAndCredentialsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/DeleteMySavedPasswordsAndCredentialsRequest.ts" />
var VizPortal;
(function (VizPortal) {
    var DeleteMyCredentialsAction = (function () {
        function DeleteMyCredentialsAction($translate, $q, ConfirmActionDialog, serverService, ToasterService) {
            this.$translate = $translate;
            this.$q = $q;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.serverService = serverService;
            this.ToasterService = ToasterService;
        }
        DeleteMyCredentialsAction.prototype.executeFromEvent = function ($event) {
            var _this = this;
            var actionContext = VizPortal.ActionContext.fromEvent($event);
            var confirmActionDialogInstance = this.ConfirmActionDialog.open({
                scope: actionContext.scope,
                title: this.$translate.instant('clearSavedCredentials'),
                bodyText: this.$translate.instant('clearUserSavedCredentialsConfirmMessage'),
                actionName: this.$translate.instant('clearSavedCredentialsConfirmButton'),
                isDeleteAction: true,
                action: function (confirmActionDialogInstance) {
                    return _this.serverService.sendRequest(new VizPortal.ServerApi.DeleteMySavedPasswordsAndCredentialsRequest())
                        .then(VizPortal.ResultHelper.rejectResultOnError(_this.$q))
                        .then(_.identity, function () { return confirmActionDialogInstance.showErrorMessage(_this.$translate.instant('clearSavedCredentialsError')); });
                }
            });
            confirmActionDialogInstance.result.then(function (result) {
                _this.ToasterService.pop({ type: VizPortal.ToastType.Info, text: _this.$translate.instant('clearSavedCredentialsSuccess') });
            });
            return confirmActionDialogInstance.result;
        };
        DeleteMyCredentialsAction.$inject = ['$translate', '$q', 'ConfirmActionDialog', 'ServerService', 'ToasterService'];
        return DeleteMyCredentialsAction;
    })();
    VizPortal.DeleteMyCredentialsAction = DeleteMyCredentialsAction;
    VizPortal.Module.instance().service('DeleteMyCredentialsAction', DeleteMyCredentialsAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="AbstractContentAction.ts" />
var VizPortal;
(function (VizPortal) {
    var DeleteOAuthCredentialsAction = (function (_super) {
        __extends(DeleteOAuthCredentialsAction, _super);
        function DeleteOAuthCredentialsAction(ConfirmActionDialog, ContentActionNotification, $translate, $filter, OAuthCredentials) {
            _super.call(this, ConfirmActionDialog, ContentActionNotification);
            this.$translate = $translate;
            this.$filter = $filter;
            this.OAuthCredentials = OAuthCredentials;
        }
        DeleteOAuthCredentialsAction.prototype.configureDialog = function (dialogConfig, oauthCredentials) {
            var _this = this;
            var dialogBody = oauthCredentials.size() === 1
                ? this.$translate.instant('confirmDeleteOAuthCredential', {
                    USERNAME: VizPortal.L10n.elideIfLong(oauthCredentials.first().username),
                    TRANSLATED_TYPE: this.$filter('credentialType')(oauthCredentials.first().type)
                })
                : this.$translate.instant('confirmDeleteOAuthCredentials', { CREDENTIAL_COUNT: oauthCredentials.size() }, VizPortal.L10n.Interpolations.Count);
            dialogConfig.bodyText = dialogBody;
            dialogConfig.title = this.$translate.instant('delete');
            dialogConfig.actionName = this.$translate.instant('confirmDeleteButton', { ITEM_COUNT: oauthCredentials.size() }, VizPortal.L10n.Interpolations.Count);
            dialogConfig.isDeleteAction = true;
            dialogConfig.action = function () { return _this.OAuthCredentials.del(oauthCredentials.keys()); };
        };
        DeleteOAuthCredentialsAction.prototype.notificationTranslationIds = function () {
            return {
                successId: 'deleteOAuthCredentialsSuccess',
                errorId: 'deleteOAuthCredentialsError'
            };
        };
        DeleteOAuthCredentialsAction.$inject = ['ConfirmActionDialog', 'ContentActionNotification', '$translate', '$filter', 'OAuthCredentials'];
        return DeleteOAuthCredentialsAction;
    })(VizPortal.AbstractContentAction);
    VizPortal.DeleteOAuthCredentialsAction = DeleteOAuthCredentialsAction;
    VizPortal.Module.instance().service('DeleteOAuthCredentialsAction', DeleteOAuthCredentialsAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../resources/ServerUsers.ts" />
/// <reference path="../ServerApi/types/IConnectedDevice.ts" />
var VizPortal;
(function (VizPortal) {
    var DeleteConnectedDeviceAction = (function () {
        function DeleteConnectedDeviceAction($translate, ConfirmActionDialog, ContentActionNotification, ServerUsers) {
            this.$translate = $translate;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.ContentActionNotification = ContentActionNotification;
            this.ServerUsers = ServerUsers;
        }
        DeleteConnectedDeviceAction.prototype.execute = function (device, userId, context) {
            var _this = this;
            return this.ConfirmActionDialog.open({
                scope: context.scope.$new(),
                title: this.$translate.instant('delete'),
                bodyText: this.$translate.instant('confirmDeleteConnectedDevice', { NAME: VizPortal.L10n.elideIfLong(device.displayName) }),
                position: VizPortal.ModalService.anchoredTo(context.targetElement),
                actionName: this.$translate.instant('delete'),
                action: function (dialogInstance) {
                    return _this.ServerUsers.deleteUserConnectedDevices(userId, [device.id])
                        .then(function (result) {
                        if (result.errors && result.errors.length) {
                            var errorMessage = _this.errorMessageFor(result.errors[0]);
                            dialogInstance.showErrorMessage(errorMessage);
                        }
                        else {
                            _this.ContentActionNotification.notifySuccess(_this.$translate.instant('deleteConnectedDeviceSuccess', { NAME: VizPortal.L10n.elideIfLong(device.displayName) }));
                        }
                        return result;
                    });
                }
            }).result;
        };
        DeleteConnectedDeviceAction.prototype.errorMessageFor = function (error) {
            return this.$translate.instant('errorUnknown');
        };
        DeleteConnectedDeviceAction.$inject = [
            '$translate',
            'ConfirmActionDialog',
            'ContentActionNotification',
            'ServerUsers'
        ];
        return DeleteConnectedDeviceAction;
    })();
    VizPortal.DeleteConnectedDeviceAction = DeleteConnectedDeviceAction;
    VizPortal.Module.instance().service('DeleteConnectedDeviceAction', DeleteConnectedDeviceAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/ResultHelper.ts" />
/// <reference path="../helpers/SliceableHelper.ts" />
/// <reference path="../resources/OAuthCredentials.ts" />
/// <reference path="../ServerApi/types/ISiteUser.ts" />
/// <reference path="../ServerApi/types/IConnectedDevice.ts" />
/// <reference path="../services/AddOAuthCredentialAction.ts" />
/// <reference path="../services/BrowserTitleService.ts" />
/// <reference path="../services/DeleteRemoteRefreshAgentsAction.ts" />
/// <reference path="../services/DeleteMyCredentialsAction.ts" />
/// <reference path="../services/DeleteOAuthCredentialsAction.ts" />
/// <reference path="../services/DeleteConnectedDeviceAction.ts" />
/// <reference path="../services/UserSettingsCtrlCommon.ts" />
var VizPortal;
(function (VizPortal) {
    var SiteUserSettingsSubplaceCtrl = (function () {
        function SiteUserSettingsSubplaceCtrl($scope, $state, userSettingsCtrlCommon, isSessionUserSelf, userSettings, userRefreshTokenCount, serverUser, siteUser, serverService, oAuthCredentials, addOAuthCredentialAction, BrowserTitleService, deleteOAuthCredentialsAction, deleteMyCredentialsAction, remoteRefreshAgents, deleteRemoteRefreshAgentsAction, serverUsers, deleteConnectedDeviceAction) {
            var _this = this;
            this.serverService = serverService;
            this.oAuthCredentials = oAuthCredentials;
            // redirect to main.error if we don't have the user's settings.
            if (VizPortal.ResultHelper.hasErrors(userSettings)) {
                $state.go('main.error', {
                    detailsLocKey: 'userCannotBeAccessed',
                    redirectState: 'main.site.users',
                    redirectLocKey: 'backToUsers'
                });
            }
            BrowserTitleService.setTitle('settings', $scope.objectName);
            userSettingsCtrlCommon.initScope($scope, isSessionUserSelf, serverUser, siteUser, userSettings, userRefreshTokenCount);
            // TODO: Replace with a session variable check.  See the fix from http://fogbugz/default.asp?142850 for more details
            $scope.canManageCredentials = true;
            $scope.remoteRefreshAgents = [];
            $scope.isSAMLUser = !!siteUser && siteUser.authSetting === VizPortal.ServerApi.SiteUserAuthSetting.Saml;
            // Remote Refresh Agents aka "Sync Clients"
            // Older UI, to be deleted after the new UX has been tested (TFS 419851)
            $scope.remoteAgentManagerEnabled = VizPortal.FeatureFlags.dataSyncEnabled &&
                !VizPortal.FeatureFlags.connectedClientsTableEnabled;
            if ($scope.remoteAgentManagerEnabled) {
                var refreshAgents = function () {
                    remoteRefreshAgents.getWithContent().then(function (result) {
                        if (result) {
                            $scope.remoteRefreshAgents = VizPortal.RemoteRefreshAgentMapper.mapToResource(result.agents);
                        }
                    });
                };
                refreshAgents();
                $scope.deleteRemoteRefreshAgent = function (agent, $event) {
                    return deleteRemoteRefreshAgentsAction.execute(VizPortal.Set.fromIdItemArray([agent]), VizPortal.ActionContext.fromEvent($event))
                        .then(refreshAgents);
                };
            }
            // Connected devices
            $scope.oneByOneConnectedDeviceManagement = VizPortal.FeatureFlags.connectedClientsTableEnabled;
            if ($scope.oneByOneConnectedDeviceManagement) {
                var refreshConnectedDevices = function () { return serverUsers.getUserConnectedDevices(serverUser.id)
                    .then(function (devices) { return $scope.connectedDevices = devices; }); };
                refreshConnectedDevices();
                $scope.deleteConnectedDevice = function (device, $event) {
                    return deleteConnectedDeviceAction.execute(device, serverUser.id, VizPortal.ActionContext.fromEvent($event))
                        .then(refreshConnectedDevices);
                };
            }
            // Credentials list
            // TODO: Filter out invalid credentials, needs server support
            $scope.credentialsLists = this.createOAuthCredentialLists();
            var refreshCredentials = function () {
                VizPortal.SliceableHelper.fetchAll(oAuthCredentials.all())
                    .then(function (credentialsListResult) {
                    $scope.credentialsLists = _this.createOAuthCredentialLists(credentialsListResult.items);
                });
            };
            refreshCredentials();
            // Initialize credential actions
            $scope.deleteAllCredentials = function ($event) {
                return deleteMyCredentialsAction.executeFromEvent($event).then(refreshCredentials);
            };
            $scope.addCredentialHref = function (type) { return addOAuthCredentialAction.href(type); };
            $scope.addCredential = function (type) {
                addOAuthCredentialAction.attemptAuth(type).then(refreshCredentials);
            };
            $scope.deleteCredential = function (oauthCredential, $event) {
                return deleteOAuthCredentialsAction.executeFromEvent(VizPortal.Set.fromIdItemArray([oauthCredential.credential]), $event)
                    .then(refreshCredentials);
            };
            $scope.testCredential = function (oauthCredential) { return _this.testCredential(oauthCredential); };
            $scope.$on('$destroy', function () { return addOAuthCredentialAction.cancelPendingAuthAttempt(); });
        }
        SiteUserSettingsSubplaceCtrl.prototype.testCredential = function (oauthCredential) {
            oauthCredential.test = { inProgress: true };
            var handleTestResult = function (success) {
                oauthCredential.test = {
                    success: success
                };
            };
            this.oAuthCredentials.test(oauthCredential.credential.id)
                .then(handleTestResult, function () { return handleTestResult(false); });
        };
        SiteUserSettingsSubplaceCtrl.prototype.oauthEnabledForCredentialType = function (type) {
            switch (type) {
                case VizPortal.ServerApi.OAuthCredentialTypes.Salesforce:
                    return this.serverService.oauthSalesforceEnabled();
                case VizPortal.ServerApi.OAuthCredentialTypes.BigQuery:
                case VizPortal.ServerApi.OAuthCredentialTypes.GoogleAnalytics:
                    return this.serverService.oauthGoogleEnabled();
            }
        };
        SiteUserSettingsSubplaceCtrl.prototype.createOAuthCredentialLists = function (credentials) {
            var _this = this;
            var convertToCredentialViewModel = function (credential) {
                return { credential: credential, test: {} };
            };
            var credentialVMGroupsMap = _.groupBy(credentials, function (credential) { return credential.type; });
            return _.compact(_.map(SiteUserSettingsSubplaceCtrl.OAuthListOrder, function (type) {
                var oauthCredentialsList = {
                    type: type,
                    addEnabled: _this.oauthEnabledForCredentialType(type),
                    credentials: _.map(credentialVMGroupsMap[type], convertToCredentialViewModel)
                };
                return (oauthCredentialsList.addEnabled || oauthCredentialsList.credentials.length > 0) ? oauthCredentialsList : null;
            }));
        };
        SiteUserSettingsSubplaceCtrl.OAuthListOrder = [
            VizPortal.ServerApi.OAuthCredentialTypes.Salesforce,
            VizPortal.ServerApi.OAuthCredentialTypes.BigQuery,
            VizPortal.ServerApi.OAuthCredentialTypes.GoogleAnalytics
        ];
        SiteUserSettingsSubplaceCtrl.$inject = [
            '$scope',
            '$state',
            'UserSettingsCtrlCommon',
            // resolved in state router
            'isSessionUserSelf',
            'userSettings',
            'userRefreshTokenCount',
            'serverUser',
            'siteUser',
            // Local Services
            'ServerService',
            'OAuthCredentials',
            'AddOAuthCredentialAction',
            'BrowserTitleService',
            'DeleteOAuthCredentialsAction',
            'DeleteMyCredentialsAction',
            'RemoteRefreshAgents',
            'DeleteRemoteRefreshAgentsAction',
            'ServerUsers',
            'DeleteConnectedDeviceAction'
        ];
        return SiteUserSettingsSubplaceCtrl;
    })();
    VizPortal.SiteUserSettingsSubplaceCtrl = SiteUserSettingsSubplaceCtrl;
    VizPortal.Module.instance().controller('SiteUserSettingsSubplaceCtrl', SiteUserSettingsSubplaceCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/Order.ts" />
/// <reference path="../models/ContentFilters.ts" />
/// <reference path="../models/ContentTypes.ts" />
/// <reference path="../models/IPlace.ts" />
/// <reference path="../resources/Workbooks.ts"  />
/// <reference path="../ServerApi/types/IOrderClause.ts" />
var VizPortal;
(function (VizPortal) {
    var DatasourcePlace = (function () {
        function DatasourcePlace($location, Workbooks, ExtractTasks, RemoteRefreshSchedules) {
            var _this = this;
            this.$location = $location;
            this.Workbooks = Workbooks;
            this.ExtractTasks = ExtractTasks;
            this.RemoteRefreshSchedules = RemoteRefreshSchedules;
            this.urlParamsFn = function () { return _this.$location.search(); };
        }
        DatasourcePlace.prototype.create = function (datasourceId) {
            var place = new VizPortal.Place();
            place.addSubplace(VizPortal.Subplace.create('connectedWorkbooks', VizPortal.WorkbookContentType, this.Workbooks, this.urlParamsFn, { hasDatasource: datasourceId }, DatasourcePlace.ExcludeFilterKeys));
            place.addSubplace(VizPortal.Subplace.create('extractTasks', VizPortal.ExtractTaskContentType, this.ExtractTasks, this.urlParamsFn, { datasource: datasourceId }, DatasourcePlace.ExcludeFilterKeys));
            place.addSubplace(VizPortal.Subplace.create('remoteRefreshSchedules', VizPortal.RemoteRefreshScheduleContentType, this.RemoteRefreshSchedules, this.urlParamsFn, { datasource: datasourceId }, DatasourcePlace.ExcludeFilterKeys));
            return place;
        };
        DatasourcePlace.ExcludeFilterKeys = [
            VizPortal.ContentFiltersKeys.datasource,
            VizPortal.ContentFiltersKeys.hasDatasource,
        ];
        DatasourcePlace.$inject = [
            '$location',
            'Workbooks',
            'ExtractTasks',
            'RemoteRefreshSchedules'
        ];
        return DatasourcePlace;
    })();
    VizPortal.DatasourcePlace = DatasourcePlace;
    VizPortal.Module.instance().service('DatasourcePlace', DatasourcePlace);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var AddTagsToDatasourcesRequest = (function (_super) {
            __extends(AddTagsToDatasourcesRequest, _super);
            function AddTagsToDatasourcesRequest(ids, tags) {
                _super.call(this, 'addTagsToDatasources', {
                    ids: ids,
                    tags: tags
                });
            }
            return AddTagsToDatasourcesRequest;
        })(ServerApi.Request);
        ServerApi.AddTagsToDatasourcesRequest = AddTagsToDatasourcesRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var DeleteDatasourcesRequest = (function (_super) {
            __extends(DeleteDatasourcesRequest, _super);
            function DeleteDatasourcesRequest(ids) {
                _super.call(this, 'deleteDatasources', { ids: ids });
            }
            return DeleteDatasourcesRequest;
        })(ServerApi.Request);
        ServerApi.DeleteDatasourcesRequest = DeleteDatasourcesRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="actionNames.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="../types/actionParams.ts" />
/// <reference path="../types/IDatasourceActions.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetDatasourceActionsRequest = (function (_super) {
            __extends(GetDatasourceActionsRequest, _super);
            function GetDatasourceActionsRequest(id) {
                _super.call(this, 'getDatasourceActions', { id: id });
            }
            return GetDatasourceActionsRequest;
        })(ServerApi.Request);
        ServerApi.GetDatasourceActionsRequest = GetDatasourceActionsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts"/>
/// <reference path="../types/IMoveToProjectParams.ts"/>
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var MoveDatasourcesToProjectRequest = (function (_super) {
            __extends(MoveDatasourcesToProjectRequest, _super);
            function MoveDatasourcesToProjectRequest(params) {
                _super.call(this, 'moveDatasourcesToProject', params);
            }
            return MoveDatasourcesToProjectRequest;
        })(ServerApi.Request);
        ServerApi.MoveDatasourcesToProjectRequest = MoveDatasourcesToProjectRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var RemoveTagsFromDatasourcesRequest = (function (_super) {
            __extends(RemoveTagsFromDatasourcesRequest, _super);
            function RemoveTagsFromDatasourcesRequest(ids, tags) {
                // The server returns quoted tags unquoted.  This re-adds the double quotes if needed
                var tagsList = _.map(tags, function (tag) { return VizPortal.TagsHelper.quote(tag); });
                _super.call(this, 'removeTagsFromDatasources', {
                    ids: ids,
                    tags: tagsList
                });
            }
            return RemoveTagsFromDatasourcesRequest;
        })(ServerApi.Request);
        ServerApi.RemoveTagsFromDatasourcesRequest = RemoveTagsFromDatasourcesRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var RunExtractRefreshesOnDatasourcesRequest = (function (_super) {
            __extends(RunExtractRefreshesOnDatasourcesRequest, _super);
            // type must be from ServerApi.ExtractTaskType
            function RunExtractRefreshesOnDatasourcesRequest(ids, type) {
                _super.call(this, 'runExtractRefreshesOnDatasources', {
                    ids: ids,
                    type: type
                });
            }
            return RunExtractRefreshesOnDatasourcesRequest;
        })(ServerApi.Request);
        ServerApi.RunExtractRefreshesOnDatasourcesRequest = RunExtractRefreshesOnDatasourcesRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
/// <reference path="../types/IResponse.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var SetDatasourceDescriptionRequest = (function (_super) {
            __extends(SetDatasourceDescriptionRequest, _super);
            function SetDatasourceDescriptionRequest(id, description) {
                _super.call(this, 'setDatasourceDescription', {
                    id: id,
                    description: description
                });
            }
            return SetDatasourceDescriptionRequest;
        })(ServerApi.Request);
        ServerApi.SetDatasourceDescriptionRequest = SetDatasourceDescriptionRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/IResponse.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var SetDatasourceRefreshModeRequest = (function (_super) {
            __extends(SetDatasourceRefreshModeRequest, _super);
            function SetDatasourceRefreshModeRequest(params) {
                _super.call(this, 'setDatasourceRefreshMode', params);
            }
            return SetDatasourceRefreshModeRequest;
        })(ServerApi.Request);
        ServerApi.SetDatasourceRefreshModeRequest = SetDatasourceRefreshModeRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/IResponse.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var SetDatasourceRemoteAgentRequest = (function (_super) {
            __extends(SetDatasourceRemoteAgentRequest, _super);
            function SetDatasourceRemoteAgentRequest(params) {
                _super.call(this, 'setDatasourceRemoteAgent', params);
            }
            return SetDatasourceRemoteAgentRequest;
        })(ServerApi.Request);
        ServerApi.SetDatasourceRemoteAgentRequest = SetDatasourceRemoteAgentRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var SetDatasourcesOwnerRequest = (function (_super) {
            __extends(SetDatasourcesOwnerRequest, _super);
            function SetDatasourcesOwnerRequest(ids, ownerId) {
                _super.call(this, 'setDatasourcesOwner', {
                    ids: ids,
                    ownerId: ownerId
                });
            }
            return SetDatasourcesOwnerRequest;
        })(ServerApi.Request);
        ServerApi.SetDatasourcesOwnerRequest = SetDatasourcesOwnerRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/RequestHelper.ts" />
/// <reference path="../helpers/ResourceHelper.ts" />
/// <reference path="../helpers/ResultHelper.ts" />
/// <reference path="../helpers/ServerModelHelper.ts" />
/// <reference path="../models/IDataSourceInfo.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/AddTagsToDatasourcesRequest.ts" />
/// <reference path="../ServerApi/requests/DeleteDatasourcesRequest.ts" />
/// <reference path="../ServerApi/requests/GetDatasourceActionsRequest.ts" />
/// <reference path="../ServerApi/requests/GetDatasourcesRequest.ts" />
/// <reference path="../ServerApi/requests/MoveDatasourcesToProjectRequest.ts" />
/// <reference path="../ServerApi/requests/RemoveTagsFromDatasourcesRequest.ts" />
/// <reference path="../ServerApi/requests/RunExtractRefreshesOnDatasourcesRequest.ts" />
/// <reference path="../ServerApi/requests/SetDatasourceDescriptionRequest.ts" />
/// <reference path="../ServerApi/requests/SetDatasourceRefreshModeRequest.ts" />
/// <reference path="../ServerApi/requests/SetDatasourceRemoteAgentRequest.ts" />
/// <reference path="../ServerApi/requests/SetDatasourcesOwnerRequest.ts" />
/// <reference path="../services/ServerService.ts" />
var VizPortal;
(function (VizPortal) {
    var DataSources = (function () {
        function DataSources($q, ErrorNotifyingServer, FetcherFactory) {
            this.$q = $q;
            this.ErrorNotifyingServer = ErrorNotifyingServer;
            this.FetcherFactory = FetcherFactory;
            this.server = ErrorNotifyingServer.getServerService();
            this.listFetcher = FetcherFactory.getServerResourceFetcher(VizPortal.ServerApi.GetDatasourcesRequest, VizPortal.ServerApiMapper.dataSources);
            this.allQuery = new VizPortal.ResourceQuery(this.listFetcher);
            this.detailFetcher = this.FetcherFactory.getServerDetailFetcher('getDatasource', VizPortal.DatasourceMapper.mapDetail);
            this.fieldValuesFetcher = FetcherFactory.getServerResourceFetcher(VizPortal.ServerApi.GetFieldValuesRequest, VizPortal.ServerApiMapper.fieldValues);
        }
        DataSources.isPublished = function (datasource) {
            return !datasource.workbook;
        };
        DataSources.isEmbedded = function (datasource) {
            return !DataSources.isPublished(datasource);
        };
        DataSources.prototype.all = function () {
            return this.allQuery;
        };
        DataSources.prototype.published = function () {
            return this.all().addFilter(VizPortal.Filter.fieldEq(VizPortal.ServerApi.FilterFieldNames.isPublished, true));
        };
        DataSources.prototype.getById = function (id) {
            return this.detailFetcher.fetchById(id);
        };
        DataSources.prototype.valuesForField = function (field) {
            return new VizPortal.FieldValuesQuery(this.fieldValuesFetcher, field, VizPortal.ServerApi.FieldValueResourceType.datasource);
        };
        // Actions
        DataSources.prototype.actions = function (id) {
            return this.server.sendRequest(new VizPortal.ServerApi.GetDatasourceActionsRequest(id));
        };
        DataSources.prototype.del = function (ids) {
            return this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests(ids, function (idsBlock) { return new VizPortal.ServerApi.DeleteDatasourcesRequest(idsBlock); }), VizPortal.ResultHelper.combineResults);
        };
        DataSources.prototype.setDescription = function (id, description) {
            return this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.SetDatasourceDescriptionRequest(id, description));
        };
        DataSources.prototype.setOwner = function (ids, ownerId) {
            return this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests(ids, function (idsBlock) { return new VizPortal.ServerApi.SetDatasourcesOwnerRequest(idsBlock, ownerId); }), VizPortal.ResultHelper.combineResults);
        };
        DataSources.prototype.setRefreshMode = function (id, refreshMode) {
            var params = {
                id: id,
                refreshMode: refreshMode
            };
            return this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.SetDatasourceRefreshModeRequest(params));
        };
        DataSources.prototype.setRemoteAgent = function (id, remoteAgentName) {
            var params = {
                id: id,
                remoteAgentName: remoteAgentName
            };
            return this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.SetDatasourceRemoteAgentRequest(params));
        };
        DataSources.prototype.moveToProject = function (targetProjectId, datasourceIds) {
            return this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests(datasourceIds, function (idsBlock) { return new VizPortal.ServerApi.MoveDatasourcesToProjectRequest({
                ids: idsBlock,
                projectId: targetProjectId
            }); }), VizPortal.ResultHelper.combineResults);
        };
        DataSources.prototype.addTags = function (ids, tags) {
            return (tags.length > 0)
                ? this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests2(ids, tags, function (idsBlock, tagsBlock) { return new VizPortal.ServerApi.AddTagsToDatasourcesRequest(idsBlock, tagsBlock); }), VizPortal.ResultHelper.combineResults)
                : this.$q.when({});
        };
        DataSources.prototype.removeTags = function (ids, tags) {
            return (tags.length > 0)
                ? this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests2(ids, tags, function (idsBlock, tagsBlock) { return new VizPortal.ServerApi.RemoveTagsFromDatasourcesRequest(idsBlock, tagsBlock); }), VizPortal.ResultHelper.combineResults)
                : this.$q.when({});
        };
        DataSources.prototype.changeTags = function (ids, tagsToAdd, tagsToRemove) {
            var _this = this;
            return this.removeTags(ids, tagsToRemove)
                .then(function (result) { return (VizPortal.ResultHelper.hasErrors(result) ? result : _this.addTags(ids, tagsToAdd)); });
        };
        DataSources.prototype.createExtractTask = function (ids, scheduleId, extractType) {
            return this.ErrorNotifyingServer.sendRequests(VizPortal.RequestHelper.buildRequests(ids, function (idsBlock) { return new VizPortal.ServerApi.CreateExtractTasksRequest({
                targetType: VizPortal.ServerApi.ExtractTaskTargetType.Datasource,
                targetIds: idsBlock,
                scheduleId: scheduleId,
                type: extractType // ServerApi.ExtractTaskType
            }); }), VizPortal.ResultHelper.combineResults);
        };
        DataSources.prototype.refreshExtracts = function (ids, extractType) {
            return this.ErrorNotifyingServer.sendRequests(VizPortal.RequestHelper.buildRequests(ids, function (idsBlock) {
                return new VizPortal.ServerApi.RunExtractRefreshesOnDatasourcesRequest(idsBlock, extractType);
            }), VizPortal.ResultHelper.combineResults);
        };
        DataSources.$inject = [
            '$q',
            'ErrorNotifyingServer',
            'FetcherFactory'
        ];
        return DataSources;
    })();
    VizPortal.DataSources = DataSources;
    VizPortal.Module.instance().service('DataSources', DataSources);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/Order.ts" />
/// <reference path="../models/ContentFilters.ts" />
/// <reference path="../models/ContentTypes.ts" />
/// <reference path="../models/IPlace.ts" />
/// <reference path="../resources/Datasources.ts" />
/// <reference path="../resources/Views.ts" />
/// <reference path="../resources/Workbooks.ts" />
/// <reference path="../ServerApi/types/IOrderClause.ts" />
var VizPortal;
(function (VizPortal) {
    var ProjectPlace = (function () {
        function ProjectPlace($location, DataSources, Views, Workbooks) {
            var _this = this;
            this.$location = $location;
            this.DataSources = DataSources;
            this.Views = Views;
            this.Workbooks = Workbooks;
            this.urlParamsFn = function () { return _this.$location.search(); };
        }
        ProjectPlace.prototype.create = function (projectId) {
            var place = new VizPortal.Place();
            place.addSubplace(VizPortal.Subplace.create('workbooks', VizPortal.WorkbookContentType, this.Workbooks, this.urlParamsFn, { project: projectId }, ProjectPlace.ExcludeFilterKeys));
            place.addSubplace(VizPortal.Subplace.create('views', VizPortal.ViewContentType, this.Views, this.urlParamsFn, { project: projectId }, ProjectPlace.ExcludeFilterKeys));
            place.addSubplace(VizPortal.Subplace.create('datasources', VizPortal.DatasourceContentType, this.DataSources, this.urlParamsFn, { project: projectId, showEmbedded: 'false' }, ProjectPlace.ExcludeFilterKeys));
            return place;
        };
        ProjectPlace.ExcludeFilterKeys = [
            VizPortal.ContentFiltersKeys.project
        ];
        ProjectPlace.$inject = [
            '$location',
            'DataSources',
            'Views',
            'Workbooks'
        ];
        return ProjectPlace;
    })();
    VizPortal.ProjectPlace = ProjectPlace;
    VizPortal.Module.instance().service('ProjectPlace', ProjectPlace);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/Order.ts" />
/// <reference path="../models/ContentFilters.ts" />
/// <reference path="../models/ContentTypes.ts" />
/// <reference path="../models/IPlace.ts" />
/// <reference path="../resources/Datasources.ts" />
/// <reference path="../resources/Views.ts" />
/// <reference path="../resources/Workbooks.ts" />
/// <reference path="../ServerApi/types/IOrderClause.ts" />
var VizPortal;
(function (VizPortal) {
    var SiteUserPlace = (function () {
        function SiteUserPlace($location, $q, DataSources, Views, Workbooks, Subscriptions) {
            var _this = this;
            this.$location = $location;
            this.$q = $q;
            this.DataSources = DataSources;
            this.Views = Views;
            this.Workbooks = Workbooks;
            this.Subscriptions = Subscriptions;
            this.urlParamsFn = function () { return _this.$location.search(); };
        }
        SiteUserPlace.prototype.create = function (ownerId) {
            var place = new VizPortal.Place();
            place.addSubplace(VizPortal.Subplace.create('workbooks', VizPortal.WorkbookContentType, this.Workbooks, this.urlParamsFn, { owner: ownerId }, SiteUserPlace.ExcludeFilterKeys));
            place.addSubplace(VizPortal.Subplace.create('views', VizPortal.ViewContentType, this.Views, this.urlParamsFn, { owner: ownerId }, SiteUserPlace.ExcludeFilterKeys));
            place.addSubplace(VizPortal.Subplace.create('datasources', VizPortal.DatasourceContentType, this.DataSources, this.urlParamsFn, { owner: ownerId, showEmbedded: "false" }, SiteUserPlace.ExcludeFilterKeys));
            place.addSubplace(VizPortal.Subplace.create('subscriptions', VizPortal.SubscriptionContentType, this.Subscriptions, this.urlParamsFn, { owner: ownerId }, SiteUserPlace.ExcludeFilterKeys));
            return place;
        };
        SiteUserPlace.prototype.empty = function () {
            var place = new VizPortal.Place();
            // Filters are omitted because it would be extra work to make them work
            // and they serve no purpose because the subplaces are always empty.
            place.addSubplace(VizPortal.Subplace.empty('workbooks', _.omit(VizPortal.WorkbookContentType, 'filterKeys'), this.$q));
            place.addSubplace(VizPortal.Subplace.empty('views', _.omit(VizPortal.ViewContentType, 'filterKeys'), this.$q));
            place.addSubplace(VizPortal.Subplace.empty('datasources', _.omit(VizPortal.DatasourceContentType, 'filterKeys'), this.$q));
            place.addSubplace(VizPortal.Subplace.empty('subscriptions', _.omit(VizPortal.SubscriptionContentType, 'filterKeys'), this.$q));
            return place;
        };
        SiteUserPlace.ExcludeFilterKeys = [
            VizPortal.ContentFiltersKeys.owner
        ];
        SiteUserPlace.$inject = [
            '$location',
            '$q',
            'DataSources',
            'Views',
            'Workbooks',
            'Subscriptions'
        ];
        return SiteUserPlace;
    })();
    VizPortal.SiteUserPlace = SiteUserPlace;
    VizPortal.Module.instance().service('SiteUserPlace', SiteUserPlace);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var CreateProjectRequest = (function (_super) {
            __extends(CreateProjectRequest, _super);
            function CreateProjectRequest(params) {
                _super.call(this, 'createProject', params);
            }
            return CreateProjectRequest;
        })(ServerApi.Request);
        ServerApi.CreateProjectRequest = CreateProjectRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var DeleteProjectsRequest = (function (_super) {
            __extends(DeleteProjectsRequest, _super);
            function DeleteProjectsRequest(ids) {
                _super.call(this, 'deleteProjects', { ids: ids });
            }
            return DeleteProjectsRequest;
        })(ServerApi.Request);
        ServerApi.DeleteProjectsRequest = DeleteProjectsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="actionNames.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="../types/actionParams.ts" />
/// <reference path="../types/IProjectActions.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetProjectActionsRequest = (function (_super) {
            __extends(GetProjectActionsRequest, _super);
            function GetProjectActionsRequest(id) {
                _super.call(this, 'getProjectActions', { id: id });
            }
            return GetProjectActionsRequest;
        })(ServerApi.Request);
        ServerApi.GetProjectActionsRequest = GetProjectActionsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
/// <reference path="../types/IResponse.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var SetProjectNameRequest = (function (_super) {
            __extends(SetProjectNameRequest, _super);
            function SetProjectNameRequest(id, name) {
                _super.call(this, 'setProjectName', {
                    id: id,
                    name: name
                });
            }
            return SetProjectNameRequest;
        })(ServerApi.Request);
        ServerApi.SetProjectNameRequest = SetProjectNameRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
/// <reference path="../types/IResponse.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var SetProjectControlledPermissionsRequest = (function (_super) {
            __extends(SetProjectControlledPermissionsRequest, _super);
            function SetProjectControlledPermissionsRequest(ids) {
                _super.call(this, 'setProjectControlledPermissions', {
                    ids: ids
                });
            }
            return SetProjectControlledPermissionsRequest;
        })(ServerApi.Request);
        ServerApi.SetProjectControlledPermissionsRequest = SetProjectControlledPermissionsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
/// <reference path="../../models/ILongRunningAction.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var SetContentControlledPermissionsRequest = (function (_super) {
            __extends(SetContentControlledPermissionsRequest, _super);
            function SetContentControlledPermissionsRequest(ids) {
                _super.call(this, 'setContentControlledPermissions', {
                    ids: ids
                });
            }
            return SetContentControlledPermissionsRequest;
        })(ServerApi.Request);
        ServerApi.SetContentControlledPermissionsRequest = SetContentControlledPermissionsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
/// <reference path="../types/IResponse.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var SetProjectDescriptionRequest = (function (_super) {
            __extends(SetProjectDescriptionRequest, _super);
            function SetProjectDescriptionRequest(id, description) {
                _super.call(this, 'setProjectDescription', {
                    id: id,
                    description: description
                });
            }
            return SetProjectDescriptionRequest;
        })(ServerApi.Request);
        ServerApi.SetProjectDescriptionRequest = SetProjectDescriptionRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/actionParams.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var SetProjectsOwnerRequest = (function (_super) {
            __extends(SetProjectsOwnerRequest, _super);
            function SetProjectsOwnerRequest(ids, ownerId) {
                _super.call(this, 'setProjectsOwner', {
                    ids: ids,
                    ownerId: ownerId
                });
            }
            return SetProjectsOwnerRequest;
        })(ServerApi.Request);
        ServerApi.SetProjectsOwnerRequest = SetProjectsOwnerRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/RequestHelper.ts" />
/// <reference path="../helpers/ResourceHelper.ts" />
/// <reference path="../helpers/ResultHelper.ts" />
/// <reference path="../helpers/ServerModelHelper.ts" />
/// <reference path="../models/IProjectInfo.ts" />
/// <reference path="../models/ILongRunningAction.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/CreateProjectRequest.ts" />
/// <reference path="../ServerApi/requests/DeleteProjectsRequest.ts" />
/// <reference path="../ServerApi/requests/GetProjectsRequest.ts" />
/// <reference path="../ServerApi/requests/GetProjectActionsRequest.ts" />
/// <reference path="../ServerApi/requests/SetProjectNameRequest.ts" />
/// <reference path="../ServerApi/requests/SetProjectControlledPermissionsRequest.ts" />
/// <reference path="../ServerApi/requests/SetContentControlledPermissionsRequest.ts" />
/// <reference path="../ServerApi/requests/SetProjectDescriptionRequest.ts" />
/// <reference path="../ServerApi/requests/SetProjectsOwnerRequest.ts" />
/// <reference path="../services/ServerService.ts" />
/// <reference path="../services/ErrorNotifyingServer.ts" />
var VizPortal;
(function (VizPortal) {
    var Projects = (function () {
        function Projects($q, ErrorNotifyingServer, FetcherFactory) {
            this.$q = $q;
            this.ErrorNotifyingServer = ErrorNotifyingServer;
            this.server = ErrorNotifyingServer.getServerService();
            this.listFetcher = FetcherFactory.getServerResourceFetcher(VizPortal.ServerApi.GetProjectsRequest, VizPortal.ServerApiMapper.projects);
            this.allQuery = new VizPortal.ResourceQuery(this.listFetcher);
            this.detailFetcher = FetcherFactory.getServerDetailFetcher('getProject', VizPortal.ProjectMapper.mapDetail);
            this.fieldValuesFetcher = FetcherFactory.getServerResourceFetcher(VizPortal.ServerApi.GetFieldValuesRequest, VizPortal.ServerApiMapper.fieldValues);
        }
        Projects.prototype.all = function () {
            return this.allQuery;
        };
        Projects.prototype.getById = function (id) {
            return this.detailFetcher.fetchById(id);
        };
        Projects.prototype.valuesForField = function (field) {
            return new VizPortal.FieldValuesQuery(this.fieldValuesFetcher, field, VizPortal.ServerApi.FieldValueResourceType.project);
        };
        // Actions
        Projects.prototype.actions = function (id) {
            return this.server.sendRequest(new VizPortal.ServerApi.GetProjectActionsRequest(id));
        };
        Projects.prototype.del = function (ids) {
            return this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests(ids, function (idsBlock) { return new VizPortal.ServerApi.DeleteProjectsRequest(idsBlock); }), VizPortal.ResultHelper.combineResults);
        };
        Projects.prototype.rename = function (id, name) {
            return this.ErrorNotifyingServer.sendRequestAndDelay(new VizPortal.ServerApi.SetProjectNameRequest(id, name));
        };
        Projects.prototype.setDescription = function (id, description) {
            return this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.SetProjectDescriptionRequest(id, description));
        };
        Projects.prototype.setProjectControlledPermissions = function (ids) {
            return this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.SetProjectControlledPermissionsRequest(ids));
        };
        Projects.prototype.setContentControlledPermissions = function (ids) {
            return this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.SetContentControlledPermissionsRequest(ids));
        };
        Projects.prototype.setOwner = function (ids, ownerId) {
            return this.ErrorNotifyingServer.sendRequestsAndDelay(VizPortal.RequestHelper.buildRequests(ids, function (idsBlock) { return new VizPortal.ServerApi.SetProjectsOwnerRequest(idsBlock, ownerId); }), VizPortal.ResultHelper.combineResults);
        };
        Projects.prototype.create = function (name, description) {
            // Sanitize description
            if (_.isString(description)) {
                description = description.trim();
                if (description.length === 0) {
                    description = undefined;
                }
            }
            else {
                description = undefined;
            }
            return this.ErrorNotifyingServer.sendRequestAndDelay(new VizPortal.ServerApi.CreateProjectRequest({
                name: name,
                description: description
            }));
        };
        Projects.$inject = [
            '$q',
            'ErrorNotifyingServer',
            'FetcherFactory'
        ];
        return Projects;
    })();
    VizPortal.Projects = Projects;
    VizPortal.Module.instance().service('Projects', Projects);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/Order.ts" />
/// <reference path="../models/ContentTypes.ts" />
/// <reference path="../models/IPlace.ts" />
/// <reference path="../resources/Datasources.ts" />
/// <reference path="../resources/Projects.ts" />
/// <reference path="../resources/Views.ts" />
/// <reference path="../resources/Workbooks.ts" />
/// <reference path="../ServerApi/types/IOrderClause.ts" />
var VizPortal;
(function (VizPortal) {
    var SitePlace = (function () {
        function SitePlace($location, DataSources, Projects, Views, Workbooks) {
            var _this = this;
            this.$location = $location;
            this.DataSources = DataSources;
            this.Projects = Projects;
            this.Views = Views;
            this.Workbooks = Workbooks;
            this.urlParamsFn = function () { return _this.$location.search(); };
        }
        SitePlace.prototype.create = function () {
            var place = new VizPortal.Place();
            place.addSubplace(VizPortal.Subplace.create('projects', VizPortal.ProjectContentType, this.Projects, this.urlParamsFn));
            place.addSubplace(VizPortal.Subplace.create('workbooks', VizPortal.WorkbookContentType, this.Workbooks, this.urlParamsFn));
            place.addSubplace(VizPortal.Subplace.create('views', VizPortal.ViewContentType, this.Views, this.urlParamsFn));
            place.addSubplace(VizPortal.Subplace.create('datasources', VizPortal.DatasourceContentType, this.DataSources, this.urlParamsFn, { showEmbedded: 'false' }));
            return place;
        };
        SitePlace.$inject = [
            '$location',
            'DataSources',
            'Projects',
            'Views',
            'Workbooks'
        ];
        return SitePlace;
    })();
    VizPortal.SitePlace = SitePlace;
    VizPortal.Module.instance().service('SitePlace', SitePlace);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/Order.ts" />
/// <reference path="../models/ContentFilters.ts" />
/// <reference path="../models/ContentTypes.ts" />
/// <reference path="../models/IPlace.ts" />
/// <reference path="../resources/Views.ts" />
/// <reference path="../ServerApi/types/IOrderClause.ts" />
var VizPortal;
(function (VizPortal) {
    var WorkbookPlace = (function () {
        function WorkbookPlace($location, DataSources, Views, Subscriptions, ExtractTasks) {
            var _this = this;
            this.$location = $location;
            this.DataSources = DataSources;
            this.Views = Views;
            this.Subscriptions = Subscriptions;
            this.ExtractTasks = ExtractTasks;
            this.urlParamsFn = function () { return _this.$location.search(); };
        }
        WorkbookPlace.prototype.create = function (workbookId) {
            var place = new VizPortal.Place();
            place.addSubplace(VizPortal.Subplace.create('views', VizPortal.ViewInWorkbookContentType, this.Views, this.urlParamsFn, { workbook: workbookId }, WorkbookPlace.ExcludeFilterKeys));
            place.addSubplace(VizPortal.Subplace.create('datasources', VizPortal.DatasourceContentType, this.DataSources, this.urlParamsFn, { workbook: workbookId }, WorkbookPlace.DataSourceExcludeFilterKeys));
            place.addSubplace(VizPortal.Subplace.create('subscriptions', VizPortal.SubscriptionContentType, this.Subscriptions, this.urlParamsFn, { workbook: workbookId }, WorkbookPlace.ExcludeFilterKeys));
            place.addSubplace(VizPortal.Subplace.create('extractTasks', VizPortal.ExtractTaskContentType, this.ExtractTasks, this.urlParamsFn, { workbook: workbookId }, WorkbookPlace.ExcludeFilterKeys));
            return place;
        };
        WorkbookPlace.ExcludeFilterKeys = [
            VizPortal.ContentFiltersKeys.workbook,
            VizPortal.ContentFiltersKeys.project,
            VizPortal.ContentFiltersKeys.owner,
            VizPortal.ContentFiltersKeys.modifiedAfter,
            VizPortal.ContentFiltersKeys.modifiedBefore
        ];
        WorkbookPlace.DataSourceExcludeFilterKeys = WorkbookPlace.ExcludeFilterKeys.concat([
            VizPortal.ContentFiltersKeys.hasAlert,
            VizPortal.ContentFiltersKeys.tag,
            VizPortal.ContentFiltersKeys.showEmbedded
        ]);
        WorkbookPlace.$inject = [
            '$location',
            'DataSources',
            'Views',
            'Subscriptions',
            'ExtractTasks'
        ];
        return WorkbookPlace;
    })();
    VizPortal.WorkbookPlace = WorkbookPlace;
    VizPortal.Module.instance().service('WorkbookPlace', WorkbookPlace);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ContentUrl = (function () {
        function ContentUrl($state) {
            this.$state = $state;
            this.itemDetailsStateNames = {};
            this.itemDetailsStateNames[VizPortal.ProjectContentType.name] = 'main.site.content.project';
            this.itemDetailsStateNames[VizPortal.DatasourceContentType.name] = 'main.site.content.datasource.connectedWorkbooks';
            this.itemDetailsStateNames[VizPortal.WorkbookContentType.name] = 'main.site.content.workbook.views';
            this.itemSubplaceStateNames = {};
            this.itemSubplaceStateNames[VizPortal.ViewContentType.name] = '.views';
            this.itemSubplaceStateNames[VizPortal.WorkbookContentType.name] = '.workbooks';
            this.itemSubplaceStateNames[VizPortal.DatasourceContentType.name] = '.datasources';
            this.itemSubplaceStateNames['details'] = '.details';
        }
        ContentUrl.prototype.forItem = function (item, itemType, subplaceName) {
            if (itemType.name === VizPortal.ViewContentType.name) {
                return this.$state.href('main.site.viz', { path: item.path });
            }
            var stateName = this.itemDetailsStateNames[itemType.name];
            var subplaceStateName = this.itemSubplaceStateNames[subplaceName];
            if (stateName) {
                if (subplaceStateName) {
                    stateName += subplaceStateName;
                }
                return this.$state.href(stateName, { id: item.id });
            }
            throw "No URL for item type '" + itemType.name + "'";
        };
        ContentUrl.$inject = ['$state'];
        return ContentUrl;
    })();
    VizPortal.ContentUrl = ContentUrl;
    VizPortal.Module.instance().service('ContentUrl', ContentUrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="libs.ts" />
/// <reference path="controllers/ContentPlaceCtrl.ts" />
/// <reference path="controllers/ContentSubplaceCtrl.ts" />
/// <reference path="controllers/DatasourceDataConnectionCtrl.ts" />
/// <reference path="controllers/ErrorCtrl.ts" />
/// <reference path="controllers/ExtractTasksCtrl.ts" />
/// <reference path="controllers/RemoteRefreshSchedulesCtrl.ts" />
/// <reference path="controllers/SetBrowserTitleCtrl.ts" />
/// <reference path="controllers/SiteUserPlaceCtrl.ts" />
/// <reference path="controllers/SiteUserSettingsSubplaceCtrl.ts" />
/// <reference path="controllers/SubscriptionsCtrl.ts" />
/// <reference path="helpers/ActionContext.ts" />
/// <reference path="helpers/ConfigHelper.ts" />
/// <reference path="Module.ts" />
/// <reference path="models/Content.ts" />
/// <reference path="models/DatasourcePlace.ts" />
/// <reference path="models/IDataSourceInfo.ts" />
/// <reference path="models/IProjectInfo.ts" />
/// <reference path="models/IWorkbookInfo.ts" />
/// <reference path="models/ProjectPlace.ts" />
/// <reference path="models/SiteUserPlace.ts" />
/// <reference path="models/SitePlace.ts" />
/// <reference path="models/WorkbookPlace.ts" />
/// <reference path="resources/Datasources.ts" />
/// <reference path="resources/Projects.ts" />
/// <reference path="resources/Query.ts" />
/// <reference path="resources/ServerUsers.ts" />
/// <reference path="resources/SiteUsers.ts" />
/// <reference path="resources/Users.ts" />
/// <reference path="resources/Workbooks.ts" />
/// <reference path="ServerApi/types/resourceParts.ts" />
/// <reference path="ServerApi/types/IView.ts" />
/// <reference path="services/ContentUrl.ts" />
/// <reference path="services/CreateExtractTasksAction.ts" />
/// <reference path="services/SiteUrlMatcherFactory.ts" />
/// <reference path="stores/UserSettingsStore.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().config([
        '$stateProvider',
        '$urlRouterProvider',
        'SiteUrlMatcherFactoryProvider',
        function ($stateProvider, $urlRouterProvider, siteUrlMatcherFactory) {
            var siteUrl = function (url) { return siteUrlMatcherFactory.compile(url); };
            // Create a redirect handler for a site url. See $urlRouterProvider documentation for details
            var siteUrlRedirect = function (url) { return ['$match', function ($match) { return siteUrl(url).format($match); }]; };
            var rootSiteUrlRedirect = ['$match', 'StartPageService', '$location',
                function ($match, startPageService, $location) {
                    var noSiteInUrl = !$match.siteUrlName;
                    var params = $.param($location.search());
                    var startPage = (noSiteInUrl)
                        ? startPageService.getCurrentUserStartPageForCurrentSite()
                        : startPageService.getCurrentUserStartPageForSite($match.siteUrlName);
                    return startPage + (params ? (/\?/.test(startPage) ? '&' : '?') + params : '');
                }
            ];
            // Redirects for default related content types
            // TODO: perhaps add these as part of state creation helper methods
            $urlRouterProvider
                .when(siteUrl(''), rootSiteUrlRedirect)
                .when(siteUrl('/'), rootSiteUrlRedirect)
                .when(siteUrl('/{type}/'), siteUrlRedirect('/{type}'))
                .when(siteUrl('/{type}/{id}/'), siteUrlRedirect('/{type}/{id}'))
                .when(siteUrl('/projects/{id}'), siteUrlRedirect('/projects/{id}/workbooks'))
                .when(siteUrl('/workbooks/{id}'), siteUrlRedirect('/workbooks/{id}/views'))
                .when(siteUrl('/datasources/{id}'), siteUrlRedirect('/datasources/{id}/connectedWorkbooks'));
            // The url /redirect_to_view is currently required by the React favorites menu.
            // TODO: perhaps expose the view's path on the IFavorite data structure to avoid this redirect.
            if (VizPortal.FeatureFlags.reactFavoritesMenu || VizPortal.FeatureFlags.reactTopBar) {
                $urlRouterProvider
                    .when(siteUrl('/redirect_to_view/{id}'), ['$match', '$state', 'Views', function ($match, $state, views) {
                        views.getById($match.id).then(function (viewInfo) {
                            $state.transitionTo('main.site.viz', { path: viewInfo.path }, { location: "replace" });
                        });
                        return true;
                    }]);
            }
            var ResourceNames = {
                'project': 'Projects',
                'datasource': 'DataSources',
                'workbook': 'Workbooks',
                'view': 'Views'
            };
            function subplaceState(name, contentType, customResolve, templateUrl) {
                if (templateUrl === void 0) { templateUrl = 'contentSubplace.html'; }
                var resolve = {
                    subplace: ['place', function (place) { return place.subplace(name); }],
                    resource: ResourceNames[contentType.name],
                    detailsUrl: ['ContentUrl', function (ContentUrl) {
                            return function (item, subplaceName) { return ContentUrl.forItem(item, contentType, subplaceName); };
                        }],
                    projectUrl: ['ContentUrl', function (ContentUrl) {
                            return function (item, subplaceName) { return ContentUrl.forItem(item, VizPortal.ProjectContentType, subplaceName); };
                        }],
                    workbookUrl: ['ContentUrl', function (ContentUrl) {
                            return function (item, subplaceName) { return ContentUrl.forItem(item, VizPortal.WorkbookContentType, subplaceName); };
                        }],
                    defaultOrder: function () { return contentType.defaultOrder; },
                    shouldFetchDetails: function () { return (function () { return true; }); } // Fetches details by default
                };
                _.extend(resolve, customResolve);
                return {
                    url: '/' + name,
                    templateUrl: templateUrl,
                    controller: VizPortal.ContentSubplaceCtrl,
                    resolve: resolve
                };
            }
            // Site User
            // !!! ATTENTION !!!
            // If you changed the url scheme of user or user setting,
            // make sure to also update the user setting url generation code in:
            // \workgroup\vqlweb\scriptsharp\src\Authoring\ViewModels\AuthoringMastheadViewModel.cs
            $stateProvider
                .state('main.site.user', {
                abstract: true,
                url: '/user/:domainName/{username:.*}',
                templateUrl: 'siteUserPlace.html',
                controller: VizPortal.SiteUserPlaceCtrl,
                resolve: {
                    isSessionUserSelf: ['$stateParams',
                        'ServerService',
                        function ($stateParams, serverService) {
                            return serverService.isSessionUserEqualTo($stateParams['username'], $stateParams['domainName']);
                        }],
                    isSessionServerAdmin: ['ServerService',
                        function (serverService) {
                            return serverService.isSessionServerAdmin();
                        }],
                    isSessionSiteAdmin: ['ServerService',
                        function (serverService) { return serverService.isSessionSiteAdmin(); }
                    ],
                    siteUser: ['SiteUsers',
                        'Users',
                        '$stateParams',
                        'isSessionUserSelf',
                        'isSessionServerAdmin',
                        'isSessionSiteAdmin',
                        function (siteUsers, users, $stateParams, isSessionUserSelf, isSessionServerAdmin, isSessionSiteAdmin) {
                            var username = $stateParams['username'];
                            var domainName = $stateParams['domainName'];
                            if (isSessionUserSelf || isSessionServerAdmin || isSessionSiteAdmin) {
                                // user is admin or viewing their own profile; fetch the data from getSiteUser
                                return siteUsers.getUserByUsernameAndDomain(username, domainName);
                            }
                            else {
                                // non-admin, non-self; fetch the data from getUser instead of getSiteUser.
                                return users.getUserByUsernameAndDomain(username, domainName);
                            }
                        }],
                    userSettings: ['UserSettingsStore',
                        '$stateParams',
                        'isSessionUserSelf',
                        'isSessionServerAdmin',
                        'isSessionSiteAdmin',
                        function (userSettingsStore, $stateParams, isSessionUserSelf, isSessionServerAdmin, isSessionSiteAdmin) {
                            if (isSessionUserSelf || isSessionServerAdmin || isSessionSiteAdmin) {
                                // user is admin or viewing their own profile; get the user's settings
                                return userSettingsStore.getUserSettings($stateParams['username'], $stateParams['domainName']);
                            }
                            else {
                                // non-admin, non-self; don't get settings.
                                return null;
                            }
                        }],
                    place: ['$state', 'siteUser', 'SiteUserPlace', 'isSessionServerAdmin', 'isSessionUserSelf', 'ServerService',
                        function ($state, siteUser, SiteUserPlace, isSessionServerAdmin, isSessionUserSelf, server) {
                            if (siteUser) {
                                // user exists on site
                                return SiteUserPlace.create(siteUser.id);
                            }
                            else if (isSessionServerAdmin && isSessionUserSelf) {
                                // Server admin who is not a member of the site
                                return SiteUserPlace.empty();
                            }
                            else {
                                // user doesn't exist on this site
                                if (server.canSessionUserManageUsers()) {
                                    var usersErrorState = {
                                        detailsLocKey: 'userCannotBeAccessed',
                                        redirectState: 'main.site.users',
                                        redirectLocKey: 'backToUsers'
                                    };
                                    $state.go('main.error', usersErrorState);
                                }
                                else {
                                    $state.go('main.error');
                                }
                            }
                        }],
                    serverUser: ['isSessionServerAdmin',
                        '$stateParams',
                        'siteUser',
                        'ServerUsers',
                        function (isSessionServerAdmin, $stateParams, siteUser, serverUsers) {
                            // we need to get the server user if the current user is a serverAdmin and not a site member
                            if (!siteUser && isSessionServerAdmin) {
                                return serverUsers.getUserByUsernameAndDomain($stateParams['username'], $stateParams['domainName']);
                            }
                            else {
                                return null;
                            }
                        }]
                }
            })
                .state('main.site.user.workbooks', subplaceState('workbooks', VizPortal.WorkbookContentType))
                .state('main.site.user.views', subplaceState('views', VizPortal.ViewContentType))
                .state('main.site.user.datasources', subplaceState('datasources', VizPortal.DatasourceContentType, {
                shouldFetchDetails: function () { return VizPortal.DataSources.isPublished; }
            }))
                .state('main.site.user.settings', {
                url: '/settings',
                templateUrl: 'siteUserSettingsSubplace.html',
                controller: VizPortal.SiteUserSettingsSubplaceCtrl,
                resolve: {
                    serverUser: ['ServerUsers', '$stateParams', function (serverUsers, $stateParams) {
                            return serverUsers.getUserByUsernameAndDomain($stateParams['username'], $stateParams['domainName']);
                        }
                    ],
                    userRefreshTokenCount: ['ServerUsers', '$stateParams', function (serverUsers, $stateParams) {
                            return serverUsers.getUserRefreshTokenCount($stateParams['username'], $stateParams['domainName']);
                        }
                    ]
                },
                data: {
                    authLevel: VizPortal.AuthLevel.SelfOrAdmin
                }
            })
                .state('main.site.user.subscriptions', {
                url: '/subscriptions',
                templateUrl: 'subscriptions.html',
                controller: VizPortal.SubscriptionsCtrl,
                resolve: {
                    subplace: ['place', function (place) { return place.subplace('subscriptions'); }]
                },
                data: {
                    authLevel: VizPortal.AuthLevel.SelfOrAdmin
                }
            });
            // This state no longer serves any purpose and should be removed.
            $stateProvider
                .state('main.site.content', {
                url: '',
                template: '<div class="tb-fill" ui-view></div>',
                abstract: true
            });
            // Site content (aka All Content)
            $stateProvider
                .state('main.site.content.site', {
                abstract: true,
                templateUrl: 'site.html',
                resolve: {
                    place: ['SitePlace', function (SitePlace) { return SitePlace.create(); }]
                },
                controller: VizPortal.SitePlaceCtrl
            })
                .state('main.site.content.site.projects', subplaceState('projects', VizPortal.ProjectContentType))
                .state('main.site.content.site.workbooks', subplaceState('workbooks', VizPortal.WorkbookContentType))
                .state('main.site.content.site.views', subplaceState('views', VizPortal.ViewContentType))
                .state('main.site.content.site.datasources', subplaceState('datasources', VizPortal.DatasourceContentType, {
                shouldFetchDetails: function () { return VizPortal.DataSources.isPublished; }
            }));
            // Project details
            $stateProvider
                .state('main.site.content.project', {
                url: '/projects/:id',
                templateUrl: 'project.html',
                abstract: true,
                resolve: {
                    project: ['Projects', '$stateParams', function (Projects, $stateParams) {
                            return Projects.getById($stateParams.id);
                        }],
                    projectActions: ['Projects', '$stateParams', function (Projects, $stateParams) {
                            return Projects.actions($stateParams.id);
                        }],
                    place: ['project', 'ProjectPlace', function (project, ProjectPlace) {
                            return ProjectPlace.create(project.id);
                        }]
                },
                controller: VizPortal.ProjectPlaceCtrl,
                data: {
                    errorState: {
                        detailsLocKey: 'projectCannotBeAccessed',
                        redirectState: 'main.site.content.site.projects',
                        redirectLocKey: 'backToProjects'
                    }
                }
            })
                .state('main.site.content.project.datasources', subplaceState('datasources', VizPortal.DatasourceContentType, {
                shouldFetchDetails: function () { return VizPortal.DataSources.isPublished; }
            }))
                .state('main.site.content.project.workbooks', subplaceState('workbooks', VizPortal.WorkbookContentType))
                .state('main.site.content.project.views', subplaceState('views', VizPortal.ViewContentType))
                .state('main.site.content.project.permissions', {
                url: '/permissions',
                templateUrl: 'projectPermissions.html',
                controller: VizPortal.setBrowserTitleCtrl('permissions')
            })
                .state('main.site.content.project.details', {
                url: '/details',
                templateUrl: 'projectSettings.html',
                controller: VizPortal.setBrowserTitleCtrl('details')
            });
            // Workbook details
            $stateProvider
                .state('main.site.content.workbook', {
                url: '/workbooks/:id',
                templateUrl: 'workbook.html',
                abstract: true,
                resolve: {
                    workbook: ['Workbooks', '$stateParams', function (Workbooks, $stateParams) {
                            return Workbooks.getById($stateParams.id);
                        }],
                    workbookActions: ['Workbooks', '$stateParams', function (Workbooks, $stateParams) {
                            return Workbooks.actions($stateParams.id);
                        }],
                    place: ['workbook', 'WorkbookPlace', function (workbook, WorkbookPlace) { return WorkbookPlace.create(workbook.id); }]
                },
                controller: VizPortal.WorkbookPlaceCtrl,
                data: {
                    errorState: {
                        detailsLocKey: 'workbookCannotBeAccessed',
                        redirectState: 'main.site.content.site.workbooks',
                        redirectLocKey: 'backToWorkbooks'
                    }
                }
            })
                .state('main.site.content.workbook.datasources', subplaceState('datasources', VizPortal.DatasourceContentType, {
                shouldFetchDetails: function () { return VizPortal.DataSources.isPublished; }
            }, 'workbookDatasourceSubplace.html'))
                .state('main.site.content.workbook.views', subplaceState('views', VizPortal.ViewInWorkbookContentType))
                .state('main.site.content.workbook.permissions', {
                url: '/permissions',
                templateUrl: 'workbookPermissions.html',
                controller: VizPortal.setBrowserTitleCtrl('permissions')
            })
                .state('main.site.content.workbook.details', {
                url: '/details',
                templateUrl: 'workbookSettings.html',
                controller: VizPortal.setBrowserTitleCtrl('details')
            });
            VizPortal.ConfigHelper.addSubscriptionsState($stateProvider, 'main.site.content.workbook');
            VizPortal.ConfigHelper.addExtractTasksState($stateProvider, 'main.site.content.workbook', ['workbook', 'ServerService', 'CreateExtractTasksAction',
                function (workbook, ServerService, CreateExtractTasksAction) {
                    return {
                        modifyExtractTasksPermission: ServerService.isSessionSiteOrServerAdmin() || workbook.owner.id === ServerService.sessionUserId(),
                        createExtractTaskFn: function (context) { return CreateExtractTasksAction.forWorkbook(workbook, context, VizPortal.CreateExtractTasksMode.AllowSchedule); }
                    };
                }
            ]);
            // Datasource details
            $stateProvider
                .state('main.site.content.datasource', {
                url: '/datasources/:id',
                templateUrl: 'datasource.html',
                abstract: true,
                resolve: {
                    datasource: ['DataSources', '$stateParams', function (DataSources, $stateParams) {
                            return DataSources.getById($stateParams.id);
                        }],
                    datasourceActions: ['DataSources', '$stateParams', function (DataSources, $stateParams) {
                            return DataSources.actions($stateParams.id);
                        }],
                    place: ['datasource', 'DatasourcePlace', function (datasource, DatasourcePlace) {
                            return DatasourcePlace.create(datasource.id);
                        }]
                },
                controller: VizPortal.DatasourcePlaceCtrl,
                data: {
                    errorState: {
                        detailsLocKey: 'datasourceCannotBeAccessed',
                        redirectState: 'main.site.content.datasource',
                        redirectLocKey: 'backToDatasources'
                    }
                }
            })
                .state('main.site.content.datasource.connectedWorkbooks', subplaceState('connectedWorkbooks', VizPortal.WorkbookContentType))
                .state('main.site.content.datasource.dataConnection', {
                url: '/dataConnection',
                templateUrl: 'datasourceDataConnection.html',
                controller: VizPortal.DatasourceDataConnectionCtrl
            })
                .state('main.site.content.datasource.permissions', {
                url: '/permissions',
                templateUrl: 'datasourcePermissions.html',
                controller: VizPortal.setBrowserTitleCtrl('permissions')
            })
                .state('main.site.content.datasource.details', {
                url: '/details',
                templateUrl: 'datasourceSettings.html',
                controller: VizPortal.setBrowserTitleCtrl('details')
            })
                .state('main.site.content.datasource.remoteRefreshSchedules', {
                url: '/localExtractRefreshes',
                templateUrl: 'remoteRefreshSchedules.html',
                controller: VizPortal.RemoteRefreshSchedulesCtrl,
                resolve: {
                    datasource: ['DataSources', '$stateParams', function (DataSources, $stateParams) {
                            return DataSources.getById($stateParams.id);
                        }],
                    subplace: ['place', function (place) { return place.subplace('remoteRefreshSchedules'); }]
                }
            });
            VizPortal.ConfigHelper.addExtractTasksState($stateProvider, 'main.site.content.datasource', ['datasource', 'ServerService', 'CreateExtractTasksAction',
                function (datasource, ServerService, CreateExtractTasksAction) {
                    return {
                        modifyExtractTasksPermission: ServerService.isSessionSiteOrServerAdmin() || datasource.owner.id === ServerService.sessionUserId(),
                        createExtractTaskFn: function (context) { return CreateExtractTasksAction.forDatasource(datasource, context, VizPortal.CreateExtractTasksMode.AllowSchedule); },
                        datasource: datasource
                    };
                }
            ]);
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().config(['$provide', function ($provide) {
            $provide.decorator('$q', ['$delegate', function ($delegate) {
                    // Decorate all promises
                    function decoratedThen() {
                        return decoratePromise(this.originalThen.apply(this, arguments));
                    }
                    function decoratedCatch() {
                        return decoratePromise(this.originalCatch.apply(this, arguments));
                    }
                    function decoratedFinally() {
                        return decoratePromise(this.originalFinally.apply(this, arguments));
                    }
                    function progress(cb) {
                        return this.then(null, null, cb);
                    }
                    function decoratePromise(promise) {
                        promise.fin = promise['finally'];
                        promise.fail = promise['catch'];
                        promise.progress = progress;
                        promise.originalThen = promise.then;
                        promise.originalCatch = promise['catch'];
                        promise.originalFinally = promise['finally'];
                        promise.then = decoratedThen;
                        promise['catch'] = decoratedCatch;
                        promise['finally'] = decoratedFinally;
                        return promise;
                    }
                    // Decorate all functions on $q
                    function decoratedWhen() {
                        return decoratePromise(this.originalWhen.apply(this, arguments));
                    }
                    function decoratedReject() {
                        return decoratePromise(this.originalReject.apply(this, arguments));
                    }
                    function decoratedAll() {
                        return decoratePromise(this.originalAll.apply(this, arguments));
                    }
                    function decoratedDefer() {
                        var deferred = this.originalDefer.apply(this, arguments);
                        deferred.promise = decoratePromise(deferred.promise);
                        return deferred;
                    }
                    $delegate.originalWhen = $delegate.when;
                    $delegate.originalReject = $delegate.reject;
                    $delegate.originalAll = $delegate.all;
                    $delegate.originalDefer = $delegate.defer;
                    $delegate.when = decoratedWhen;
                    $delegate.reject = decoratedReject;
                    $delegate.all = decoratedAll;
                    $delegate.defer = decoratedDefer;
                    return $delegate;
                }]);
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().config(['$provide', function ($provide) {
            $provide.decorator('$state', ['$delegate', function ($delegate) {
                    $delegate.hardReload = function () {
                        $delegate.transitionTo($delegate.current.name, $delegate.params, { reload: true, notify: true, inherit: false });
                    };
                    return $delegate;
                }]);
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var ImagePreloadService = (function () {
        function ImagePreloadService() {
        }
        ImagePreloadService.prototype.preloadDynamicIconImages = function () {
            _.each(ImagePreloadService.DynamicIconImages, function (image) {
                new Image().src = 'img/' + image + '?' + VizPortal.BuildId;
            });
        };
        ImagePreloadService.DynamicIconImages = [
            'actions_hover.png',
            'busy_large.gif',
            'checkbox_empty_hover.png',
            'checkbox_mixed_hover.png',
            'checkbox_selected_hover.png',
            'checkbox_selected_normal.png',
            'close_x_hover.png',
            'column_dropdown_arrow_hover.png',
            'data_source_content_type_hover_small.png',
            'down_arrow_hover.png',
            'download_small_hover.png',
            'edit_small_hover.png',
            'expand_close_hover.png',
            'expand_open_hover.png',
            'grid_checkbox_corner_normal_hover.png',
            'info_hover.png',
            'magnifying_glass_large_hover.png',
            'magnifying_glass_small_hover.png',
            'new_workbook_small_hover.png',
            'panel_hide_hover.png',
            'panel_show_hover.png',
            'radio_button_empty_disabled.png',
            'radio_button_empty_hover.png',
            'radio_button_empty_normal.png',
            'radio_button_selected_disabled.png',
            'radio_button_selected_hover.png',
            'radio_button_selected_normal.png',
            'refresh_small_hover.png',
            'rename_small_hover.png',
            'run_now_small_hover.png',
            'signature_dropdown_small_hover.png',
            'star_empty_small_hover.png',
            'star_selected_small_normal.png',
            'star_selected_small_hover.png',
            'up_arrow_header_hover.png',
            'view_content_type_hover_small.png',
            'workbook_content_type_hover_small.png'
        ];
        return ImagePreloadService;
    })();
    VizPortal.ImagePreloadService = ImagePreloadService;
    VizPortal.Module.instance().service('ImagePreloadService', ImagePreloadService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    /**
     * Facade on ui-router's $state
     * Use this when you're trying to learn things about a state that is not the current state, otherwise use $state directly.
     */
    var StateWrapperService = (function () {
        function StateWrapperService($state) {
            this.$state = $state;
        }
        StateWrapperService.prototype.t = function (state) {
            return state.$$state;
        };
        /**
         * Returns the first state found that matches the path and the search parameters.
         * If no state is found, returns undefined
         * Normal usage: getMatchingState($location.path(), $location.search())
         */
        StateWrapperService.prototype.getMatchingState = function (path, searchParams) {
            var _this = this;
            return _.find(this.$state.get(), function (state) {
                var internalState = _this.t(state);
                return internalState && internalState.url &&
                    !!internalState.url.exec(path, searchParams);
            });
        };
        /**
         * Return the stateParams that match the path and the searchParams.
         * If no state is found, returns undefined
         * Normal usage: getStateParams($location.path(), $location.search())
         */
        StateWrapperService.prototype.getStateParams = function (path, searchParams) {
            var state = this.getMatchingState(path, searchParams);
            if (!state)
                return undefined;
            return this.t(state).url.exec(path, searchParams);
        };
        /**
         * Gets the site urlName from the current url if it is the login state
         */
        StateWrapperService.prototype.getSiteUrlNameIfLoginState = function (path, searchParams) {
            var state = this.getMatchingState(path, searchParams);
            if (!state)
                return null;
            var stateParams = this.t(state).url.exec(path, searchParams);
            if (state.name === 'login.authenticate') {
                return stateParams['site'];
            }
            return null;
        };
        StateWrapperService.prototype.isDescendantOf = function (descendant, ancestorName) {
            if (!descendant)
                return undefined;
            return this.t(descendant).includes[ancestorName] && descendant.name !== ancestorName;
        };
        StateWrapperService.$inject = ['$state'];
        return StateWrapperService;
    })();
    VizPortal.StateWrapperService = StateWrapperService;
    VizPortal.Module.instance().service('StateWrapperService', StateWrapperService);
})(VizPortal || (VizPortal = {}));
/// <reference path="libs.ts" />
/// <reference path="../app/UrlParamKeys.ts" />
/// <reference path="helpers/ErrorCodes.ts" />
/// <reference path="L10n/L10n.ts" />
/// <reference path="Module.ts" />
/// <reference path="services/BrowserTitleService.ts" />
/// <reference path="services/ImagePreloadService.ts" />
/// <reference path="services/ModalService.ts" />
/// <reference path="services/ServerService.ts" />
/// <reference path="services/SiteSwitchService.ts" />
/// <reference path="services/StateWrapperService.ts" />
/// <reference path="services/VizService.ts" />
/// <reference path="services/WindowLocationService.ts" />
/// <reference path="services/WindowPopupService.ts" />
var VizPortal;
(function (VizPortal) {
    /**
     * This is the run block for VizPortal. It is run once when the app is loaded.
     * We declare it in an isolated module for the reasons mentioned in Angular's
     * documentation (https://docs.angularjs.org/guide/module#run-blocks):
     *
     *    Run blocks are the closest thing in Angular to the main method.
     *    A run block is the code which needs to run to kickstart the application.
     *    It is executed after all of the service have been configured and the
     *    injector has been created. Run blocks typically contain code which is
     *    hard to unit-test, and for this reason should be declared in isolated
     *    modules, so that they can be ignored in the unit-tests.
     */
    angular.module('VizPortalRun', ['VizPortal']).run([
        '$injector',
        '$rootScope',
        '$state',
        '$window',
        '$document',
        '$interval',
        '$location',
        '$urlRouter',
        '$translate',
        'ServerService',
        'ModalService',
        'ToasterService',
        'SiteSwitchService',
        'StateWrapperService',
        'WindowLocationService',
        'VizService',
        'WindowPopupService',
        'BrowserTitleService',
        'ImagePreloadService',
        'BrowserSupportService',
        function ($injector, $rootScope, $state, $window, $document, $interval, $location, $urlRouter, $translate, server, modal, toaster, SiteSwitchService, StateWrapperService, WindowLocationService, VizService, WindowPopupService, BrowserTitleService, ImagePreloadService, BrowserSupportService) {
            // Initialize service which require eager instantiation
            VizPortal.Module.initializeEagerServices($injector);
            // Defer prefetching until after the first stateChangeSuccess so
            // we don't do any extra work before the page is first rendered
            var removeImagePreloadListener = $rootScope.$on('$stateChangeSuccess', function () {
                $interval(function () { return ImagePreloadService.preloadDynamicIconImages(); }, 1000, 1);
                removeImagePreloadListener();
            });
            // TFSID:408905 Disable Android Chrome's native magnifier
            if (BrowserSupportService.isAndroidChrome()) {
                BrowserSupportService.setViewport(VizPortal.ViewportContent.deviceWidth);
            }
            function redirectToLogin(errorCode) {
                var params = {
                    redirect: $location.url() || null,
                    error: errorCode === VizPortal.CommonErrorCode.InvalidSession ? null : errorCode
                };
                if (server.isAuthenticationAutoLogin()) {
                    // The signin state will attempt to auto-login by default. We don't want it to here.
                    params.disableAutoSignin = true;
                }
                var siteUrlName = StateWrapperService.getSiteUrlNameIfLoginState($location.path(), $location.search());
                if (siteUrlName) {
                    params.site = siteUrlName;
                }
                $state.go('login.authenticate', params);
            }
            function shouldRedirectToLogin(nextState) {
                if (!nextState) {
                    return false;
                }
                var isNextStateAnonymous = nextState.data && nextState.data.authLevel === VizPortal.AuthLevel.Anonymous;
                return !server.inSession() && !isNextStateAnonymous;
            }
            function shouldAutoLogin(nextState) {
                var isNextStateAnonymous = nextState && nextState.data && nextState.data.authLevel === VizPortal.AuthLevel.Anonymous;
                return !server.inSession() && !isNextStateAnonymous && server.isAuthenticationAutoLogin();
            }
            function shouldRedirectToEmbeddedViz(nextState) {
                return nextState && nextState.name === 'main.site.viz' && (VizService.isEmbedParamOn() ||
                    server.isSessionRestrictedTrustedTicket());
            }
            function shouldRedirectToGuestViz(nextState) {
                return nextState && nextState.name === 'main.site.viz' && !server.inSession() && server.isGuestEnabled();
            }
            function shouldRedirectToVizExport(nextState) {
                return nextState && nextState.name === 'main.site.viz' && VizService.pathHasExportableFileType();
            }
            $rootScope.$on('$stateChangeSuccess', function (event, toState, toStateParams) {
                var authLevel = toState.data ? toState.data.authLevel : VizPortal.AuthLevel.Anonymous;
                if (!server.isUserAuthorized(authLevel)) {
                    if (server.inSession()) {
                        $state.go('main.error', {
                            redirectSiteUrlName: toStateParams.siteUrlName // This may not be the current site
                        });
                    }
                    else {
                        $state.go('login.authenticate');
                    }
                }
            });
            $rootScope.$on('$stateChangeStart', function (event, toState, toStateParams, fromState, fromStateParams) {
                // Reset the title to just the server name.
                BrowserTitleService.setTitle();
                // If we are moving to a site area
                if (_.isString(toStateParams.siteUrlName)) {
                    // switchIfNeeded() handles site-switch error routing
                    // $location.url() is used in redirectToOtherPod to figure out the destination URL. This works well
                    // in the case where the user changes the site portion of the URL by editing the address bar.
                    // However, this does not work in the case when this code is called when a server admin clicks on a
                    // site-name in the sites list. Matt York has agreed to fix this when he replaces UIRouter.
                    SiteSwitchService.switchIfNeeded(toStateParams.siteUrlName, '/#' + $location.url());
                }
            });
            function maybeVizRedirect(nextState) {
                if (shouldRedirectToVizExport(nextState)) {
                    WindowLocationService.navigateToWithoutAddingToHistory(VizService.getVizqlUrl());
                    return true;
                }
                else if (shouldRedirectToEmbeddedViz(nextState)) {
                    WindowLocationService.navigateToWithoutAddingToHistory(VizService.getEmbeddedVizqlUrl());
                    return true;
                }
                else if (shouldRedirectToGuestViz(nextState)) {
                    WindowLocationService.navigateToWithoutAddingToHistory(VizService.getEmbeddedVizqlUrl({ isFromGuest: true }));
                    return true;
                }
                return false;
            }
            function shouldRedirectToSitePicker(props) {
                return props.isSuccessfulSamlLogin && server.isSessionMultiSite() && isRootUrl();
            }
            function isRootUrl() {
                return $location.path() === '' || $location.path() === '/';
            }
            // VizPortal 9.0 Session Expiration Solution - B144748
            // 1) Only the getActionInfo and getSessionInfo requests will extend your session
            // 2) As long as the user is “interacting ”, getSessionInfo will be requested once every 5 minutes or half
            //    the configured idle time limit (wgserver.session.idle_limit), whichever is less
            // 3) We determine if the user is “interacting” by listening to mousemove and keydown events in the browser
            function initializeSessionPing() {
                // If the browser tab comes into focus we want to refresh the session info.
                // Do this at most once every 15 seconds
                $($window).focus(_.throttle(function () { return server.refreshSessionInfo(); }, 15000, { trailing: false }));
                var fiveMinutesInMilliseconds = 5 * 60 * 1000;
                var halfSessionIdleLimitInMilliseconds = server.getSessionIdleLimitSeconds() * 1000;
                var sessionPingPeriodWhileUserIsInteracting = Math.min(fiveMinutesInMilliseconds, halfSessionIdleLimitInMilliseconds);
                // Don't let the period fall below 15 seconds, because that's absurdly short
                sessionPingPeriodWhileUserIsInteracting = Math.max(sessionPingPeriodWhileUserIsInteracting, 15 * 1000);
                var listenForInteractionAfterSessionPingPeriod = function () {
                    // timeout for session ping period, then listen to interaction events
                    $interval(function () {
                        // $.one will bind to the event once per element per event type. In this case the handler will
                        // be fired twice if mousemove and keydown both fire, so ensure the handler is only called once
                        $($document).one('keydown mousemove touchstart', _.once(function () {
                            // User is alive! ping the server, then sleep on it
                            server.refreshSessionInfo();
                            listenForInteractionAfterSessionPingPeriod();
                        }));
                    }, sessionPingPeriodWhileUserIsInteracting, 1, false);
                };
                // Kick it off
                listenForInteractionAfterSessionPingPeriod();
            }
            // The client is hidden initially. We should show it once we know we will be displaying UI
            // (as opposed to navigating away from vizportal client).
            function showClient() {
                $($window.document.body).show();
            }
            // Overrides the server authentication type with the uppercased "auth" param from the url
            // Example: http://localhost/#/signin?auth=external -> EXTERNAL
            // TFS:373719 Reimplement the allow_direct_access scenario for 9.0
            function overrideAuthenticationTypeBasedOnUrl() {
                var override = $location.search()[VizPortal.UrlParamKeys.AuthenticationType];
                $location.search(VizPortal.UrlParamKeys.AuthenticationType, null);
                server.overrideAuthenticationType(override ? override.toUpperCase() : null);
            }
            function bootstrapCheckInitialAdmin(code, nextState) {
                initializeSessionPing();
                overrideAuthenticationTypeBasedOnUrl();
                // Need to know if the user already authenticated or not
                if (code === VizPortal.UninitializedServerErrorCode.UntrustedMachine) {
                    showClient();
                    $state.go('login.untrusted');
                }
                else if (code === VizPortal.UninitializedServerErrorCode.ReadyToInitialize) {
                    showClient();
                    $state.go('login.init');
                }
                else {
                    bootstrapCheckAutoLogin(code, nextState);
                }
            }
            function bootstrapCheckAutoLogin(code, nextState) {
                if (shouldAutoLogin(nextState)) {
                    // Go to interstitial page that may be showing 'Signing In' spinner
                    $state.go('login.interstitial').then(function () { return showClient(); });
                    server.autoLogin().then(function () {
                        // Go to site picker if destination site is ambiguous
                        if (isRootUrl() && server.isSessionMultiSite()) {
                            $state.go('login.site');
                        }
                        else {
                            bootstrapCheckRedirects(code, nextState);
                        }
                    }, function (errorCode) {
                        bootstrapCheckRedirects(errorCode, nextState);
                    });
                }
                else {
                    bootstrapCheckRedirects(code, nextState);
                }
            }
            function bootstrapCheckRedirects(code, nextState) {
                if (maybeVizRedirect(nextState)) {
                }
                else if (shouldRedirectToLogin(nextState)) {
                    showClient();
                    redirectToLogin(code);
                }
                else if (shouldRedirectToSitePicker({
                    isSuccessfulSamlLogin: Helpers.BooleanQueryParamRegex.test($location.search()[VizPortal.UrlParamKeys.IsFromSaml])
                })) {
                    showClient();
                    $state.go('login.site');
                }
                else {
                    // Retry $locationChange
                    showClient();
                    $urlRouter.sync();
                }
            }
            $rootScope.$on('$locationChangeStart', function (event) {
                var nextState = StateWrapperService.getMatchingState($location.path(), $location.search());
                if (server.isSessionStateUnknown()) {
                    // We've just loaded the app and session state is unknown. We can't decide what
                    // to do until we know the session state, so prevent the location change. This
                    // will prevent the app from entering the ui router state machine.
                    event.preventDefault();
                    server.bootstrapSession().then(function (code) { return bootstrapCheckInitialAdmin(code, nextState); });
                }
                else if (maybeVizRedirect(nextState)) {
                    event.preventDefault();
                }
                else if (shouldRedirectToLogin(nextState)) {
                    event.preventDefault();
                    redirectToLogin(null);
                }
            });
            // Dismiss modal dialogs on location change e.g. if the user clicks the back button
            $rootScope.$on('$locationChangeSuccess', function () {
                modal.dismissAll();
            });
            // Some very basic error handling
            $rootScope.$on('$stateChangeError', function (event, toState, toStateParams, fromState, fromStateParams, error) {
                if (toState.data['errorState']) {
                    $state.go('main.error', toState.data['errorState']);
                }
                else {
                    $state.go('main.error');
                }
            });
            // Keep html lang attribute synchronized with the current language
            $rootScope.$watch(function () { return VizPortal.L10n.language; }, function () {
                if (VizPortal.L10n.language) {
                    angular.element("html")
                        .attr("lang", VizPortal.L10n.language)
                        .attr("xml:lang", VizPortal.L10n.language);
                }
            });
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../models/ISliceable.ts" />
/// <reference path="../models/Set.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../resources/ActiveDirectoryGroups.ts" />
/// <reference path="../resources/SiteRoles.ts" />
/// <reference path="../ServerApi/requests/SearchActiveDirectoryGroupNameRequest.ts" />
/// <reference path="../ServerApi/types/IGroup.ts" />
/// <reference path="../services/ActiveDirectoryGroupAction.ts" />
/// <reference path="../services/SliceableFactory.ts" />
var VizPortal;
(function (VizPortal) {
    var AddActiveDirectoryGroupDialogCtrl = (function () {
        function AddActiveDirectoryGroupDialogCtrl($scope, $translate, activeDirectoryGroups, sliceableFactory) {
            var _this = this;
            this.$scope = $scope;
            this.$translate = $translate;
            this.activeDirectoryGroups = activeDirectoryGroups;
            this.sliceableFactory = sliceableFactory;
            // initialize search stuff
            $scope.groupSearchValue = { text: "" };
            $scope.isSearchStringEmpty = function () { return ($scope.groupSearchValue.text !== ''); };
            var debouncedUpdate = _.debounce(function (newValue) {
                _this.$scope.$evalAsync(function () {
                    _this.onSearchTextChanged(newValue);
                });
            }, 200);
            $scope.$watch('groupSearchValue.text', function (newSearchText) {
                _this.resetSelection();
                _this.$scope.sliceable = _this.sliceableFactory.fromArray();
                if (_.isString(newSearchText) && newSearchText.length > 0) {
                    // input is a non-empty string
                    _this.$scope.hasResults = false;
                    _this.$scope.statusMessage = _this.$translate.instant('addUsersImportAdGroupSearching');
                    debouncedUpdate(newSearchText);
                }
                else {
                    // input is empty
                    _this.$scope.hasResults = false;
                    $scope.statusMessage = "";
                }
            });
            // initialize state
            $scope.hasResults = false;
            $scope.statusMessage = "";
            $scope.sliceable = this.sliceableFactory.fromArray(); // list of groups, initially empty.
            $scope.selectedItems = new VizPortal.Set(function (group) { return group.id; });
            $scope.disabledItems = new VizPortal.Set(function (group) { return group.id; });
            $scope.groupsToImport = new VizPortal.Set(function (group) { return group.id; });
            // possible site roles settings for the imported group include everything except guest & admin.
            $scope.siteRoleOptions = VizPortal.SiteRoles.WithoutGuestOrServerAdmin;
            // link some private functions to this scope
            $scope.rowClicked = function (row, colIndex) {
                _this.onRowClicked(row, colIndex);
            };
            $scope.isRowSelected = function (locals) {
                return $scope.groupsToImport.contains(locals.row);
            };
        }
        // whenever a row is clicked, add it to the list of groups to import & selected items.
        AddActiveDirectoryGroupDialogCtrl.prototype.onRowClicked = function (row, colIndex) {
            if (!this.$scope.disabledItems.contains(row)) {
                // row is enabled.
                if (!this.$scope.selectedItems.contains(row)) {
                    // the clicked row isn't selected.  reset selection before selecting it (to force single-select).
                    this.resetSelection();
                }
                this.$scope.selectedItems.toggle(row);
                this.$scope.groupsToImport.toggle(row);
                this.$scope.group.model = row;
            }
        };
        // whenever a user searches, fetch the groups and set the sliceable.
        AddActiveDirectoryGroupDialogCtrl.prototype.onSearchTextChanged = function (newSearchText) {
            var _this = this;
            if (_.isString(newSearchText)
                && newSearchText.length > 0) {
                var searchInput = AddActiveDirectoryGroupDialogCtrl.prepareSearchTextInput(newSearchText);
                this.activeDirectoryGroups.searchActiveDirectoryGroupName(searchInput).then(function (result) {
                    if (newSearchText === _this.$scope.groupSearchValue.text) {
                        _this.$scope.sliceable = _this.sliceableFactory.fromArray(result.groups);
                        // checking newSearchText against the groupSearchValue is to make sure this result isn't stale.
                        // if the result is stale now, skip all this because we know a later result will be handled.
                        // TODO: how should we handle LDAP errors when searching?
                        if (result.hasMoreItems) {
                            // received a partial list of the search results (truncated by server).
                            _this.$scope.hasResults = true;
                            _this.$scope.statusMessage = _this.$translate.instant('addUsersImportAdGroupLimit');
                        }
                        else if (!result.groups || result.groups.length == 0) {
                            // received no results.
                            _this.$scope.hasResults = false;
                            _this.$scope.statusMessage = _this.$translate.instant('addUsersImportAdGroupNoResults');
                        }
                        else {
                            // default case: received at least one result, not truncated.
                            _this.$scope.hasResults = true;
                            _this.$scope.statusMessage = "";
                        }
                    }
                });
            }
            else {
            }
        };
        // helpers
        AddActiveDirectoryGroupDialogCtrl.prototype.resetSelection = function () {
            this.$scope.selectedItems.clear();
            this.$scope.groupsToImport.clear();
            this.$scope.group.model = null;
            this.$scope.group.siteRole = null;
        };
        AddActiveDirectoryGroupDialogCtrl.prepareSearchTextInput = function (searchText) {
            // regex for exact search terms: begins & ends with ", with at least one char between.
            var exactSearchTermRegexp = /^["].+["]$/;
            // regex for wildcard search terms: anything containing an asterisk.
            var wildSearchTermRegexp = /.*[*]+.*/;
            // change the search text if needed, in preparation for searchActiveDirectoryGroupName.
            var result;
            if (exactSearchTermRegexp.test(searchText)) {
                // exact search: return the string with the " marks removed from the ends.
                result = searchText.substring(1, searchText.length - 1);
            }
            else if (wildSearchTermRegexp.test(searchText)) {
                // wildcard search: don't change the string.
                result = searchText;
            }
            else {
                // fuzzy search: return the string with * prepended and appended around the group name.
                if (searchText.search(/\\/) > 0) {
                    // input includes a backslash, which indicates domainName\groupName format;
                    // append & prepend * to the input after the slash.
                    result = searchText.replace(/([^\\]+)\\([^\\]+)/g, "$1\\*$2*");
                }
                else {
                    // append & prepend * to the text input.
                    result = searchText.replace(/(.+)/g, "*$1*");
                }
            }
            return result;
        };
        AddActiveDirectoryGroupDialogCtrl.$inject = [
            '$scope',
            '$translate',
            'ActiveDirectoryGroups',
            'SliceableFactory'
        ];
        return AddActiveDirectoryGroupDialogCtrl;
    })();
    VizPortal.AddActiveDirectoryGroupDialogCtrl = AddActiveDirectoryGroupDialogCtrl;
    VizPortal.Module.instance().controller('AddActiveDirectoryGroupDialogCtrl', AddActiveDirectoryGroupDialogCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../fetchers/ListResult.ts" />
/// <reference path="../helpers/Filter.ts" />
/// <reference path="../helpers/Helpers.ts" />
/// <reference path="../helpers/Order.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../models/IGroupInfo.ts" />
/// <reference path="../models/ISliceable.ts" />
/// <reference path="../models/OrderKeys.ts" />
/// <reference path="../models/Set.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../resources/Query.ts" />
/// <reference path="../resources/SiteUsers.ts" />
/// <reference path="../ServerApi/types/IUser.ts" />
/// <reference path="../services/ServerService.ts" />
/// <reference path="../services/ToasterService.ts" />
/// <reference path="../services/UserActionNotification.ts" />
var VizPortal;
(function (VizPortal) {
    var AddUsersToGroupDialogCtrl = (function () {
        function AddUsersToGroupDialogCtrl($scope, users, group, groupMembershipUpdateActionNotification, $translate, toaster, server) {
            // search stuff
            var _this = this;
            this.$scope = $scope;
            this.users = users;
            this.group = group;
            this.groupMembershipUpdateActionNotification = groupMembershipUpdateActionNotification;
            this.$translate = $translate;
            this.toaster = toaster;
            this.server = server;
            this.isGroupMembershipPrecomputed = false;
            $scope.userSearchValue = { text: '' };
            $scope.$watch('userSearchValue.text', function (newValue) {
                _this.onSearchTextChanged(newValue);
            });
            // site users list stuff
            $scope.sliceable = this.users.all().withOrder(AddUsersToGroupDialogCtrl.ListOrder);
            $scope.selectedItems = new VizPortal.Set(function (user) { return user.id; });
            $scope.disabledItems = new VizPortal.Set(function (user) { return user.id; });
            $scope.usersToBeAdded = new VizPortal.Set(function (user) { return user.id; });
            this.tryPrecomputeGroupMembership();
            $scope.usersSliceChanged = function (newSlice) {
                _this.onUsersSliceChanged(newSlice);
            };
            $scope.rowClicked = function (row, colIndex) {
                _this.onRowClicked(row, colIndex);
            };
            $scope.isRowSelected = function (locals) {
                return $scope.usersToBeAdded.contains(locals.row);
            };
            // dialog stuff
            $scope.addUsersToGroupDescription = this.$translate.instant('addUsersToGroupDescription', { GROUP_NAME: VizPortal.L10n.elideIfLong(group.name) });
            $scope.confirmLabel = function () {
                return _this.$translate.instant('confirmAddUsersToGroup', {
                    ADD_USER_COUNT: $scope.usersToBeAdded.size()
                }, VizPortal.L10n.Interpolations.Count);
            };
            $scope.busy = false;
            $scope.confirm = function () {
                _this.onConfirmAdd();
            };
            $scope.confirmDisabled = function () {
                return ($scope.usersToBeAdded.size() === 0);
            };
        }
        AddUsersToGroupDialogCtrl.prototype.onSearchTextChanged = function (newSearchText) {
            var query = this.users.all().withOrder(AddUsersToGroupDialogCtrl.ListOrder);
            if (_.isString(newSearchText) && newSearchText.length > 0) {
                query = query.withFilters([VizPortal.Filter.search(newSearchText)]);
            }
            this.$scope.sliceable = query;
        };
        AddUsersToGroupDialogCtrl.prototype.onConfirmAdd = function () {
            var _this = this;
            this.$scope.busy = true;
            var users = _.clone(this.$scope.usersToBeAdded); // clone for independence from further selection
            var userIds = users.keys();
            this.users.addToGroups(users.keys(), [this.group.id]).then(function (result) {
                // show toast
                _this.groupMembershipUpdateActionNotification.notify(result, users, 1, _this.group.name, 0, "");
                _this.$scope.close(result);
            });
        };
        // Try precompute selection for users already in the group.
        // If there are not that many items in group membership it might make more sense to just
        // precompute the whole group membership. That way, we don't have to issue an extra request
        // everytime the slice changes.
        AddUsersToGroupDialogCtrl.prototype.tryPrecomputeGroupMembership = function () {
            var _this = this;
            var filters = [VizPortal.Filter.stringArrayFieldHas("groupIds", this.group.id)];
            var res = this.users.all().withFilters(filters);
            res.getCount().then(function (countResult) {
                // only precompute if total group membership is under 100
                if (countResult <= 100) {
                    res.getSlice(0, countResult).then(function (result) {
                        _this.isGroupMembershipPrecomputed = true;
                        _.each(result.items, function (item) {
                            _this.$scope.selectedItems.add(item);
                            _this.$scope.disabledItems.add(item);
                        });
                    });
                }
                else {
                    _this.isGroupMembershipPrecomputed = false;
                }
            });
        };
        AddUsersToGroupDialogCtrl.prototype.onRowClicked = function (row, colIndex) {
            if (this.$scope.disabledItems.contains(row)) {
                return;
            }
            this.$scope.selectedItems.toggle(row);
            this.$scope.usersToBeAdded.toggle(row);
        };
        // slice changes when the users scrolls down the list
        AddUsersToGroupDialogCtrl.prototype.onUsersSliceChanged = function (newSlice) {
            var _this = this;
            // only do this if we have not already computed the whole group membership upfront
            if (!this.isGroupMembershipPrecomputed) {
                var userIds = _.map(newSlice.items, function (item) { return item.id; });
                var usersByIdMap = Helpers.dictFromArray(newSlice.items, VizPortal.ServerApi.UserKeys.id);
                if (userIds.length > 0) {
                    this.server.sendRequest(new VizPortal.ServerApi.GetUsersGroupMembershipRequest({ userIds: userIds }))
                        .then(function (result) {
                        _.each(result.members, function (member) {
                            if (member.groupId === _this.group.id) {
                                _this.$scope.selectedItems.add(usersByIdMap[member.userId]);
                                _this.$scope.disabledItems.add(usersByIdMap[member.userId]);
                            }
                        });
                    });
                }
            }
        };
        AddUsersToGroupDialogCtrl.ListOrder = [VizPortal.Order.asc(VizPortal.OrderKeys.displayName)];
        AddUsersToGroupDialogCtrl.$inject = [
            '$scope',
            'SiteUsers',
            // Resolved on ui-router state config
            'group',
            'GroupMembershipUpdateActionNotification',
            '$translate',
            'ToasterService',
            'ServerService'
        ];
        return AddUsersToGroupDialogCtrl;
    })();
    VizPortal.AddUsersToGroupDialogCtrl = AddUsersToGroupDialogCtrl;
    VizPortal.Module.instance().controller('AddUsersToGroupDialogCtrl', AddUsersToGroupDialogCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var PollService = (function () {
        function PollService(server, $q, $interval) {
            this.server = server;
            this.$q = $q;
            this.$interval = $interval;
        }
        /**
         * Poll the request until isComplete callback returns true.
         *
         * Clients of poll() are responsible for calling poller.cancel() to prevent zombie polls
         * from hanging around. For example, if called directly from a controller the poller
         * should be canceled on $scope destruction:
         *
         *     $scope.$on('$destroy', () => {
         *       poller.cancel()
         *     });
         */
        PollService.prototype.poll = function (request, isComplete, customPollPeriod) {
            var _this = this;
            var deferred = this.$q.defer();
            var pollFulfilledFn = function (result) {
                if (isComplete(result)) {
                    deferred.resolve(result);
                }
                else {
                    deferred.notify(result);
                    pollPeriod = (customPollPeriod) ? customPollPeriod : Math.min(PollService.PollPeriodMultiplier * pollPeriod, PollService.MaxPollPeriodMS);
                    timeoutPromise = _this.$interval(poll, pollPeriod, 1);
                }
            };
            var pollRejectedFn = function (reason) {
                deferred.reject(reason);
            };
            var poll = function () {
                _this.server.sendRequest(request).then(pollFulfilledFn, pollRejectedFn);
            };
            var pollPeriod = PollService.InitialPollPeriodMS;
            var timeoutPromise = this.$interval(poll, pollPeriod, 1);
            return {
                promise: deferred.promise,
                cancel: function () {
                    deferred.reject(VizPortal.ErrorReason.Canceled);
                    _this.$interval.cancel(timeoutPromise);
                }
            };
        };
        PollService.$inject = ['ServerService', '$q', '$interval'];
        PollService.MaxPollPeriodMS = 3000;
        PollService.InitialPollPeriodMS = 300;
        PollService.PollPeriodMultiplier = 1.3;
        return PollService;
    })();
    VizPortal.PollService = PollService;
    VizPortal.Module.instance().service('PollService', PollService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetUserAlertCountRequest = (function (_super) {
            __extends(GetUserAlertCountRequest, _super);
            function GetUserAlertCountRequest(params) {
                if (params === void 0) { params = {}; }
                _super.call(this, 'getUserAlertCount', params);
            }
            return GetUserAlertCountRequest;
        })(ServerApi.Request);
        ServerApi.GetUserAlertCountRequest = GetUserAlertCountRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/ErrorCodes.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../models/IAlertInfo.ts" />
/// <reference path="../models/IViewInfo.ts" />
/// <reference path="../resources/Alerts.ts" />
/// <reference path="../resources/Datasources.ts" />
/// <reference path="../resources/ExtractTasks.ts" />
/// <reference path="../resources/Workbooks.ts" />
/// <reference path="../services/PollService.ts" />
/// <reference path="../services/ServerService.ts" />
/// <reference path="../ServerApi/requests/GetUserAlertListRequest.ts" />
/// <reference path="../ServerApi/requests/GetUserAlertCountRequest.ts" />
var VizPortal;
(function (VizPortal) {
    var AlertMenuCtrl = (function () {
        function AlertMenuCtrl($scope, $translate, alerts, datasources, extractTasks, pollService, workbooks, server) {
            $scope.totalAlerts = 0;
            var pollFunction = function (result) {
                $scope.totalAlerts = result.totalCount;
                return false;
            };
            var poll = pollService.poll(new VizPortal.ServerApi.GetUserAlertCountRequest(), pollFunction, AlertMenuCtrl.POLL_DURATION);
            $scope.getAlertList = function () { return alerts.getList().then(function (alertList) {
                // Alert list is set
                var count = alertList.total;
                $scope.alertList = alertList.alerts;
                $scope.totalAlerts = count;
                // Since data is not sliceable this determines the count at the bottom of the alert list.
                // The number indicates all unshown alerts
                $scope.showRemainingAlerts = $translate.instant('moreAlerts', {
                    ITEM: (count - $scope.alertList.length)
                }, VizPortal.L10n.Interpolations.Count);
            }); };
            $scope.$on('$destroy', function () {
                poll.cancel();
            });
            // These methods on the scope are duplicates of those in tbAlertInfo.ts.
            // TODO: Remove this duplication.
            // Simple formatting so the number of effected workbooks shown in the list of
            // alerts does not get too long
            $scope.workbooksAffectedString = function (workbookList) {
                if (workbookList) {
                    var length = workbookList.length;
                    if (length === 1) {
                        return $translate.instant('outOfDateWithName', {
                            NAME: VizPortal.L10n.elideIfLong(workbookList[0].name)
                        });
                    }
                    else if (length > 1) {
                        return $translate.instant('outOfDateWorkbooksWithCount', {
                            LIST_COUNT: length
                        }, VizPortal.L10n.Interpolations.Count);
                    }
                }
                return $translate.instant('outOfDateWorkbookNone');
            };
            $scope.tryAgainClick = function (alert, index) {
                $scope.alertList.splice(index, 1);
                $scope.totalAlerts--;
                var taskId = alert.taskId;
                var extractType = alert.alertType; // either 'IncrementExtract' or 'RefreshExtract'.
                if (taskId) {
                    // run extract task by ID
                    extractTasks.run([taskId]).then(function () { return $scope.getAlertList(); });
                }
                else if (extractType) {
                    // if we don't have a task ID,
                    // we may need to run a datasource or workbook refresh by the item ID & refresh type.
                    // if datasourceId is present, the alert item is a datasource.
                    // if datasourceId is not present, the alert item is a workbook with ID affectedWorkbookIds[0].
                    var datasourceId = alert.datasource && alert.datasource.id;
                    var workbookId = alert.workbooks && alert.workbooks[0] && alert.workbooks[0].id;
                    if (datasourceId) {
                        // refresh datasource
                        datasources.refreshExtracts([datasourceId], extractType).then(function () { return $scope.getAlertList(); });
                    }
                    else if (workbookId) {
                        // refresh workbook
                        workbooks.refreshExtracts([workbookId], extractType).then(function () { return $scope.getAlertList(); });
                    }
                }
            };
            // Maps to the string version of the error code
            $scope.getFailureType = function (alert) {
                var translated = "";
                switch (alert.statusCode) {
                    case VizPortal.AlertErrorCode.AlertSignInFailed:
                    case VizPortal.AlertErrorCode.AlertRemoteSignInFailed:
                        translated = $translate.instant('signInFailedUnknownReason');
                        break;
                    case VizPortal.AlertErrorCode.AlertExpiredPassword:
                    case VizPortal.AlertErrorCode.AlertRemoteExpiredPassword:
                        translated = $translate.instant('expiredPassword');
                        break;
                    case VizPortal.AlertErrorCode.AlertAccessTokenValidation:
                        translated = $translate.instant('accessTokenValidation');
                        break;
                    case VizPortal.AlertErrorCode.AlertAuthConfiguration:
                        translated = $translate.instant('authConfiguration');
                        break;
                    case VizPortal.AlertErrorCode.AlertConnectionFailure:
                    case VizPortal.AlertErrorCode.AlertRemoteConnectionFailure:
                        translated = $translate.instant('connectionFailure');
                        break;
                    case VizPortal.AlertErrorCode.AlertOverlappingSchedules:
                        translated = $translate.instant('overlappingSchedules');
                        break;
                    case VizPortal.AlertErrorCode.AlertFullRefreshRequired:
                        translated = $translate.instant('fullRefreshRequired');
                        break;
                    case VizPortal.AlertErrorCode.AlertConnectionlessFailure:
                        translated = $translate.instant('connectionlessFailure');
                        break;
                    default:
                        // AlertErrorCode.AlertUnknownFailure or AlertErrorCode.AlertRemoteUnknownFailure
                        translated = $translate.instant('unknownFailure');
                }
                if (alert.suspended || server.isAlertFailureCountEnabled()) {
                    return $translate.instant('failureNote', { COUNT: alert.consecutiveFailureCount }, VizPortal.L10n.Interpolations.Count) + translated;
                }
                else {
                    return translated;
                }
            };
            // One type of alert cannot be fixed by editing a data connection. Therefore the edit connection
            // feature is disabled for this one
            $scope.editableFailure = function (statusCode) {
                return statusCode !== VizPortal.AlertErrorCode.AlertOverlappingSchedules;
            };
            $scope.isRemoteRefresh = function (statusCode) {
                return _.contains(AlertMenuCtrl.REMOTE_REFRESH_STATUS_CODES, statusCode);
            };
            $scope.hasSuspended = function (alertList) {
                if (alertList) {
                    for (var i = 0, l = alertList.length; i < l; i++) {
                        if (alertList[i].suspended) {
                            return true;
                        }
                    }
                    return false;
                }
            };
        }
        AlertMenuCtrl.POLL_DURATION = 150000;
        AlertMenuCtrl.REMOTE_REFRESH_STATUS_CODES = [
            VizPortal.AlertErrorCode.AlertRemoteUnknownFailure,
            VizPortal.AlertErrorCode.AlertRemoteSignInFailed,
            VizPortal.AlertErrorCode.AlertRemoteExpiredPassword,
            VizPortal.AlertErrorCode.AlertRemoteConnectionFailure,
        ];
        AlertMenuCtrl.$inject = [
            '$scope',
            '$translate',
            'Alerts',
            'DataSources',
            'ExtractTasks',
            'PollService',
            'Workbooks',
            'ServerService'
        ];
        return AlertMenuCtrl;
    })();
    VizPortal.AlertMenuCtrl = AlertMenuCtrl;
    VizPortal.Module.instance().controller('AlertMenuCtrl', AlertMenuCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../models/IVizPortalCookies.ts" />
var VizPortal;
(function (VizPortal) {
    // TODO: 'preview' is probably more accurate than 'validate'
    VizPortal.uploadCsvAction = {
        importFile: 'import',
        validateFile: 'validate'
    };
    VizPortal.Module.instance().directive('tbBulkImportUsersForm', [
        '$cookies',
        '$q',
        '$timeout',
        'LongRunningActionService',
        'ServerService',
        function ($cookies, $q, $timeout, longRunningActionService, server) {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'bulkImportUsersForm.html',
                scope: {
                    endpoint: '=',
                    formControls: '=?'
                },
                link: function (scope, form, attr) {
                    var requestInProgress = false;
                    // Get the XSRF-TOKEN which is sent to the server in a hidden input element.
                    // This should be the only place we need to do this.
                    // If this in needed elsewhere, move this logic to a common place.
                    scope.xsrfToken = $cookies[VizPortal.CookieKeys.XsrfToken];
                    scope.authenticationSelector = {
                        visible: server.isThirdPartyAuthEnabled(),
                        selectionValue: server.isThirdPartyAuthEnabled() // even if the form is not visible,
                    };
                    var deferred;
                    scope.formControls = {
                        canSubmitForm: function () { return scope.bulkImportForm.$valid && !requestInProgress; },
                        submitFormForAction: function (action) {
                            scope.action = action;
                            deferred = $q.defer();
                            submit();
                            return deferred.promise;
                        }
                    };
                    scope.handleFormSubmitResult = function (result) {
                        // the initial form submit result gives us an actionId that we use to poll for the real import results
                        // we don't resolve the promise until we get import results or failure from the completed action.
                        if (result.actionId) {
                            var progressTracker = longRunningActionService.trackProgress(result.actionId);
                            progressTracker.promise.then(importComplete, importFailed, notifyProgress);
                        }
                        else {
                            importFailed(VizPortal.ErrorReason.Unknown);
                        }
                    };
                    var importComplete = function (result) {
                        if (result && result.succeeded === false) {
                            importFailed(VizPortal.ErrorReason.Unknown);
                        }
                        else {
                            // Add a delay to allow solr to index
                            $timeout(function () {
                                requestInProgress = false;
                                deferred.resolve(result);
                            }, VizPortal.ErrorNotifyingServer.ResponseDelay);
                        }
                    };
                    var importFailed = function (reason) {
                        requestInProgress = false;
                        deferred.reject(reason);
                    };
                    var notifyProgress = function (action) {
                        deferred.notify(action);
                    };
                    var submit = function () {
                        requestInProgress = true;
                        // Do the submit after a timeout so that $digest has time to run and
                        // update the value of the action on the form
                        $timeout(function () { return form.submit(); });
                    };
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../directives/tbBulkImportUsersForm.ts" />
/// <reference path="../models/ILongRunningAction.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/AddUsersOptionsAction.ts" />
/// <reference path="../services/HelpService.ts" />
/// <reference path="../services/ModalService.ts" />
/// <reference path="../services/ServerService.ts" />
/// <reference path="../services/ToasterService.ts" />
var VizPortal;
(function (VizPortal) {
    (function (BulkImportUsersDialogState) {
        BulkImportUsersDialogState[BulkImportUsersDialogState["SelectFile"] = 0] = "SelectFile";
        BulkImportUsersDialogState[BulkImportUsersDialogState["ImportInProgress"] = 1] = "ImportInProgress";
        BulkImportUsersDialogState[BulkImportUsersDialogState["PreviewComplete"] = 2] = "PreviewComplete";
        BulkImportUsersDialogState[BulkImportUsersDialogState["ImportComplete"] = 3] = "ImportComplete";
    })(VizPortal.BulkImportUsersDialogState || (VizPortal.BulkImportUsersDialogState = {}));
    var BulkImportUsersDialogState = VizPortal.BulkImportUsersDialogState;
    var BulkImportUsersDialogCtrl = (function () {
        function BulkImportUsersDialogCtrl($scope, $translate, apiPrefix, method, // BulkImportUsersDialogCtrl.Method
            HelpService, toaster) {
            var _this = this;
            this.$scope = $scope;
            this.$translate = $translate;
            this.toaster = toaster;
            $scope.form = { controls: null };
            $scope.currentState = BulkImportUsersDialogState.SelectFile;
            $scope.dialogState = BulkImportUsersDialogState;
            // This is the url that the form is submitted to
            $scope.endpoint = apiPrefix + method;
            $scope.importFile = function () {
                $scope.currentState = BulkImportUsersDialogState.ImportInProgress;
                $scope.percentComplete = 0;
                $scope.form.controls.submitFormForAction(VizPortal.uploadCsvAction.importFile)
                    .then(importComplete, importFailed, notifyProgress);
            };
            // TODO: validate is off until server support is done.
            //       this should set the dialog state to PreviewComplete instead of ImportComplete
            $scope.validateFile = function () {
                $scope.form.controls.submitFormForAction(VizPortal.uploadCsvAction.validateFile)
                    .then(importComplete, importFailed, notifyProgress);
            };
            $scope.canSubmitForm = function () {
                return $scope.form.controls && $scope.form.controls.canSubmitForm();
            };
            $scope.closeButtonText = function () {
                return $scope.currentState === BulkImportUsersDialogState.ImportComplete
                    ? 'done'
                    : 'cancel';
            };
            // TODO This token should be in a common contextual help data structure in HelpService
            $scope.csvHelpHref = HelpService.getServerHelpUrlByCategory('adminusers2');
            var notifyProgress = function (action) {
                _this.$scope.percentComplete = action.percentComplete;
            };
            var importFailed = function (reason) {
                _this.$scope.close({});
                _this.toaster.pop({ type: VizPortal.ToastType.Error, text: _this.$translate.instant('addUsersFailed') });
            };
            var importComplete = function (longRunningAction) {
                $scope.currentState = BulkImportUsersDialogState.ImportComplete;
                _this.$scope.percentComplete = longRunningAction.percentComplete;
                _this.$scope.importResults = longRunningAction.response;
                _this.$scope.$emit(VizPortal.UserAddedEvent);
            };
        }
        BulkImportUsersDialogCtrl.Method = {
            ImportUsersFromCsv: 'importUsersFromCsv',
            ImportServerUsersFromCsv: 'importServerUsersFromCsv'
        };
        BulkImportUsersDialogCtrl.$inject = [
            '$scope',
            '$translate',
            'RestApiPrefix',
            'method',
            'HelpService',
            'ToasterService'
        ];
        return BulkImportUsersDialogCtrl;
    })();
    VizPortal.BulkImportUsersDialogCtrl = BulkImportUsersDialogCtrl;
    VizPortal.Module.instance().controller('BulkImportUsersDialogCtrl', BulkImportUsersDialogCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../controllers/ContentSubplaceCtrl.ts" />
/// <reference path="../models/ITemplate.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/types/resourceParts.ts" />
/// <reference path="../services/SelectionService.ts" />
var VizPortal;
(function (VizPortal) {
    var ContentGridCtrl = (function () {
        function ContentGridCtrl($scope, SelectionService) {
            // Sorting
            $scope.headerClicked = function (header) { return $scope.sorter.setPrimary(header.attrs['key'], header.attrs['direction']); };
            // Row selection
            $scope.rowClicked = function (row, colIndex) {
                if ($scope.anyActionsAllowed()) {
                    SelectionService.rowClicked($scope.selectedItems, row, colIndex);
                }
            };
        }
        ContentGridCtrl.$inject = [
            '$scope',
            'SelectionService'
        ];
        return ContentGridCtrl;
    })();
    VizPortal.ContentGridCtrl = ContentGridCtrl;
    VizPortal.Module.instance().controller('ContentGridCtrl', ContentGridCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    /**
     * Popover directive
     *
     * Adds overlays of content to any element for housing secondary information.
     * (very similar to Bootstrap's Popover)
     *
     * Usage:
     *
     *  div(tb-popover="'popoverTemplate.html'")
     *
     * An optional 'tb-popover-class' attribute can be used to specify a class to apply to
     * the popover container.
     *
     * The overlay's scope will inherit from the target element's scope.
     * Also, a 'visible' boolean property is available on the overlay's scope. This
     * is useful for lazy-loading the overlay content e.g. see ContentItemPopoverCtrl.ts.
     *
     */
    VizPortal.Module.instance().directive('tbPopover', [
        '$window',
        '$compile',
        '$timeout',
        '$parse',
        'StackedElementsService',
        function ($window, $compile, $timeout, $parse, StackedElementsService) {
            return {
                restrict: 'A',
                link: function (scope, element, attributes) {
                    var DisplayPopoverDelay = 350; // milliseconds
                    var RemovePopoverDelay = 50; // milliseconds
                    var PreferOpenLeft = false;
                    var templateUrl = attributes['tbPopover'];
                    var popover;
                    var popoverStackedElement;
                    var displayPopoverTimeout;
                    var removePopoverTimeout;
                    if ($parse(attributes['tbPopoverSuppress'])(scope)) {
                        return;
                    }
                    // Create and compile the popover
                    popover = $('<div>').addClass('tb-padded-wide')
                        .append($('<div tb-arrow="arrow">').addClass('tb-popover')
                        .append($('<div>').attr('ng-include', templateUrl)));
                    if (attributes['tbPopoverClass']) {
                        popover.addClass(attributes['tbPopoverClass']);
                    }
                    if (attributes['tbPopoverDelay']) {
                        DisplayPopoverDelay = parseInt(attributes['tbPopoverDelay'], 10);
                    }
                    if (attributes['tbPopoverPreferOpenLeft']) {
                        PreferOpenLeft = true;
                    }
                    if (attributes['tbPopoverHide']) {
                        scope.$watch(attributes['tbPopoverHide'], function (hide) {
                            popover.css({ display: hide ? 'none' : 'block' });
                        });
                    }
                    var popoverScope = scope.$new();
                    popoverScope.visible = false;
                    $compile(popover)(popoverScope);
                    var scrollElement = element.parents('.tb-scroll');
                    // Bind mouse events
                    element.on('mouseenter', function () {
                        var buildPopoverStackedElement = function () {
                            popoverStackedElement = StackedElementsService.addStackedElement({
                                contentElement: popover,
                                getContentElementPosition: function () {
                                    var popoverWidth = popover.outerWidth();
                                    var windowWidth = angular.element($window).width();
                                    var elementWidth = element.outerWidth();
                                    var elementOffset = element.offset();
                                    var openLeftLeft = elementOffset.left - popoverWidth;
                                    var openRightLeft = elementOffset.left + elementWidth;
                                    var openRightRight = openRightLeft + popoverWidth;
                                    var openLeft = PreferOpenLeft;
                                    if (openLeft) {
                                        if (openLeftLeft < 0 && openRightRight <= windowWidth) {
                                            openLeft = false;
                                        }
                                    }
                                    else {
                                        if (openRightRight > windowWidth && openLeftLeft >= 0) {
                                            openLeft = true;
                                        }
                                    }
                                    popoverScope.arrow = openLeft ? 'right' : 'left';
                                    // TODO: a more sophisticated positioning function to account for
                                    // top and bottom edges of window.
                                    return { left: openLeft ? openLeftLeft : openRightLeft, top: elementOffset.top };
                                }
                            });
                            popoverScope.visible = true;
                            scrollElement.on('scroll.popover_events', function () {
                                scope.$apply(function () {
                                    removePopover();
                                    buildPopoverStackedElement();
                                });
                            });
                        };
                        displayPopoverTimeout = $timeout(buildPopoverStackedElement, DisplayPopoverDelay);
                        popover
                            .on('mouseenter.popover_events', function () {
                            $timeout.cancel(removePopoverTimeout);
                        })
                            .on('mouseleave.popover_events', function () {
                            scope.$apply(removePopover);
                        });
                    });
                    element.on('mouseleave', function () {
                        scrollElement.off('.popover_events');
                        $timeout.cancel(displayPopoverTimeout);
                        removePopoverTimeout = $timeout(removePopover, RemovePopoverDelay);
                    });
                    function removePopover() {
                        scrollElement.off('.popover_events');
                        if (popoverStackedElement) {
                            StackedElementsService.removeStackedElement(popoverStackedElement);
                            popoverStackedElement = null;
                        }
                        if (popover) {
                            popover.off('.popover_events');
                        }
                        popoverScope.visible = false;
                        popover.remove();
                    }
                    scope.$on('$destroy', function () {
                        popoverScope.$destroy();
                        removePopover();
                        $timeout.cancel(displayPopoverTimeout);
                        $timeout.cancel(removePopoverTimeout);
                    });
                }
            };
        }]);
    VizPortal.Module.instance().directive('tbArrow', function () {
        return {
            restrict: 'A',
            link: function (scope, element, attributes) {
                var popoverArrow = $('<div></div>');
                element.append(popoverArrow);
                scope.$watch(attributes['tbArrow'], function (arrow) {
                    popoverArrow.removeClass();
                    if (arrow === 'right') {
                        popoverArrow.addClass('tb-modal-arrow-right');
                    }
                    else {
                        popoverArrow.addClass('tb-modal-arrow-left');
                    }
                });
            }
        };
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../controllers/ContentSubplaceCtrl.ts" />
/// <reference path="../directives/tbPopover.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var ContentItemPopoverCtrl = (function () {
        function ContentItemPopoverCtrl($scope, $location, $translate) {
            $scope.$location = $location;
            var visibleWatch = $scope.$watch('visible', function (visible) {
                if (visible) {
                    $scope.getItemDetails($scope.item).then(function (itemDetails) {
                        $scope.itemDetails = itemDetails;
                        if (VizPortal.FeatureFlags.contentAnalyticsEnabled) {
                            if ($scope.contentType !== VizPortal.ViewContentType.name) {
                                $scope.sparklineWithTitleProps = {
                                    title: $translate.instant('metric_hitsTotal_sparklineTitle', {
                                        COUNT: $scope.item.hitsTotal
                                    }, VizPortal.L10n.Interpolations.Count),
                                    caption: $translate.instant('metric_hitsTotal_sparklineCaption'),
                                    sparklineProps: {
                                        dataPoints: itemDetails.hitsTimeSeries,
                                        width: 274,
                                        height: 66
                                    }
                                };
                            }
                        }
                    });
                    // Deregister the 'visible' watch, since we only want to fetch
                    // the item details once.
                    visibleWatch();
                }
            });
        }
        ContentItemPopoverCtrl.$inject = ['$scope', '$location', '$translate'];
        return ContentItemPopoverCtrl;
    })();
    VizPortal.ContentItemPopoverCtrl = ContentItemPopoverCtrl;
    VizPortal.Module.instance().controller('ContentItemPopoverCtrl', ContentItemPopoverCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../fetchers/ListResult.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../models/ColumnWidths.ts" />
/// <reference path="../models/ISliceable.ts" />
/// <reference path="../models/ITemplate.ts" />
/// <reference path="../services/SliceableFactory.ts" />
var VizPortal;
(function (VizPortal) {
    var DataGridCtrl = (function () {
        function DataGridCtrl($scope, $element, SliceableFactory) {
            if (!$scope.columnWidths) {
                $scope.columnWidths = new VizPortal.ColumnWidths();
            }
            $scope.scrollLeftChanged = function (scrollLeft) {
                $element.find('.tb-data-grid-headers').css({ 'margin-left': -scrollLeft + 'px' });
            };
        }
        DataGridCtrl.$inject = ['$scope', '$element', 'SliceableFactory'];
        return DataGridCtrl;
    })();
    VizPortal.DataGridCtrl = DataGridCtrl;
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../controllers/FilterPanelCtrl.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var DateFilterCtrl = (function () {
        function DateFilterCtrl($scope) {
            $scope.editMode = false;
            $scope.clear = function () {
                $scope.filter.value = null;
            };
            $scope.open = function () {
                $scope.editMode = true;
            };
            $scope.close = function () {
                $scope.editMode = false;
            };
        }
        DateFilterCtrl.$inject = ['$scope'];
        return DateFilterCtrl;
    })();
    VizPortal.DateFilterCtrl = DateFilterCtrl;
    VizPortal.Module.instance().controller('DateFilterCtrl', DateFilterCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../models/ISliceable.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/ContentActionNotification.ts" />
/// <reference path="../services/ModalService.ts" />
/// <reference path="../services/SliceableFactory.ts" />
/// <reference path="../services/ToasterService.ts" />
var VizPortal;
(function (VizPortal) {
    var ErrorDetailsToastCtrl = (function () {
        function ErrorDetailsToastCtrl($scope, modal, SliceableFactory) {
            var _this = this;
            this.$scope = $scope;
            this.modal = modal;
            this.SliceableFactory = SliceableFactory;
            $scope.showDetails = function ($event) {
                var notification = $scope.toast.data;
                $scope.errorDetailsSliceable = _this.SliceableFactory.fromArray(notification.errorDetails);
                _this.modal.open({
                    scope: $scope,
                    templateUrl: 'errorDetailsDialog.html',
                    size: VizPortal.ModalSize.fitToContent,
                    position: VizPortal.ModalService.anchoredTo(angular.element($event.target))
                });
            };
        }
        ErrorDetailsToastCtrl.$inject = [
            '$scope',
            'ModalService',
            'SliceableFactory'
        ];
        return ErrorDetailsToastCtrl;
    })();
    VizPortal.ErrorDetailsToastCtrl = ErrorDetailsToastCtrl;
    VizPortal.Module.instance().controller('ErrorDetailsToastCtrl', ErrorDetailsToastCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../resources/Users.ts" />
var VizPortal;
(function (VizPortal) {
    var SearchSuggestionsService = (function () {
        function SearchSuggestionsService(SliceableFactory, ProjectNames, UserNames, Groups, Tags, DataConnectionTypes, SiteNamesAcrossAllPods, Favorites, Schedules) {
            this.SliceableFactory = SliceableFactory;
            this.ProjectNames = ProjectNames;
            this.UserNames = UserNames;
            this.Groups = Groups;
            this.Tags = Tags;
            this.DataConnectionTypes = DataConnectionTypes;
            this.SiteNamesAcrossAllPods = SiteNamesAcrossAllPods;
            this.Favorites = Favorites;
            this.Schedules = Schedules;
        }
        SearchSuggestionsService.prototype.projects = function (matchText) {
            return this.ProjectNames.all()
                .withFiltersAndOrder([VizPortal.Filter.search(matchText)], [VizPortal.Order.asc(VizPortal.ServerApi.NamedItemKeys.name)]);
        };
        SearchSuggestionsService.prototype.project = function (id) {
            return this.ProjectNames.getById(id).then(function (projectName) {
                return {
                    value: projectName ? projectName.id : id,
                    label: projectName ? projectName.name : '',
                    count: 0
                };
            });
        };
        SearchSuggestionsService.prototype.sites = function (matchText) {
            return this.SiteNamesAcrossAllPods.all().withFilters([VizPortal.Filter.search(matchText)]);
        };
        SearchSuggestionsService.prototype.favorites = function (matchText) {
            return this.Favorites.all().withFilters([VizPortal.Filter.search(matchText)]);
        };
        SearchSuggestionsService.prototype.users = function (matchText) {
            return this.UserNames.all()
                .withFiltersAndOrder([VizPortal.Filter.search(matchText)], [VizPortal.Order.asc(VizPortal.ServerApi.UserKeys.displayName)]);
        };
        SearchSuggestionsService.prototype.usersWithoutGuest = function (matchText) {
            return this.users(matchText).addFilter(VizPortal.Users.WithoutGuestFilter);
        };
        SearchSuggestionsService.prototype.adminUsers = function (matchText) {
            return this.users(matchText).addFilter(VizPortal.Users.AdminsOnlyFilter);
        };
        SearchSuggestionsService.prototype.user = function (id) {
            return this.UserNames.getById(id).then(function (userName) {
                return {
                    value: userName ? userName.id : id,
                    label: userName ? userName.displayName : '',
                    count: 0
                };
            });
        };
        SearchSuggestionsService.prototype.groups = function (matchText) {
            return this.Groups.all()
                .withFiltersAndOrder([VizPortal.Filter.search(matchText)], [VizPortal.Order.asc(VizPortal.ServerApi.GroupKeys.name)]);
        };
        SearchSuggestionsService.prototype.group = function (id) {
            return this.Groups.getById(id);
        };
        SearchSuggestionsService.prototype.tags = function (matchText) {
            return this.Tags.all()
                .withFiltersAndOrder([VizPortal.Filter.search(matchText)], [VizPortal.Order.asc(VizPortal.ServerApi.NamedItemKeys.name)]);
        };
        SearchSuggestionsService.prototype.dataConnectionType = function (dataConnectionType) {
            return this.DataConnectionTypes.getByDataConnectionType(dataConnectionType).then(function (connectionType) {
                return {
                    value: connectionType ? connectionType.connectionType : dataConnectionType,
                    label: connectionType ? connectionType.connectionTypeDisplayName : '',
                    count: 0
                };
            });
        };
        SearchSuggestionsService.prototype.dataConnectionTypes = function (matchText) {
            return this.DataConnectionTypes.all()
                .withFiltersAndOrder([VizPortal.Filter.search(matchText)], [VizPortal.Order.asc(VizPortal.ServerApi.DataConnectionTypeKeys.connectionTypeDisplayName)]);
        };
        SearchSuggestionsService.prototype.schedulesSource = function (scheduledActionType) {
            var searchFilterFn = function (schedule, search) {
                if (!search)
                    return true;
                var scheduleName = schedule.name.toLowerCase();
                return _.all(search.toLowerCase().split(' '), function (searchPart) { return (scheduleName.indexOf(searchPart) >= 0); });
            };
            var scheduleResourceQuery = this.Schedules.all().withOrder(VizPortal.ScheduleContentType.defaultOrder);
            if (scheduledActionType) {
                scheduleResourceQuery = scheduleResourceQuery.addFilter(VizPortal.Schedules.filterByActionType(scheduledActionType));
            }
            var scheduleListPromise = VizPortal.SliceableHelper.fetchAll(scheduleResourceQuery).then(function (schedulesList) { return schedulesList.items; });
            return this.SliceableFactory.searchArray(searchFilterFn, scheduleListPromise);
        };
        SearchSuggestionsService.$inject = ['SliceableFactory', 'ProjectNames', 'UserNames', 'Groups', 'Tags', 'DataConnectionTypes', 'SiteNamesAcrossAllPods', 'Favorites', 'Schedules'];
        return SearchSuggestionsService;
    })();
    VizPortal.SearchSuggestionsService = SearchSuggestionsService;
    VizPortal.Module.instance().service('SearchSuggestionsService', SearchSuggestionsService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/ErrorCodes.ts" />
/// <reference path="../models/ISliceable.ts" />
/// <reference path="../models/IViewInfo.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../resources/Favorites.ts" />
/// <reference path="../resources/Views.ts" />
/// <reference path="../resources/Workbooks.ts" />
/// <reference path="../services/SearchSuggestionsService.ts" />
var VizPortal;
(function (VizPortal) {
    var FavoritesMenuCtrl = (function () {
        function FavoritesMenuCtrl($scope, $state, favorites, views, workbooks, searchSuggestions) {
            var _this = this;
            this.$state = $state;
            this.favorites = favorites;
            $scope.filteringList = { chosenFavorite: null };
            $scope.getFavorites = function (query) { return searchSuggestions.favorites(query); };
            $scope.goToFavorite = function () {
                var id = $scope.filteringList.chosenFavorite.objectId;
                var type = $scope.filteringList.chosenFavorite.objectType;
                if (type === VizPortal.FavoriteObjectType.VIEW) {
                    views.getById(id).then(function (result) { return _this.$state.go('main.site.viz', { path: result.path }); }, function (reason) { return _this.handleGoToDeletedFavorite(id, reason); });
                }
                else if (type === VizPortal.FavoriteObjectType.WORKBOOK) {
                    workbooks.getById(id).then(function () { return _this.$state.go('main.site.content.workbook.views', { id: id }); }, function (reason) { return _this.handleGoToDeletedFavorite(id, reason); });
                }
            };
        }
        FavoritesMenuCtrl.prototype.handleGoToDeletedFavorite = function (id, reason) {
            var _this = this;
            if (reason === VizPortal.CommonErrorCode.ViewNotFound) {
                this.favorites.removeViewById(id)
                    .then(function () { return _this.$state.go('main.error', { detailsLocKey: 'favoriteViewCouldNotBeFound' }); });
            }
            else if (reason === VizPortal.CommonErrorCode.WorkbookNotFound) {
                this.favorites.removeWorkbookById(id)
                    .then(function () { return _this.$state.go('main.error', { detailsLocKey: 'favoriteWorkbookCouldNotBeFound' }); });
            }
            else {
                this.$state.go('main.error');
            }
        };
        FavoritesMenuCtrl.$inject = [
            '$scope',
            '$state',
            'Favorites',
            'Views',
            'Workbooks',
            'SearchSuggestionsService'
        ];
        return FavoritesMenuCtrl;
    })();
    VizPortal.FavoritesMenuCtrl = FavoritesMenuCtrl;
    VizPortal.Module.instance().controller('FavoritesMenuCtrl', FavoritesMenuCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../../ts/libs.ts" />
var VizPortal;
(function (VizPortal) {
    var FocusCtrl = (function () {
        function FocusCtrl() {
        }
        FocusCtrl.prototype.setFocusElement = function (elm) {
            this.$element = elm;
        };
        FocusCtrl.prototype.focus = function () {
            this.$element.focus();
        };
        FocusCtrl.prototype.hasFocusElement = function () {
            return !!this.$element;
        };
        return FocusCtrl;
    })();
    VizPortal.FocusCtrl = FocusCtrl;
    VizPortal.Module.instance().controller('FocusCtrl', FocusCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../ts/libs.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var HelpActions = (function () {
        function HelpActions(help, server, $scope, gettingStartedNotifications, modalService) {
            this.help = help;
            this.server = server;
            this.$scope = $scope;
            this.gettingStartedNotifications = gettingStartedNotifications;
            this.modalService = modalService;
        }
        HelpActions.prototype.showAbout = function () {
            var _this = this;
            var aboutScope = this.$scope.$new();
            aboutScope.version = this.server.sessionServerVersion();
            aboutScope.serverName = function () { return _this.server.serverName(); };
            this.modalService.open({
                templateUrl: 'aboutServer.html',
                scope: aboutScope
            }).result.fin(function () { return aboutScope.$destroy(); });
        };
        HelpActions.prototype.showGettingStarted = function () {
            this.gettingStartedNotifications.forceShowNotifications();
        };
        HelpActions.prototype.searchHelp = function (searchTerm) {
            this.help.search(searchTerm);
        };
        return HelpActions;
    })();
    VizPortalReact.HelpActions = HelpActions;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../libs.ts" />
/// <reference path="../../common/react/HelpActions.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/GettingStartedNotifications.ts" />
/// <reference path="../services/HelpService.ts" />
/// <reference path="../services/ModalService.ts" />
/// <reference path="../services/ServerService.ts" />
var VizPortal;
(function (VizPortal) {
    var HelpMenuCtrl = (function () {
        function HelpMenuCtrl($scope, server, modalService, help, gettingStartedNotifications) {
            var helpActions = new VizPortalReact.HelpActions(help, server, $scope, gettingStartedNotifications, modalService);
            $scope.showAbout = function () { return helpActions.showAbout(); };
            $scope.launchGettingStarted = function () { return helpActions.showGettingStarted(); };
            $scope.searchHelp = function () { return helpActions.searchHelp($scope.searchForm.searchText); };
            $scope.isOfflineHelpEnabled = server.offlineHelpEnabled();
            $scope.searchForm = { searchText: '' };
            $scope.supportUrl = function () { return help.getGeneralSupportUrl(); };
            $scope.serverHelpUrl = help.getServerHelpUrlByCategory();
            $scope.helpLocKey = help.getHelpLinkLocKey();
            $scope.reset = function () { return $scope.searchForm.searchText = ''; };
            $scope.serverName = function () { return server.serverName(); };
            // Update show/hide Getting Started menu item when user's admin status changes (e.g., site switch)
            $scope.$watch(function () { return server.isSessionSiteOrServerAdmin(); }, function () {
                // $watch listener fn will always run (async) when first registered
                gettingStartedNotifications.shouldShowGettingStartedLink()
                    .then(function (showLink) { return $scope.showGettingStartedLink = showLink; });
            });
        }
        HelpMenuCtrl.$inject = [
            '$scope',
            'ServerService',
            'ModalService',
            'HelpService',
            'GettingStartedNotifications'
        ];
        return HelpMenuCtrl;
    })();
    VizPortal.HelpMenuCtrl = HelpMenuCtrl;
    VizPortal.Module.instance().controller('HelpMenuCtrl', HelpMenuCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../models/ILayout.ts" />
/// <reference path="../models/ISize.ts" />
/// <reference path="../models/ISliceable.ts" />
var VizPortal;
(function (VizPortal) {
    var ScrollCtrl = (function () {
        function ScrollCtrl($scope, $element, $q, $transclude) {
            var _this = this;
            this.scope = $scope;
            this.viewport = $element;
            this.$q = $q;
            this.currentPage = 0;
            this.currentItemsPerPage = 0;
            this.currentTotal = 0;
            $scope.scroller = this;
            $scope.transcludeFn = $transclude;
            $scope.slice = VizPortal.ListResult.empty();
            $scope.scrollControls = {
                scrollIntoView: function (itemIndex) {
                    // TODO: make this work for thumbnail view
                    var firstVisibleIndex = Math.ceil(_this.viewport.scrollTop() / _this.metrics.heightOfRowInPx);
                    var lastVisibleIndex = Math.floor((_this.viewport.scrollTop() + _this.viewport.height()) / _this.metrics.heightOfRowInPx) - 1;
                    var numberOfVisibleItems = lastVisibleIndex - firstVisibleIndex + 1;
                    if (itemIndex > lastVisibleIndex) {
                        _this.viewport.scrollTop((itemIndex - numberOfVisibleItems + 1) * _this.metrics.heightOfRowInPx);
                    }
                    else if (itemIndex < firstVisibleIndex) {
                        _this.viewport.scrollTop(itemIndex * _this.metrics.heightOfRowInPx);
                    }
                },
                setScrollLeft: function (scrollLeft) {
                    _this.viewport.scrollLeft(scrollLeft);
                },
                getScrollLeft: function () {
                    return _this.viewport.scrollLeft();
                }
            };
            var currentScrollLeft = 0;
            var updateScrollLeft = function () {
                var newScrollLeft = _this.viewport.scrollLeft();
                if (newScrollLeft !== currentScrollLeft) {
                    currentScrollLeft = newScrollLeft;
                    $scope.scrollLeftChanged({ scrollLeft: currentScrollLeft });
                }
            };
            $element.on('scroll', function () {
                updateScrollLeft();
                _this.fetchItems();
            });
            // $note-ltan-2014-9-16:
            // Beware, watch does not know anything about the actual data. So even if the actual data changed,
            // but 'items' aka sliceable did not, watch callback won't get triggered and you don't get the update.
            // The trick is to create and assign a new instance of sliceable to the watched reference.
            $scope.$watch('items', function (newItems, oldItems) {
                // Both this watch and the viewport dimensions watch will trigger a fetch on initial load.
                // To avoid two fetches, we only trigger this one on subsequent changes.
                if (newItems !== oldItems) {
                    _this.onItemsChanged();
                }
            });
            $scope.getViewportDimensions = function () { return _this.getViewportDimensions(); };
            $scope.$watch($scope.getViewportDimensions, function (dimensions) {
                _this.resize(dimensions);
            }, true);
        }
        ScrollCtrl.prototype.fetchItems = function () {
            if (!this.metrics)
                return;
            if (this.viewport.scrollTop() < 0)
                return; // Handle iOS momentum scrolling beyond the top of container
            var pageHeight = ScrollCtrl.pageHeightInPx(this.metrics);
            if (pageHeight > 0) {
                var request = {
                    page: Math.floor(this.viewport.scrollTop() / pageHeight),
                    itemsPerPage: ScrollCtrl.itemsPerPage(this.metrics)
                };
                if ((request.page !== this.currentPage || request.itemsPerPage !== this.currentItemsPerPage)
                    && !this.isInProgress(request)) {
                    this.getSlice(request);
                }
            }
        };
        ScrollCtrl.prototype.onItemsChanged = function () {
            var _this = this;
            if (!this.metrics && !this.updateLayoutMetrics())
                return;
            var request = {
                page: 0,
                itemsPerPage: ScrollCtrl.itemsPerPage(this.metrics)
            };
            this.getSlice(request).then(function (result) {
                if (result) {
                    // Scroll to the top because we are displaying a new set of results.
                    _this.viewport.scrollTop(0);
                    _this.scope.$emit(ScrollCtrl.ItemsChangeEvent);
                }
            });
        };
        ScrollCtrl.prototype.resize = function (dimensions) {
            // Don't bother to fetch anything if it won't be visible.
            // (This can happen on initial load.)
            if (dimensions.width === 0 || dimensions.height === 0)
                return;
            this.metrics = this.getLayoutMetrics(dimensions);
            this.fetchItems();
        };
        ScrollCtrl.prototype.contentAreaHeight = function () {
            if (!this.metrics)
                return 0;
            return this.totalNumberOfRows(this.metrics) * this.metrics.heightOfRowInPx;
        };
        ScrollCtrl.prototype.contentTop = function () {
            if (!this.metrics)
                return 0;
            return this.currentPage * ScrollCtrl.pageHeightInPx(this.metrics);
        };
        ScrollCtrl.prototype.getSlice = function (request) {
            var _this = this;
            if (this.scope.items) {
                this.mostRecentInProgressRequest = request;
                // get two pages worth of items
                return this.scope.items.getSlice(request.page * request.itemsPerPage, request.itemsPerPage * 2).then(function (result) {
                    if (request === _this.mostRecentInProgressRequest) {
                        _this.mostRecentInProgressRequest = null;
                        _this.currentPage = request.page;
                        _this.currentItemsPerPage = request.itemsPerPage;
                        _this.currentTotal = result.total;
                        _this.scope.slice.items = result.items;
                        _this.scope.slice.index = result.index;
                        _this.scope.slice.total = result.total;
                        if (_this.scope.sliceChanged) {
                            _this.scope.sliceChanged({ newSlice: result });
                        }
                        return result;
                    }
                    else {
                        return null;
                    }
                });
            }
            else {
                return this.$q.when(null);
            }
        };
        ScrollCtrl.prototype.isInProgress = function (request) {
            return !!this.mostRecentInProgressRequest
                && request.page === this.mostRecentInProgressRequest.page
                && request.itemsPerPage === this.mostRecentInProgressRequest.itemsPerPage;
        };
        ScrollCtrl.prototype.getViewportDimensions = function () {
            return {
                height: this.viewport.height(),
                width: this.contentArea.width()
            };
        };
        ScrollCtrl.prototype.getLayoutMetrics = function (dimensions) {
            if (!this.scope.layout)
                return null;
            return this.scope.layout.metrics(dimensions);
        };
        ScrollCtrl.prototype.updateLayoutMetrics = function () {
            var dimensions = this.getViewportDimensions();
            this.metrics = this.getLayoutMetrics(dimensions);
            return !!this.metrics;
        };
        ScrollCtrl.prototype.totalNumberOfRows = function (metrics) {
            return metrics.numberOfCols > 0 ? Math.ceil(this.currentTotal / metrics.numberOfCols) : 0;
        };
        ScrollCtrl.pageHeightInPx = function (metrics) {
            return metrics.numberOfRows * metrics.heightOfRowInPx;
        };
        ScrollCtrl.itemsPerPage = function (metrics) {
            return metrics.numberOfCols * metrics.numberOfRows;
        };
        ScrollCtrl.ItemsChangeEvent = 'scrollItemsChanged';
        ScrollCtrl.$inject = [
            '$scope', '$element', '$q', '$transclude'
        ];
        return ScrollCtrl;
    })();
    VizPortal.ScrollCtrl = ScrollCtrl;
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    (function (Permission) {
        Permission[Permission["Unspecified"] = 0] = "Unspecified";
        Permission[Permission["Allowed"] = 1] = "Allowed";
        Permission[Permission["Denied"] = 2] = "Denied";
        Permission[Permission["Mixed"] = 3] = "Mixed";
    })(VizPortal.Permission || (VizPortal.Permission = {}));
    var Permission = VizPortal.Permission;
    // larger reasons take precedence
    (function (PermissionReason) {
        PermissionReason[PermissionReason["Unspecified"] = 0] = "Unspecified";
        PermissionReason[PermissionReason["ImplicitDeny"] = 1] = "ImplicitDeny";
        PermissionReason[PermissionReason["GroupAllow"] = 2] = "GroupAllow";
        PermissionReason[PermissionReason["GroupDeny"] = 3] = "GroupDeny";
        PermissionReason[PermissionReason["UserAllow"] = 4] = "UserAllow";
        PermissionReason[PermissionReason["UserDeny"] = 5] = "UserDeny";
        PermissionReason[PermissionReason["UserLicensingDeny"] = 6] = "UserLicensingDeny";
        PermissionReason[PermissionReason["GuestAllow"] = 7] = "GuestAllow";
        PermissionReason[PermissionReason["UserAuthorizableOwnerAllow"] = 8] = "UserAuthorizableOwnerAllow";
        PermissionReason[PermissionReason["GroupProjectLeaderAllow"] = 9] = "GroupProjectLeaderAllow";
        PermissionReason[PermissionReason["UserProjectLeaderAllow"] = 10] = "UserProjectLeaderAllow";
        PermissionReason[PermissionReason["UserProjectOwnerAllow"] = 11] = "UserProjectOwnerAllow";
        PermissionReason[PermissionReason["UserAdminAllow"] = 12] = "UserAdminAllow";
        PermissionReason[PermissionReason["Mixed"] = 13] = "Mixed";
    })(VizPortal.PermissionReason || (VizPortal.PermissionReason = {}));
    var PermissionReason = VizPortal.PermissionReason;
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../models/Permission.ts" />
/// <reference path="../ServerApi/types/IGroup.ts" />
/// <reference path="../ServerApi/types/IUser.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="ICapabilityValue.ts" />
/// <reference path="ITypedId.ts" />
/// <reference path="../libs.ts" />
/// <reference path="../helpers/Helpers.ts" />
/// <reference path="../models/IGranteePermissions.ts" />
/// <reference path="../models/Permission.ts" />
/// <reference path="../ServerApi/types/IAuthorizableGranteePermissions.ts" />
/// <reference path="../ServerApi/types/ICapabilityValue.ts" />
/// <reference path="../ServerApi/types/IGroup.ts" />
/// <reference path="../ServerApi/types/IUser.ts" />
var VizPortal;
(function (VizPortal) {
    var PermissionsMerger;
    (function (PermissionsMerger) {
        /**
         * Converts a list of IAuthorizableGranteePermissions from the server into an equivalent list of
         * IGranteePermissions for use by the client. The input array can contain AGPs for multiple
         * authorizables and multiple users, but their client-side authorizable type must be the same.
         */
        function makeGranteePermissionsList(agps, authorizableIds, groups, users) {
            var groupDict = Helpers.dictFromArray(groups, VizPortal.ServerApi.GroupKeys.id);
            var userDict = Helpers.dictFromArray(users, VizPortal.ServerApi.UserKeys.id);
            var agpListByGrantee = _.groupBy(agps, function (agp) { return agp.grantee.type + agp.grantee.id; });
            var permissionsList = _.map(agpListByGrantee, function (granteeAgpList) {
                return createGranteePermissions(granteeAgpList, authorizableIds, groupDict, userDict);
            });
            var allUsersGroup = _.findWhere(groups, { isAllUsersGroup: true });
            if (allUsersGroup) {
                // there exists an All Users group
                var allUsersGroupGP = _.find(permissionsList, function (gp) { return (gp.group && gp.group.id === allUsersGroup.id); });
                if (!allUsersGroupGP) {
                    // the All Users group doesn't have any explicit permissions,
                    // add it to the permissions list with unspecified permissions:
                    allUsersGroupGP = { group: allUsersGroup, permissions: {}, permissionsByContentType: {} };
                    permissionsList.push(allUsersGroupGP);
                }
            }
            return permissionsList;
        }
        PermissionsMerger.makeGranteePermissionsList = makeGranteePermissionsList;
        function createGranteePermissions(granteeAgpList, authorizableIds, groupDict, userDict) {
            // we know all grantees in this list are the same because of the groupBy
            var grantee = granteeAgpList[0].grantee;
            if (VizPortal.FeatureFlags.projectPermissionsTemplatesEnabled) {
                var granteePermissions = {
                    permissionsByContentType: mergePermissionListByContentType(granteeAgpList, authorizableIds)
                };
            }
            else {
                var granteePermissions = {
                    permissions: mergePermissionList(granteeAgpList, authorizableIds)
                };
            }
            switch (grantee.type) {
                case 'group':
                    granteePermissions.group = groupDict[grantee.id];
                    break;
                case 'user':
                    granteePermissions.user = userDict[grantee.id];
                    break;
            }
            return granteePermissions;
        }
        /**
         * TODO: Delete this function when the projectPermissionsTemplatesEnabled feature flag is
         * permanently on. It is replaced by mergePermissionListByContentType().
         */
        function mergePermissionList(agpList, authorizableIds) {
            var agpByAuthorizable = _.indexBy(agpList, function (agp) { return agp.authorizable.id; });
            return _.reduce(authorizableIds, function (permissions, authorizableId) {
                var agp = agpByAuthorizable[authorizableId];
                if (agp) {
                    var inputPermissions = permissionsFromCapabilityValues(agp.permissions);
                    if (permissions) {
                        mergePermissions(permissions, inputPermissions);
                        return permissions;
                    }
                    else {
                        return inputPermissions;
                    }
                }
                else {
                    if (permissions) {
                        mergePermissionsWithUnspecified(permissions);
                        return permissions;
                    }
                    else {
                        return {};
                    }
                }
            }, null);
        }
        /**
         * Merges a list of IAuthorizableGranteePermissions to a single dictionary that maps from
         * capability to permission. Ignores the grantee (assumes all the items in the input list are
         * for a single grantee).
         */
        function mergePermissionListByContentType(granteeAgpList, authorizableIds) {
            // The permissions for each authorizable type will end up as a separate section
            // in the IGranteePermissions, so we process each individually.
            var agpsByContentType = _.groupBy(granteeAgpList, function (agp) { return agp.authorizable.type; });
            var permissionsByContentType = {};
            _.each(agpsByContentType, function (agps, contentType) {
                var permissions = aggregatePermissionsForAuthorizables(agps, authorizableIds);
                permissionsByContentType[contentType] = permissions;
            });
            return permissionsByContentType;
        }
        function aggregatePermissionsForAuthorizables(agpsForAuthorizable, authorizableIds) {
            // There may not be an agp for every authorizable we care about, so we have to merge the
            // permissions by authorizable ID, rather than by agp.
            var agpByAuthorizable = _.indexBy(agpsForAuthorizable, function (agp) { return agp.authorizable.id; });
            var aggregatedPermissions = null;
            authorizableIds.forEach(function (authorizableId) {
                var agp = agpByAuthorizable[authorizableId];
                var inputPermissions = agp ? permissionsFromCapabilityValues(agp.permissions) : {};
                if (aggregatedPermissions) {
                    mergePermissions(aggregatedPermissions, inputPermissions);
                }
                else {
                    aggregatedPermissions = inputPermissions;
                }
            });
            return aggregatedPermissions;
        }
        function permissionsFromCapabilityValues(capabilityValues) {
            var permissions = {};
            _.each(capabilityValues, function (capabilityValue) {
                var capability = capabilityValue.capability;
                var permission = permissionFromCapabilityValue(capabilityValue);
                var reason = reasonFromCapabilityValue(capabilityValue);
                if (permissions[capability]) {
                    permissions[capability].permission = permission;
                    permissions[capability].reason = reason;
                }
                else {
                    permissions[capability] = { permission: permission, reason: reason };
                }
            });
            return permissions;
        }
        function permissionFromCapabilityValue(capability) {
            var capabilityValue = capability.value;
            switch (capabilityValue) {
                case 'allowed': return VizPortal.Permission.Allowed;
                case 'denied': return VizPortal.Permission.Denied;
                // A single capability value from the server is never "mixed".
                default: return VizPortal.Permission.Unspecified;
            }
        }
        function reasonFromCapabilityValue(capability) {
            var capabilityReason = capability.reason;
            switch (capabilityReason) {
                case 'GROUP_ALLOW': return VizPortal.PermissionReason.GroupAllow;
                case 'GROUP_DISALLOW': return VizPortal.PermissionReason.GroupDeny;
                case 'GROUP_PROJECT_LEADER': return VizPortal.PermissionReason.GroupProjectLeaderAllow;
                case 'GUEST_ALLOWED': return VizPortal.PermissionReason.GuestAllow;
                case 'IMPLICIT_DENY': return VizPortal.PermissionReason.ImplicitDeny;
                case 'USER_ADMIN': return VizPortal.PermissionReason.UserAdminAllow;
                case 'USER_ALLOW': return VizPortal.PermissionReason.UserAllow;
                case 'USER_AUTHORIZABLE_OWNER': return VizPortal.PermissionReason.UserAuthorizableOwnerAllow;
                case 'USER_DISALLOW': return VizPortal.PermissionReason.UserDeny;
                case 'USER_LICENSING': return VizPortal.PermissionReason.UserLicensingDeny;
                case 'USER_PROJECT_LEADER': return VizPortal.PermissionReason.UserProjectLeaderAllow;
                case 'USER_PROJECT_OWNER': return VizPortal.PermissionReason.UserProjectOwnerAllow;
                default: return VizPortal.PermissionReason.Unspecified;
            }
        }
        function mergePermissions(current, input) {
            _.each(_.union(_.keys(current), _.keys(input)), function (capability) {
                // some vars just to improve readability
                var curr = current[capability];
                var inpt = input[capability];
                if (curr && inpt) {
                    if (curr.permission !== inpt.permission) {
                        // the values explicitly differ
                        current[capability].permission = VizPortal.Permission.Mixed;
                        current[capability].reason = VizPortal.PermissionReason.Mixed;
                    }
                    else {
                        // the values are explicitly equal
                        if (curr.reason != inpt.reason) {
                            // the reasons explicitly differ
                            current[capability].reason = VizPortal.PermissionReason.Mixed;
                        }
                    }
                }
                else if (curr) {
                    if (curr.permission !== VizPortal.Permission.Unspecified) {
                        // input is implicitly unspecified, current is explicitly specified
                        current[capability].permission = VizPortal.Permission.Mixed;
                        current[capability].reason = VizPortal.PermissionReason.Mixed;
                    }
                }
                else if (inpt) {
                    if (inpt.permission !== VizPortal.Permission.Unspecified) {
                        // input is explicitly specified, current is implicitly unspecified
                        current[capability] = { permission: VizPortal.Permission.Mixed, reason: VizPortal.PermissionReason.Mixed };
                    }
                    else {
                        // input is explicitly unspecified, current is implicitly unspecified
                        current[capability] = { permission: inpt.permission, reason: inpt.reason };
                    }
                }
            });
        }
        // TODO: Delete this function when projectPermissionsTemplatesEnabled feature flag is on
        function mergePermissionsWithUnspecified(current) {
            _.each(_.keys(current), function (capability) {
                if (current[capability].permission !== VizPortal.Permission.Unspecified) {
                    current[capability].permission = VizPortal.Permission.Mixed;
                    current[capability].reason = VizPortal.PermissionReason.Mixed;
                }
            });
        }
    })(PermissionsMerger = VizPortal.PermissionsMerger || (VizPortal.PermissionsMerger = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="../types/IAuthorizableGranteePermissions.ts" />
/// <reference path="../types/ITypedIds.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetEffectivePermissionsRequest = (function (_super) {
            __extends(GetEffectivePermissionsRequest, _super);
            function GetEffectivePermissionsRequest(params) {
                _super.call(this, 'getEffectivePermissions', params);
            }
            return GetEffectivePermissionsRequest;
        })(ServerApi.Request);
        ServerApi.GetEffectivePermissionsRequest = GetEffectivePermissionsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../fetchers/ListResult.ts" />
/// <reference path="../helpers/PermissionsMerger.ts" />
/// <reference path="../models/IGranteePermissions.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/GetEffectivePermissionsRequest.ts" />
/// <reference path="../ServerApi/requests/GetUsersRequest.ts" />
/// <reference path="../ServerApi/types/IGetItemsParams.ts" />
/// <reference path="../ServerApi/types/ITypedIds.ts" />
/// <reference path="../ServerApi/types/IUser.ts" />
/// <reference path="../services/ServerService.ts" />
var VizPortal;
(function (VizPortal) {
    var EffectivePermissionsService = (function () {
        function EffectivePermissionsService($q, server, FetcherFactory) {
            this.$q = $q;
            this.server = server;
            this.usersFetcher = FetcherFactory.getServerResourceFetcher(VizPortal.ServerApi.GetUsersRequest, function (result) { return result.users; });
        }
        EffectivePermissionsService.prototype.getEffectivePermissions = function (usersParams, authorizables) {
            var _this = this;
            return this.usersFetcher.fetchList(usersParams)
                .then(function (users) {
                if (users.items.length === 0) {
                    // no users; return an empty ListResult
                    return _this.$q.when(new VizPortal.ListResult([]));
                }
                else {
                    // we have users; request & return the effective permissions
                    var userIds = _.pluck(users.items, VizPortal.ServerApi.UserKeys.id);
                    if (VizPortal.FeatureFlags.projectPermissionsTemplatesEnabled) {
                        var requests = VizPortal.PermissionsHelper.effectivePermissionsRequestsForAuthorizables(userIds, authorizables);
                    }
                    else {
                        var requests = [new VizPortal.ServerApi.GetEffectivePermissionsRequest({ userIds: userIds, authorizables: authorizables })];
                    }
                    var combineResultsFn = function (results) {
                        return { permissions: VizPortal.ResultHelper.combine(results, function (result) { return result.permissions; }) };
                    };
                    return _this.server.sendRequestsParallel(requests, combineResultsFn)
                        .then(function (result) {
                        var list = VizPortal.PermissionsMerger.makeGranteePermissionsList(result.permissions, authorizables.ids, [], users.items);
                        return new VizPortal.ListResult(list, users.index, users.total);
                    });
                }
            });
        };
        EffectivePermissionsService.$inject = ['$q', 'ServerService', 'FetcherFactory'];
        return EffectivePermissionsService;
    })();
    VizPortal.EffectivePermissionsService = EffectivePermissionsService;
    VizPortal.Module.instance().service('EffectivePermissionsService', EffectivePermissionsService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="IListFetcher.ts" />
/// <reference path="../services/EffectivePermissionsService.ts" />
var VizPortal;
(function (VizPortal) {
    var EffectivePermissionsFetcher = (function () {
        function EffectivePermissionsFetcher(effectivePermissionsService, authorizables) {
            this.effectivePermissionsService = effectivePermissionsService;
            this.authorizables = authorizables;
        }
        EffectivePermissionsFetcher.prototype.setAuthorizables = function (authorizables) {
            this.authorizables = authorizables;
        };
        EffectivePermissionsFetcher.prototype.fetchList = function (params) {
            return this.effectivePermissionsService.getEffectivePermissions(params, this.authorizables);
        };
        return EffectivePermissionsFetcher;
    })();
    VizPortal.EffectivePermissionsFetcher = EffectivePermissionsFetcher;
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    /**
     * Utility class that manages the state of collapsible sections. The different section divs in a
     * view layer can hook into these methods to determine if they should show or hide themselves.
     *
     * This implementation allows at most one section to be open at any time. Sections may be
     * numbered in any fashion. Upon construction, all sections are assumed to be closed.
     */
    var SingleSectionAccordion = (function () {
        function SingleSectionAccordion() {
            this.currentOpenSection = null;
        }
        /**
         * Returns true iff the accordion can be used.
         * @returns {boolean}
         */
        SingleSectionAccordion.prototype.isEnabled = function () {
            return true;
        };
        /**
         * Toggles the state of the given section. If the given section is closed, it will open
         * that section and close the others; if it is already open, it will close that section,
         * leaving them all closed.
         * @param section The section number to toggle
         */
        SingleSectionAccordion.prototype.toggleSection = function (section) {
            if (section === this.currentOpenSection) {
                this.currentOpenSection = null;
            }
            else {
                this.currentOpenSection = section;
            }
        };
        /**
         * Returns true if the given section is open, false if it is closed.
         * @param section The section to check
         */
        SingleSectionAccordion.prototype.isSectionOpen = function (section) {
            return (this.currentOpenSection === section);
        };
        return SingleSectionAccordion;
    })();
    VizPortal.SingleSectionAccordion = SingleSectionAccordion;
    /**
     * Alternative implementation of AccordionState that has all the sections open and doesn't allow
     * any of them to close.
     */
    VizPortal.StaticAccordion = {
        isEnabled: function () { return false; },
        toggleSection: function () { },
        isSectionOpen: function () { return true; }
    };
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    (function (LockUnlockProjectPermissionsState) {
        LockUnlockProjectPermissionsState[LockUnlockProjectPermissionsState["Locked"] = 0] = "Locked";
        LockUnlockProjectPermissionsState[LockUnlockProjectPermissionsState["Unlocked"] = 1] = "Unlocked";
        LockUnlockProjectPermissionsState[LockUnlockProjectPermissionsState["Mixed"] = 2] = "Mixed";
    })(VizPortal.LockUnlockProjectPermissionsState || (VizPortal.LockUnlockProjectPermissionsState = {}));
    var LockUnlockProjectPermissionsState = VizPortal.LockUnlockProjectPermissionsState;
    var LockStatusHelper;
    (function (LockStatusHelper) {
        var whiteLockIconClasses = {
            'Locked': 'tb-white-icon-permissions-locked',
            'Unlocked': 'tb-white-icon-permissions-unlocked',
            'Mixed': 'tb-white-icon-permissions-mixed'
        };
        var grayLockIconClasses = {
            'Locked': 'tb-gray-icon-permissions-locked',
            'Unlocked': 'tb-gray-icon-permissions-unlocked',
            'Mixed': 'tb-gray-icon-permissions-mixed'
        };
        var sectionHeaderText = {
            'Locked': 'lockProjectPermissions_locked',
            'Unlocked': 'lockProjectPermissions_unlocked',
            'Mixed': 'lockProjectPermissions_mixed'
        };
        var lockButtonText = {
            'Locked': 'lockProjectPermissions_lockedEllipsis',
            'Unlocked': 'lockProjectPermissions_unlockedEllipsis',
            'Mixed': 'lockProjectPermissions_mixedEllipsis'
        };
        function getCombinedStatusOfAllItems(projectStates) {
            var mixedProjectLockedState = projectStates.some(function (state) { return projectStates[0] !== state; });
            return mixedProjectLockedState ? LockUnlockProjectPermissionsState.Mixed : projectStates[0];
        }
        LockStatusHelper.getCombinedStatusOfAllItems = getCombinedStatusOfAllItems;
        function getLockStatusOfAllProjects(projects) {
            return projects.map(function (proj) {
                return proj.controlledPermissionsEnabled
                    ? LockUnlockProjectPermissionsState.Locked
                    : LockUnlockProjectPermissionsState.Unlocked;
            });
        }
        LockStatusHelper.getLockStatusOfAllProjects = getLockStatusOfAllProjects;
        function getWhiteLockIconClass(lockState) {
            return whiteLockIconClasses[LockUnlockProjectPermissionsState[lockState]];
        }
        LockStatusHelper.getWhiteLockIconClass = getWhiteLockIconClass;
        function getGrayLockIconClass(lockState) {
            return grayLockIconClasses[LockUnlockProjectPermissionsState[lockState]];
        }
        LockStatusHelper.getGrayLockIconClass = getGrayLockIconClass;
        function getSectionHeaderText(lockState) {
            return sectionHeaderText[LockUnlockProjectPermissionsState[lockState]];
        }
        LockStatusHelper.getSectionHeaderText = getSectionHeaderText;
        function getLockButtonText(lockState) {
            return lockButtonText[LockUnlockProjectPermissionsState[lockState]];
        }
        LockStatusHelper.getLockButtonText = getLockButtonText;
        function getLockState(projects) {
            return getCombinedStatusOfAllItems(getLockStatusOfAllProjects(projects));
        }
        LockStatusHelper.getLockState = getLockState;
    })(LockStatusHelper = VizPortal.LockStatusHelper || (VizPortal.LockStatusHelper = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../../L10n/L10n.ts" />
var VizPortal;
(function (VizPortal) {
    var PermissionsEditabilityLogicBase = (function () {
        function PermissionsEditabilityLogicBase(authorizables, authorizableType, sourceAuthorizables, $translate) {
            this.authorizables = authorizables;
            this.authorizableType = authorizableType;
            this.sourceAuthorizables = sourceAuthorizables;
            this.$translate = $translate;
            this.editable = this.allAuthorizablesMatchSource();
        }
        PermissionsEditabilityLogicBase.prototype.getEditabilityWithMessages = function () {
            var messages = this.getMessages();
            return {
                editable: this.editable,
                prompt: this.getPrompt(),
                shortMessage: messages[0],
                longMessage: messages[1]
            };
        };
        PermissionsEditabilityLogicBase.prototype.allAuthorizablesMatchSource = function () {
            var _this = this;
            return this.authorizables.all(function (authorizable) {
                var source = _this.sourceAuthorizables[authorizable.id];
                return _this.authorizableType === source.type && authorizable.id === source.id;
            });
        };
        PermissionsEditabilityLogicBase.prototype.allAuthorizablesLocked = function () {
            var _this = this;
            return this.authorizables.all(function (authorizable) {
                var source = _this.sourceAuthorizables[authorizable.id];
                return _this.authorizableType !== source.type || authorizable.id !== source.id;
            });
        };
        // These functions are re-implemented in most of the subclasses
        PermissionsEditabilityLogicBase.prototype.getPromptId = function () { return ''; };
        PermissionsEditabilityLogicBase.prototype.getMessages = function () { return ['', '']; };
        PermissionsEditabilityLogicBase.prototype.getPrompt = function () {
            return this.$translate.instant(this.getPromptId(), {
                ITEM_NAME: VizPortal.L10n.elideIfLong(this.authorizables.first().name),
                ITEM_COUNT: this.authorizables.size()
            }, VizPortal.L10n.Interpolations.Count) || '';
        };
        return PermissionsEditabilityLogicBase;
    })();
    VizPortal.PermissionsEditabilityLogicBase = PermissionsEditabilityLogicBase;
    var ProjectPermissionsEditabilityLogic = (function (_super) {
        __extends(ProjectPermissionsEditabilityLogic, _super);
        function ProjectPermissionsEditabilityLogic(authorizables, sourceAuthorizables, $translate) {
            _super.call(this, authorizables, VizPortal.ProjectContentType.name, sourceAuthorizables, $translate);
        }
        ProjectPermissionsEditabilityLogic.prototype.getPromptId = function () {
            return this.editable ? 'editProjectPermissionsDescription' : '';
        };
        return ProjectPermissionsEditabilityLogic;
    })(PermissionsEditabilityLogicBase);
    VizPortal.ProjectPermissionsEditabilityLogic = ProjectPermissionsEditabilityLogic;
    var WorkbookPermissionsEditabilityLogic = (function (_super) {
        __extends(WorkbookPermissionsEditabilityLogic, _super);
        function WorkbookPermissionsEditabilityLogic(authorizables, sourceAuthorizables, $translate) {
            _super.call(this, authorizables, VizPortal.WorkbookContentType.name, sourceAuthorizables, $translate);
        }
        WorkbookPermissionsEditabilityLogic.prototype.getPromptId = function () {
            return this.editable ? 'editWorkbookPermissionsDescription' : 'readonlyWorkbookPermissionsDescription';
        };
        WorkbookPermissionsEditabilityLogic.prototype.getMessages = function () {
            var _this = this;
            var stringIds = this.editable ? this.messageIdsForEditable() : this.messageIdsForReadOnly();
            return stringIds.map(function (stringId) { return _this.$translate.instant(stringId, {
                ITEM_COUNT: _this.authorizables.size(),
                // SOURCE_NAME is only used in the string when there's a single locked workbook,
                // so we can safely take the first source without knowing what type it is
                SOURCE_NAME: VizPortal.L10n.elideIfLong(_this.sourceAuthorizables[_this.authorizables.first().id].name)
            }, VizPortal.L10n.Interpolations.Count); });
        };
        WorkbookPermissionsEditabilityLogic.prototype.messageIdsForEditable = function () {
            var workbooks = this.authorizables;
            var displayTabs = workbooks.first().displayTabs;
            var allTheSame = workbooks.all(function (workbook) { return workbook.displayTabs === displayTabs; });
            var singleWorkbook = workbooks.size() === 1;
            if (!allTheSame) {
                var shortMessage = 'permissionsShortMessage_workbooksSomeWithIndependentViews';
                var longMessage = 'permissionsLongMessage_workbooksSomeWithIndependentViews';
            }
            else if (displayTabs) {
                var shortMessage = 'permissionsShortMessage_workbooksAllWithInheritedViews';
                var longMessage = singleWorkbook ? 'permissionsLongMessage_workbooksSingleWithInheritedViews'
                    : 'permissionsLongMessage_workbooksAllWithInheritedViews';
            }
            else {
                var shortMessage = 'permissionsShortMessage_workbooksAllWithIndependentViews';
                var longMessage = singleWorkbook ? 'permissionsLongMessage_workbooksSingleWithIndependentViews'
                    : 'permissionsLongMessage_workbooksAllWithIndependentViews';
            }
            return [shortMessage, longMessage];
        };
        WorkbookPermissionsEditabilityLogic.prototype.messageIdsForReadOnly = function () {
            if (this.authorizables.size() === 1) {
                var shortMessage = 'permissionsShortMessage_locked';
                var longMessage = 'permissionsLongMessage_workbooksSingleInLockedProject';
            }
            else if (this.allAuthorizablesLocked()) {
                var shortMessage = 'permissionsShortMessage_locked';
                var longMessage = 'permissionsLongMessage_workbooksAllInLockedProjects';
            }
            else {
                var shortMessage = 'permissionsShortMessage_workbooksSomeInLockedProjects';
                var longMessage = 'permissionsLongMessage_workbooksSomeInLockedProjects';
            }
            return [shortMessage, longMessage];
        };
        return WorkbookPermissionsEditabilityLogic;
    })(PermissionsEditabilityLogicBase);
    VizPortal.WorkbookPermissionsEditabilityLogic = WorkbookPermissionsEditabilityLogic;
    var DatasourcePermissionsEditabilityLogic = (function (_super) {
        __extends(DatasourcePermissionsEditabilityLogic, _super);
        function DatasourcePermissionsEditabilityLogic(authorizables, sourceAuthorizables, $translate) {
            _super.call(this, authorizables, VizPortal.DatasourceContentType.name, sourceAuthorizables, $translate);
        }
        DatasourcePermissionsEditabilityLogic.prototype.getPromptId = function () {
            return this.editable ? 'editDatasourcePermissionsDescription' : 'readonlyDatasourcePermissionsDescription';
        };
        DatasourcePermissionsEditabilityLogic.prototype.getMessages = function () {
            var _this = this;
            if (this.editable) {
                return ['', ''];
            }
            if (this.allAuthorizablesLocked()) {
                var shortMessage = 'permissionsShortMessage_locked';
                var longMessage = 'permissionsLongMessage_datasourcesAllInLockedProjects';
            }
            else {
                var shortMessage = 'permissionsShortMessage_datasourcesSomeInLockedProjects';
                var longMessage = 'permissionsLongMessage_datasourcesSomeInLockedProjects';
            }
            var stringIds = [shortMessage, longMessage];
            return stringIds.map(function (stringId) { return _this.$translate.instant(stringId, { ITEM_COUNT: _this.authorizables.size() }, VizPortal.L10n.Interpolations.Count); });
        };
        return DatasourcePermissionsEditabilityLogic;
    })(PermissionsEditabilityLogicBase);
    VizPortal.DatasourcePermissionsEditabilityLogic = DatasourcePermissionsEditabilityLogic;
    var ViewPermissionsEditabilityLogic = (function (_super) {
        __extends(ViewPermissionsEditabilityLogic, _super);
        function ViewPermissionsEditabilityLogic(authorizables, sourceAuthorizables, $translate) {
            _super.call(this, authorizables, VizPortal.ViewContentType.name, sourceAuthorizables, $translate);
        }
        ViewPermissionsEditabilityLogic.prototype.getPromptId = function () {
            return this.editable ? 'editViewPermissionsDescription' : 'readonlyViewPermissionsDescription';
        };
        ViewPermissionsEditabilityLogic.prototype.getMessages = function () {
            var _this = this;
            if (this.editable) {
                return ['', ''];
            }
            // If any permissions are sourced from projects, we use the locked-to-the-project messaging.
            var numSourcedFromProject = this.authorizables.map(function (authorizable) {
                return (_this.sourceAuthorizables[authorizable.id].type === VizPortal.ProjectContentType.name) ? 1 : 0;
            }).reduce(function (memo, next) { return memo + next; });
            var stringIds = (numSourcedFromProject > 0)
                ? this.messageIdsForLockedViews(numSourcedFromProject)
                : this.messageIdsForUnlockedViews();
            // SOURCE_NAME and SOURCE_COUNT are only referenced in the messages where all the sources are
            // workbooks, so we only count the workbook sources here.
            var sourceWorkbooks = _.uniq(_.filter(this.sourceAuthorizables, function (source) { return source.type === VizPortal.WorkbookContentType.name; }), function (item) { return item.type + item.id; });
            return stringIds.map(function (stringId) { return _this.$translate.instant(stringId, {
                ITEM_COUNT: _this.authorizables.size(),
                SOURCE_COUNT: sourceWorkbooks.length,
                SOURCE_NAME: VizPortal.L10n.elideIfLong(_.first(sourceWorkbooks) && _.first(sourceWorkbooks).name)
            }, VizPortal.L10n.Interpolations.Count); });
        };
        ViewPermissionsEditabilityLogic.prototype.messageIdsForLockedViews = function (numSourcedFromProject) {
            if (numSourcedFromProject === this.authorizables.size()) {
                var shortMessage = 'permissionsShortMessage_locked';
                var longMessage = 'permissionsLongMessage_viewsAllInLockedProjects';
            }
            else {
                var shortMessage = 'permissionsShortMessage_viewsSomeInLockedProjects';
                var longMessage = 'permissionsLongMessage_viewsSomeInLockedProjects';
            }
            return [shortMessage, longMessage];
        };
        ViewPermissionsEditabilityLogic.prototype.messageIdsForUnlockedViews = function () {
            if (this.authorizables.size() === 1) {
                var shortMessage = 'permissionsShortMessage_viewsAllInheritedFromWorkbooks';
                var longMessage = 'permissionsLongMessage_viewsSingleInheritedFromWorkbook';
            }
            else if (this.allAuthorizablesLocked()) {
                var shortMessage = 'permissionsShortMessage_viewsAllInheritedFromWorkbooks';
                var longMessage = 'permissionsLongMessage_viewsAllInheritedFromWorkbooks';
            }
            else {
                var shortMessage = 'permissionsShortMessage_viewsSomeInheritedFromWorkbooks';
                var longMessage = 'permissionsLongMessage_viewsSomeInheritedFromWorkbooks';
            }
            return [shortMessage, longMessage];
        };
        return ViewPermissionsEditabilityLogic;
    })(PermissionsEditabilityLogicBase);
    VizPortal.ViewPermissionsEditabilityLogic = ViewPermissionsEditabilityLogic;
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="PermissionsEditabilityLogic.ts" />
var VizPortal;
(function (VizPortal) {
    var PermissionsEditabilityLogicFactory = (function () {
        function PermissionsEditabilityLogicFactory($translate) {
            this.$translate = $translate;
        }
        PermissionsEditabilityLogicFactory.prototype.logicForAuthorizables = function (authorizables, authorizableType, sourceAuthorizables) {
            var impl = PermissionsEditabilityLogicFactory.ImplForContentType[authorizableType];
            return new impl(authorizables, sourceAuthorizables, this.$translate);
        };
        PermissionsEditabilityLogicFactory.$inject = ['$translate'];
        PermissionsEditabilityLogicFactory.ImplForContentType = {
            project: VizPortal.ProjectPermissionsEditabilityLogic,
            workbook: VizPortal.WorkbookPermissionsEditabilityLogic,
            datasource: VizPortal.DatasourcePermissionsEditabilityLogic,
            view: VizPortal.ViewPermissionsEditabilityLogic
        };
        return PermissionsEditabilityLogicFactory;
    })();
    VizPortal.PermissionsEditabilityLogicFactory = PermissionsEditabilityLogicFactory;
    VizPortal.Module.instance().service('PermissionsEditabilityLogicFactory', PermissionsEditabilityLogicFactory);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../models/Permission.ts" />
var VizPortal;
(function (VizPortal) {
    var PermissionsHasher = (function () {
        function PermissionsHasher(capabilities) {
            this.capabilities = capabilities;
        }
        // A permissions hash is a string of characters, one per capability,
        // in the order they were passed in the constructor.
        // Each character is either A (allowed), D (denied), M (mixed), or - (unspecified).
        PermissionsHasher.prototype.hash = function (permissions) {
            return _.map(this.capabilities, function (capability) {
                switch (permissions[capability]) {
                    case VizPortal.Permission.Allowed: return 'A';
                    case VizPortal.Permission.Denied: return 'D';
                    case VizPortal.Permission.Mixed: return 'M';
                    default: return '-';
                }
                ;
            }).join('');
        };
        return PermissionsHasher;
    })();
    VizPortal.PermissionsHasher = PermissionsHasher;
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../../FeatureFlags.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        ServerApi.Capabilities = {
            // common
            read: 'read',
            write: 'write',
            deleteItem: 'delete',
            changePermissions: 'change_permissions',
            // view (and workbook and project)
            filter: 'filter',
            addComment: 'add_comment',
            viewComments: 'view_comments',
            exportData: 'export_data',
            vud: 'vud',
            exportImage: 'export_image',
            shareView: 'share_view',
            webAuthoring: 'web_authoring',
            // workbook and datasource
            exportXml: 'export_xml',
            changeHierarchy: 'change_hierarchy',
            // datasource only
            connect: 'connect',
            // project only
            projectLeader: 'project_leader'
        };
        // Today, projects have every capability, but they should only have the smaller set below.
        // The other capabilities should not be on the project, but instead on "templates" for data sources and workbooks.
        var ProjectCapabilitiesDeprecated = [
            ServerApi.Capabilities.addComment,
            ServerApi.Capabilities.changeHierarchy,
            ServerApi.Capabilities.changePermissions,
            ServerApi.Capabilities.connect,
            ServerApi.Capabilities.deleteItem,
            ServerApi.Capabilities.exportData,
            ServerApi.Capabilities.exportImage,
            ServerApi.Capabilities.exportXml,
            ServerApi.Capabilities.filter,
            ServerApi.Capabilities.projectLeader,
            ServerApi.Capabilities.read,
            ServerApi.Capabilities.shareView,
            ServerApi.Capabilities.viewComments,
            ServerApi.Capabilities.vud,
            ServerApi.Capabilities.webAuthoring,
            ServerApi.Capabilities.write
        ];
        var ProjectCapabilities = [
            ServerApi.Capabilities.projectLeader,
            ServerApi.Capabilities.read,
            ServerApi.Capabilities.write
        ];
        var WorkbookCapabilities = [
            ServerApi.Capabilities.addComment,
            ServerApi.Capabilities.changeHierarchy,
            ServerApi.Capabilities.changePermissions,
            ServerApi.Capabilities.deleteItem,
            ServerApi.Capabilities.exportData,
            ServerApi.Capabilities.exportImage,
            ServerApi.Capabilities.exportXml,
            ServerApi.Capabilities.filter,
            ServerApi.Capabilities.read,
            ServerApi.Capabilities.shareView,
            ServerApi.Capabilities.viewComments,
            ServerApi.Capabilities.vud,
            ServerApi.Capabilities.webAuthoring,
            ServerApi.Capabilities.write
        ];
        var DatasourceCapabilities = [
            ServerApi.Capabilities.changePermissions,
            ServerApi.Capabilities.connect,
            ServerApi.Capabilities.deleteItem,
            ServerApi.Capabilities.exportXml,
            ServerApi.Capabilities.read,
            ServerApi.Capabilities.write
        ];
        var ViewCapabilities = [
            ServerApi.Capabilities.addComment,
            ServerApi.Capabilities.changePermissions,
            ServerApi.Capabilities.deleteItem,
            ServerApi.Capabilities.exportData,
            ServerApi.Capabilities.exportImage,
            ServerApi.Capabilities.filter,
            ServerApi.Capabilities.read,
            ServerApi.Capabilities.shareView,
            ServerApi.Capabilities.viewComments,
            ServerApi.Capabilities.vud,
            ServerApi.Capabilities.webAuthoring
        ];
        ServerApi.CapabilitiesByContentType = {
            project: ProjectCapabilities,
            projectWorkbookTemplate: WorkbookCapabilities,
            projectDatasourceTemplate: DatasourceCapabilities,
            workbook: WorkbookCapabilities,
            datasource: DatasourceCapabilities,
            view: ViewCapabilities
        };
        ServerApi.CapabilitiesByContentTypeDeprecated = {
            project: ProjectCapabilitiesDeprecated,
            workbook: WorkbookCapabilities,
            datasource: DatasourceCapabilities,
            view: ViewCapabilities
        };
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var Role = (function () {
        function Role() {
        }
        /*
         * Creates a role where all the capabilities have the given permission
         */
        Role.create = function (locKey, capabilities, permission) {
            var permissions = {};
            _.each(capabilities, function (capability) {
                permissions[capability] = permission;
            });
            return { locKey: locKey, permissions: permissions };
        };
        return Role;
    })();
    VizPortal.Role = Role;
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="Role.ts" />
/// <reference path="../ServerApi/types/Capabilities.ts" />
var VizPortal;
(function (VizPortal) {
    var PermissionRoleDefinitions;
    (function (PermissionRoleDefinitions) {
        // Project
        var projectRoles = [];
        var ProjectViewerAllowedCapabilities = [
            VizPortal.ServerApi.Capabilities.read,
            VizPortal.ServerApi.Capabilities.viewComments,
            VizPortal.ServerApi.Capabilities.addComment,
            VizPortal.ServerApi.Capabilities.exportData,
            VizPortal.ServerApi.Capabilities.exportImage
        ];
        PermissionRoleDefinitions.ProjectViewer = VizPortal.Role.create(VizPortal.L10n.Keys.viewer, ProjectViewerAllowedCapabilities, VizPortal.Permission.Allowed);
        projectRoles.push(PermissionRoleDefinitions.ProjectViewer);
        var ProjectInteractorAllowedCapabilities = ProjectViewerAllowedCapabilities.concat([
            VizPortal.ServerApi.Capabilities.filter,
            VizPortal.ServerApi.Capabilities.vud,
            VizPortal.ServerApi.Capabilities.shareView,
            VizPortal.ServerApi.Capabilities.webAuthoring
        ]);
        PermissionRoleDefinitions.ProjectInteractor = VizPortal.Role.create(VizPortal.L10n.Keys.interactor, ProjectInteractorAllowedCapabilities, VizPortal.Permission.Allowed);
        projectRoles.push(PermissionRoleDefinitions.ProjectInteractor);
        var ProjectEditorAllowedCapabilities = ProjectInteractorAllowedCapabilities.concat([
            VizPortal.ServerApi.Capabilities.write,
            VizPortal.ServerApi.Capabilities.deleteItem,
            VizPortal.ServerApi.Capabilities.exportXml,
            VizPortal.ServerApi.Capabilities.changeHierarchy,
            VizPortal.ServerApi.Capabilities.changePermissions
        ]);
        PermissionRoleDefinitions.ProjectEditor = VizPortal.Role.create(VizPortal.L10n.Keys.editor, ProjectEditorAllowedCapabilities, VizPortal.Permission.Allowed);
        projectRoles.push(PermissionRoleDefinitions.ProjectEditor);
        var DataSourceConnectorAllowedCapabilities = [
            VizPortal.ServerApi.Capabilities.read,
            VizPortal.ServerApi.Capabilities.connect
        ];
        PermissionRoleDefinitions.DataSourceConnector = VizPortal.Role.create(VizPortal.L10n.Keys.datasourceConnector, DataSourceConnectorAllowedCapabilities, VizPortal.Permission.Allowed);
        projectRoles.push(PermissionRoleDefinitions.DataSourceConnector);
        var DataSourceEditorAllowedCapabilities = DataSourceConnectorAllowedCapabilities.concat([
            VizPortal.ServerApi.Capabilities.write,
            VizPortal.ServerApi.Capabilities.deleteItem,
            VizPortal.ServerApi.Capabilities.exportXml,
            VizPortal.ServerApi.Capabilities.changePermissions,
        ]);
        PermissionRoleDefinitions.DataSourceEditor = VizPortal.Role.create(VizPortal.L10n.Keys.datasourceEditor, DataSourceEditorAllowedCapabilities, VizPortal.Permission.Allowed);
        projectRoles.push(PermissionRoleDefinitions.DataSourceEditor);
        var ProjectPublisherAllowedCapabilities = ProjectInteractorAllowedCapabilities.concat([
            VizPortal.ServerApi.Capabilities.write
        ]);
        PermissionRoleDefinitions.ProjectPublisher = VizPortal.Role.create(VizPortal.L10n.Keys.publisher, ProjectPublisherAllowedCapabilities, VizPortal.Permission.Allowed);
        projectRoles.push(PermissionRoleDefinitions.ProjectPublisher);
        var ProjectLeaderAllowedCapabilities = [
            VizPortal.ServerApi.Capabilities.projectLeader
        ];
        PermissionRoleDefinitions.ProjectLeader = VizPortal.Role.create(VizPortal.L10n.Keys.projectLeader, ProjectLeaderAllowedCapabilities, VizPortal.Permission.Allowed);
        projectRoles.push(PermissionRoleDefinitions.ProjectLeader);
        // Data Source
        var datasourceRoles = [];
        datasourceRoles.push(PermissionRoleDefinitions.DataSourceConnector);
        datasourceRoles.push(PermissionRoleDefinitions.DataSourceEditor);
        // Workbook
        var workbookRoles = [];
        var WorkbookViewerAllowedCapabilities = [
            VizPortal.ServerApi.Capabilities.addComment,
            VizPortal.ServerApi.Capabilities.exportData,
            VizPortal.ServerApi.Capabilities.exportImage,
            VizPortal.ServerApi.Capabilities.read,
            VizPortal.ServerApi.Capabilities.viewComments
        ];
        PermissionRoleDefinitions.WorkbookViewer = VizPortal.Role.create(VizPortal.L10n.Keys.viewer, WorkbookViewerAllowedCapabilities, VizPortal.Permission.Allowed);
        workbookRoles.push(PermissionRoleDefinitions.WorkbookViewer);
        var WorkbookInteractorAllowedCapabilities = WorkbookViewerAllowedCapabilities.concat([
            VizPortal.ServerApi.Capabilities.filter,
            VizPortal.ServerApi.Capabilities.shareView,
            VizPortal.ServerApi.Capabilities.vud,
            VizPortal.ServerApi.Capabilities.webAuthoring
        ]);
        PermissionRoleDefinitions.WorkbookInteractor = VizPortal.Role.create(VizPortal.L10n.Keys.interactor, WorkbookInteractorAllowedCapabilities, VizPortal.Permission.Allowed);
        workbookRoles.push(PermissionRoleDefinitions.WorkbookInteractor);
        var WorkbookEditorAllowedCapabilities = WorkbookInteractorAllowedCapabilities.concat([
            VizPortal.ServerApi.Capabilities.changeHierarchy,
            VizPortal.ServerApi.Capabilities.changePermissions,
            VizPortal.ServerApi.Capabilities.deleteItem,
            VizPortal.ServerApi.Capabilities.exportXml,
            VizPortal.ServerApi.Capabilities.write
        ]);
        PermissionRoleDefinitions.WorkbookEditor = VizPortal.Role.create(VizPortal.L10n.Keys.editor, WorkbookEditorAllowedCapabilities, VizPortal.Permission.Allowed);
        workbookRoles.push(PermissionRoleDefinitions.WorkbookEditor);
        // View
        var viewRoles = [];
        var ViewViewerAllowedCapabilities = [
            VizPortal.ServerApi.Capabilities.addComment,
            VizPortal.ServerApi.Capabilities.exportData,
            VizPortal.ServerApi.Capabilities.exportImage,
            VizPortal.ServerApi.Capabilities.read,
            VizPortal.ServerApi.Capabilities.viewComments
        ];
        PermissionRoleDefinitions.ViewViewer = VizPortal.Role.create(VizPortal.L10n.Keys.viewer, ViewViewerAllowedCapabilities, VizPortal.Permission.Allowed);
        viewRoles.push(PermissionRoleDefinitions.ViewViewer);
        var ViewInteractorAllowedCapabilities = ViewViewerAllowedCapabilities.concat([
            VizPortal.ServerApi.Capabilities.filter,
            VizPortal.ServerApi.Capabilities.shareView,
            VizPortal.ServerApi.Capabilities.vud,
            VizPortal.ServerApi.Capabilities.webAuthoring
        ]);
        PermissionRoleDefinitions.ViewInteractor = VizPortal.Role.create(VizPortal.L10n.Keys.interactor, ViewInteractorAllowedCapabilities, VizPortal.Permission.Allowed);
        viewRoles.push(PermissionRoleDefinitions.ViewInteractor);
        var ViewEditorAllowedCapabilities = ViewInteractorAllowedCapabilities.concat([
            VizPortal.ServerApi.Capabilities.changePermissions,
            VizPortal.ServerApi.Capabilities.deleteItem
        ]);
        PermissionRoleDefinitions.ViewEditor = VizPortal.Role.create(VizPortal.L10n.Keys.editor, ViewEditorAllowedCapabilities, VizPortal.Permission.Allowed);
        viewRoles.push(PermissionRoleDefinitions.ViewEditor);
        // All the roles get added onto this object
        PermissionRoleDefinitions.explicitRolesByContentType = {
            project: projectRoles,
            workbook: workbookRoles,
            datasource: datasourceRoles,
            view: viewRoles
        };
    })(PermissionRoleDefinitions = VizPortal.PermissionRoleDefinitions || (VizPortal.PermissionRoleDefinitions = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="Role.ts" />
/// <reference path="../ServerApi/types/Capabilities.ts" />
var VizPortal;
(function (VizPortal) {
    var PermissionTemplateRoleDefinitions;
    (function (PermissionTemplateRoleDefinitions) {
        // Project
        var projectRoles = [];
        var ProjectViewerAllowedCapabilities = [
            VizPortal.ServerApi.Capabilities.read
        ];
        PermissionTemplateRoleDefinitions.ProjectViewer = VizPortal.Role.create(VizPortal.L10n.Keys.viewer, ProjectViewerAllowedCapabilities, VizPortal.Permission.Allowed);
        projectRoles.push(PermissionTemplateRoleDefinitions.ProjectViewer);
        var ProjectPublisherAllowedCapabilities = ProjectViewerAllowedCapabilities.concat([
            VizPortal.ServerApi.Capabilities.write
        ]);
        PermissionTemplateRoleDefinitions.ProjectPublisher = VizPortal.Role.create(VizPortal.L10n.Keys.publisher, ProjectPublisherAllowedCapabilities, VizPortal.Permission.Allowed);
        projectRoles.push(PermissionTemplateRoleDefinitions.ProjectPublisher);
        var ProjectLeaderAllowedCapabilities = [
            VizPortal.ServerApi.Capabilities.projectLeader
        ];
        PermissionTemplateRoleDefinitions.ProjectLeader = VizPortal.Role.create(VizPortal.L10n.Keys.projectLeader, ProjectLeaderAllowedCapabilities, VizPortal.Permission.Allowed);
        projectRoles.push(PermissionTemplateRoleDefinitions.ProjectLeader);
        // Data Source
        var datasourceRoles = [];
        var DataSourceConnectorAllowedCapabilities = [
            VizPortal.ServerApi.Capabilities.read,
            VizPortal.ServerApi.Capabilities.connect
        ];
        PermissionTemplateRoleDefinitions.DataSourceConnector = VizPortal.Role.create(VizPortal.L10n.Keys.datasourceConnector, DataSourceConnectorAllowedCapabilities, VizPortal.Permission.Allowed);
        datasourceRoles.push(PermissionTemplateRoleDefinitions.DataSourceConnector);
        var DataSourceEditorAllowedCapabilities = DataSourceConnectorAllowedCapabilities.concat([
            VizPortal.ServerApi.Capabilities.write,
            VizPortal.ServerApi.Capabilities.deleteItem,
            VizPortal.ServerApi.Capabilities.exportXml,
            VizPortal.ServerApi.Capabilities.changePermissions,
        ]);
        PermissionTemplateRoleDefinitions.DataSourceEditor = VizPortal.Role.create(VizPortal.L10n.Keys.datasourceEditor, DataSourceEditorAllowedCapabilities, VizPortal.Permission.Allowed);
        datasourceRoles.push(PermissionTemplateRoleDefinitions.DataSourceEditor);
        // Workbook
        var workbookRoles = [];
        var WorkbookViewerAllowedCapabilities = [
            VizPortal.ServerApi.Capabilities.addComment,
            VizPortal.ServerApi.Capabilities.exportData,
            VizPortal.ServerApi.Capabilities.exportImage,
            VizPortal.ServerApi.Capabilities.read,
            VizPortal.ServerApi.Capabilities.viewComments
        ];
        PermissionTemplateRoleDefinitions.WorkbookViewer = VizPortal.Role.create(VizPortal.L10n.Keys.viewer, WorkbookViewerAllowedCapabilities, VizPortal.Permission.Allowed);
        workbookRoles.push(PermissionTemplateRoleDefinitions.WorkbookViewer);
        var WorkbookInteractorAllowedCapabilities = WorkbookViewerAllowedCapabilities.concat([
            VizPortal.ServerApi.Capabilities.filter,
            VizPortal.ServerApi.Capabilities.shareView,
            VizPortal.ServerApi.Capabilities.vud,
            VizPortal.ServerApi.Capabilities.webAuthoring
        ]);
        PermissionTemplateRoleDefinitions.WorkbookInteractor = VizPortal.Role.create(VizPortal.L10n.Keys.interactor, WorkbookInteractorAllowedCapabilities, VizPortal.Permission.Allowed);
        workbookRoles.push(PermissionTemplateRoleDefinitions.WorkbookInteractor);
        var WorkbookEditorAllowedCapabilities = WorkbookInteractorAllowedCapabilities.concat([
            VizPortal.ServerApi.Capabilities.changeHierarchy,
            VizPortal.ServerApi.Capabilities.changePermissions,
            VizPortal.ServerApi.Capabilities.deleteItem,
            VizPortal.ServerApi.Capabilities.exportXml,
            VizPortal.ServerApi.Capabilities.write
        ]);
        PermissionTemplateRoleDefinitions.WorkbookEditor = VizPortal.Role.create(VizPortal.L10n.Keys.editor, WorkbookEditorAllowedCapabilities, VizPortal.Permission.Allowed);
        workbookRoles.push(PermissionTemplateRoleDefinitions.WorkbookEditor);
        // View
        var viewRoles = [];
        var ViewViewerAllowedCapabilities = [
            VizPortal.ServerApi.Capabilities.addComment,
            VizPortal.ServerApi.Capabilities.exportData,
            VizPortal.ServerApi.Capabilities.exportImage,
            VizPortal.ServerApi.Capabilities.read,
            VizPortal.ServerApi.Capabilities.viewComments
        ];
        PermissionTemplateRoleDefinitions.ViewViewer = VizPortal.Role.create(VizPortal.L10n.Keys.viewer, ViewViewerAllowedCapabilities, VizPortal.Permission.Allowed);
        viewRoles.push(PermissionTemplateRoleDefinitions.ViewViewer);
        var ViewInteractorAllowedCapabilities = ViewViewerAllowedCapabilities.concat([
            VizPortal.ServerApi.Capabilities.filter,
            VizPortal.ServerApi.Capabilities.shareView,
            VizPortal.ServerApi.Capabilities.vud,
            VizPortal.ServerApi.Capabilities.webAuthoring
        ]);
        PermissionTemplateRoleDefinitions.ViewInteractor = VizPortal.Role.create(VizPortal.L10n.Keys.interactor, ViewInteractorAllowedCapabilities, VizPortal.Permission.Allowed);
        viewRoles.push(PermissionTemplateRoleDefinitions.ViewInteractor);
        var ViewEditorAllowedCapabilities = ViewInteractorAllowedCapabilities.concat([
            VizPortal.ServerApi.Capabilities.changePermissions,
            VizPortal.ServerApi.Capabilities.deleteItem
        ]);
        PermissionTemplateRoleDefinitions.ViewEditor = VizPortal.Role.create(VizPortal.L10n.Keys.editor, ViewEditorAllowedCapabilities, VizPortal.Permission.Allowed);
        viewRoles.push(PermissionTemplateRoleDefinitions.ViewEditor);
        // All the roles get added onto this object
        PermissionTemplateRoleDefinitions.explicitRolesByContentType = {
            project: projectRoles,
            projectWorkbookTemplate: workbookRoles,
            projectDatasourceTemplate: datasourceRoles,
            workbook: workbookRoles,
            datasource: datasourceRoles,
            view: viewRoles
        };
    })(PermissionTemplateRoleDefinitions = VizPortal.PermissionTemplateRoleDefinitions || (VizPortal.PermissionTemplateRoleDefinitions = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../FeatureFlags.ts" />
/// <reference path="../helpers/PermissionsHasher.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../models/Permission.ts" />
/// <reference path="../ServerApi/types/Capabilities.ts" />
/// <reference path="PermissionRoleDefinitions.ts" />
/// <reference path="PermissionTemplateRoleDefinitions.ts" />
/// <reference path="Role.ts" />
var VizPortal;
(function (VizPortal) {
    var PermissionRoles = (function () {
        function PermissionRoles(explicitRolesByContentType, capabilitiesByContentType) {
            var _this = this;
            this.permissionsAndRolesByType = {};
            this.capabilitiesByContentType = capabilitiesByContentType;
            var allCapabilities = _.uniq(_.flatten(_.values(capabilitiesByContentType)));
            this.permissionsHasher = new VizPortal.PermissionsHasher(allCapabilities);
            _.each(explicitRolesByContentType, function (roles, contentType) {
                _.each(roles, function (role) {
                    _this.addRoleForContentType(contentType, role);
                });
                // Add the 'unspecified' and 'denied' roles
                var unspecifiedRole = {};
                var deniedRole = {};
                _.each(capabilitiesByContentType[contentType], function (capability) {
                    unspecifiedRole[capability] = VizPortal.Permission.Unspecified;
                    deniedRole[capability] = VizPortal.Permission.Denied;
                });
                _this.addExplicitRole(contentType, unspecifiedRole, VizPortal.L10n.Keys.none);
                _this.addExplicitRole(contentType, deniedRole, VizPortal.L10n.Keys.denied);
                _this.addEffectiveRole(contentType, deniedRole, VizPortal.L10n.Keys.none);
            });
        }
        /*
         * Gets the single explicit role that describes this set of permissions on an authorizable type.
         * Returns 'custom' if there is no applicable role.
         */
        PermissionRoles.prototype.getExplicitRoleForTypeAndPermissions = function (contentType, permissions) {
            return this.getRoleForPermissions(this.getExplicitRolesForType(contentType), permissions);
        };
        /*
         * Gets the single effective role that describes this set of permissions on an authorizable type.
         * Returns 'custom' if there is no applicable role.
         */
        PermissionRoles.prototype.getEffectiveRoleForTypeAndPermissions = function (contentType, permissions) {
            return this.getRoleForPermissions(this.getEffectiveRolesForType(contentType), permissions);
        };
        /*
         * Gets the set of explicit permissions for this role.
         */
        PermissionRoles.prototype.getPermissionsForTypeAndRole = function (contentType, role) {
            return this.getPermissionsByRoleForType(contentType)[role];
        };
        /*
         * Gets the list of roles for this authorizable type
         */
        PermissionRoles.prototype.getAvailableRolesForType = function (contentType) {
            return _.values(this.getExplicitRolesForType(contentType));
        };
        PermissionRoles.prototype.getPermissionsAndRolesForType = function (type) {
            var permissionsAndRoles = this.permissionsAndRolesByType[type];
            if (!permissionsAndRoles) {
                permissionsAndRoles = {
                    permissionsByRole: {},
                    explicitRolesByPermissionsHash: {},
                    effectiveRolesByPermissionsHash: {}
                };
                this.permissionsAndRolesByType[type] = permissionsAndRoles;
            }
            return permissionsAndRoles;
        };
        PermissionRoles.prototype.getPermissionsByRoleForType = function (type) {
            return this.getPermissionsAndRolesForType(type).permissionsByRole;
        };
        PermissionRoles.prototype.getExplicitRolesForType = function (type) {
            return this.getPermissionsAndRolesForType(type).explicitRolesByPermissionsHash;
        };
        PermissionRoles.prototype.getEffectiveRolesForType = function (type) {
            return this.getPermissionsAndRolesForType(type).effectiveRolesByPermissionsHash;
        };
        PermissionRoles.prototype.getRoleForPermissions = function (roles, permissions) {
            return roles[this.permissionsHasher.hash(permissions)] || VizPortal.L10n.Keys.custom;
        };
        PermissionRoles.prototype.setRoleForPermissions = function (roles, permissions, role) {
            roles[this.permissionsHasher.hash(permissions)] = role;
        };
        PermissionRoles.prototype.addRoleForContentType = function (type, role) {
            var allCapabilities = this.capabilitiesByContentType[type];
            var explicitPermissions = {};
            var effectivePermissions = {};
            _.each(allCapabilities, function (capability) {
                var permission = role.permissions[capability] || VizPortal.Permission.Unspecified;
                explicitPermissions[capability] = permission;
                // Unspecified permissions are effectively denied
                effectivePermissions[capability] =
                    (permission === VizPortal.Permission.Unspecified) ? VizPortal.Permission.Denied : permission;
            });
            this.addExplicitRole(type, explicitPermissions, role.locKey);
            this.addEffectiveRole(type, effectivePermissions, role.locKey);
        };
        PermissionRoles.prototype.addExplicitRole = function (type, permissions, role) {
            var permissionRoles = this.getPermissionsAndRolesForType(type);
            permissionRoles.permissionsByRole[role] = permissions;
            this.setRoleForPermissions(permissionRoles.explicitRolesByPermissionsHash, permissions, role);
        };
        PermissionRoles.prototype.addEffectiveRole = function (type, permissions, role) {
            // NOTE: effective permissions aren't stored in the permissionsByRole map because this map
            // is only used when setting explicit permissions for a grantee.
            var permissionRoles = this.getPermissionsAndRolesForType(type);
            this.setRoleForPermissions(permissionRoles.effectiveRolesByPermissionsHash, permissions, role);
        };
        return PermissionRoles;
    })();
    VizPortal.PermissionRoles = PermissionRoles;
    VizPortal.Module.instance().factory('PermissionRoles', function () {
        if (VizPortal.FeatureFlags.projectPermissionsTemplatesEnabled) {
            var rolesByContentType = VizPortal.PermissionTemplateRoleDefinitions.explicitRolesByContentType;
            var capabilitiesByContentType = VizPortal.ServerApi.CapabilitiesByContentType;
        }
        else {
            var rolesByContentType = VizPortal.PermissionRoleDefinitions.explicitRolesByContentType;
            var capabilitiesByContentType = VizPortal.ServerApi.CapabilitiesByContentTypeDeprecated;
        }
        return new PermissionRoles(rolesByContentType, capabilitiesByContentType);
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="RequestHelper.ts" />
/// <reference path="../models/IGranteePermissions.ts" />
/// <reference path="../models/PermissionRoles.ts" />
/// <reference path="../ServerApi/requests/GetEffectivePermissionsRequest.ts" />
var VizPortal;
(function (VizPortal) {
    var PermissionsHelper;
    (function (PermissionsHelper) {
        function granteeType(row) {
            if (row.group) {
                return 'group';
            }
            else if (row.user) {
                return 'user';
            }
            else {
                return '';
            }
        }
        PermissionsHelper.granteeType = granteeType;
        function granteeName(row) {
            if (row.group) {
                if (row.group.userCount >= 0) {
                    // TODO: It would be better if this was a localized string replacement,
                    // but that would require some minor refactoring, because this static
                    // method doesn't have easy access to $translate.
                    return row.group.name + ' (' + row.group.userCount + ')';
                }
                else {
                    return row.group.name;
                }
            }
            else if (row.user) {
                return row.user.displayName;
            }
            else {
                return '';
            }
        }
        PermissionsHelper.granteeName = granteeName;
        function hasSameGrantee(a, b) {
            if (a && b) {
                if (a.group && b.group) {
                    return a.group.id === b.group.id;
                }
                else if (a.user && b.user) {
                    return a.user.id === b.user.id;
                }
            }
            return false;
        }
        PermissionsHelper.hasSameGrantee = hasSameGrantee;
        function compareGrantees(a, b) {
            if (a.group) {
                if (b.group) {
                    if (a.group.isAllUsersGroup) {
                        if (b.group.isAllUsersGroup) {
                            return 0;
                        }
                        else {
                            return -1;
                        }
                    }
                    else if (b.group.isAllUsersGroup) {
                        return 1;
                    }
                    else {
                        return compareStrings(a.group.name, b.group.name);
                    }
                }
                else {
                    return -1;
                }
            }
            else {
                if (b.group) {
                    return 1;
                }
                else {
                    return compareStrings(a.user.displayName, b.user.displayName);
                }
            }
        }
        PermissionsHelper.compareGrantees = compareGrantees;
        function compareStrings(a, b) {
            return a.localeCompare(b, VizPortal.L10n.language);
        }
        // Gets the permission with the specified capability from the IGranteePermissions. This function
        // contains logic that is dependent on the ProjectPermissionsTemplatesEnabled feature flag.
        // TODO: When the flag is removed, simplify/remove this function.
        function permissionFromIGranteePermission(igp, contentType, capability) {
            var permissions = permissionsFromIGranteePermission(igp, contentType);
            return permissions ? permissions[capability] : undefined;
        }
        PermissionsHelper.permissionFromIGranteePermission = permissionFromIGranteePermission;
        // This function contains logic that is dependent on the ProjectPermissionsTemplatesEnabled
        // feature flag. TODO: When the flag is removed, simplify/remove this function.
        function permissionsFromIGranteePermission(igp, contentType) {
            if (!igp)
                return undefined;
            return (VizPortal.FeatureFlags.projectPermissionsTemplatesEnabled)
                ? igp.permissionsByContentType && igp.permissionsByContentType[contentType]
                : igp.permissions;
        }
        PermissionsHelper.permissionsFromIGranteePermission = permissionsFromIGranteePermission;
        function capabilityReason(row, contentType, capability, defaultValue) {
            var permission = permissionFromIGranteePermission(row, contentType, capability);
            if (permission) {
                switch (permission.reason) {
                    case VizPortal.PermissionReason.GroupAllow: return 'group_allow';
                    case VizPortal.PermissionReason.GroupDeny: return 'group_disallow';
                    case VizPortal.PermissionReason.GroupProjectLeaderAllow: return 'group_project_leader';
                    case VizPortal.PermissionReason.GuestAllow: return 'guest_allowed';
                    case VizPortal.PermissionReason.ImplicitDeny: return 'implicit_deny';
                    case VizPortal.PermissionReason.Mixed: return 'mixed';
                    case VizPortal.PermissionReason.Unspecified: return 'unspecified';
                    case VizPortal.PermissionReason.UserAdminAllow: return 'user_admin';
                    case VizPortal.PermissionReason.UserAllow: return 'user_allow';
                    case VizPortal.PermissionReason.UserAuthorizableOwnerAllow: return 'user_authorizable_owner';
                    case VizPortal.PermissionReason.UserDeny: return 'user_disallow';
                    case VizPortal.PermissionReason.UserLicensingDeny: return 'user_licensing';
                    case VizPortal.PermissionReason.UserProjectLeaderAllow: return 'user_project_leader';
                    case VizPortal.PermissionReason.UserProjectOwnerAllow: return 'user_project_owner';
                    default: return defaultValue;
                }
            }
            else {
                return defaultValue;
            }
        }
        PermissionsHelper.capabilityReason = capabilityReason;
        function capabilityValue(row, contentType, capability, defaultValue) {
            var permission = permissionFromIGranteePermission(row, contentType, capability);
            if (permission) {
                switch (permission.permission) {
                    case VizPortal.Permission.Allowed: return 'allowed';
                    case VizPortal.Permission.Denied: return 'denied';
                    case VizPortal.Permission.Mixed: return 'mixed';
                    default: return defaultValue;
                }
            }
            else {
                return defaultValue;
            }
        }
        PermissionsHelper.capabilityValue = capabilityValue;
        function capabilityTitleKey(row, contentType, capability, defaultValue) {
            var curr = permissionFromIGranteePermission(row, contentType, capability);
            if (curr && curr.reason != VizPortal.PermissionReason.Mixed && curr.reason != VizPortal.PermissionReason.Unspecified) {
                // we have a reason for this capability; it's neither mixed nor unspecified, display the reason
                return 'permission_reason_' + capabilityReason(row, contentType, capability, defaultValue);
            }
            else {
                // we either don't have a reason, or the reason is mixed or unspecified, display only the value
                return 'permission_value_' + capabilityValue(row, contentType, capability, defaultValue);
            }
        }
        PermissionsHelper.capabilityTitleKey = capabilityTitleKey;
        function pluckPermissionsFromDictionary(input) {
            var result = {};
            _.each(input, function (value, key) {
                result[key] = value.permission;
            });
            return result;
        }
        PermissionsHelper.pluckPermissionsFromDictionary = pluckPermissionsFromDictionary;
        function explicitGranteeRole(row, contentType, permissionRoles) {
            var permissions = permissionsFromIGranteePermission(row, contentType);
            var permissionValues = pluckPermissionsFromDictionary(permissions);
            return permissionRoles.getExplicitRoleForTypeAndPermissions(contentType, permissionValues);
        }
        PermissionsHelper.explicitGranteeRole = explicitGranteeRole;
        function effectiveGranteeRole(row, contentType, permissionRoles) {
            var permissions = permissionsFromIGranteePermission(row, contentType);
            var permissionValues = pluckPermissionsFromDictionary(permissions);
            return permissionRoles.getEffectiveRoleForTypeAndPermissions(contentType, permissionValues);
        }
        PermissionsHelper.effectiveGranteeRole = effectiveGranteeRole;
        // returns a new dictionary of IPermissions with all reasons set to 'unspecified'
        function IPermissionsFromPermissions(permissions) {
            var permissionsWithUnspecifiedReasons = {};
            _.each(permissions, function (permission, key) {
                permissionsWithUnspecifiedReasons[key] = {
                    permission: permission,
                    reason: VizPortal.PermissionReason.Unspecified
                };
            });
            return permissionsWithUnspecifiedReasons;
        }
        PermissionsHelper.IPermissionsFromPermissions = IPermissionsFromPermissions;
        // returns a new dictionary of Permissions
        function PermissionsFromIPermissions(ipermissions) {
            var permissions = {};
            _.each(ipermissions, function (permission, key) {
                permissions[key] = permission.permission;
            });
            return permissions;
        }
        PermissionsHelper.PermissionsFromIPermissions = PermissionsFromIPermissions;
        var contentTypesForAuthorizableType = {
            project: ['project', 'projectWorkbookTemplate', 'projectDatasourceTemplate'],
            workbook: ['workbook'],
            datasource: ['datasource'],
            view: ['view']
        };
        function getPermissionsContentTypes(authorizableType) {
            return contentTypesForAuthorizableType[authorizableType];
        }
        PermissionsHelper.getPermissionsContentTypes = getPermissionsContentTypes;
        function explicitPermissionsRequestsForAuthorizables(authorizables) {
            var buildRequestFn = function (authorizableIds) {
                return new VizPortal.ServerApi.GetExplicitPermissionsRequest({ authorizables: { type: authorizables.type, ids: authorizableIds } });
            };
            return VizPortal.RequestHelper.buildRequests(authorizables.ids, buildRequestFn);
        }
        PermissionsHelper.explicitPermissionsRequestsForAuthorizables = explicitPermissionsRequestsForAuthorizables;
        function effectivePermissionsRequestsForAuthorizables(userIds, authorizables) {
            var buildRequestFn = function (authorizableIds) {
                return new VizPortal.ServerApi.GetEffectivePermissionsRequest({ userIds: userIds, authorizables: { type: authorizables.type, ids: authorizableIds } });
            };
            return VizPortal.RequestHelper.buildRequests(authorizables.ids, buildRequestFn);
        }
        PermissionsHelper.effectivePermissionsRequestsForAuthorizables = effectivePermissionsRequestsForAuthorizables;
        function setExplicitPermissionsRequestsForAuthorizables(authorizables, granteePermissions) {
            var buildRequest = function (authorizableIds) {
                var agps = [];
                _.each(authorizableIds, function (authorizableId) {
                    _.each(granteePermissions.permissionsByContentType, function (permissions, contentType) {
                        // Don't create a request when no permissions have changed
                        if (_.isEqual(permissions, {}))
                            return;
                        var agp = {
                            authorizable: { type: contentType, id: authorizableId },
                            grantee: getGrantee(granteePermissions),
                            permissions: capabilityValuesFromPermissions(permissions)
                        };
                        agps.push(agp);
                    });
                });
                return new VizPortal.ServerApi.SetExplicitPermissionsRequest({
                    permissions: agps
                });
            };
            return VizPortal.RequestHelper.buildRequests(authorizables.ids, buildRequest);
        }
        PermissionsHelper.setExplicitPermissionsRequestsForAuthorizables = setExplicitPermissionsRequestsForAuthorizables;
        function getGrantee(granteePermissions) {
            if (granteePermissions.group) {
                return {
                    type: 'group',
                    id: granteePermissions.group.id
                };
            }
            else if (granteePermissions.user) {
                return {
                    type: 'user',
                    id: granteePermissions.user.id
                };
            }
            else {
                return null;
            }
        }
        PermissionsHelper.getGrantee = getGrantee;
        function capabilityValuesFromPermissions(permissions) {
            return _.map(permissions, function (permission, capability) {
                var capabilityValue = {
                    capability: capability,
                    value: capabilityValueFromPermission(permission.permission)
                };
                return capabilityValue;
            });
        }
        PermissionsHelper.capabilityValuesFromPermissions = capabilityValuesFromPermissions;
        function capabilityValueFromPermission(permission) {
            switch (permission) {
                case VizPortal.Permission.Allowed: return 'allowed';
                case VizPortal.Permission.Denied: return 'denied';
                case VizPortal.Permission.Mixed: return 'mixed';
                case VizPortal.Permission.Unspecified: return 'unspecified';
                default: return null;
            }
        }
        PermissionsHelper.capabilityValueFromPermission = capabilityValueFromPermission;
    })(PermissionsHelper = VizPortal.PermissionsHelper || (VizPortal.PermissionsHelper = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var PermissionsPanelResizer = (function () {
        function PermissionsPanelResizer(permissionsPanel) {
            this.permissionsPanel = permissionsPanel;
        }
        PermissionsPanelResizer.prototype.startResize = function (yPos) {
            this.topPanel = this.permissionsPanel.find('.tb-permissions-top');
            this.bottomPanel = this.permissionsPanel.find('.tb-permissions-bottom');
            this.startY = yPos;
            this.startTopHeight = this.topPanel.height();
            var explicitPermissionsBody = this.permissionsPanel.find('.tb-explicit-permissions-body');
            var divider = this.permissionsPanel.find('.tb-permissions-panel-divider');
            var explicitPermissionsBodyHeight = explicitPermissionsBody.height();
            var startBottomHeight = this.bottomPanel.height();
            var dividerHeight = divider.height();
            this.minTopHeight = this.startTopHeight - explicitPermissionsBodyHeight + dividerHeight;
            this.maxTopHeight = this.startTopHeight + startBottomHeight - dividerHeight * 2;
        };
        PermissionsPanelResizer.prototype.continueResize = function (yPos) {
            var dy = yPos - this.startY;
            var newTopHeight = dy + this.startTopHeight;
            newTopHeight = Math.min(Math.max(newTopHeight, this.minTopHeight), this.maxTopHeight);
            this.topPanel.css({ height: newTopHeight });
            this.bottomPanel.css({ top: newTopHeight });
        };
        return PermissionsPanelResizer;
    })();
    VizPortal.PermissionsPanelResizer = PermissionsPanelResizer;
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../fetchers/IListFetcher.ts" />
/// <reference path="../fetchers/ListResult.ts" />
/// <reference path="../models/ISliceable.ts" />
/// <reference path="../ServerApi/types/IGetItemsParams.ts" />
var VizPortal;
(function (VizPortal) {
    var PagedList = (function () {
        function PagedList(fetcher, fetchParams) {
            this.fetcher = fetcher;
            this.fetchParams = fetchParams;
        }
        PagedList.prototype.getSlice = function (start, size) {
            return this.fetchItems({
                filter: this.fetchParams.filter,
                order: this.fetchParams.order,
                page: {
                    startIndex: start,
                    maxItems: size
                }
            });
        };
        PagedList.prototype.fetchItems = function (params) {
            var _this = this;
            return this.fetcher.fetchList(params).then(function (result) {
                if (result) {
                    _this.fetchParams = params;
                }
                return result;
            });
        };
        return PagedList;
    })();
    VizPortal.PagedList = PagedList;
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../types/IAuthorizableGranteePermissions.ts" />
/// <reference path="../types/IGroup.ts" />
/// <reference path="../types/ITypedIds.ts" />
/// <reference path="../types/IUser.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetExplicitPermissionsRequest = (function (_super) {
            __extends(GetExplicitPermissionsRequest, _super);
            function GetExplicitPermissionsRequest(params) {
                _super.call(this, 'getExplicitPermissions', params);
            }
            return GetExplicitPermissionsRequest;
        })(ServerApi.Request);
        ServerApi.GetExplicitPermissionsRequest = GetExplicitPermissionsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../types/IAuthorizableGranteePermissions.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var SetExplicitPermissionsRequest = (function (_super) {
            __extends(SetExplicitPermissionsRequest, _super);
            function SetExplicitPermissionsRequest(params) {
                _super.call(this, 'setExplicitPermissions', params);
            }
            return SetExplicitPermissionsRequest;
        })(ServerApi.Request);
        ServerApi.SetExplicitPermissionsRequest = SetExplicitPermissionsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../FeatureFlags.ts" />
/// <reference path="../fetchers/ListResult.ts" />
/// <reference path="../helpers/PermissionsMerger.ts" />
/// <reference path="../helpers/RequestHelper.ts" />
/// <reference path="../helpers/ResultHelper.ts" />
/// <reference path="../models/IGranteePermissions.ts" />
/// <reference path="../models/Permission.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/GetExplicitPermissionsRequest.ts" />
/// <reference path="../ServerApi/requests/SetExplicitPermissionsRequest.ts" />
/// <reference path="../ServerApi/types/IAuthorizableGranteePermissions.ts" />
/// <reference path="../ServerApi/types/ICapabilityValue.ts" />
/// <reference path="../ServerApi/types/ITypedIds.ts" />
/// <reference path="../services/ServerService.ts" />
var VizPortal;
(function (VizPortal) {
    var ExplicitPermissions = (function () {
        function ExplicitPermissions(server) {
            this.server = server;
        }
        ExplicitPermissions.prototype.forAuthorizables = function (authorizables) {
            if (VizPortal.FeatureFlags.projectPermissionsTemplatesEnabled) {
                var requests = VizPortal.PermissionsHelper.explicitPermissionsRequestsForAuthorizables(authorizables);
            }
            else {
                var requests = VizPortal.RequestHelper.buildRequests(authorizables.ids, function (idsBlock) { return new VizPortal.ServerApi.GetExplicitPermissionsRequest({ authorizables: { type: authorizables.type, ids: idsBlock } }); });
            }
            var combineResultsFn = function (results) {
                return {
                    permissions: VizPortal.ResultHelper.combine(results, function (result) { return result.permissions; }),
                    groups: VizPortal.ResultHelper.combine(results, function (result) { return result.groups; }),
                    users: VizPortal.ResultHelper.combine(results, function (result) { return result.users; }),
                    sourceAuthorizableById: VizPortal.ResultHelper.combineByKey(results, function (result) { return result.sourceAuthorizableById; })
                };
            };
            return this.server.sendRequestsParallel(requests, combineResultsFn)
                .then(function (result) {
                var list = VizPortal.PermissionsMerger.makeGranteePermissionsList(result.permissions, authorizables.ids, result.groups, result.users);
                return {
                    permissionsList: new VizPortal.ListResult(list),
                    sourceAuthorizablesById: result.sourceAuthorizableById
                };
            });
        };
        ExplicitPermissions.prototype.setForAuthorizables = function (authorizables, granteePermissions) {
            if (VizPortal.FeatureFlags.projectPermissionsTemplatesEnabled) {
                var requests = VizPortal.PermissionsHelper.setExplicitPermissionsRequestsForAuthorizables(authorizables, granteePermissions);
            }
            else {
                var agps = _.map(authorizables.ids, function (authorizableId) {
                    var agp = {
                        authorizable: { type: authorizables.type, id: authorizableId },
                        grantee: VizPortal.PermissionsHelper.getGrantee(granteePermissions),
                        permissions: VizPortal.PermissionsHelper.capabilityValuesFromPermissions(granteePermissions.permissions)
                    };
                    return agp;
                });
                var requests = VizPortal.RequestHelper.buildRequests(agps, function (agpsBlock) { return new VizPortal.ServerApi.SetExplicitPermissionsRequest({ permissions: agpsBlock }); });
            }
            return this.server.sendRequestsParallel(requests, VizPortal.ResultHelper.combineResults);
        };
        ExplicitPermissions.$inject = ['ServerService'];
        return ExplicitPermissions;
    })();
    VizPortal.ExplicitPermissions = ExplicitPermissions;
    VizPortal.Module.instance().service('ExplicitPermissions', ExplicitPermissions);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/PermissionsHelper.ts" />
/// <reference path="../models/PermissionRoles.ts" />
var VizPortal;
(function (VizPortal) {
    var GranteePermissionsFactory = (function () {
        function GranteePermissionsFactory(permissionRoles) {
            this.permissionRoles = permissionRoles;
        }
        GranteePermissionsFactory.prototype.createForUserWithUnspecifiedPermissions = function (user, authorizableType) {
            var gp = { user: user };
            return this.addUnspecifiedPermissions(gp, authorizableType);
        };
        GranteePermissionsFactory.prototype.createForGroupWithUnspecifiedPermissions = function (group, authorizableType) {
            var gp = { group: group };
            return this.addUnspecifiedPermissions(gp, authorizableType);
        };
        GranteePermissionsFactory.prototype.addUnspecifiedPermissions = function (gp, authorizableType) {
            var _this = this;
            if (VizPortal.FeatureFlags.projectPermissionsTemplatesEnabled) {
                var contentTypes = VizPortal.PermissionsHelper.getPermissionsContentTypes(authorizableType);
                var pct = _.reduce(contentTypes, function (permissionsByContentType, contentType) {
                    permissionsByContentType[contentType] = VizPortal.PermissionsHelper.IPermissionsFromPermissions(_this.permissionRoles.getPermissionsForTypeAndRole(contentType, VizPortal.L10n.Keys.none));
                    return permissionsByContentType;
                }, {});
                _.defaults(gp, {
                    permissionsByContentType: pct
                });
            }
            else {
                var permissions = VizPortal.PermissionsHelper.IPermissionsFromPermissions(this.permissionRoles.getPermissionsForTypeAndRole(authorizableType, VizPortal.L10n.Keys.none));
                _.defaults(gp, {
                    permissions: permissions
                });
            }
            return gp;
        };
        GranteePermissionsFactory.$inject = ['PermissionRoles'];
        return GranteePermissionsFactory;
    })();
    VizPortal.GranteePermissionsFactory = GranteePermissionsFactory;
    VizPortal.Module.instance().service('GranteePermissionsFactory', GranteePermissionsFactory);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="ActionPanelService.ts" />
/// <reference path="../controllers/PermissionsPanelCtrl.ts" />
var VizPortal;
(function (VizPortal) {
    var PermissionsPanelActions = (function () {
        function PermissionsPanelActions() {
            this.actionDefinition = [
                this.editPermissionRuleAction(),
                this.deletePermissionRuleAction()
            ];
        }
        // TODO: refactor the way the permission rule editor is launched so that we don't need to depend on the scope.
        PermissionsPanelActions.prototype.getActionButtons = function ($scope) {
            this.$scope = $scope;
            return this.actionDefinition;
        };
        // Action button factories
        PermissionsPanelActions.prototype.editPermissionRuleAction = function () {
            var _this = this;
            return {
                name: 'edit',
                isDisabled: function (rule) {
                    return !rule;
                },
                execute: function (rule) {
                    _this.showPermissionRuleEditor(VizPortal.PermissionRuleEditorCommands.edit);
                }
            };
        };
        PermissionsPanelActions.prototype.deletePermissionRuleAction = function () {
            var _this = this;
            return {
                name: 'delete',
                isDisabled: function (rule) {
                    return _this.isAllUsersGroup(rule);
                },
                execute: function (rule) {
                    _this.showPermissionRuleEditor(VizPortal.PermissionRuleEditorCommands.delete_);
                }
            };
        };
        PermissionsPanelActions.prototype.isAllUsersGroup = function (rule) {
            return rule && rule.group && rule.group.isAllUsersGroup;
        };
        PermissionsPanelActions.prototype.showPermissionRuleEditor = function (action) {
            this.$scope.permissionRuleEditorParams.action = action;
            this.$scope.permissionRuleEditorParams.show = true;
        };
        return PermissionsPanelActions;
    })();
    VizPortal.PermissionsPanelActions = PermissionsPanelActions;
    VizPortal.Module.instance().service('PermissionsPanelActions', PermissionsPanelActions);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../controllers/PermissionRuleEditorCtrl.ts" />
/// <reference path="../controllers/ScrollCtrl.ts" />
/// <reference path="../fetchers/EffectivePermissionsFetcher.ts" />
/// <reference path="../fetchers/ListResult.ts" />
/// <reference path="../helpers/AccordionState.ts" />
/// <reference path="../helpers/Filter.ts" />
/// <reference path="../helpers/LockStatusHelper.ts" />
/// <reference path="../helpers/permissions/PermissionsEditabilityLogic.ts" />
/// <reference path="../helpers/permissions/PermissionsEditabilityLogicFactory.ts" />
/// <reference path="../helpers/PermissionsHasher.ts" />
/// <reference path="../helpers/PermissionsHelper.ts" />
/// <reference path="../helpers/PermissionsPanelResizer.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../models/ColumnWidths.ts" />
/// <reference path="../models/Content.ts" />
/// <reference path="../models/ISliceable.ts" />
/// <reference path="../models/IGranteePermissions.ts" />
/// <reference path="../models/IProjectInfo.ts" />
/// <reference path="../models/ListLayout.ts" />
/// <reference path="../models/PagedList.ts" />
/// <reference path="../models/Permission.ts" />
/// <reference path="../models/PermissionRoles.ts" />
/// <reference path="../models/PermissionsPanelColumnWidths.ts" />
/// <reference path="../models/resourceInfoParts.ts" />
/// <reference path="../models/Set.ts" />
/// <reference path="../resources/ExplicitPermissions.ts" />
/// <reference path="../ServerApi/requests/GetUsersGroupMembershipRequest.ts" />
/// <reference path="../ServerApi/types/IFilterClause.ts" />
/// <reference path="../ServerApi/types/IGetItemsParams.ts" />
/// <reference path="../ServerApi/types/resourceParts.ts" />
/// <reference path="../services/GranteePermissionsFactory.ts" />
/// <reference path="../services/PermissionsPanelActions.ts" />
/// <reference path="../services/SliceableFactory.ts" />
var VizPortal;
(function (VizPortal) {
    var PermissionsTemplateUrl = (function () {
        function PermissionsTemplateUrl() {
        }
        PermissionsTemplateUrl.forTemplateType = function (templateType) {
            return (!VizPortal.FeatureFlags.projectPermissionsTemplatesEnabled) ?
                templateType + 'PermissionsPanelWithoutPermissionsTemplates.html' :
                templateType + 'PermissionsPanel.html';
        };
        return PermissionsTemplateUrl;
    })();
    var PermissionsPanelCtrl = (function () {
        function PermissionsPanelCtrl($scope, $element, $q, $timeout, $translate, permissionsPanelActions, sliceableFactory, server, explicitPermissions, effectivePermissionsService, permissionRoles, permissionsEditabilityLogicFactory, BrowserSupportService, granteePermissionsFactory) {
            var _this = this;
            this.$scope = $scope;
            this.$q = $q;
            this.$timeout = $timeout;
            this.sliceableFactory = sliceableFactory;
            this.server = server;
            this.explicitPermissions = explicitPermissions;
            this.permissionRoles = permissionRoles;
            this.permissionsEditabilityLogicFactory = permissionsEditabilityLogicFactory;
            this.granteePermissionsFactory = granteePermissionsFactory;
            this.hoveredCapabilityValue = null;
            this.updateCurrentAuthorizables();
            this.effectivePermissionsFetcher = new VizPortal.EffectivePermissionsFetcher(effectivePermissionsService, this.$scope.currentAuthorizables);
            this.$scope.currentExplicitPermission = null;
            this.hoveredEffectivePermission = null;
            this.hoveredExplicitPermission = null;
            this.$scope.isLoadingEffectivePermissions = false;
            this.permissionsPanelResizer = new VizPortal.PermissionsPanelResizer($element);
            $scope.permissionsTemplateUrl = PermissionsTemplateUrl.forTemplateType($scope.templateType);
            // Because we use the "editable" boolean in the templates HTML instead of "readOnly",
            // give it a value if it won't be populated from the lockdown feature. Otherwise, it would be
            // undefined and thus fasy, causing all permissions to render as read-only.
            if (VizPortal.FeatureFlags.projectPermissionsTemplatesEnabled
                && !VizPortal.FeatureFlags.projectControlledPermissionsEnabled) {
                $scope.editability = {
                    editable: !$scope.readOnly(),
                    prompt: '',
                    shortMessage: '',
                    longMessage: ''
                };
            }
            $scope.columnWidths = VizPortal.getPermissionsPanelColumnWidths($scope.authorizableType);
            $scope.resize = function (xPos) {
                $scope.$apply(function () {
                    $scope.columnWidths.resizer.continueResize(xPos);
                });
            };
            $scope.granteeType = VizPortal.PermissionsHelper.granteeType;
            $scope.granteeName = VizPortal.PermissionsHelper.granteeName;
            $scope.explicitGranteeRole = function (row, contentType) {
                return VizPortal.PermissionsHelper.explicitGranteeRole(row, contentType, _this.permissionRoles);
            };
            $scope.userStatusForRow = function (row, contentType) {
                return _this.userStatusForRow(row, contentType);
            };
            $scope.capabilityValue = VizPortal.PermissionsHelper.capabilityValue;
            $scope.capabilityReason = VizPortal.PermissionsHelper.capabilityReason;
            $scope.capabilityTitleKey = VizPortal.PermissionsHelper.capabilityTitleKey;
            $scope.explicitPermissionsPanelControls = {};
            $scope.effectivePermissionsPanelControls = {};
            $scope.toggleCurrentExplicitPermission = function (explicitPermission) {
                if ($scope.permissionRuleEditorParams.show) {
                    // if the editor is open, don't change the selected explicit permission
                    return;
                }
                $scope.currentExplicitPermission === explicitPermission ?
                    _this.setCurrentExplicitPermission(null) :
                    _this.setCurrentExplicitPermission(explicitPermission);
            };
            $scope.setCurrentExplicitPermission = function (explicitPermission) { return _this.setCurrentExplicitPermission(explicitPermission); };
            $scope.haveCurrentExplicitPermission = function () { return !!_this.$scope.currentExplicitPermission; };
            $scope.isCurrentExplicitPermission = function (explicitPermission) {
                return _this.$scope.currentExplicitPermission === explicitPermission;
            };
            $scope.isHoveredExplicitPermission = function (explicitPermission) {
                return _this.hoveredExplicitPermission === explicitPermission;
            };
            $scope.isHoveredEffectivePermission = function (effectivePermission) {
                return _this.hoveredEffectivePermission === effectivePermission;
            };
            $scope.showEditButtonForRow = function (row) {
                if (_this.hoveredExplicitPermission) {
                    return _this.hoveredExplicitPermission === row;
                }
                else {
                    // TODO: Check for current (selected) row on mobile,
                    // because otherwise the edit/delete buttons will never show,
                    // since mobile doesn't support hover.
                    // if (mobile) {
                    //   return this.$scope.currentExplicitPermission === row;
                    // } else {
                    return false;
                }
            };
            $scope.showDeleteButtonForRow = function (row) {
                if (_this.hoveredExplicitPermission
                    && _this.hoveredExplicitPermission.group
                    && _this.hoveredExplicitPermission.group.isAllUsersGroup) {
                    // don't show the delete button for the All Users group.
                    return false;
                }
                else {
                    // if not the All Users group, logic for showing Delete is the same as for Edit.
                    return _this.$scope.showEditButtonForRow(row);
                }
            };
            $scope.isRelevantExplicitPermission = function (explicitPermission) { return _this.isRelevantExplicitPermission(explicitPermission); };
            $scope.isNotRelevantExplicitPermission = function (explicitPermission) { return _this.isNotRelevantExplicitPermission(explicitPermission); };
            $scope.relevantCapabilityClass = function (explicitPermission, contentType, capability, capabilityName) {
                return _this.relevantCapabilityClass(explicitPermission, contentType, capability, capabilityName);
            };
            $scope.isRelevantHeader = function (name) {
                return _this.hoveredCapabilityValue === name;
            };
            $scope.setHoveredCapabilityValue = function (capabilityCell) {
                var name = capabilityCell.attr('data-capability-name');
                _this.hoveredCapabilityValue = name;
                // We don't usually digest on mouseenter and mouseleave, so force it
                _this.$scope.$digest();
            };
            $scope.clearHoveredCapabilityValue = function () {
                _this.hoveredCapabilityValue = null;
                // We don't usually digest on mouseenter and mouseleave, so force it
                _this.$scope.$digest();
            };
            $scope.isCurrentEffectivePermission = function (row) {
                return _this.hoveredEffectivePermission === row;
            };
            $scope.hasCurrentEffectivePermission = function () { return !!_this.hoveredEffectivePermission; };
            $scope.effectiveRowHovered = function (row) {
                _this.hoveredEffectivePermission = row;
                // We don't usually digest on mouseenter and mouseleave, so force it
                _this.$scope.$digest();
            };
            $scope.explicitRowHovered = function (row) {
                _this.hoveredExplicitPermission = row;
                // We don't usually digest on mouseenter and mouseleave, so force it
                _this.$scope.$digest();
            };
            $scope.startResize = function (yPos) {
                return _this.permissionsPanelResizer.startResize(yPos);
            };
            $scope.continueResize = function (yPos) {
                return _this.permissionsPanelResizer.continueResize(yPos);
            };
            $scope.effectivePermissionsSliceChanged = function (newSlice) {
                var userIds = _.map(newSlice.items, function (item) { return item.user.id; });
                _this.updateGroupMembership(userIds);
                _this.$timeout(function () {
                    if (_this.$scope.effectivePermissionsPanelControls.scrollControls) {
                        var scrollLeft = _this.$scope.explicitPermissionsPanelControls.scrollControls.getScrollLeft();
                        _this.$scope.effectivePermissionsPanelControls.scrollControls.setScrollLeft(scrollLeft);
                    }
                });
            };
            // TODO: This is only used by the inline edit button and can be removed when the
            //       projectPermissionsTemplatesEnabled feature flag is removed.
            $scope.deletePermissionRule = function (explicitPermission) {
                _this.setCurrentExplicitPermission(explicitPermission);
                _this.showPermissionRuleEditor(VizPortal.PermissionRuleEditorCommands.delete_);
            };
            // TODO: This is only used by the inline delete button and can be removed when the
            //       projectPermissionsTemplatesEnabled feature flag is removed.
            $scope.editPermissionRule = function (explicitPermission) {
                _this.setCurrentExplicitPermission(explicitPermission);
                _this.showPermissionRuleEditor(VizPortal.PermissionRuleEditorCommands.edit);
            };
            $scope.hideRowMenu = function () {
                _this.hidePermissionRuleEditor();
            };
            $scope.submitSearch = function (searchText, $event) {
                if (_this.$scope.currentExplicitPermission !== _this.explicitPermissionsList.items[0]) {
                    // the All Users group is not selected.  Select it.
                    _this.setCurrentExplicitPermission(_this.explicitPermissionsList.items[0]);
                }
                _this.updateEffectivePermissions(searchText);
                if (BrowserSupportService.isTouch() && $event) {
                    $($event.target).blur();
                }
            };
            $scope.permissionRuleEditorParams = {
                show: false,
                action: null
            };
            $scope.refresh = function () {
                _this.updateCurrentAuthorizables();
                return _this.updateExplicitPermissions(_this.$scope.currentAuthorizables);
            };
            $scope.addUserOrGroupSelector = {
                isShown: false
            };
            $scope.addNewUserPermission = function (user) {
                if (!user) {
                    return;
                }
                _this.addNewGranteePermissions(_this.granteePermissionsFactory.createForUserWithUnspecifiedPermissions(user, _this.$scope.authorizableType));
            };
            $scope.addNewGroupPermission = function (group) {
                if (!group) {
                    return;
                }
                _this.addNewGranteePermissions(_this.granteePermissionsFactory.createForGroupWithUnspecifiedPermissions(group, _this.$scope.authorizableType));
            };
            $scope.haveCurrentAuthorizable = function () {
                return (_this.$scope.authorizables.size() > 0);
            };
            $scope.getTooltipText = function ($event) {
                return $($event.target)
                    .closest('.tb-capability-value-cell')
                    .find('.tb-capability-value')
                    .attr('data-tooltip');
            };
            $scope.getHeaderTooltipText = function ($event) {
                if ($scope.headerTextAccordion.isSectionOpen(0))
                    return null;
                return $($event.target)
                    .closest('.tb-permissions-capability-header-icon-cell')
                    .find('.tb-permissions-capability-icon')
                    .attr('data-tooltip');
            };
            // synchronize x-scrolling of the effective and explicit permissions panels.
            $scope.scrollLeftChanged = function (scrollLeft) {
                // position the headers correctly relative to the explicit permissions body
                $element.find('.tb-explicit-permissions-headers-line').css({ 'left': -scrollLeft + 'px' });
                // make sure the background rows in both panels are rendered wide enough.
                // right: 0 isn't far enough when .tb-data-grid-body-columns is overflowing.
                $element.find('.tb-data-grid-body-background').css({ 'right': -scrollLeft + 'px' });
                _this.$scope.explicitPermissionsPanelControls.scrollControls.setScrollLeft(scrollLeft);
                if (_this.$scope.effectivePermissionsPanelControls.scrollControls) {
                    _this.$scope.effectivePermissionsPanelControls.scrollControls.setScrollLeft(scrollLeft);
                }
            };
            $scope.sectionGroupAccordion = ($scope.authorizableType === VizPortal.ContentTypes.project)
                ? new VizPortal.SingleSectionAccordion() : VizPortal.StaticAccordion;
            $scope.headerTextAccordion = new VizPortal.SingleSectionAccordion();
            $scope.shortHeaderText = function () {
                switch (VizPortal.L10n.language) {
                    case 'de': return false;
                    case 'en': return true;
                    case 'es': return false;
                    case 'fr': return false;
                    case 'ja': return true;
                    case 'ko': return true;
                    case 'pt': return false;
                    case 'zh': return true;
                }
                return false;
            };
            $scope.menuActions = permissionsPanelActions.getActionButtons($scope);
            // to hide/unhide the "assign..." button
            $scope.projectControlledPermissionsEnabled = VizPortal.FeatureFlags.projectControlledPermissionsEnabled;
            $scope.permissionsLockStatusProps = {
                lockState: VizPortal.LockStatusHelper.getLockState(this.$scope.authorizables),
                translate: $translate.instant
            };
            $scope.refresh();
        }
        PermissionsPanelCtrl.prototype.setCurrentExplicitPermission = function (explicitPermission) {
            if (this.$scope.currentExplicitPermission !== explicitPermission) {
                this.$scope.currentExplicitPermission = explicitPermission;
                this.updateEffectivePermissions();
            }
        };
        PermissionsPanelCtrl.prototype.addNewGranteePermissions = function (newGranteePermissions) {
            var _this = this;
            this.$scope.addUserOrGroupSelector.isShown = false;
            var explicitPermissions = this.explicitPermissionsList.items;
            var index = this.getGranteeIndex(newGranteePermissions);
            if (VizPortal.PermissionsHelper.hasSameGrantee(newGranteePermissions, explicitPermissions[index])) {
                this.startEditingRule(index, VizPortal.PermissionRuleEditorCommands.edit);
            }
            else {
                explicitPermissions.splice(index, 0, newGranteePermissions);
                this.$scope.explicitPermissions = this.sliceableFactory.fromArray(explicitPermissions);
                // Wait for the scroll control to see the new list before proceeding.
                var stopListening = this.$scope.$on(VizPortal.ScrollCtrl.ItemsChangeEvent, function () {
                    stopListening();
                    _this.startEditingRule(index, VizPortal.PermissionRuleEditorCommands.add);
                });
            }
        };
        PermissionsPanelCtrl.prototype.getGranteeIndex = function (granteePermissions) {
            return _.sortedIndex(this.explicitPermissionsList.items, granteePermissions, function (gp) {
                return VizPortal.PermissionsHelper.compareGrantees(gp, granteePermissions);
            });
        };
        PermissionsPanelCtrl.prototype.startEditingRule = function (index, action) {
            var _this = this;
            this.setCurrentExplicitPermission(this.explicitPermissionsList.items[index]);
            this.$scope.explicitPermissionsPanelControls.scrollControls.scrollIntoView(index);
            this.$timeout(function () {
                _this.$scope.permissionRuleEditorParams.action = action;
                _this.$scope.permissionRuleEditorParams.show = true;
            });
        };
        PermissionsPanelCtrl.prototype.showPermissionRuleEditor = function (action) {
            this.$scope.permissionRuleEditorParams.action = action;
            this.$scope.permissionRuleEditorParams.show = true;
        };
        PermissionsPanelCtrl.prototype.hidePermissionRuleEditor = function () {
            this.$scope.permissionRuleEditorParams.show = false;
        };
        PermissionsPanelCtrl.prototype.updateCurrentAuthorizables = function () {
            this.$scope.currentAuthorizables = {
                type: this.$scope.authorizableType,
                ids: this.$scope.authorizables.keys()
            };
        };
        PermissionsPanelCtrl.prototype.updateExplicitPermissions = function (authorizables) {
            var _this = this;
            return this.explicitPermissions.forAuthorizables(authorizables)
                .then(function (result) {
                if (result) {
                    _this.explicitPermissionsList = result.permissionsList;
                    if (VizPortal.FeatureFlags.projectControlledPermissionsEnabled) {
                        var editabilityLogic = _this.permissionsEditabilityLogicFactory.logicForAuthorizables(_this.$scope.authorizables, _this.$scope.authorizableType, result.sourceAuthorizablesById);
                        _this.$scope.editability = editabilityLogic.getEditabilityWithMessages();
                    }
                    _this.explicitPermissionsList.items.sort(VizPortal.PermissionsHelper.compareGrantees);
                    _this.effectivePermissionsFetcher.setAuthorizables(authorizables);
                    _this.updateExplicitPermissionsSlice();
                    _this.updateEffectivePermissions();
                }
            });
        };
        // TODO: This is the legacy implementation pre-feature-flag. Delete it when the flag is gone.
        PermissionsPanelCtrl.prototype.setMissingCapabilitiesToUnspecified = function (items) {
            var capabilities = _.keys(this.permissionRoles.getPermissionsForTypeAndRole(this.$scope.authorizableType, VizPortal.L10n.Keys.none));
            _.each(items, function (gp) {
                _.each(capabilities, function (capability) {
                    if (!_.has(gp.permissions, capability)) {
                        gp.permissions[capability] = { permission: VizPortal.Permission.Unspecified, reason: VizPortal.PermissionReason.Unspecified };
                    }
                });
            });
        };
        PermissionsPanelCtrl.prototype.setMissingCapabilitiesForSectionsToUnspecified = function (items) {
            var _this = this;
            _.each(VizPortal.PermissionsHelper.getPermissionsContentTypes(this.$scope.authorizableType), function (contentType) {
                var capabilities = _.keys(_this.permissionRoles.getPermissionsForTypeAndRole(contentType, VizPortal.L10n.Keys.none));
                _.each(items, function (gp) {
                    if (!_.has(gp.permissionsByContentType, contentType)) {
                        gp.permissionsByContentType[contentType] = {};
                    }
                    var permissionsForContentType = gp.permissionsByContentType[contentType];
                    _.each(capabilities, function (capability) {
                        if (!_.has(permissionsForContentType, capability)) {
                            permissionsForContentType[capability] = {
                                permission: VizPortal.Permission.Unspecified,
                                reason: VizPortal.PermissionReason.Unspecified
                            };
                        }
                    });
                });
            });
        };
        PermissionsPanelCtrl.prototype.updateExplicitPermissionsSlice = function () {
            var items = this.explicitPermissionsList.items;
            if (!VizPortal.FeatureFlags.projectPermissionsTemplatesEnabled) {
                this.setMissingCapabilitiesToUnspecified(items);
            }
            else {
                this.setMissingCapabilitiesForSectionsToUnspecified(items);
            }
            this.$scope.explicitPermissions = this.sliceableFactory.fromArray(items);
            var current = this.$scope.currentExplicitPermission;
            if (current) {
                this.$scope.currentExplicitPermission =
                    _.find(items, function (item) { return VizPortal.PermissionsHelper.hasSameGrantee(item, current); });
            }
        };
        PermissionsPanelCtrl.prototype.updateEffectivePermissions = function (searchText) {
            this.$scope.isLoadingEffectivePermissions = true;
            this.hoveredEffectivePermission = null;
            var current = this.$scope.currentExplicitPermission;
            if (current) {
                var filterClauses = [];
                // add a filter clause for the current group or user
                if (current.group) {
                    filterClauses.push(VizPortal.Filter.stringArrayFieldHas('groupIds', current.group.id));
                }
                else if (current.user) {
                    filterClauses.push(VizPortal.Filter.stringFieldEq('id', current.user.id));
                }
                // add a filter clause for the current search text
                if (searchText) {
                    filterClauses.push(VizPortal.Filter.search(searchText));
                }
                // fetch the effective permissions
                var effectivePermissionsFetchParams = {
                    filter: VizPortal.Filter.and(filterClauses),
                    order: [{ field: VizPortal.ServerApi.UserKeys.displayName, ascending: true }]
                };
                this.$scope.effectivePermissions = new VizPortal.PagedList(this.effectivePermissionsFetcher, effectivePermissionsFetchParams);
            }
            else {
                this.$scope.effectivePermissions = this.sliceableFactory.fromArray();
            }
            this.$scope.isLoadingEffectivePermissions = false;
        };
        PermissionsPanelCtrl.prototype.updateGroupMembership = function (userIds) {
            var _this = this;
            if (userIds && userIds.length > 0) {
                this.server.sendRequest(new VizPortal.ServerApi.GetUsersGroupMembershipRequest({ userIds: userIds }))
                    .then(function (result) {
                    _this.groupMembership = {};
                    _.each(result.members, function (member) {
                        var userGroups = _this.groupMembership[member.userId];
                        if (!userGroups) {
                            userGroups = {};
                            _this.groupMembership[member.userId] = userGroups;
                        }
                        userGroups[member.groupId] = true;
                    });
                });
            }
            else {
                this.groupMembership = {};
            }
        };
        PermissionsPanelCtrl.prototype.isRelevantExplicitPermission = function (explicitPermission) {
            if (this.hoveredEffectivePermission && !this.$scope.permissionRuleEditorParams.show) {
                var currentUser = this.hoveredEffectivePermission.user;
                if (currentUser) {
                    if (explicitPermission.group) {
                        // group rule
                        if (this.groupMembership) {
                            // is the user a member of this group?
                            var userGroups = this.groupMembership[currentUser.id];
                            return userGroups && _.has(userGroups, explicitPermission.group.id);
                        }
                    }
                    else {
                        // user rule
                        return explicitPermission.user && (explicitPermission.user.id === currentUser.id);
                    }
                }
            }
            return false;
        };
        /**
         * Tests if the current explicit permission is not relevant and thus should be visually greyed out.
         */
        PermissionsPanelCtrl.prototype.isNotRelevantExplicitPermission = function (explicitPermission) {
            return this.hoveredEffectivePermission && !this.isRelevantExplicitPermission(explicitPermission);
        };
        /**
         * returns the string 'relevant', 'normal', or 'not', which is used as a suffix to the class tb-relevant-capability-
         */
        PermissionsPanelCtrl.prototype.relevantCapabilityClass = function (explicitPermission, contentType, capability, capabilityName) {
            if (!this.hoveredEffectivePermission || this.$scope.permissionRuleEditorParams.show) {
                return 'normal';
            }
            if (explicitPermission && this.isRelevantExplicitPermission(explicitPermission)) {
                if (!this.hoveredCapabilityValue) {
                    // When the user is hovering on an effective permissions row but not any capability value cell, we show all the cells as 'normal'
                    return 'normal';
                }
                else if (this.hoveredCapabilityValue === capabilityName) {
                    var currEffectivePermission = VizPortal.PermissionsHelper.permissionFromIGranteePermission(this.hoveredEffectivePermission, contentType, capability);
                    var currExplicitPermission = VizPortal.PermissionsHelper.permissionFromIGranteePermission(explicitPermission, contentType, capability);
                    if (currEffectivePermission && currExplicitPermission) {
                        if (explicitPermission.group) {
                            // group rule
                            switch (currExplicitPermission.permission) {
                                case VizPortal.Permission.Allowed: return (VizPortal.PermissionReason.GroupAllow === currEffectivePermission.reason) ? 'relevant' : 'not';
                                case VizPortal.Permission.Denied: return (VizPortal.PermissionReason.GroupDeny === currEffectivePermission.reason) ? 'relevant' : 'not';
                            }
                        }
                        else if (explicitPermission.user) {
                            // user rule
                            switch (currExplicitPermission.permission) {
                                case VizPortal.Permission.Allowed: return (VizPortal.PermissionReason.UserAllow === currEffectivePermission.reason) ? 'relevant' : 'not';
                                case VizPortal.Permission.Denied: return (VizPortal.PermissionReason.UserDeny === currEffectivePermission.reason) ? 'relevant' : 'not';
                            }
                        }
                    }
                }
            }
            return 'not';
        };
        PermissionsPanelCtrl.prototype.userStatusForRow = function (row, contentType) {
            // In the PermissionReasons enum, superuser allows are the highest precedence
            // (except for 'mixed', but a superuser's permission reasons shouldn't be mixed.)
            // So we can ignore mixed, and infer superuser status from the highest-precedence reason.
            var maxReason = VizPortal.PermissionReason.Unspecified;
            var permissions = VizPortal.PermissionsHelper.permissionsFromIGranteePermission(row, contentType);
            _.each(permissions, function (permission) {
                if (permission.reason < VizPortal.PermissionReason.Mixed) {
                    maxReason = Math.max(maxReason, permission.reason);
                }
            });
            switch (maxReason) {
                case VizPortal.PermissionReason.UserAuthorizableOwnerAllow: return 'owner';
                case VizPortal.PermissionReason.GroupProjectLeaderAllow: return 'project_leader';
                case VizPortal.PermissionReason.UserProjectLeaderAllow: return 'project_leader';
                case VizPortal.PermissionReason.UserProjectOwnerAllow: return 'project_owner';
                case VizPortal.PermissionReason.UserAdminAllow: return 'admin';
                default:
                    return VizPortal.PermissionsHelper.effectiveGranteeRole(row, contentType, this.permissionRoles);
            }
        };
        PermissionsPanelCtrl.$inject = [
            '$scope',
            '$element',
            '$q',
            '$timeout',
            '$translate',
            'PermissionsPanelActions',
            'SliceableFactory',
            'ServerService',
            'ExplicitPermissions',
            'EffectivePermissionsService',
            'PermissionRoles',
            'PermissionsEditabilityLogicFactory',
            'BrowserSupportService',
            'GranteePermissionsFactory'
        ];
        return PermissionsPanelCtrl;
    })();
    VizPortal.PermissionsPanelCtrl = PermissionsPanelCtrl;
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../FeatureFlags.ts" />
/// <reference path="../controllers/PermissionsPanelCtrl.ts" />
/// <reference path="../helpers/AccordionState.ts" />
/// <reference path="../helpers/PermissionsHelper.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../models/ColumnWidths.ts" />
/// <reference path="../models/IGranteePermissions.ts" />
/// <reference path="../models/ITemplate.ts" />
/// <reference path="../models/Permission.ts" />
/// <reference path="../models/PermissionRoles.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../resources/ExplicitPermissions.ts" />
/// <reference path="../services/ToasterService.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.PermissionRuleEditorCommands = {
        add: 'add',
        edit: 'edit',
        delete_: 'delete'
    };
    var PermissionEditorTemplateUrl = (function () {
        function PermissionEditorTemplateUrl() {
        }
        PermissionEditorTemplateUrl.forAuthorizableType = function (authorizableType) {
            return (VizPortal.FeatureFlags.projectPermissionsTemplatesEnabled) ?
                authorizableType + 'PermissionsEditor.html' :
                authorizableType + 'PermissionsEditorWithoutPermissionsTemplates.html';
        };
        return PermissionEditorTemplateUrl;
    })();
    var PermissionRuleEditorCtrl = (function () {
        function PermissionRuleEditorCtrl($scope, explicitPermissions, permissionRoles, $translate, toaster) {
            var _this = this;
            this.scope = $scope;
            this.explicitPermissions = explicitPermissions;
            this.permissionRoles = permissionRoles;
            this.$translate = $translate;
            this.toaster = toaster;
            this.scope.explicitGranteeRole = function (row, contentType) {
                return VizPortal.PermissionsHelper.explicitGranteeRole(row, contentType, _this.permissionRoles);
            };
            this.scope.granteeType = VizPortal.PermissionsHelper.granteeType;
            this.scope.granteeName = VizPortal.PermissionsHelper.granteeName;
            this.scope.capabilityValue = VizPortal.PermissionsHelper.capabilityValue;
            this.scope.capabilityTitleKey = VizPortal.PermissionsHelper.capabilityTitleKey;
            this.scope.busy = false;
            this.updateColumnWidths();
            this.authorizableType = $scope.authorizables.type;
            this.scope.permissionsEditorTemplates = PermissionEditorTemplateUrl.forAuthorizableType($scope.authorizables.type);
            // The row needs to be nested inside the data object so that when a different row is selected, the new row is
            // seen by the editor templates. This is because tbTranscludeFn doesn't watch tbTranscludeScope for new data.
            this.scope.data = { row: null };
            this.initializeFromSelectedRow();
            this.scope.resize = function (xPos) {
                $scope.$apply(function () {
                    $scope.columnWidths.resizer.continueResize(xPos);
                });
            };
        }
        PermissionRuleEditorCtrl.prototype.initializeFromSelectedRow = function () {
            var _this = this;
            // Clone the row. The editor never changes the original row. It builds a new one and saves it to the server.
            this.scope.data.row = this.deepCopy(this.scope.selectedRow);
            this.scope.selectedRoleByContentType = {}; // key: authorizable type, value: role
            // Each content type has it's own list of available roles
            if (VizPortal.FeatureFlags.projectPermissionsTemplatesEnabled) {
                _.each(_.keys(this.scope.data.row.permissionsByContentType), function (contentType) {
                    return _this.scope.selectedRoleByContentType[contentType] = VizPortal.PermissionsHelper.explicitGranteeRole(_this.scope.data.row, contentType, _this.permissionRoles);
                });
            }
            else {
                this.scope.selectedRoleByContentType[this.authorizableType] = VizPortal.PermissionsHelper.explicitGranteeRole(this.scope.data.row, this.authorizableType, this.permissionRoles);
            }
        };
        PermissionRuleEditorCtrl.prototype.getTooltipText = function ($event) {
            return $($event.target)
                .closest('.tb-capability-value-cell')
                .find('.tb-capability-value')
                .attr('data-tooltip');
        };
        PermissionRuleEditorCtrl.prototype.savePermissionRule = function () {
            var _this = this;
            var granteePermissions = this.scope.data.row;
            this.scope.busy = true;
            // clone the permissions so that any changes aren't rendered in the UI while saving.
            var newPermissions = {};
            var newPermissionsByContentType = {};
            var newGranteePermissions = _.clone(granteePermissions);
            // TODO: refactor this block of code to remove nested if/else
            if (this.scope.action === VizPortal.PermissionRuleEditorCommands.delete_) {
                if (VizPortal.FeatureFlags.projectPermissionsTemplatesEnabled) {
                    newPermissionsByContentType = this.cloneAllPermissionsToUnspecified(granteePermissions.permissionsByContentType);
                }
                else {
                    // To delete a rule, set all permissions to unspecified.
                    _.each(granteePermissions.permissions, function (permission, capability) {
                        newPermissions[capability] = {
                            permission: VizPortal.Permission.Unspecified,
                            reason: VizPortal.PermissionReason.Unspecified
                        };
                    });
                }
            }
            else {
                // It would be incorrect to send 'mixed' permissions to the server, so 'mixed' permissions are not cloned.
                // Unchanged permissions are not cloned because only changed permissions are sent to the server.
                if (VizPortal.FeatureFlags.projectPermissionsTemplatesEnabled) {
                    _.each(granteePermissions.permissionsByContentType, function (permissions, contentType) {
                        newPermissionsByContentType[contentType] = {};
                        _.each(permissions, function (permission, capability) {
                            if (permission.permission !== VizPortal.Permission.Mixed && permission.permission !== _this.scope.selectedRow.permissionsByContentType[contentType][capability].permission) {
                                newPermissionsByContentType[contentType][capability] = permission;
                            }
                        });
                    });
                }
                else {
                    _.each(granteePermissions.permissions, function (permission, capability) {
                        if (permission.permission !== VizPortal.Permission.Mixed && permission.permission !== _this.scope.selectedRow.permissions[capability].permission) {
                            newPermissions[capability] = permission;
                        }
                    });
                }
            }
            newGranteePermissions.permissions = newPermissions;
            newGranteePermissions.permissionsByContentType = newPermissionsByContentType;
            this.explicitPermissions.setForAuthorizables(this.scope.authorizables, newGranteePermissions)
                .then(function () { return _this.scope.updateAuthorizables(); })
                .then(function () {
                _this.scope.hideRowMenu();
                _this.toaster.pop({
                    type: VizPortal.ToastType.Info,
                    text: _this.$translate.instant('permissionRuleChangedSuccess', {
                        GRANTEE_NAME: VizPortal.L10n.elideIfLong(_this.scope.granteeName(granteePermissions))
                    })
                });
            })
                .fin(function () { return _this.scope.busy = false; });
        };
        /**
         *  Creates a copy of the permissionsByContentType dictionary which has all permissions set to unspecified. This is used to delete a permission rule.
         *  TODO: push this logic into a delete permission rule method in the ExplicitPermisions resource.
         */
        PermissionRuleEditorCtrl.prototype.cloneAllPermissionsToUnspecified = function (permissionsByContentType) {
            return _.reduce(permissionsByContentType, function (permissionsByContentType, value, index) {
                permissionsByContentType[index] = _.reduce(value, function (permissions, value, index) {
                    permissions[index] = {
                        permission: VizPortal.Permission.Unspecified,
                        reason: VizPortal.PermissionReason.Unspecified
                    };
                    return permissions;
                }, {});
                return permissionsByContentType;
            }, {});
        };
        PermissionRuleEditorCtrl.prototype.saveDisabled = function () {
            return !this.scope.isDeleteActionSelected() && _.isEqual(this.scope.data.row, this.scope.selectedRow);
        };
        PermissionRuleEditorCtrl.prototype.getCapabilitiesForRole = function (role) {
            var permissions = this.permissionRoles.getPermissionsForTypeAndRole(this.authorizableType, role);
            return VizPortal.PermissionsHelper.IPermissionsFromPermissions(permissions);
        };
        PermissionRuleEditorCtrl.prototype.getCapabilitiesForTypeAndRole = function (contentType, role) {
            var permissions = this.permissionRoles.getPermissionsForTypeAndRole(contentType, role);
            return VizPortal.PermissionsHelper.IPermissionsFromPermissions(permissions);
        };
        PermissionRuleEditorCtrl.prototype.updateColumnWidths = function () {
            var _this = this;
            if (VizPortal.FeatureFlags.projectPermissionsTemplatesEnabled) {
                this.scope.columnWidths = this.scope.permissionsPanelColumnWidths;
            }
            else {
                // This is necessary because the role dropdown needs more space than is provided for in the initial layout of the
                // column widths in the underlying datagrid. To account for this, we tell it to use the space owned by the
                // edit and delete buttons in the permissions panel row since those aren't rendered in the editable row anyway.
                this.scope.columnWidths = {
                    getActual: function (index) {
                        if (index === 0) {
                            return _this.scope.permissionsPanelColumnWidths.getActual(0);
                        }
                        else if (index === 1) {
                            return _this.scope.permissionsPanelColumnWidths.getActual(1)
                                + _this.scope.permissionsPanelColumnWidths.getActual(2)
                                + _this.scope.permissionsPanelColumnWidths.getActual(3);
                        }
                        else {
                            return _this.scope.permissionsPanelColumnWidths.getActual(index + 2);
                        }
                    }
                };
            }
        };
        PermissionRuleEditorCtrl.prototype.deepCopy = function (row) {
            return jQuery.extend(true, {}, row);
        };
        PermissionRuleEditorCtrl.$inject = [
            '$scope',
            'ExplicitPermissions',
            'PermissionRoles',
            '$translate',
            'ToasterService'
        ];
        return PermissionRuleEditorCtrl;
    })();
    VizPortal.PermissionRuleEditorCtrl = PermissionRuleEditorCtrl;
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var Languages = (function () {
        function Languages($translate, server) {
            this.$translate = $translate;
            this.server = server;
        }
        Languages.prototype.getAll = function () {
            return this.server.sendRequest(new VizPortal.ServerApi.GetLanguagesRequest()).then(function (result) { return result.languages; });
        };
        // a special value for the user language that indicates that we should use the server language
        Languages.prototype.unspecifiedLanguage = function () {
            return {
                displayName: this.$translate.instant("unspecified"),
                language: null,
                locale: null
            };
        };
        Languages.$inject = ['$translate', 'ServerService'];
        return Languages;
    })();
    VizPortal.Languages = Languages;
    VizPortal.Module.instance().service('Languages', Languages);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var Locales = (function () {
        function Locales($translate, server) {
            this.$translate = $translate;
            this.server = server;
        }
        Locales.prototype.getAll = function () {
            return this.server.sendRequest(new VizPortal.ServerApi.GetLocalesRequest()).then(function (result) { return result.locales; });
        };
        // a special value for the user locale that indicates that we should use the server locale
        Locales.prototype.unspecifiedLocale = function () {
            return {
                displayName: this.$translate.instant("unspecified"),
                locale: null
            };
        };
        Locales.$inject = ['$translate', 'ServerService'];
        return Locales;
    })();
    VizPortal.Locales = Locales;
    VizPortal.Module.instance().service('Locales', Locales);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var ClearSavedPasswordsRequest = (function (_super) {
            __extends(ClearSavedPasswordsRequest, _super);
            function ClearSavedPasswordsRequest(params) {
                if (params === void 0) { params = {}; }
                _super.call(this, 'clearSavedPasswords', params);
            }
            return ClearSavedPasswordsRequest;
        })(ServerApi.Request);
        ServerApi.ClearSavedPasswordsRequest = ClearSavedPasswordsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="../types/ILanguage.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetLanguagesRequest = (function (_super) {
            __extends(GetLanguagesRequest, _super);
            function GetLanguagesRequest(params) {
                if (params === void 0) { params = {}; }
                _super.call(this, 'getLanguages', params);
            }
            return GetLanguagesRequest;
        })(ServerApi.Request);
        ServerApi.GetLanguagesRequest = GetLanguagesRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="../types/ILocale.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetLocalesRequest = (function (_super) {
            __extends(GetLocalesRequest, _super);
            function GetLocalesRequest(params) {
                if (params === void 0) { params = {}; }
                _super.call(this, 'getLocales', params);
            }
            return GetLocalesRequest;
        })(ServerApi.Request);
        ServerApi.GetLocalesRequest = GetLocalesRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
/// <reference path="../types/IEditableServerSettings.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetServerSettingsRequest = (function (_super) {
            __extends(GetServerSettingsRequest, _super);
            function GetServerSettingsRequest(params) {
                _super.call(this, 'getServerSettings', params);
            }
            return GetServerSettingsRequest;
        })(ServerApi.Request);
        ServerApi.GetServerSettingsRequest = GetServerSettingsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetTotalRefreshTokenCountRequest = (function (_super) {
            __extends(GetTotalRefreshTokenCountRequest, _super);
            function GetTotalRefreshTokenCountRequest(params) {
                _super.call(this, 'getTotalRefreshTokenCount', params);
            }
            return GetTotalRefreshTokenCountRequest;
        })(ServerApi.Request);
        ServerApi.GetTotalRefreshTokenCountRequest = GetTotalRefreshTokenCountRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var ResetServerSettingsRequest = (function (_super) {
            __extends(ResetServerSettingsRequest, _super);
            function ResetServerSettingsRequest(params) {
                if (params === void 0) { params = {}; }
                _super.call(this, 'resetServerSettings', params);
            }
            return ResetServerSettingsRequest;
        })(ServerApi.Request);
        ServerApi.ResetServerSettingsRequest = ResetServerSettingsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var RunActiveDirectoryGroupsSyncRequest = (function (_super) {
            __extends(RunActiveDirectoryGroupsSyncRequest, _super);
            function RunActiveDirectoryGroupsSyncRequest(params) {
                if (params === void 0) { params = {}; }
                _super.call(this, 'runActiveDirectoryGroupsSyncTask', params);
            }
            return RunActiveDirectoryGroupsSyncRequest;
        })(ServerApi.Request);
        ServerApi.RunActiveDirectoryGroupsSyncRequest = RunActiveDirectoryGroupsSyncRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        ServerApi.UpdateBooleanServerSettingNames = {
            embeddedCredentialsEnabled: 'embeddedCredentialsEnabled',
            schedulingEnabled: 'schedulingEnabled',
            savedPasswordsEnabled: 'savedPasswordsEnabled',
            savedAccessTokensEnabled: 'savedAccessTokensEnabled',
            guestEnabled: 'guestEnabled',
            scheduledActiveDirectorySyncEnabled: 'scheduledActiveDirectorySyncEnabled',
            refreshTokensEnabled: 'refreshTokensEnabled'
        };
        var UpdateBooleanServerSettingRequest = (function (_super) {
            __extends(UpdateBooleanServerSettingRequest, _super);
            function UpdateBooleanServerSettingRequest(params) {
                _super.call(this, 'updateBooleanServerSetting', params);
            }
            return UpdateBooleanServerSettingRequest;
        })(ServerApi.Request);
        ServerApi.UpdateBooleanServerSettingRequest = UpdateBooleanServerSettingRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        ServerApi.UpdateScheduleFrequencyServerSettingName = 'activeDirectorySyncScheduleFrequency';
        var UpdateScheduleFrequencyServerSettingRequest = (function (_super) {
            __extends(UpdateScheduleFrequencyServerSettingRequest, _super);
            function UpdateScheduleFrequencyServerSettingRequest(params) {
                _super.call(this, 'updateScheduleFrequencyServerSetting', params);
            }
            return UpdateScheduleFrequencyServerSettingRequest;
        })(ServerApi.Request);
        ServerApi.UpdateScheduleFrequencyServerSettingRequest = UpdateScheduleFrequencyServerSettingRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var UpdateStringServerSettingRequest = (function (_super) {
            __extends(UpdateStringServerSettingRequest, _super);
            function UpdateStringServerSettingRequest(params) {
                _super.call(this, 'updateStringServerSetting', params);
            }
            return UpdateStringServerSettingRequest;
        })(ServerApi.Request);
        ServerApi.UpdateStringServerSettingRequest = UpdateStringServerSettingRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../../app/IMainScope.ts" />
/// <reference path="../controllers/CreateOrEditScheduleCtrl.ts" />
/// <reference path="../controllers/CreateOrEditScheduleViewModelMapper.ts" />
/// <reference path="../directives/tbSettingsCoordinator.ts" />
/// <reference path="../helpers/ResultHelper.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../resources/Languages.ts" />
/// <reference path="../resources/Locales.ts" />
/// <reference path="../resources/ServerSettings.ts" />
/// <reference path="../ServerApi/requests/ClearSavedPasswordsRequest.ts" />
/// <reference path="../ServerApi/requests/GetLanguagesRequest.ts" />
/// <reference path="../ServerApi/requests/GetLocalesRequest.ts" />
/// <reference path="../ServerApi/requests/GetServerSettingsRequest.ts" />
/// <reference path="../ServerApi/requests/GetTotalRefreshTokenCountRequest.ts" />
/// <reference path="../ServerApi/requests/ResetServerSettingsRequest.ts" />
/// <reference path="../ServerApi/requests/RunActiveDirectoryGroupsSyncRequest.ts" />
/// <reference path="../ServerApi/requests/UpdateBooleanServerSettingRequest.ts" />
/// <reference path="../ServerApi/requests/UpdateScheduleFrequencyServerSettingRequest.ts" />
/// <reference path="../ServerApi/requests/UpdateStringServerSettingRequest.ts" />
/// <reference path="../ServerApi/types/IEditableServerSettings.ts" />
/// <reference path="../services/ConfirmActionDialog.ts" />
/// <reference path="../services/HelpService.ts" />
/// <reference path="../services/ServerService.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerSettingsFormCtrl = (function () {
        function ServerSettingsFormCtrl(scope, $state, $q, $translate, server, ServerSettings, languages, locales, toasterService, confirmActionDialog, help) {
            var _this = this;
            this.scope = scope;
            this.$state = $state;
            this.$q = $q;
            this.$translate = $translate;
            this.server = server;
            this.ServerSettings = ServerSettings;
            this.languages = languages;
            this.locales = locales;
            this.toasterService = toasterService;
            this.confirmActionDialog = confirmActionDialog;
            this.help = help;
            this.languageOrLocaleChanged = false;
            this.scope.serverSettingsPending = false;
            this.scope.server = this.server;
            this.scope.updateDefaultLanguage = function (value) { return _this.scope.serverSettings.defaultLanguage = value; };
            this.scope.updateDefaultLocale = function (value) { return _this.scope.serverSettings.defaultLocale = value; };
            this.scope.clearSavedCredentials = function () { return _this.clearSavedCredentials(); };
            this.scope.resetSettings = function () { return _this.resetSettings(); };
            this.scope.isScheduledADSyncAllowed = this.server.isServerDomainFamilyActiveDirectory();
            this.scope.runActiveDirectoryGroupsSync = function () { return _this.runActiveDirectoryGroupsSync(); };
            this.scope.viewUpdateHref = $state.href('main.server.analysis', { sheetUrlId: 'BackgroundTasksforNonExtracts' });
            this.scope.learnMoreHref = this.help.getServerHelpUrlByCategory('settings-adsync1');
            this.scope.scheduleViewModel = VizPortal.CreateOrEditScheduleViewModelMapper.viewModelFromScheduleFrequency(this.scope.serverSettings.activeDirectorySyncScheduleFrequency);
            this.scope.serverSettingsFormState = {
                save: function () { return _this.save(); },
                cancel: function () {
                    _this.scope.serverSettings = angular.copy(_this.masterSettings);
                    _this.scope.scheduleViewModel = angular.copy(_this.originalScheduleViewModel);
                },
                isBusy: function () { return _this.scope.serverSettingsPending; },
                isFormUnchanged: function () {
                    return angular.equals(_this.scope.serverSettings, _this.masterSettings)
                        && angular.equals(_this.scope.scheduleViewModel, _this.originalScheduleViewModel);
                },
                resetSettings: function () { return _this.scope.resetSettings(); },
                onSave: function () { return _this.hardReloadIfNeeded(); }
            };
            this.masterSettings = angular.copy(this.scope.serverSettings);
            this.originalScheduleViewModel = angular.copy(this.scope.scheduleViewModel);
            this.getLanguages();
            this.getLocales();
            this.getTotalRefreshTokenCount();
        }
        ServerSettingsFormCtrl.prototype.getLanguages = function () {
            var _this = this;
            this.languages.getAll()
                .then(function (languages) {
                _this.scope.languages = languages;
                _this.scope.languageDisplayNames = {};
                _.each(languages, function (language) {
                    _this.scope.languageDisplayNames[language.language] = language.displayName;
                });
            });
        };
        ServerSettingsFormCtrl.prototype.getLocales = function () {
            var _this = this;
            this.locales.getAll()
                .then(function (locales) {
                _this.scope.locales = locales;
                _this.scope.localeDisplayNames = {};
                _.each(locales, function (locale) {
                    _this.scope.localeDisplayNames[locale.locale] = locale.displayName;
                });
            });
        };
        ServerSettingsFormCtrl.prototype.resetSettings = function () {
            var _this = this;
            this.confirmActionDialog.open({
                title: this.$translate.instant('resetServerSettings'),
                bodyText: this.$translate.instant('resetServerSettingsConfirmMessage'),
                actionName: this.$translate.instant('resetServerSettingsConfirmButton'),
                isDeleteAction: true,
                action: function () {
                    return _this.server.sendRequest(new VizPortal.ServerApi.ResetServerSettingsRequest())
                        .then(function () { return _this.ServerSettings.fetch(); })
                        .then(function (settings) {
                        _this.scope.serverSettings = settings;
                        _this.languageOrLocaleChanged = _this.isLangOrLocaleChanged();
                        _this.masterSettings = angular.copy(_this.scope.serverSettings);
                    })
                        .then(function () { return _this.hardReloadIfNeeded(); });
                },
                errorMessage: this.$translate.instant('resetServerSettingsError')
            }).result.then(function () { return _this.toasterService.pop({ type: VizPortal.ToastType.Info, text: _this.$translate.instant('resetServerSettingsSuccess') }); });
        };
        ServerSettingsFormCtrl.prototype.getTotalRefreshTokenCount = function () {
            var _this = this;
            this.server.sendRequest(new VizPortal.ServerApi.GetTotalRefreshTokenCountRequest({}))
                .then(function (result) {
                _this.scope.totalRefreshTokenCount = result.refreshTokenCount;
                _this.scope.refreshTokenUncheckedMessage = _this.$translate.instant('serverConnectedDevicesUncheckedWithCount', { TOKEN_COUNT: _this.scope.totalRefreshTokenCount }, VizPortal.L10n.Interpolations.Count);
            });
        };
        ServerSettingsFormCtrl.prototype.clearSavedCredentials = function () {
            var _this = this;
            this.confirmActionDialog.open({
                title: this.$translate.instant('clearSavedCredentials'),
                bodyText: this.$translate.instant('clearServerSavedCredentialsConfirmMessage'),
                actionName: this.$translate.instant('clearSavedCredentialsConfirmButton'),
                isDeleteAction: true,
                action: function () {
                    return _this.server.sendRequest(new VizPortal.ServerApi.ClearSavedPasswordsRequest());
                },
                errorMessage: this.$translate.instant('clearSavedCredentialsError')
            }).result.then(function () { return _this.toasterService.pop({ type: VizPortal.ToastType.Info, text: _this.$translate.instant('clearSavedCredentialsSuccess') }); });
        };
        ServerSettingsFormCtrl.prototype.save = function () {
            var _this = this;
            this.scope.serverSettingsPending = true;
            // The settings we'll save. Copy them, because we'll want to set
            // them to the masterSettings if we successfully save
            var settings = angular.copy(this.scope.serverSettings);
            var booleanNames = VizPortal.ServerApi.UpdateBooleanServerSettingNames;
            var embeddedCredentialsAndSchedulingPromise = this.ServerSettings.updateBoolean(booleanNames.embeddedCredentialsEnabled, settings.embeddedCredentialsEnabled)
                .then(function () {
                // Since scheduling depends on embeddedCredentials being enabled, make sure embeddedCredentials
                // saves first and only save scheduling if embeddedCredentials is enabled
                if (settings.embeddedCredentialsEnabled) {
                    return _this.ServerSettings.updateBoolean(booleanNames.schedulingEnabled, settings.schedulingEnabled);
                }
            });
            var promises = [
                embeddedCredentialsAndSchedulingPromise,
                this.ServerSettings.updateBoolean(booleanNames.savedPasswordsEnabled, settings.savedPasswordsEnabled),
                this.ServerSettings.updateBoolean(booleanNames.savedAccessTokensEnabled, settings.savedAccessTokensEnabled),
                this.ServerSettings.updateString('defaultLanguage', settings.defaultLanguage),
                this.ServerSettings.updateString('defaultLocale', settings.defaultLocale),
                this.ServerSettings.updateBoolean(booleanNames.refreshTokensEnabled, settings.refreshTokenEnabled)
            ];
            promises.push(this.ServerSettings
                .updateBoolean(booleanNames.scheduledActiveDirectorySyncEnabled, settings.scheduledActiveDirectorySyncEnabled));
            promises.push(this.ServerSettings
                .updateScheduleFrequency(VizPortal.ServerApi.UpdateScheduleFrequencyServerSettingName, VizPortal.CreateOrEditScheduleViewModelMapper.scheduleFrequencyFromViewModel(this.scope.scheduleViewModel)));
            if (settings.guestEnabled !== undefined) {
                promises.push(this.ServerSettings.updateBoolean(booleanNames.guestEnabled, settings.guestEnabled));
            }
            // Need to set before saving since we copy back the new server settings before the settingsCoordinate save resolve
            this.languageOrLocaleChanged = this.isLangOrLocaleChanged();
            return this.$q.all(promises)
                .then(function () {
                _this.masterSettings = settings;
                _this.originalScheduleViewModel = angular.copy(_this.scope.scheduleViewModel);
                //client update of token count to get rid of warning text
                if (!settings.refreshTokenEnabled) {
                    _this.scope.totalRefreshTokenCount = 0;
                }
            })
                .fail(function (error) { return _this.$q.reject(error); })
                .fin(function () { return _this.scope.serverSettingsPending = false; });
        };
        ServerSettingsFormCtrl.prototype.runActiveDirectoryGroupsSync = function () {
            var _this = this;
            this.confirmActionDialog.open({
                title: this.$translate.instant('activeDirectorySyncScheduleConfirmTitle'),
                bodyText: this.$translate.instant('activeDirectorySyncScheduleConfirmBody'),
                actionName: this.$translate.instant('activeDirectorySyncScheduleConfirmButton'),
                action: function () {
                    return _this.server.sendRequest(new VizPortal.ServerApi.RunActiveDirectoryGroupsSyncRequest());
                }
            }).result.then(function (result) {
                if (VizPortal.ResultHelper.hasErrors(result)) {
                    _this.toasterService.pop({ type: VizPortal.ToastType.Error, text: _this.$translate.instant('activeDirectorySyncScheduleRunNowError') });
                }
                else {
                    _this.toasterService.pop({ type: VizPortal.ToastType.Info, text: _this.$translate.instant('activeDirectorySyncScheduleRunNowSuccess') });
                }
            });
        };
        ServerSettingsFormCtrl.prototype.isLangOrLocaleChanged = function () {
            var langChanged = this.scope.serverSettings.defaultLanguage !== this.masterSettings.defaultLanguage;
            var localeChanged = this.scope.serverSettings.defaultLocale !== this.masterSettings.defaultLocale;
            return langChanged || localeChanged;
        };
        ServerSettingsFormCtrl.prototype.hardReloadIfNeeded = function () {
            var _this = this;
            var hardReloadPromise;
            if (this.languageOrLocaleChanged) {
                this.languageOrLocaleChanged = false;
                hardReloadPromise = this.server.refreshSessionInfo().then(function () { return _this.$state.hardReload(); });
            }
            return this.$q.when(hardReloadPromise);
        };
        ServerSettingsFormCtrl.$inject = [
            '$scope',
            '$state',
            '$q',
            '$translate',
            'ServerService',
            'ServerSettings',
            'Languages',
            'Locales',
            'ToasterService',
            'ConfirmActionDialog',
            'HelpService',
        ];
        return ServerSettingsFormCtrl;
    })();
    VizPortal.ServerSettingsFormCtrl = ServerSettingsFormCtrl;
    VizPortal.Module.instance().controller('ServerSettingsFormCtrl', ServerSettingsFormCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../../app/IMainScope.ts" />
/// <reference path="../directives/tbSettingsCoordinator.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../resources/Sites.ts" />
/// <reference path="../ServerApi/types/ISiteSettingsForSiteAdmin.ts" />
/// <reference path="../services/ToasterService.ts" />
var VizPortal;
(function (VizPortal) {
    var SiteSettingsForSiteAdminFormCtrl = (function () {
        function SiteSettingsForSiteAdminFormCtrl(scope, $location, $q, $translate, $state, sitesResource, toaster, $timeout) {
            var _this = this;
            this.scope = scope;
            this.$location = $location;
            this.$q = $q;
            this.$translate = $translate;
            this.$state = $state;
            this.sitesResource = sitesResource;
            this.toaster = toaster;
            this.scope.busy = false;
            this.scope.clearInvalid = function (name) { return _this.clearInvalid(name); };
            this.scope.focusByName = function (name) {
                // Timeout allows field to be enabled first
                $timeout(function () { return angular.element('input[name="' + name + '"], textarea[name="' + name + '"]').focus(); });
            };
            this.scope.siteSettingsForSiteAdminFormState = this.scope.siteSettingsForSiteAdminFormState || {};
            this.scope.siteSettingsForSiteAdminFormState.save = function () { return _this.getSiteSettingsForSiteAdminUpdatePromise(); };
            this.scope.siteSettingsForSiteAdminFormState.cancel = function () { return _this.revertSettings(); };
            this.scope.siteSettingsForSiteAdminFormState.isBusy = function () { return _this.scope.busy; };
            this.scope.siteSettingsForSiteAdminFormState.isFormUnchanged = function () { return angular.equals(_this.master, _this.scope.siteSettingsForSiteAdmin); };
            this.scope.siteSettingsForSiteAdminFormState.isValid = function () { return _this.scope.siteSettingsForSiteAdminForm && _this.scope.siteSettingsForSiteAdminForm.$valid; };
            this.master = angular.copy(this.scope.siteSettingsForSiteAdmin);
        }
        SiteSettingsForSiteAdminFormCtrl.prototype.clearInvalid = function (inputName) {
            var ngModelCtrl = this.scope.siteSettingsForSiteAdminForm[inputName];
            if (ngModelCtrl.$invalid) {
                ngModelCtrl.$setViewValue(null);
                ngModelCtrl.$render();
                ngModelCtrl.$setPristine();
                _.each(_.keys(ngModelCtrl.$error), function (error) { return ngModelCtrl.$setValidity(error, true); });
            }
        };
        SiteSettingsForSiteAdminFormCtrl.prototype.revertSettings = function () {
            this.scope.siteSettingsForSiteAdmin = angular.copy(this.master);
            // TODO: Use Angular 1.3 $validators/$validate and pull validation out of $parsers/$formatters
            _.each(this.scope.siteSettingsForSiteAdminForm.$error, function (error, key) {
                if (error) {
                    error[0].$setValidity(key, true);
                }
            });
        };
        // TODO: move the saving logic into SitesResource. Error handling should be done by users of this form
        SiteSettingsForSiteAdminFormCtrl.prototype.getSiteSettingsForSiteAdminUpdatePromise = function () {
            var _this = this;
            var site = angular.copy(this.scope.siteSettingsForSiteAdmin);
            this.scope.busy = true;
            var errors = [];
            return this.sitesResource.updateSiteSettingsForSiteAdmin(site.id, site.siteAdminSettings).then(function (result) {
                if (result.errors && result.errors.length) {
                    errors = errors.concat(result.errors);
                    _this.updateFailure(errors, site);
                    return _this.$q.reject();
                }
                else {
                    _this.updateSuccess(site);
                }
            })
                .fin(function () { return _this.scope.busy = false; });
        };
        // Success/Error Handlers
        SiteSettingsForSiteAdminFormCtrl.prototype.updateSuccess = function (site) {
            // Only need to update current view and state if we're in server or site settings
            if (!this.$state.includes('**.settings.**')) {
                return;
            }
            this.master = angular.copy(site);
        };
        // Handles errors in site settings coordinator and edit site modal and create site modal
        SiteSettingsForSiteAdminFormCtrl.prototype.updateFailure = function (errors, site) {
            var _this = this;
            _.each(errors, function (error) {
                _this.toaster.pop({ type: VizPortal.ToastType.Error, text: _this.sitesResource.errorMessage(error.code, site) });
            });
        };
        SiteSettingsForSiteAdminFormCtrl.$inject = [
            '$scope',
            '$location',
            '$q',
            '$translate',
            '$state',
            'Sites',
            'ToasterService',
            '$timeout'
        ];
        return SiteSettingsForSiteAdminFormCtrl;
    })();
    VizPortal.SiteSettingsForSiteAdminFormCtrl = SiteSettingsForSiteAdminFormCtrl;
    VizPortal.Module.instance().controller('SiteSettingsForSiteAdminFormCtrl', SiteSettingsForSiteAdminFormCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var NumberInputRange = (function () {
        function NumberInputRange() {
        }
        NumberInputRange.INT = {
            MIN: -2147483648,
            MAX: 2147483647
        };
        NumberInputRange.LONG = {
            MIN: -9223372036854775000,
            MAX: 9223372036854775000
        };
        return NumberInputRange;
    })();
    VizPortal.NumberInputRange = NumberInputRange;
    // This is needed for IE8 number and range validation.
    VizPortal.Module.instance().directive('tbRangeInputValidator', function () {
        return {
            restrict: 'A',
            require: 'ngModel',
            link: function (scope, elm, attrs, ctrl) {
                var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/; // From AngularJS v1.2.12
                ctrl.$parsers.push(function (inputVal) {
                    // min and max are inclusive
                    var isNumber = NUMBER_REGEXP.test(inputVal);
                    var min = attrs['min'] ? parseFloat(attrs['min']) : -1 * Number.MAX_VALUE;
                    var max = attrs['max'] ? parseFloat(attrs['max']) : Number.MAX_VALUE;
                    inputVal = parseFloat(inputVal);
                    ctrl.$setValidity('max', (!isNumber || inputVal <= max));
                    ctrl.$setValidity('min', (!isNumber || inputVal >= min));
                    return isNumber ? inputVal : undefined;
                });
            }
        };
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var SiteIdValidRegExp = (function () {
        function SiteIdValidRegExp() {
        }
        SiteIdValidRegExp.Chars = 'A-Za-z0-9\-\_';
        SiteIdValidRegExp.InvalidFind = new RegExp('[^' + SiteIdValidRegExp.Chars + ']', 'g');
        SiteIdValidRegExp.InvalidTest = new RegExp('^[' + SiteIdValidRegExp.Chars + ']+$');
        return SiteIdValidRegExp;
    })();
    VizPortal.SiteIdValidRegExp = SiteIdValidRegExp;
    VizPortal.Module.instance().directive('tbSiteIdInputValidator', function () {
        return {
            restrict: 'A',
            require: 'ngModel',
            link: function (scope, elm, attrs, ctrl) {
                ctrl.$parsers.push(function (inputId) {
                    ctrl.$setValidity('siteId', SiteIdValidRegExp.InvalidTest.test(inputId));
                    return inputId;
                });
            }
        };
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../../app/IMainScope.ts" />
/// <reference path="../../ts/FeatureFlags.ts" />
/// <reference path="../controllers/SiteSettingsForSiteAdminFormCtrl.ts" />
/// <reference path="../directives/tbRangeInputValidator.ts" />
/// <reference path="../filters/SizeFilter.ts" />
/// <reference path="../directives/tbSettingsCoordinator.ts" />
/// <reference path="../directives/tbSiteIdInputValidator.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../resources/Sites.ts" />
/// <reference path="../services/LicensesService.ts" />
/// <reference path="../services/ServerService.ts" />
/// <reference path="../services/SiteUrlMatcherFactory.ts" />
/// <reference path="../services/ToasterService.ts" />
var VizPortal;
(function (VizPortal) {
    var SiteSettingsForServerAdminFormCtrl = (function () {
        function SiteSettingsForServerAdminFormCtrl(scope, $location, $q, $translate, $state, server, sitesResource, toaster, siteUrlMatcherFactory, licenses, $timeout) {
            var _this = this;
            this.scope = scope;
            this.$location = $location;
            this.$q = $q;
            this.$translate = $translate;
            this.$state = $state;
            this.server = server;
            this.sitesResource = sitesResource;
            this.toaster = toaster;
            this.siteUrlMatcherFactory = siteUrlMatcherFactory;
            this.licenses = licenses;
            this.scope.active = VizPortal.SiteAvailabilityState.ACTIVE;
            this.scope.suspended = VizPortal.SiteAvailabilityState.SUSPENDED;
            this.scope.defaultSubscriptionsEmail = this.server.defaultSubscriptionsEmail();
            licenses.fetch().then(function (licensingInfo) {
                if (licensingInfo) {
                    var noLicenses = !licensingInfo.productKeyInfos || !licensingInfo.productKeyInfos.length;
                    _this.scope.userCountMax = licensingInfo.isCore || noLicenses ? VizPortal.NumberInputRange.INT.MAX : licensingInfo.totalSeatLicenses;
                    _this.scope.isSeatLicensing = licensingInfo.isCore === false;
                }
            });
            this.scope.storageQuotaMax = VizPortal.NumberInputRange.LONG.MAX / VizPortal.ByteSizeConversionFactor.ONE_GB;
            this.scope.server = this.server;
            this.scope.busy = false;
            this.scope.save = function () { return _this.save(); };
            this.scope.cancel = function () { return _this.cancel(); };
            this.scope.clearInvalid = function (name) { return _this.clearInvalid(name); };
            this.scope.focusByName = function (name) {
                // Timeout allows field to be enabled first
                $timeout(function () { return angular.element('input[name="' + name + '"], textarea[name="' + name + '"]').focus(); });
            };
            this.scope.isVersionHistoryAllowed = VizPortal.FeatureFlags.workbookVersionHistoryEnabled;
            this.scope.siteSettingsForServerAdminFormState = this.scope.siteSettingsForServerAdminFormState || {};
            this.scope.siteSettingsForServerAdminFormState.save = function () { return _this.getSiteSettingsForServerAdminUpdatePromise(); };
            this.scope.siteSettingsForServerAdminFormState.cancel = function () { return _this.revertSettings(); };
            this.scope.siteSettingsForServerAdminFormState.isBusy = function () { return _this.scope.busy; };
            this.scope.siteSettingsForServerAdminFormState.isFormUnchanged = function () { return angular.equals(_this.master, _this.scope.siteSettingsForServerAdmin); };
            this.scope.siteSettingsForServerAdminFormState.isValid = function () { return _this.scope.siteSettingsForServerAdminForm && _this.scope.siteSettingsForServerAdminForm.$valid; };
            // Initialize unset values so angular doesn't overwrite them with empty string
            // TODO: the API should be returning these. This is a bug. Tracked with BUGZID:154118
            if (this.scope.siteSettingsForServerAdmin.settings) {
                if (!this.scope.siteSettingsForServerAdmin.settings.userQuotaEnabled) {
                    this.scope.siteSettingsForServerAdmin.settings.userQuota = null;
                }
                if (!this.scope.siteSettingsForServerAdmin.settings.storageQuotaEnabled) {
                    this.scope.siteSettingsForServerAdmin.settings.storageQuotaBytes = null;
                }
                if (this.scope.siteSettingsForServerAdmin.subscriptionSettings && !this.scope.siteSettingsForServerAdmin.subscriptionSettings.customSubscriptionEmailEnabled) {
                    this.scope.siteSettingsForServerAdmin.subscriptionSettings.customSubscriptionEmail = angular.copy(this.scope.defaultSubscriptionsEmail);
                }
            }
            this.master = angular.copy(this.scope.siteSettingsForServerAdmin);
            // Copy a scrubbed version of the inputted name into the ID field until the ID is edited
            if (this.scope.siteSettingsForServerAdmin.settings && this.scope.siteSettingsForServerAdmin.settings.urlName === '' && !this.scope.isDefaultSite) {
                this.scope.unbindNameWatcher = this.scope.$watch('siteSettingsForServerAdmin.settings.name', function (value) {
                    _this.scope.siteSettingsForServerAdmin.settings.urlName = _.isString(value) ? value.replace(VizPortal.SiteIdValidRegExp.InvalidFind, '') : '';
                });
            }
            this.scope.$watch('siteSettingsForServerAdmin.settings.urlName', function (value) {
                scope.url = _this.$location.absUrl().replace(_this.$location.url(), '') +
                    _this.siteUrlMatcherFactory.compile('').format({ siteUrlName: value });
            });
        }
        SiteSettingsForServerAdminFormCtrl.prototype.clearInvalid = function (inputName) {
            var ngModelCtrl = this.scope.siteSettingsForServerAdminForm[inputName];
            if (ngModelCtrl.$invalid) {
                ngModelCtrl.$setViewValue(null);
                ngModelCtrl.$render();
                ngModelCtrl.$setPristine();
                _.each(_.keys(ngModelCtrl.$error), function (error) { return ngModelCtrl.$setValidity(error, true); });
            }
        };
        SiteSettingsForServerAdminFormCtrl.prototype.revertSettings = function () {
            this.scope.siteSettingsForServerAdmin = angular.copy(this.master);
            // TODO: Use Angular 1.3 $validators/$validate and pull validation out of $parsers/$formatters
            _.each(this.scope.siteSettingsForServerAdminForm.$error, function (error, key) {
                if (error) {
                    error[0].$setValidity(key, true);
                }
            });
        };
        SiteSettingsForServerAdminFormCtrl.prototype.cancel = function () {
            this.revertSettings();
            this.toaster.pop({ type: VizPortal.ToastType.Info, text: this.$translate.instant('settingsReverted') });
        };
        // Used in edit site modal
        SiteSettingsForServerAdminFormCtrl.prototype.save = function () {
            var _this = this;
            this.getSiteSettingsForServerAdminUpdatePromise()
                .then(function () { return _this.toaster.pop({ type: VizPortal.ToastType.Info, text: _this.$translate.instant('settingsUpdateSuccess') }); })
                .fail(function (error) { return _this.toaster.pop({ type: VizPortal.ToastType.Error, text: _this.$translate.instant('settingsUpdateFailure') }); });
        };
        // TODO: move the saving logic into SitesResource. Error handling should be done by users of this form
        SiteSettingsForServerAdminFormCtrl.prototype.getSiteSettingsForServerAdminUpdatePromise = function () {
            var _this = this;
            var updatePromises = [];
            var site = angular.copy(this.scope.siteSettingsForServerAdmin);
            this.scope.busy = true;
            updatePromises.push(this.sitesResource.updateSiteSettingsForServerAdmin(site.id, site.settings, site.subscriptionSettings));
            if (site.availability !== this.master.availability) {
                if (site.availability === VizPortal.SiteAvailabilityState.ACTIVE) {
                    updatePromises.push(this.sitesResource.activate([site.id]));
                }
                else {
                    updatePromises.push(this.sitesResource.suspend([site.id]));
                }
            }
            return this.$q.all(updatePromises)
                .then(function (results) {
                var errors = [];
                angular.forEach(results, function (result) {
                    if (result.errors && result.errors.length) {
                        errors = errors.concat(result.errors);
                    }
                });
                if (errors.length) {
                    _this.updateFailure(errors, site);
                    return _this.$q.reject();
                }
                else {
                    _this.updateSuccess(site);
                }
            })
                .fin(function () { return _this.scope.busy = false; });
        };
        // Success/Error Handlers
        SiteSettingsForServerAdminFormCtrl.prototype.updateSuccess = function (site) {
            // Only need to update current view and state if we're in server or site settings
            if (!this.$state.includes('**.settings.**')) {
                return;
            }
            // Changed site name
            if (site.settings.name !== this.master.settings.name) {
                this.server.refreshSessionInfo(); // Update site picker
            }
            // Changed site url name in site settings page
            if (site.settings.urlName !== '' && site.settings.urlName !== this.master.settings.urlName) {
                this.$state.go('main.site.settings.siteSettings', { siteUrlName: site.settings.urlName }); // Reload into new url
            }
            this.master = angular.copy(site);
        };
        // Handles errors in site settings coordinator and edit site modal and create site modal
        SiteSettingsForServerAdminFormCtrl.prototype.updateFailure = function (errors, site) {
            var _this = this;
            _.each(errors, function (error) {
                _this.toaster.pop({ type: VizPortal.ToastType.Error, text: _this.sitesResource.errorMessage(error.code, site) });
            });
        };
        SiteSettingsForServerAdminFormCtrl.$inject = [
            '$scope',
            '$location',
            '$q',
            '$translate',
            '$state',
            'ServerService',
            'Sites',
            'ToasterService',
            'SiteUrlMatcherFactory',
            'LicensesService',
            '$timeout'
        ];
        return SiteSettingsForServerAdminFormCtrl;
    })();
    VizPortal.SiteSettingsForServerAdminFormCtrl = SiteSettingsForServerAdminFormCtrl;
    VizPortal.Module.instance().controller('SiteSettingsForServerAdminFormCtrl', SiteSettingsForServerAdminFormCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../models/ISliceable.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/types/ISiteNameSansId.ts" />
/// <reference path="../services/SearchSuggestionsService.ts" />
/// <reference path="../services/ServerService.ts" />
var VizPortal;
(function (VizPortal) {
    var SiteSwitcherCtrl = (function () {
        function SiteSwitcherCtrl($scope, $translate, searchSuggestions, server) {
            $scope.getButtonTitle = function () { return $translate.instant('siteWithSiteName', { SITE_NAME: VizPortal.L10n.elideIfLong(server.sessionSiteName()) }); };
            $scope.getSiteNamesAcrossAllPods = function (text) {
                return searchSuggestions.sites(text);
            };
            $scope.siteSwitcher = {
                chosenSiteName: null
            };
            $scope.isCurrentSiteName = function (siteName) {
                return server.isCurrentSiteUrlName(siteName.urlName);
            };
            $scope.submitChangeSite = function () {
                var siteName = $scope.siteSwitcher.chosenSiteName;
                if (siteName) {
                    $scope.siteSelected({ urlName: siteName.urlName });
                }
            };
        }
        SiteSwitcherCtrl.$inject = [
            '$scope',
            '$translate',
            'SearchSuggestionsService',
            'ServerService'
        ];
        return SiteSwitcherCtrl;
    })();
    VizPortal.SiteSwitcherCtrl = SiteSwitcherCtrl;
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../controllers/SiteUserPlaceCtrl.ts" />
var VizPortal;
(function (VizPortal) {
    var SiteUserDatasourcesSubplaceCtrl = (function () {
        function SiteUserDatasourcesSubplaceCtrl() {
        }
        return SiteUserDatasourcesSubplaceCtrl;
    })();
    VizPortal.SiteUserDatasourcesSubplaceCtrl = SiteUserDatasourcesSubplaceCtrl;
    VizPortal.Module.instance().controller('SiteUserDatasourcesSubplaceCtrl', SiteUserDatasourcesSubplaceCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../controllers/SiteUserPlaceCtrl.ts" />
var VizPortal;
(function (VizPortal) {
    var SiteUserSubscriptionsSubplaceCtrl = (function () {
        function SiteUserSubscriptionsSubplaceCtrl() {
        }
        return SiteUserSubscriptionsSubplaceCtrl;
    })();
    VizPortal.SiteUserSubscriptionsSubplaceCtrl = SiteUserSubscriptionsSubplaceCtrl;
    VizPortal.Module.instance().controller('SiteUserSubscriptionsSubplaceCtrl', SiteUserSubscriptionsSubplaceCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../controllers/SiteUserPlaceCtrl.ts" />
var VizPortal;
(function (VizPortal) {
    var SiteUserViewsSubplaceCtrl = (function () {
        function SiteUserViewsSubplaceCtrl() {
        }
        return SiteUserViewsSubplaceCtrl;
    })();
    VizPortal.SiteUserViewsSubplaceCtrl = SiteUserViewsSubplaceCtrl;
    VizPortal.Module.instance().controller('SiteUserViewsSubplaceCtrl', SiteUserViewsSubplaceCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../controllers/SiteUserPlaceCtrl.ts" />
var VizPortal;
(function (VizPortal) {
    var SiteUserWorkbooksSubplaceCtrl = (function () {
        function SiteUserWorkbooksSubplaceCtrl() {
        }
        return SiteUserWorkbooksSubplaceCtrl;
    })();
    VizPortal.SiteUserWorkbooksSubplaceCtrl = SiteUserWorkbooksSubplaceCtrl;
    VizPortal.Module.instance().controller('SiteUserWorkbooksSubplaceCtrl', SiteUserWorkbooksSubplaceCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var DeleteZiplogRequest = (function (_super) {
            __extends(DeleteZiplogRequest, _super);
            function DeleteZiplogRequest(params) {
                if (params === void 0) { params = {}; }
                _super.call(this, 'deleteZiplog', params);
            }
            return DeleteZiplogRequest;
        })(ServerApi.Request);
        ServerApi.DeleteZiplogRequest = DeleteZiplogRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetZiplogInfoRequest = (function (_super) {
            __extends(GetZiplogInfoRequest, _super);
            function GetZiplogInfoRequest(params) {
                if (params === void 0) { params = {}; }
                _super.call(this, 'getZiplogInfo', params);
            }
            return GetZiplogInfoRequest;
        })(ServerApi.Request);
        ServerApi.GetZiplogInfoRequest = GetZiplogInfoRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetZiplogUriRequest = (function (_super) {
            __extends(GetZiplogUriRequest, _super);
            function GetZiplogUriRequest(params) {
                if (params === void 0) { params = {}; }
                _super.call(this, 'getZiplogUri', params);
            }
            return GetZiplogUriRequest;
        })(ServerApi.Request);
        ServerApi.GetZiplogUriRequest = GetZiplogUriRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GenerateZiplogRequest = (function (_super) {
            __extends(GenerateZiplogRequest, _super);
            function GenerateZiplogRequest(params) {
                _super.call(this, 'generateZiplog', params);
            }
            return GenerateZiplogRequest;
        })(ServerApi.Request);
        ServerApi.GenerateZiplogRequest = GenerateZiplogRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="./PollService.ts" />
/// <reference path="./ServerService.ts" />
/// <reference path="../ServerApi/requests/DeleteZiplogRequest.ts" />
/// <reference path="../ServerApi/requests/GetZiplogInfoRequest.ts" />
/// <reference path="../ServerApi/requests/GetZiplogUriRequest.ts" />
/// <reference path="../ServerApi/requests/GenerateZiplogRequest.ts" />
/// <reference path="../models/IZiplogInfo.ts" />
var VizPortal;
(function (VizPortal) {
    /**
     * NONE:        Ziplog available on the server
     * INPROGRESS:  Ziplog being generated
     * COMPLETE:    Ziplog available and ready for download
     */
    var ZiplogState = (function () {
        function ZiplogState() {
        }
        ZiplogState.NONE = 'none';
        ZiplogState.INPROGRESS = 'inprogress';
        ZiplogState.COMPLETE = 'complete';
        return ZiplogState;
    })();
    VizPortal.ZiplogState = ZiplogState;
    /**
     * Manage the ziplog on Server.
     */
    var ZiplogService = (function () {
        function ZiplogService(server, $q, windowLocationService, pollService) {
            this.server = server;
            this.$q = $q;
            this.windowLocationService = windowLocationService;
            this.pollService = pollService;
        }
        /**
         * Initiate ziplog generation. Call getInfo() after calling generate() to get a
         * promise that resolves to the generated ZiplogInfo.
         */
        ZiplogService.prototype.generate = function (daysToGenerate) {
            // Translate 'daysToGenerate' to a number that the server understands
            //
            //   'daysToGenerate'     logsUpToDate
            //   ----------------     ------------
            //   ALL_DAYS             undefined
            //   1 day                0
            //   2 days               1
            //   3 days               2
            //   etc.
            //
            var logsUpToDate = daysToGenerate !== ZiplogService.ALL_DAYS
                ? daysToGenerate - 1
                : undefined;
            return this.server.sendRequest(new VizPortal.ServerApi.GenerateZiplogRequest({
                logsUpToDate: logsUpToDate
            })).then(angular.noop);
        };
        /**
         * Retrieve the ZiplogInfo if it is `inprogress` or `complete`.
         * If ziplog is in `inprogress`, promise will resolve when ziplog is `complete`.
         * Do not call if ziplogs are `none`. The promise will never be resolved.
         * Call getState() before calling getInfo() to verify that ziplogs are not `none`.
         */
        ZiplogService.prototype.getInfo = function () {
            var _this = this;
            // Resolve immediately if we already have the ZiplogInfo
            if (this.ziplogInfo) {
                return this.$q.when(this.ziplogInfo);
            }
            // If we're already polling for ZiplogInfo, return that promise
            if (this.ziplogPollPromise) {
                return this.ziplogPollPromise;
            }
            var isComplete = function (result) {
                return result.status === ZiplogState.COMPLETE;
            };
            var ziplogPoller = this.pollService.poll(new VizPortal.ServerApi.GetZiplogInfoRequest({}), isComplete);
            this.cancelPoll = function () { return ziplogPoller.cancel(); };
            this.ziplogPollPromise = ziplogPoller.promise.then(function (result) {
                // TODO: Ziplog error handling B154120
                _this.ziplogPollPromise = null;
                return _this.ziplogInfoFromResult(result);
            });
            return this.ziplogPollPromise;
        };
        /**
         * Get current state of ziplog on server.
         * See ZiplogState for all possible ziplogs states.
         */
        ZiplogService.prototype.getState = function () {
            var _this = this;
            return this.server.sendRequest(new VizPortal.ServerApi.GetZiplogInfoRequest())
                .then(function (result) {
                // TODO: Ziplog error handling B154120
                // If ziplog is generated, save the ZiplogInfo
                if (result.status === ZiplogState.COMPLETE) {
                    _this.ziplogInfo = _this.ziplogInfoFromResult(result);
                }
                return result.status;
            });
        };
        /**
         * Delete ziplog from the server
         */
        ZiplogService.prototype.remove = function () {
            var _this = this;
            return this.server.sendRequest(new VizPortal.ServerApi.DeleteZiplogRequest())
                .then(function () {
                // TODO: Ziplog error handling B154120
                _this.ziplogInfo = null;
            });
        };
        /**
         * Download the ziplog. First requests the download url, then downloads.
         */
        ZiplogService.prototype.download = function () {
            var _this = this;
            return this.server.sendRequest(new VizPortal.ServerApi.GetZiplogUriRequest())
                .then(function (result) {
                // TODO: Ziplog error handling
                _this.windowLocationService.download(result.data);
            });
        };
        /**
         * Stop polling.
         */
        ZiplogService.prototype.stopPolling = function () {
            if (this.ziplogPollPromise) {
                this.cancelPoll();
                this.ziplogPollPromise = null;
            }
        };
        ZiplogService.prototype.ziplogInfoFromResult = function (result) {
            var ziplog = {
                size: result.size,
                date: VizPortal.DateHelpers.fromISOString(result.date)
            };
            return ziplog;
        };
        ZiplogService.$inject = ['ServerService', '$q', 'WindowLocationService', 'PollService'];
        ZiplogService.ALL_DAYS = 0;
        return ZiplogService;
    })();
    VizPortal.ZiplogService = ZiplogService;
    VizPortal.Module.instance().service('ZiplogService', ZiplogService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/ConfirmActionDialog.ts" />
/// <reference path="../services/ZiplogService.ts" />
var VizPortal;
(function (VizPortal) {
    var ZiplogCtrl = (function () {
        function ZiplogCtrl($scope, $translate, ziplogService, ConfirmActionDialog) {
            var _this = this;
            this.$scope = $scope;
            this.$translate = $translate;
            this.ziplogService = ziplogService;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.state = VizPortal.ZiplogState.NONE;
            ziplogService.getState().then(function (state) {
                _this.state = state;
                if (state !== VizPortal.ZiplogState.NONE) {
                    _this.getInfo();
                }
            });
            $scope.generate = function () { return _this.confirmGenerateSnapshot(); };
            $scope.remove = function () {
                _this.state = VizPortal.ZiplogState.NONE;
                $scope.ziplog = null;
                ziplogService.remove();
            };
            $scope.download = function () {
                ziplogService.download();
            };
            $scope.isNoZiplog = function () { return _this.state === VizPortal.ZiplogState.NONE; };
            $scope.isZiplogGenerating = function () { return _this.state === VizPortal.ZiplogState.INPROGRESS; };
            $scope.isZiplogAvailable = function () { return _this.state === VizPortal.ZiplogState.COMPLETE; };
            $scope.$on('$destroy', function () { return ziplogService.stopPolling(); });
        }
        ZiplogCtrl.prototype.getInfo = function () {
            var _this = this;
            this.ziplogService.getInfo().then(function (ziplog) {
                _this.state = VizPortal.ZiplogState.COMPLETE;
                _this.$scope.ziplog = ziplog;
            });
        };
        ZiplogCtrl.prototype.confirmGenerateSnapshot = function () {
            var _this = this;
            this.$scope.confirmGenerateZiplogDialog = {
                daysToGenerate: ZiplogCtrl.DefaultZiplogDaysToGenerate
            };
            this.ConfirmActionDialog.open({
                scope: this.$scope,
                title: this.$translate.instant('ziplog_newLogSnapshotDialog_title'),
                bodyTemplateUrl: 'ziplogNewLogSnapshotDialog.html',
                actionName: this.$translate.instant('ziplog_newLogSnapshotDialog_confirm'),
                action: function () {
                    _this.state = VizPortal.ZiplogState.INPROGRESS;
                    _this.ziplogService.generate(_this.$scope.confirmGenerateZiplogDialog.daysToGenerate)
                        .then(function () { return _this.getInfo(); });
                }
            });
        };
        ZiplogCtrl.DefaultZiplogDaysToGenerate = 7;
        ZiplogCtrl.$inject = [
            '$scope',
            '$translate',
            'ZiplogService',
            'ConfirmActionDialog'
        ];
        return ZiplogCtrl;
    })();
    VizPortal.ZiplogCtrl = ZiplogCtrl;
    VizPortal.Module.instance().controller('ZiplogCtrl', ZiplogCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var directives = [
        { attrName: 'tbChildClick', eventName: 'click', digest: true },
        { attrName: 'tbChildMousedown', eventName: 'mousedown', digest: true },
        { attrName: 'tbChildMouseenterTouchstart', eventName: 'mouseenter touchstart', digest: false },
        { attrName: 'tbChildMouseleaveTouchmove', eventName: 'mouseleave touchmove', digest: false },
        { attrName: 'tbChildMouseup', eventName: 'mouseup', digest: true },
        // Touch
        { attrName: 'tbChildTouchend', eventName: 'touchend', digest: true }
    ];
    _.each(directives, function (directive) {
        VizPortal.Module.instance().directive(directive.attrName, [
            '$parse',
            function ($parse) {
                return {
                    link: function (scope, element, attributes) {
                        var fn = $parse(attributes[directive.attrName]);
                        var selector = attributes.tbChildSelector;
                        var exclusionEvents = (attributes.tbChildExclusionEvents || '').split(' ');
                        var exclusionSelector = _.contains(exclusionEvents, directive.eventName) ? attributes.tbChildExclusionSelector : '';
                        var digest = directive.digest;
                        var callFn = function (event) {
                            fn(scope, { child: $(event.target).closest(selector), $event: event });
                        };
                        element.on(directive.eventName, selector, function (event) {
                            if (exclusionSelector && $(event.target).filter(exclusionSelector).length) {
                                return;
                            }
                            if (digest) {
                                scope.$apply(function () {
                                    callFn(event);
                                });
                            }
                            else {
                                callFn(event);
                            }
                        });
                    }
                };
            }
        ]);
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/Keys.ts" />
var VizPortal;
(function (VizPortal) {
    _.each(_.filter(VizPortal.Keys, _.isString), function (key) {
        VizPortal.Module.instance().directive('tb' + key, [
            function () {
                return {
                    link: function (scope, element, attrs) {
                        element.bind('keydown', function (event) {
                            if (event.which === VizPortal.Keys[key]) {
                                scope.$apply(function () {
                                    scope.$eval(attrs['tb' + key], { $event: event });
                                });
                            }
                        });
                    }
                };
            }
        ]);
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
// NOTE: when using these directives, make sure the element is styled so that the properties will be respected
// For example, make sure element is styled with "position: absolute"
var VizPortal;
(function (VizPortal) {
    var directives = [
        { name: 'tbBottom', style: 'bottom' },
        { name: 'tbHeight', style: 'height' },
        { name: 'tbLeft', style: 'left' },
        { name: 'tbLineHeight', style: 'line-height' },
        { name: 'tbMarginBottom', style: 'margin-bottom' },
        { name: 'tbMarginLeft', style: 'margin-left' },
        { name: 'tbMarginRight', style: 'margin-right' },
        { name: 'tbMarginTop', style: 'margin-top' },
        { name: 'tbMaxHeight', style: 'max-height' },
        { name: 'tbMinHeight', style: 'min-height' },
        { name: 'tbMaxWidth', style: 'max-width' },
        { name: 'tbMinWidth', style: 'min-width' },
        { name: 'tbRight', style: 'right' },
        { name: 'tbTop', style: 'top' },
        { name: 'tbWidth', style: 'width' }
    ];
    _.each(directives, function (directive) {
        VizPortal.Module.instance().directive(directive.name, function () {
            return {
                restrict: 'A',
                link: function (scope, element, attributes) {
                    scope.$watch(attributes[directive.name], function (value) {
                        element.css(directive.style, _.isNumber(value) ? (value + 'px') : _.isUndefined(value) ? null : value);
                    });
                }
            };
        });
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../controllers/AngularCtrl.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    ;
    var ReactDirectiveFactory;
    (function (ReactDirectiveFactory) {
        ;
        /**
        * Registers an element directive that instantiates a React component with that component's factory function.
        *
        * @param name The name that the directive will be given.
        * @param component The react component factory for the component you want to instantiate.
        * @param customWatch A scope property to watch instead of the `props` object itself. This should be 'props.something'.
        *
        * Usage:
        *   ReactDirectiveFactory.create('tbAwesomeReactComponent', AwesomeReactComponent, 'props.update')
        *   will create a directive called tbAwesomeReactComponent that can be used in an angular template as follows:
        *
        *     <tb:awesome-react-component props="componentProps" />
        *
        *     `componentProps` is an object on the scope that will be passed to the React component factory as the properties parameter.
        */
        function create(directiveSpec) {
            var spec = _.extend({}, {
                watch: 'props'
            }, directiveSpec);
            VizPortal.Module.instance().directive(spec.name, [
                'AngularContextFactory',
                function (AngularContextFactory) {
                    return {
                        restrict: 'E',
                        replace: true,
                        template: '<span></span>',
                        scope: { props: '=' },
                        link: function ($scope, element, attrs) {
                            var angularContext = AngularContextFactory.create($scope);
                            var render = function () {
                                var props = _.extend({ angularContext: angularContext }, $scope.props);
                                React.render(spec.componentFactory(props), element[0]);
                            };
                            $scope.$watch(spec.watch, render);
                            $scope.$on('$destroy', function () {
                                React.unmountComponentAtNode(element[0]);
                            });
                        }
                    };
                }
            ]);
        }
        ReactDirectiveFactory.create = create;
    })(ReactDirectiveFactory = VizPortal.ReactDirectiveFactory || (VizPortal.ReactDirectiveFactory = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../resources/Alerts.ts" />
/// <reference path="../resources/ExtractTasks.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbAlertInfo', [
        '$translate',
        'Alerts',
        'ExtractTasks',
        function ($translate, Alerts, ExtractTasks) {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'alertInfo.html',
                scope: {
                    close: '&',
                    type: '=',
                    id: '='
                },
                link: function (scope) {
                    // These methods on the scope are duplicates of those in AlertMenuCtrl.ts.
                    // TODO: Remove this duplication.
                    // One type of alert cannot be fixed by editing a data connection. Therefore the edit connection
                    // feature is disabled for this one
                    scope.editableFailure = function (statusCode) {
                        return statusCode !== VizPortal.AlertErrorCode.AlertOverlappingSchedules;
                    };
                    // Maps to the string version of the error code
                    scope.getFailureType = function (statusCode) {
                        switch (statusCode) {
                            case VizPortal.AlertErrorCode.AlertSignInFailed:
                            case VizPortal.AlertErrorCode.AlertRemoteSignInFailed:
                                return $translate.instant('signInFailedUnknownReason');
                            case VizPortal.AlertErrorCode.AlertExpiredPassword:
                            case VizPortal.AlertErrorCode.AlertRemoteExpiredPassword:
                                return $translate.instant('expiredPassword');
                            case VizPortal.AlertErrorCode.AlertAccessTokenValidation:
                                return $translate.instant('accessTokenValidation');
                            case VizPortal.AlertErrorCode.AlertAuthConfiguration:
                                return $translate.instant('authConfiguration');
                            case VizPortal.AlertErrorCode.AlertConnectionFailure:
                            case VizPortal.AlertErrorCode.AlertRemoteConnectionFailure:
                                return $translate.instant('connectionFailure');
                            case VizPortal.AlertErrorCode.AlertOverlappingSchedules:
                                return $translate.instant('overlappingSchedules');
                            case VizPortal.AlertErrorCode.AlertFullRefreshRequired:
                                return $translate.instant('fullRefreshRequired');
                            case VizPortal.AlertErrorCode.AlertConnectionlessFailure:
                                return $translate.instant('connectionlessFailure');
                            default:
                                // AlertErrorCode.AlertUnknownFailure or AlertErrorCode.AlertRemoteUnknownFailure
                                return $translate.instant('unknownFailure');
                        }
                    };
                    scope.tryAgainClick = function (taskId) {
                        if (taskId) {
                            ExtractTasks.run([taskId]);
                        }
                    };
                    scope.isRemoteRefresh = function (statusCode) {
                        return _.contains(VizPortal.AlertMenuCtrl.REMOTE_REFRESH_STATUS_CODES, statusCode);
                    };
                    // Simple formatting so the number of effected workbooks shown in the list of
                    // alerts does not get too long
                    scope.workbooksAffectedString = function (workbookList) {
                        if (workbookList) {
                            var length = workbookList.length;
                            if (length === 1) {
                                return $translate.instant('outOfDateWithName', {
                                    NAME: VizPortal.L10n.elideIfLong(workbookList[0].name)
                                });
                            }
                            else if (length > 1) {
                                return $translate.instant('outOfDateWorkbooksWithCount', {
                                    LIST_COUNT: length
                                }, VizPortal.L10n.Interpolations.Count);
                            }
                        }
                        return $translate.instant('outOfDateWorkbookNone');
                    };
                    Alerts.getForType(scope.type, scope.id)
                        .then(function (alertListInfo) {
                        if (alertListInfo && alertListInfo.alerts && alertListInfo.alerts.length > 0) {
                            scope.alert = alertListInfo.alerts[0];
                        }
                    });
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../controllers/AlertMenuCtrl.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbAlertMenu', function () {
        return {
            restrict: 'E',
            replace: true,
            templateUrl: 'alertMenu.html',
            scope: {},
            controller: VizPortal.AlertMenuCtrl
        };
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../models/OrderKeys.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbAssignPermissionsToContents', [
        '$translate',
        'AssignPermissionsToContentsService',
        'ConfirmActionDialog',
        function ($translate, assignPermissionsToContentsService, confirmActionDialog) {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'assignPermissionsToContents.html',
                scope: {
                    authorizableType: '=',
                    authorizables: '='
                },
                link: function (scope) {
                    scope.assignPermissionsToContentsPending = function () { return assignPermissionsToContentsService.getAssignPermissionsToContentsPending(); };
                    scope.assignPermissionsToContentsPercent = function () { return assignPermissionsToContentsService.getAssignPermissionsToContentsPercent(); };
                    scope.assignPermissionsToContentsButtonText = (scope.authorizableType === VizPortal.WorkbookContentType.name)
                        ? $translate.instant('assignPermissionsToViews')
                        : $translate.instant('assignPermissionsToContents');
                    // open the Confirm Action Dialog
                    scope.assignPermissionsToContents = function () {
                        confirmActionDialog.open({
                            title: getDialogTitleFor(scope.authorizableType),
                            bodyText: getDialogBodyTextFor(scope.authorizableType, scope.authorizables.keys().length),
                            actionName: $translate.instant('assignPermissionsToContentsConfirmButton'),
                            action: function () {
                                var params = {
                                    authorizables: {
                                        type: scope.authorizableType,
                                        ids: scope.authorizables.keys()
                                    }
                                };
                                assignPermissionsToContentsService.assignPermissionsToContents(params);
                            },
                            errorMessage: $translate.instant('assignPermissionsToContentsError')
                        });
                    };
                    // return true if this authorizableType can be used in Assign Permissions To Contents (project or workbook).
                    scope.canAssignPermissionsToContents = function () {
                        return (scope.authorizableType === VizPortal.ProjectContentType.name
                            || scope.authorizableType === VizPortal.WorkbookContentType.name) &&
                            !VizPortal.FeatureFlags.projectControlledPermissionsEnabled;
                    };
                    scope.$on('$destroy', function () { return assignPermissionsToContentsService.cancelPoll(); });
                    // a helper fn to count set properties; e.g. the sum of multiple projects' workbooks, or multiple workbooks' views.
                    function pluckAndReduceToSum(k) {
                        return _.reduce(scope.authorizables.pluck(k), function (sum, el) { return (sum + el); });
                    }
                    ;
                    // returns the dialog title for the given authorizableType.
                    function getDialogTitleFor(authorizableType) {
                        switch (authorizableType) {
                            case VizPortal.ProjectContentType.name:
                                return $translate.instant('assignPermissionsToContentsConfirmTitle');
                            case VizPortal.WorkbookContentType.name:
                                return $translate.instant('assignPermissionsToViewsConfirmTitle');
                        }
                        ;
                    }
                    ;
                    // get the dialog body text, depending on which context we're in
                    // (workbook or project, single or multi selected)
                    function getDialogBodyTextFor(authorizableType, authorizableCount) {
                        var dialogBodyText;
                        if (scope.authorizableType === VizPortal.ProjectContentType.name) {
                            // assigning permissions to project's contents
                            if (authorizableCount === 1) {
                                // single project case
                                dialogBodyText = $translate.instant('assignPermissionsToContentsConfirmMessageSingleProject', {
                                    PROJECT_NAME: VizPortal.L10n.elideIfLong(scope.authorizables.first().name),
                                    WORKBOOK_COUNT: pluckAndReduceToSum(VizPortal.OrderKeys.workbookCount),
                                    VIEW_COUNT: pluckAndReduceToSum(VizPortal.OrderKeys.viewCount),
                                    DATASOURCE_COUNT: pluckAndReduceToSum(VizPortal.OrderKeys.datasourceCount)
                                }, VizPortal.L10n.Interpolations.Count);
                            }
                            else {
                                // multiple projects case
                                dialogBodyText = $translate.instant('assignPermissionsToContentsConfirmMessageMultiProject', {
                                    PROJECT_COUNT: authorizableCount,
                                    WORKBOOK_COUNT: pluckAndReduceToSum(VizPortal.OrderKeys.workbookCount),
                                    VIEW_COUNT: pluckAndReduceToSum(VizPortal.OrderKeys.viewCount),
                                    DATASOURCE_COUNT: pluckAndReduceToSum(VizPortal.OrderKeys.datasourceCount)
                                }, VizPortal.L10n.Interpolations.Count);
                            }
                        }
                        else if (scope.authorizableType === VizPortal.WorkbookContentType.name) {
                            // assigning permissions to workbook's contents
                            if (authorizableCount === 1) {
                                // single workbook case
                                dialogBodyText = $translate.instant('assignPermissionsToContentsConfirmMessageSingleWorkbook', {
                                    WORKBOOK_NAME: VizPortal.L10n.elideIfLong(scope.authorizables.first().name),
                                    VIEW_COUNT: pluckAndReduceToSum(VizPortal.OrderKeys.numSheets)
                                }, VizPortal.L10n.Interpolations.Count);
                            }
                            else {
                                // multiple workbooks case
                                dialogBodyText = $translate.instant('assignPermissionsToContentsConfirmMessageMultiWorkbook', {
                                    WORKBOOK_COUNT: authorizableCount,
                                    VIEW_COUNT: pluckAndReduceToSum(VizPortal.OrderKeys.numSheets)
                                }, VizPortal.L10n.Interpolations.Count);
                            }
                        }
                        return dialogBodyText;
                    }
                    ;
                }
            };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../ts/libs.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbAutoSelect', [
        '$timeout', function ($timeout) {
            return {
                restrict: 'A',
                link: function (scope, element, attr) {
                    // Timeout waits for element to render before selecting
                    var select = function () { return $timeout(function () { return element.focus().select(); }); };
                    if (attr.tbAutoSelect) {
                        scope.$watch(attr.tbAutoSelect, function (val) {
                            if (val)
                                select();
                        }, true);
                    }
                    else {
                        select();
                    }
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbBackgroundImage', function () {
        return {
            restrict: 'A',
            link: function (scope, element, attributes) {
                scope.$watch(attributes['tbBackgroundImage'], function (value) {
                    element.css('background-image', 'url(' + value + ')');
                });
            }
        };
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../../ts/libs.ts" />
var VizPortal;
(function (VizPortal) {
    /**
     * Similar to ng-click, but checks for tb-disabled
     *
     * Usage:
     *
     *  a(tb-button-click="doAction()")
     *  a(tb-button-click="doAction()" tb-disabled="isDisabled()")
     *
     */
    VizPortal.Module.instance().directive('tbButtonClick', [
        '$parse',
        function ($parse) {
            return {
                restrict: 'A',
                link: function (scope, element, attr) {
                    var clickFn = $parse(attr['tbButtonClick']);
                    element.on('click', function (event) {
                        if (!element.hasClass('tb-disabled')) {
                            scope.$apply(function () {
                                clickFn(scope, { $event: event });
                            });
                        }
                    });
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../ts/libs.ts" />
var VizPortal;
(function (VizPortal) {
    // This is patterned after ngMouseDown,
    // with the addition of the check for tb-disabled.
    VizPortal.Module.instance().directive('tbButtonDown', [
        '$parse',
        function ($parse) {
            return {
                restrict: 'A',
                link: function (scope, element, attr) {
                    var downFn = $parse(attr['tbButtonDown']);
                    element.on('mousedown', function (event) {
                        scope.$apply(function () {
                            if (!element.hasClass('tb-disabled')) {
                                downFn(scope, { $event: event });
                            }
                        });
                    });
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbBytesInputConverter', function () {
        return {
            restrict: 'A',
            require: 'ngModel',
            link: function (scope, elm, attrs, ctrl) {
                ctrl.$parsers.push(function (sizeInGigabytes) {
                    // GB -> B
                    var sizeInBytes = sizeInGigabytes * VizPortal.ByteSizeConversionFactor.ONE_GB;
                    if (!isNaN(sizeInBytes) && sizeInBytes > 0 && _.isFinite(sizeInBytes)) {
                        ctrl.$setValidity('bytes', true);
                        return sizeInBytes;
                    }
                    else {
                        ctrl.$setValidity('bytes', false);
                        return 0;
                    }
                });
                ctrl.$formatters.push(function (sizeInBytes) {
                    // B -> GB
                    if (!isNaN(sizeInBytes) && sizeInBytes > 0 && _.isFinite(sizeInBytes)) {
                        return parseFloat((sizeInBytes / VizPortal.ByteSizeConversionFactor.ONE_GB).toFixed(3));
                    }
                    else {
                        return sizeInBytes;
                    }
                });
            }
        };
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    ;
    VizPortal.Module.instance().directive('tbBulkImportResultsSummary', [
        '$translate',
        'UserActionResultCode',
        function ($translate, userActionResultCode) {
            return {
                restrict: 'E',
                replace: true,
                scope: {
                    results: '='
                },
                templateUrl: 'bulkImportResultsSummary.html',
                link: function (scope) {
                    scope.$watch('results', function () {
                        parseResults();
                    });
                    function parseResults() {
                        if (!scope.results)
                            return;
                        scope.usersSkippedMessage = $translate.instant('userActionBulkOperationNumberSkipped', { COUNT: scope.results.skippedLineCount }, VizPortal.L10n.Interpolations.Count);
                        scope.usersProcessedMessage = $translate.instant('userActionBulkOperationNumberProcessed', { COUNT: scope.results.processedLineCount }, VizPortal.L10n.Interpolations.Count);
                        var successResultsByCode = aggregateByResultCode(scope.results.results);
                        scope.successResults = addLocalizedResultMessage(successResultsByCode);
                        var errorResultsByCode = aggregateByErrorCode(scope.results.errors);
                        scope.errorResults = addLocalizedErrorMessage(errorResultsByCode);
                    }
                    ;
                    function aggregateByResultCode(results) {
                        var successResultsByCode = {};
                        // aggregate success results by result code
                        _.each(results, function (user) {
                            _.each(user.codes, function (code) {
                                if (!successResultsByCode[code]) {
                                    successResultsByCode[code] = {
                                        code: code,
                                        usernames: user.username,
                                        count: 1
                                    };
                                }
                                else {
                                    successResultsByCode[code].usernames += ", " + user.username;
                                    ++successResultsByCode[code].count;
                                }
                            });
                        });
                        return successResultsByCode;
                    }
                    function addLocalizedResultMessage(aggregatedResults) {
                        return _.map(aggregatedResults, function (value) {
                            return _.extend(value, {
                                message: userActionResultCode.toLocalizedResultMessage(value.code, value.count)
                            });
                        });
                    }
                    function addLocalizedErrorMessage(aggregatedResults) {
                        return _.map(aggregatedResults, function (value) {
                            return _.extend(value, {
                                message: userActionResultCode.toLocalizedErrorMessage(value.code, value.count)
                            });
                        });
                    }
                    function aggregateByErrorCode(errors) {
                        var errorResultsByCode = {};
                        _.each(errors, function (error) {
                            if (!error.username) {
                                // for some errors (like UsernameMissing) there is no username.
                                // So, show the line number were we would usually show the username.
                                error.username = $translate.instant('userActionBulkOperationErrorLineNumber', { LINE_NUMBER: error.line }, VizPortal.L10n.Interpolations.Count);
                            }
                            var code = error.errorCode;
                            if (!errorResultsByCode[code]) {
                                errorResultsByCode[code] = {
                                    code: code,
                                    usernames: error.username,
                                    count: 1
                                };
                            }
                            else {
                                errorResultsByCode[code].usernames += ", " + error.username;
                                ++errorResultsByCode[code].count;
                            }
                        });
                        return errorResultsByCode;
                    }
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    // Notification For:
    // => update display name for a single user
    var UpdateUserDisplayNameNotification = (function () {
        function UpdateUserDisplayNameNotification($translate, toaster) {
            this.$translate = $translate;
            this.toaster = toaster;
        }
        UpdateUserDisplayNameNotification.prototype.notify = function (result, username, displayName) {
            if (!!result.errors && result.errors.length > 0) {
                var errorMsg = this.errorMessageFor(result.errors[0], username);
                this.toaster.pop({ type: VizPortal.ToastType.Error, text: errorMsg });
            }
            else {
                var successMsg = this.$translate.instant('updateUserDisplayNameSuccess', { USER_NAME: VizPortal.L10n.elideIfLong(username), DISPLAY_NAME: VizPortal.L10n.elideIfLong(displayName) });
                this.toaster.pop({ type: VizPortal.ToastType.Info, text: successMsg });
            }
        };
        UpdateUserDisplayNameNotification.prototype.errorMessageFor = function (error, username) {
            switch (error.code) {
                case VizPortal.CommonErrorCode.SystemUserNotFound:
                    return this.$translate.instant('errorSystemUserNotFound', { USER_NAME: VizPortal.L10n.elideIfLong(username) });
                default:
                    return this.$translate.instant('errorUnknown');
            }
        };
        UpdateUserDisplayNameNotification.$inject = [
            '$translate',
            'ToasterService'];
        return UpdateUserDisplayNameNotification;
    })();
    VizPortal.UpdateUserDisplayNameNotification = UpdateUserDisplayNameNotification;
    VizPortal.Module.instance().service('UpdateUserDisplayNameNotification', UpdateUserDisplayNameNotification);
    // Notification For:
    // => update display name for a single user
    var UpdateUserEmailNotification = (function () {
        function UpdateUserEmailNotification($translate, toaster) {
            this.$translate = $translate;
            this.toaster = toaster;
        }
        UpdateUserEmailNotification.prototype.notify = function (result, username, email) {
            if (!!result.errors && result.errors.length > 0) {
                var errorMsg = this.errorMessageFor(result.errors[0], username);
                this.toaster.pop({ type: VizPortal.ToastType.Error, text: errorMsg });
            }
            else {
                var successMsg = this.$translate.instant('updateUserEmailSuccess', { USER_NAME: VizPortal.L10n.elideIfLong(username), EMAIL: email });
                this.toaster.pop({ type: VizPortal.ToastType.Info, text: successMsg });
            }
        };
        UpdateUserEmailNotification.prototype.errorMessageFor = function (error, username) {
            switch (error.code) {
                case VizPortal.CommonErrorCode.SystemUserNotFound:
                    return this.$translate.instant('errorSystemUserNotFound', { USER_NAME: VizPortal.L10n.elideIfLong(username) });
                default:
                    return this.$translate.instant('errorUnknown');
            }
        };
        UpdateUserEmailNotification.$inject = [
            '$translate',
            'ToasterService'];
        return UpdateUserEmailNotification;
    })();
    VizPortal.UpdateUserEmailNotification = UpdateUserEmailNotification;
    VizPortal.Module.instance().service('UpdateUserEmailNotification', UpdateUserEmailNotification);
    // Notification For:
    // => synchronize a single AD user (uses importUsersFromAD API)
    var SyncUserActionNotification = (function () {
        function SyncUserActionNotification($translate, toaster) {
            this.$translate = $translate;
            this.toaster = toaster;
        }
        SyncUserActionNotification.prototype.notify = function (result, username) {
            if (!!result.errors && result.errors.length > 0) {
                var errorMsg = this.errorMessageFor(result.errors[0], username);
                this.toaster.pop({ type: VizPortal.ToastType.Error, text: errorMsg });
            }
            else {
                var successMsg = this.$translate.instant('syncUserSuccess', { USER_NAME: VizPortal.L10n.elideIfLong(username) });
                this.toaster.pop({ type: VizPortal.ToastType.Info, text: successMsg });
            }
        };
        SyncUserActionNotification.prototype.errorMessageFor = function (error, username) {
            switch (error.code) {
                case VizPortal.CommonErrorCode.SystemUserNotFound:
                    return this.$translate.instant('errorSystemUserNotFound', { USER_NAME: VizPortal.L10n.elideIfLong(username) });
                default:
                    return this.$translate.instant('errorUnknown');
            }
        };
        SyncUserActionNotification.$inject = [
            '$translate',
            'ToasterService'];
        return SyncUserActionNotification;
    })();
    VizPortal.SyncUserActionNotification = SyncUserActionNotification;
    VizPortal.Module.instance().service('SyncUserActionNotification', SyncUserActionNotification);
    // Notification For:
    // => changing password of a user
    var ChangePasswordNotification = (function () {
        function ChangePasswordNotification($translate, toaster) {
            this.$translate = $translate;
            this.toaster = toaster;
        }
        ChangePasswordNotification.prototype.notify = function (result, username) {
            if (!!result.errors && result.errors.length > 0) {
                var errorMsg = this.errorMessageFor(result.errors[0], username);
                this.toaster.pop({ type: VizPortal.ToastType.Error, text: errorMsg });
            }
            else {
                var successMsg = this.$translate.instant('changePasswordSuccess', { USER_NAME: VizPortal.L10n.elideIfLong(username) });
                this.toaster.pop({ type: VizPortal.ToastType.Info, text: successMsg });
            }
        };
        ChangePasswordNotification.prototype.errorMessageFor = function (error, username) {
            switch (error.code) {
                case VizPortal.CommonErrorCode.SystemUserNotFound:
                    return this.$translate.instant('errorSystemUserNotFound', { USER_NAME: VizPortal.L10n.elideIfLong(username) });
                case VizPortal.UserErrorCode.UserInvalidPassword:
                    return this.$translate.instant('errorUserOldPasswordIncorrect');
                default:
                    return this.$translate.instant('errorUnknown');
            }
        };
        ChangePasswordNotification.$inject = [
            '$translate',
            'ToasterService'];
        return ChangePasswordNotification;
    })();
    VizPortal.ChangePasswordNotification = ChangePasswordNotification;
    VizPortal.Module.instance().service('ChangePasswordNotification', ChangePasswordNotification);
    var ChangeLanguageNotification = (function () {
        function ChangeLanguageNotification($translate, toaster) {
            this.$translate = $translate;
            this.toaster = toaster;
        }
        ChangeLanguageNotification.prototype.notify = function (result, username) {
            if (!!result.errors && result.errors.length > 0) {
                var errorMsg = this.errorMessageFor(result.errors[0], username);
                this.toaster.pop({ type: VizPortal.ToastType.Error, text: errorMsg });
            }
            else {
                var successMsg = this.$translate.instant('changeLanguageSuccess', { USER_NAME: VizPortal.L10n.elideIfLong(username) });
                this.toaster.pop({ type: VizPortal.ToastType.Info, text: successMsg });
            }
        };
        ChangeLanguageNotification.prototype.errorMessageFor = function (error, username) {
            switch (error.code) {
                case VizPortal.CommonErrorCode.SystemUserNotFound:
                    return this.$translate.instant('errorSystemUserNotFound', { USER_NAME: VizPortal.L10n.elideIfLong(username) });
                default:
                    return this.$translate.instant('errorUnknown');
            }
        };
        ChangeLanguageNotification.$inject = ['$translate', 'ToasterService'];
        return ChangeLanguageNotification;
    })();
    VizPortal.ChangeLanguageNotification = ChangeLanguageNotification;
    VizPortal.Module.instance().service('ChangeLanguageNotification', ChangeLanguageNotification);
    var ChangeLocaleNotification = (function () {
        function ChangeLocaleNotification($translate, toaster) {
            this.$translate = $translate;
            this.toaster = toaster;
        }
        ChangeLocaleNotification.prototype.notify = function (result, username) {
            if (!!result.errors && result.errors.length > 0) {
                var errorMsg = this.errorMessageFor(result.errors[0], username);
                this.toaster.pop({ type: VizPortal.ToastType.Error, text: errorMsg });
            }
            else {
                var successMsg = this.$translate.instant('changeLocaleSuccess', { USER_NAME: VizPortal.L10n.elideIfLong(username) });
                this.toaster.pop({ type: VizPortal.ToastType.Info, text: successMsg });
            }
        };
        ChangeLocaleNotification.prototype.errorMessageFor = function (error, username) {
            switch (error.code) {
                case VizPortal.CommonErrorCode.SystemUserNotFound:
                    return this.$translate.instant('errorSystemUserNotFound', { USER_NAME: VizPortal.L10n.elideIfLong(username) });
                default:
                    return this.$translate.instant('errorUnknown');
            }
        };
        ChangeLocaleNotification.$inject = ['$translate', 'ToasterService'];
        return ChangeLocaleNotification;
    })();
    VizPortal.ChangeLocaleNotification = ChangeLocaleNotification;
    VizPortal.Module.instance().service('ChangeLocaleNotification', ChangeLocaleNotification);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../resources/UserSettings.ts" />
/// <reference path="../services/UserSettingsNotification.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbChangePassword', [
        'ChangePasswordNotification',
        'ServerService',
        'UserSettings',
        function (changePasswordNotification, serverService, userSettings) {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'changePassword.html',
                scope: {
                    userId: '&',
                    username: '&'
                },
                link: function (scope) {
                    scope.busy = false;
                    scope.fields = {
                        currentPassword: "",
                        confirmPassword: "",
                        newPassword: ""
                    };
                    scope.editMode = false;
                    // Require confirming your current password to change your own password
                    scope.requireCurrentPassword = serverService.isSessionUserSelf();
                    scope.clearAndCollapseFields = function () {
                        scope.fields.currentPassword = "";
                        scope.fields.newPassword = "";
                        scope.fields.confirmPassword = "";
                        scope.editMode = false;
                    };
                    scope.clearAndShowFields = function () {
                        scope.fields.currentPassword = "";
                        scope.fields.newPassword = "";
                        scope.fields.confirmPassword = "";
                        scope.editMode = true;
                    };
                    scope.save = function () {
                        scope.busy = true;
                        var currentPassword = scope.fields.currentPassword;
                        var newPassword = scope.fields.newPassword;
                        var userId = scope.userId();
                        return userSettings.changeUserPassword(userId, newPassword, currentPassword)
                            .then(function (result) {
                            // toasts
                            changePasswordNotification.notify(result, scope.username());
                            scope.busy = false;
                            scope.clearAndCollapseFields();
                        });
                    };
                    scope.disableSaveButton = function () {
                        return scope.passwordForm.$invalid || scope.busy;
                    };
                }
            };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../../ts/libs.ts" />
var VizPortal;
(function (VizPortal) {
    var CheckboxGroupCtrl = (function () {
        function CheckboxGroupCtrl() {
        }
        return CheckboxGroupCtrl;
    })();
    VizPortal.CheckboxGroupCtrl = CheckboxGroupCtrl;
})(VizPortal || (VizPortal = {}));
/// <reference path="../../../ts/libs.ts" />
/// <reference path="../../../ts/Module.ts" />
/// <reference path="CheckboxGroupCtrl.ts" />
var VizPortal;
(function (VizPortal) {
    /* Custom checkbox control. Two ways to use:
    *
    *  1. Two-way binding to a scope property, like in a form. Includes all the fancy Angular form
    *     features: http://docs.angularjs.org/guide/forms
    *
    *       tb:checkbox(ng-model="model.bool")
    *
    *     For a checkbox with a clickable label
    *
    *       tb:checkbox-group
    *         tb:checkbox
    *         tb:checkbox-label Content
    *
    *  2. Reflect value of expressions. You'll have to define an ng-click if you want behavior on click.
    *
    *       tb:checkbox(checked="amIAwesome()")
    *
    */
    VizPortal.Module.instance().directive('tbCheckbox', [
        function () {
            return {
                restrict: 'E',
                replace: true,
                require: ['?ngModel', '^?tbCheckboxGroup'],
                templateUrl: 'checkbox.html',
                scope: {
                    checked: '&'
                },
                link: function (scope, elm, attrs, ctrls) {
                    var ngModelCtrl = ctrls[0];
                    var checkboxGroupCtrl = ctrls[1];
                    if (!ngModelCtrl) {
                        return;
                    }
                    var disabled = function () { return elm.hasClass('tb-disabled'); };
                    scope.checked = function () { return ngModelCtrl.$viewValue; };
                    scope.toggle = function () {
                        if (disabled())
                            return;
                        ngModelCtrl.$setViewValue(!ngModelCtrl.$viewValue);
                        ngModelCtrl.$render();
                    };
                    if (checkboxGroupCtrl) {
                        checkboxGroupCtrl.toggle = scope.toggle;
                        checkboxGroupCtrl.disabled = disabled;
                    }
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../../ts/libs.ts" />
/// <reference path="../../../ts/Module.ts" />
/// <reference path="CheckboxGroupCtrl.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbCheckboxGroup', [
        function () {
            return {
                restrict: 'E',
                transclude: true,
                replace: true,
                template: '<div class="tb-checkbox-group" ng-transclude></div>',
                controller: VizPortal.CheckboxGroupCtrl
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../../ts/libs.ts" />
/// <reference path="../../../ts/Module.ts" />
/// <reference path="CheckboxGroupCtrl.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbCheckboxLabel', [
        function () {
            return {
                restrict: 'E',
                transclude: true,
                replace: true,
                require: '^tbCheckboxGroup',
                templateUrl: 'checkboxLabel.html',
                link: function ($scope, elm, attrs, checkboxGroupCtrl) {
                    $scope.ctrl = checkboxGroupCtrl;
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var MAX_CHARACTER_LENGTH_DEFAULT = 50000;
    VizPortal.Module.instance().directive('tbCreateTextarea', [
        function () {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'createTextarea.html',
                scope: {
                    onBeforeSave: '&',
                    maxCharacterLength: '=?'
                },
                link: function ($scope, element, attrs) {
                    $scope.busy = false;
                    var textarea = element.find("textarea");
                    if (!$scope.maxCharacterLength)
                        $scope.maxCharacterLength = MAX_CHARACTER_LENGTH_DEFAULT;
                    $scope.add = function () {
                        if ($scope.text.length !== 0) {
                            $scope.busy = true;
                            $scope.onBeforeSave({ newText: $scope.text }).then(
                            // Success
                            // Success
                            function () {
                                $scope.text = "";
                                $scope.busy = false;
                                $scope.clickedInElement = false;
                            }, 
                            // Error
                            // Error
                            function () {
                                // TODO: show error message
                                $scope.busy = false;
                            });
                        }
                    };
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../controllers/DataGridCtrl.ts" />
var VizPortal;
(function (VizPortal) {
    // Example usage:
    //
    //   tb:template-list(templates="headers")
    //     tb:template(key="name")
    //       span Name
    //     tb:template(key="value")
    //       span Value
    //
    //   tb:template-list(templates="cells")
    //     tb:template
    //       span {{row.name}}
    //     tb:template
    //       span {{row.value}}
    //
    //   tb:data-grid(
    //       headers="headers",
    //       cells="cells",
    //       items="items",
    //       current-row-index="currentRowIndex",
    //       always-have-current-row="true",
    //       is-row-selected="isRowSelected(row)",
    //       header-clicked="headerClicked(header)",
    //       row-clicked="rowClicked(row, colIndex)"
    //       slice-changed="sliceChanged(newSlice)")
    //
    // "headers" is an array of ITemplate objects that define the contents of the headers.
    // "cells" is an array of ITemplate objects that define the contents of the cells.
    // "items" is an ISliceable. The data grid will fetch the slice to populate the grid.
    // "current-row-index" is the index of the 'current' row (the definition of 'current' depends on context).
    // "always-have-current-row" means there will always be a current row (i.e. current-row-index will only be -1 if the grid is empty)
    // "is-row-selected" is a callback (row => boolean) that determines whether each row is shown as selected.
    // "header-clicked" is a callback (header => void) that is called when a header is clicked.
    // "row-clicked" is a callback (row, colIndex? => void) that is called when a row is clicked.
    // The colIndex parameter to the "row-clicked" callback is the index (zero-based) of the column that was clicked,
    // or undefined if the click occurred outside any column.
    // "slice-changed" is a callback (newSlice => void) that is called whenever the "slice" of visible rows is updated.
    // The "newSlice" parameter is of type ListResult<any>, where the values are the rows.
    //
    // The cell templates' scope is extended with the following properties:
    // "row": the row object
    // "slice" the current slice (see slice-changed above)
    VizPortal.Module.instance().directive('tbDataGrid', function () {
        return {
            restrict: 'E',
            replace: true,
            templateUrl: 'dataGrid.html',
            scope: {
                headers: '=',
                cells: '=',
                items: '=',
                currentRowIndex: '=?',
                currentRowObject: '=?',
                columnWidths: '=?',
                alwaysHaveCurrentRow: '=',
                isRowSelected: '&',
                headerClicked: '&',
                rowClicked: '&',
                rowsClickable: '=',
                rowHeight: '=?',
                sliceChanged: '&',
                emptyTemplate: '=?',
                emptyTemplateModel: '=?'
            },
            controller: VizPortal.DataGridCtrl
        };
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../controllers/ScrollCtrl.ts" />
/// <reference path="../fetchers/ListResult.ts" />
/// <reference path="../models/ColumnWidths.ts" />
/// <reference path="../models/IEmptyTemplate.ts" />
/// <reference path="../models/ILayout.ts" />
/// <reference path="../models/ISliceable.ts" />
/// <reference path="../models/ITemplate.ts" />
/// <reference path="../models/ListLayout.ts" />
/// <reference path="../services/BrowserSupportService.ts" />
var VizPortal;
(function (VizPortal) {
    var DataGridBodyCtrl = (function () {
        function DataGridBodyCtrl($scope, $element, $timeout, BrowserSupportService) {
            var _this = this;
            this.$scope = $scope;
            this.$element = $element;
            this.$timeout = $timeout;
            $scope.layout = new VizPortal.ListLayout($scope.rowHeight);
            if (!$scope.keepColumnWidths) {
                this.$element.css('visibility', 'hidden');
            }
            $scope.handleSliceChanged = function (newSlice) {
                var prevSlice = _this.slice;
                var hadItems = prevSlice && prevSlice.items.length > 0;
                _this.slice = newSlice;
                var haveItems = newSlice && newSlice.items.length > 0;
                $scope.empty = !haveItems;
                $scope.emptyTemplateModel = $scope.emptyTemplateModel || {};
                _this.ensureCurrentRowIndexInRange();
                if (!$scope.keepColumnWidths) {
                    if (!hadItems) {
                        if (haveItems) {
                            // We going from no items to some items, so reset the actual widths.
                            // Otherwise, the default widths will stick, but we want to resize based on content.
                            if ($scope.columnWidths && $scope.columnWidths.resetActual) {
                                _this.$element.css('visibility', 'hidden');
                                _this.$scope.columnWidths.resetActual();
                            }
                            // Once the new content has loaded, measure the new widths.
                            _this.$timeout(function () {
                                var contentWidths = _.map(_this.$element.find('.tb-data-grid-body-column'), function (column) {
                                    var rect = column.getBoundingClientRect();
                                    return Math.ceil(rect.right - rect.left); // to correct for non-integer widths
                                });
                                _this.$scope.contentWidthsChanged({ contentWidths: contentWidths, containerWidth: _this.getGridWidth() });
                                _this.$element.css('visibility', 'visible');
                            });
                        }
                        else {
                            if (!prevSlice) {
                                // We got a slice with no items on first load.
                                // We need to size the columns, but we have no content to base the sizes on,
                                // so pick some reasonable defaults.
                                var containerWidth = _this.getGridWidth();
                                var remainingSpace = containerWidth;
                                var contentWidths = [];
                                for (var i = 0, l = $scope.cells.length; i < l; i++) {
                                    var cell = $scope.cells[i];
                                    // If the column has a default width specified, prefer that.
                                    var contentWidth = parseInt(cell.attrs['defaultWidth'], 10);
                                    if (!(contentWidth >= 0)) {
                                        // If it doesn't, give it a proportional amount of the remaining space.
                                        contentWidth = remainingSpace / (l - i);
                                    }
                                    // Take the minimum width of the column into account.
                                    if ($scope.columnWidths && $scope.columnWidths.getMin) {
                                        contentWidth = Math.max(contentWidth, $scope.columnWidths.getMin(i));
                                    }
                                    contentWidths.push(contentWidth);
                                    remainingSpace -= contentWidth;
                                }
                                _this.$scope.contentWidthsChanged({ contentWidths: contentWidths, containerWidth: containerWidth });
                            }
                            _this.$element.css('visibility', 'visible');
                        }
                    }
                }
                if (_this.$scope.sliceChanged) {
                    _this.$scope.sliceChanged({ newSlice: newSlice });
                }
                _this.updateCurrentRowObject();
            };
            $scope.colIndex = function (child) {
                return parseInt(child.attr('data-col-index'), 10);
            };
            $scope.rowIndex = function (child) {
                return parseInt(child.attr('data-row-index'), 10);
            };
            $scope.setHoverRow = function (rowElement, locals) {
                if (_this.hoverRow) {
                    _this.hoverRow.removeClass('tb-data-grid-hover-row');
                }
                _this.hoverRow = rowElement;
                if (_this.hoverRow && !BrowserSupportService.isTouch()) {
                    _this.hoverRow.addClass('tb-data-grid-hover-row');
                }
                $scope.rowHovered(locals);
            };
            $scope.isCurrentRowIndex = function (rowIndex) {
                return $scope.currentRowIndex === _this.slice.index + rowIndex;
            };
            $scope.setActiveRow = function (row) {
                _this.clearActiveRow();
                if (row && $scope.rowsClickable) {
                    var rowIndex = $scope.rowIndex(row);
                    // Set the "current" row to the active row
                    $scope.currentRowIndex = _this.slice.index + rowIndex;
                    // Update class on active background row
                    _this.activeRow = _this.getBackgroundRow(rowIndex).addClass('tb-data-grid-active-row');
                }
            };
            $scope.setActiveRowIfHoverRow = function (row) {
                if (_this.hoverRow) {
                    $scope.setActiveRow(row);
                }
            };
            $scope.clearActiveRow = function () { return _this.clearActiveRow(); };
            $scope.setHoverRowIndex = function (rowIndex, locals) {
                $scope.setHoverRow(_this.getBackgroundRow(rowIndex), locals);
            };
            $scope.getElementsOfSelectedRows = function () {
                var selectedIndices = [];
                _.each(_this.slice.items, function (row, index) {
                    if (_this.$scope.isRowSelected({ row: row })) {
                        selectedIndices.push(index);
                    }
                });
                return _this.getBackgroundRows(selectedIndices);
            };
            $scope.$watch('currentRowIndex', function () {
                _this.ensureCurrentRowIndexInRange();
                if ($scope.currentRowIndex >= 0 && $scope.scrollControls) {
                    $scope.scrollControls.scrollIntoView($scope.currentRowIndex);
                }
                _this.updateCurrentRowObject();
            });
        }
        DataGridBodyCtrl.prototype.clearActiveRow = function () {
            if (this.activeRow) {
                this.activeRow.removeClass('tb-data-grid-active-row');
                this.activeRow = null;
            }
        };
        DataGridBodyCtrl.prototype.ensureCurrentRowIndexInRange = function () {
            var idx = this.$scope.currentRowIndex;
            if (this.slice && _.isFinite(idx)) {
                idx = Math.min(Math.max(-1, idx), this.slice.total - 1);
                if (this.$scope.alwaysHaveCurrentRow) {
                    idx = Math.max(0, idx);
                }
            }
            else {
                idx = -1;
            }
            this.$scope.currentRowIndex = idx;
        };
        /**
         * Get width of the usable grid area (scrollbar not included)
         */
        DataGridBodyCtrl.prototype.getGridWidth = function () {
            // An optional left margin can be added to the body columns, so we have to take that into account.
            // See tb-data-grid-margin-left.
            var backgroundWidth = this.$element.find('.tb-data-grid-body-background').width();
            var marginWidth = parseInt(this.$element.find('.tb-data-grid-body-columns').css('margin-left'), 10) || 0;
            return backgroundWidth - marginWidth;
        };
        DataGridBodyCtrl.prototype.getBackgroundRow = function (rowIndex) {
            return this.$element.find('.tb-data-grid-row-background').eq(rowIndex);
        };
        DataGridBodyCtrl.prototype.getBackgroundRows = function (rowIndices) {
            return this.$element.find('.tb-data-grid-row-background').filter(function (index) {
                // Note: not using _.contains because it performs a linear search.
                return _.indexOf(rowIndices, index, true) >= 0;
            });
        };
        DataGridBodyCtrl.prototype.updateCurrentRowObject = function () {
            if (!this.slice || this.$scope.currentRowIndex < 0) {
                this.$scope.currentRowObject = null;
            }
            else {
                this.$scope.currentRowObject = this.slice.items[this.$scope.currentRowIndex - this.slice.index];
            }
        };
        DataGridBodyCtrl.$inject = ['$scope', '$element', '$timeout', 'BrowserSupportService'];
        return DataGridBodyCtrl;
    })();
    VizPortal.DataGridBodyCtrl = DataGridBodyCtrl;
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../controllers/DataGridBodyCtrl.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbDataGridBody', function () {
        return {
            restrict: 'E',
            replace: true,
            templateUrl: 'dataGridBody.html',
            scope: {
                cells: '=',
                columnWidths: '=',
                contentWidthsChanged: '&',
                isRowSelected: '&',
                isRowSeparator: '&',
                rowClicked: '&',
                rowHovered: '&',
                rows: '=',
                rowsClickable: '=',
                rowHeight: '=?',
                currentRowIndex: '=?',
                sliceChanged: '&',
                getElementsOfSelectedRows: '=?',
                currentRowObject: '=?',
                alwaysHaveCurrentRow: '=',
                scrollControls: '=?',
                scrollLeftChanged: '&',
                emptyTemplate: '=?',
                emptyTemplateModel: '=?',
                keepColumnWidths: '='
            },
            controller: VizPortal.DataGridBodyCtrl
        };
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    // TODO: rename to tbDataGridRow, and refactor the willRowBeDeleted (line-through) into another directive.
    VizPortal.Module.instance().directive('tbDataGridEditableRow', function () {
        return {
            restrict: 'E',
            replace: true,
            templateUrl: 'dataGridEditableRow.html',
            scope: {
                cells: '=',
                data: '=',
                columnWidths: '=',
                willRowBeDeleted: '=' // boolean representing if we should apply the line-through visual style
            }
        };
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../models/ColumnWidths.ts" />
/// <reference path="../models/ITemplate.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbDataGridHeaders', [
        '$timeout',
        function ($timeout) {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'dataGridHeaders.html',
                scope: {
                    columnWidths: '=',
                    headerClicked: '&',
                    headers: '=',
                    headerWidthsChanged: '&'
                },
                link: function (scope, element) {
                    scope.resize = function (xPos) {
                        scope.$apply(function () {
                            scope.columnWidths.resizer.continueResize(xPos);
                        });
                    };
                    scope.$watch('headers', function (headers) {
                        if (headers && headers.length > 0) {
                            $timeout(function () {
                                var headerWidths = _.map(element.find('.tb-data-grid-header'), function (header) {
                                    var rect = header.getBoundingClientRect();
                                    return Math.ceil(rect.right - rect.left); // to correct for non-integer widths
                                });
                                scope.headerWidthsChanged({ headerWidths: headerWidths });
                            });
                        }
                    });
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../../ts/libs.ts" />
var VizPortal;
(function (VizPortal) {
    var DayCell = (function () {
        function DayCell(day) {
            this.otherMonth = false;
            this.selected = false;
            this.today = false;
            this.day = day;
        }
        DayCell.prototype.dayNumber = function () {
            return this.day.getDate();
        };
        return DayCell;
    })();
    VizPortal.DayCell = DayCell;
})(VizPortal || (VizPortal = {}));
/// <reference path="../../../ts/libs.ts" />
/// <reference path="../../../ts/L10n/L10n.ts" />
/// <reference path="DayCell.ts" />
var VizPortal;
(function (VizPortal) {
    var Calendar = (function () {
        function Calendar(month) {
            // Function to return today's date
            this.today = function () { return new Date(); };
            this.showMonth(month);
        }
        // Useful for testing
        // TODO: maybe use an injected clock instead, which can be easily mocked/stubbed for testing
        Calendar.prototype.setToday = function (today) {
            this.today = function () { return today; };
            this.updateDayCells();
        };
        Calendar.prototype.showMonth = function (date) {
            this.firstDayOfMonth = Calendar.monthOf(date || this.today());
            // TODO: the call to updateDayCells() reconstructs the weeks array, which might be a
            // performance issue.  If so, then optimize to only update the two (max) cells affected.
            this.updateDayCells();
        };
        Calendar.prototype.updateDayCells = function () {
            this.weeks = [];
            var firstDayOfWeek = VizPortal.L10n.firstDayOfWeek();
            var day = new Date(this.firstDayOfMonth.getFullYear(), this.firstDayOfMonth.getMonth(), (1 + firstDayOfWeek) - this.firstDayOfMonth.getDay());
            // Always show exactly six weeks
            for (var weekNumber = 0; weekNumber < 6; weekNumber++) {
                var days = [];
                for (var i = 0; i < 7; i++) {
                    var dayCell = new VizPortal.DayCell(day);
                    dayCell.otherMonth = day.getMonth() !== this.firstDayOfMonth.getMonth();
                    dayCell.selected = this.isSelected(day);
                    dayCell.today = this.isToday(day);
                    days.push(dayCell);
                    day = new Date(day.getFullYear(), day.getMonth(), day.getDate() + 1);
                }
                this.weeks.push(days);
            }
        };
        Calendar.monthOf = function (day) {
            return new Date(day.getFullYear(), day.getMonth(), 1);
        };
        Calendar.isSameDay = function (day1, day2) {
            return day1.getDate() === day2.getDate()
                && day1.getMonth() === day2.getMonth()
                && day1.getFullYear() === day2.getFullYear();
        };
        Calendar.prototype.isToday = function (day) {
            return Calendar.isSameDay(this.today(), day);
        };
        Calendar.prototype.isSelected = function (day) {
            return this.selectedDate && Calendar.isSameDay(this.selectedDate, day);
        };
        Calendar.prototype.select = function (day) {
            this.selectedDate = day;
            this.showMonth(day);
        };
        Calendar.prototype.header = function () {
            return VizPortal.L10n.yearAndMonth(this.firstDayOfMonth);
        };
        Calendar.prototype.dayNames = function () {
            return VizPortal.L10n.narrowDayNames();
        };
        Calendar.prototype.getWeeks = function () {
            return this.weeks;
        };
        Calendar.prototype.showNext = function () {
            this.firstDayOfMonth = new Date(this.firstDayOfMonth.getFullYear(), this.firstDayOfMonth.getMonth() + 1, 1);
            this.updateDayCells();
        };
        Calendar.prototype.showPrevious = function () {
            this.firstDayOfMonth = new Date(this.firstDayOfMonth.getFullYear(), this.firstDayOfMonth.getMonth() - 1, 1);
            this.updateDayCells();
        };
        return Calendar;
    })();
    VizPortal.Calendar = Calendar;
})(VizPortal || (VizPortal = {}));
/// <reference path="../../../ts/libs.ts" />
/// <reference path="../../../ts/Module.ts" />
/// <reference path="Calendar.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbDatePicker', [
        function () {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'datePicker.html',
                scope: {
                    selectedDate: '=',
                    showToday: '@',
                    onSelect: '&'
                },
                link: function (scope) {
                    scope.calendar = new VizPortal.Calendar(scope.selectedDate);
                    scope.prevMonth = function () {
                        scope.calendar.showPrevious();
                    };
                    scope.nextMonth = function () {
                        scope.calendar.showNext();
                    };
                    scope.select = function (date) {
                        scope.selectedDate = date;
                        if (scope.onSelect) {
                            scope.onSelect();
                        }
                    };
                    scope.$watch('selectedDate', function (date) {
                        scope.calendar.select(date);
                    });
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbDaysPicker', [
        function () {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'daysPicker.html',
                require: 'ngModel',
                scope: {},
                link: function (scope, elm, attrs, ctrl) {
                    scope.dayNames = [
                        VizPortal.ServerApi.ScheduleDaysOfTheWeek.Sun,
                        VizPortal.ServerApi.ScheduleDaysOfTheWeek.Mon,
                        VizPortal.ServerApi.ScheduleDaysOfTheWeek.Tue,
                        VizPortal.ServerApi.ScheduleDaysOfTheWeek.Wed,
                        VizPortal.ServerApi.ScheduleDaysOfTheWeek.Thu,
                        VizPortal.ServerApi.ScheduleDaysOfTheWeek.Fri,
                        VizPortal.ServerApi.ScheduleDaysOfTheWeek.Sat
                    ];
                    var selectedDays = [];
                    scope.toggleDay = function (day) {
                        var index = selectedDays.indexOf(day);
                        if (index >= 0) {
                            selectedDays.splice(index, 1);
                        }
                        else {
                            selectedDays.push(day);
                        }
                        ctrl.$setViewValue(selectedDays);
                        ctrl.$render();
                    };
                    scope.isSelected = function (day) { return selectedDays.indexOf(day) >= 0; };
                    function anySelected() {
                        return selectedDays.length > 0;
                    }
                    ctrl.$render = function () {
                        selectedDays = ctrl.$viewValue || [];
                        ctrl.$setValidity('daysPicker', anySelected());
                    };
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    /**
     * Adds 'tb-disabled' class to an element if the tb-disabled expression evaluates to true.
     *
     * If the element specifies a tabindex, remove the tabindex while the element is disabled
     *
     * Usage:
     *
     *   span.tb-outline-button(tb-disabled="isDisabled()")
     *
     */
    VizPortal.Module.instance().directive('tbDisabled', [
        function () {
            return {
                restrict: 'A',
                link: function (scope, element, attr) {
                    var tabindex = element.attr('tabindex');
                    var isTabindexSet = tabindex !== '-1';
                    scope.$watch(attr['tbDisabled'], function (disabled) {
                        // Must coerce to boolean for toggleClass to work correctly
                        var disabled = !!disabled;
                        element.toggleClass('tb-disabled', disabled);
                        element.prop('disabled', disabled);
                        if (isTabindexSet) {
                            if (disabled) {
                                element.removeAttr('tabindex');
                            }
                            else {
                                element.attr('tabindex', tabindex);
                            }
                        }
                    });
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbDisableSelection', [
        function () {
            return {
                restrict: 'C',
                link: function (scope, element) {
                    if (navigator.userAgent.match(/msie/i)) {
                        element.on('selectstart dragstart', function (event) {
                            var selectionParent = $(event.target).closest('.tb-enable-selection, .tb-disable-selection');
                            if (!selectionParent.hasClass('tb-enable-selection')) {
                                event.preventDefault();
                            }
                        });
                    }
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    // TODO: consider making this an Element directive since it has isolate scope.
    VizPortal.Module.instance().directive('tbEditableCapabilityValue', function () {
        return {
            scope: {
                tbEditableCapabilityValue: '='
            },
            link: function (scope, element) {
                element.click(function () {
                    scope.$apply(function () {
                        scope.tbEditableCapabilityValue.permission = getNextCapabilityValue();
                    });
                });
                function getNextCapabilityValue() {
                    switch (scope.tbEditableCapabilityValue.permission) {
                        case VizPortal.Permission.Unspecified:
                            return VizPortal.Permission.Allowed;
                        case VizPortal.Permission.Allowed:
                            return VizPortal.Permission.Denied;
                        case VizPortal.Permission.Denied:
                            return VizPortal.Permission.Unspecified;
                        case VizPortal.Permission.Mixed:
                            return VizPortal.Permission.Allowed;
                    }
                }
            }
        };
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
// This directive displays tags input with edit buttons.  When clicking on the the edit button,
// the tags input and confirmation buttons appear for editing
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbEditableTags', [
        '$state', '$location',
        function ($state, $location) {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'editableTags.html',
                scope: {
                    onBeforeSave: '&'
                },
                require: 'ngModel',
                link: function ($scope, element, attrs, ngModelCtrl) {
                    ngModelCtrl.$render = function () {
                        $scope.tagsWithCounts = _.map(ngModelCtrl.$modelValue, function (tag) {
                            return { name: tag };
                        });
                    };
                    attrs.$observe('readonly', function (attrReadonly) {
                        $scope.readonly = !!attrReadonly;
                        element.toggleClass('tb-readonly', $scope.readonly);
                    });
                    $scope.filterByTag = function (tag) {
                        var newUrl = $state.href(attrs.tagFilterState).slice(1); // slice(1) removes the '#' from the href
                        $location.url(newUrl).search('tag', VizPortal.TagsHelper.unquote(tag));
                    };
                    $scope.edit = function () {
                        $scope.editMode = true;
                        $scope.busy = false;
                        $scope.newTag = '';
                    };
                    $scope.save = function () {
                        $scope.busy = true;
                        var newTags = _.map($scope.tagsWithCounts, function (tag) { return tag.name; });
                        if ($scope.newTag)
                            newTags = _.union(newTags, [VizPortal.TagsHelper.quote($scope.newTag)]);
                        $scope.onBeforeSave({ newTags: newTags }).then(
                        // Success
                        // Success
                        function () {
                            ngModelCtrl.$setViewValue(newTags);
                            ngModelCtrl.$render();
                            $scope.editMode = false;
                            $scope.busy = false;
                            $scope.newTag = '';
                        }, 
                        // Error
                        // Error
                        function () {
                            // TODO: show error message
                            $scope.busy = false;
                        });
                    };
                    $scope.cancel = function () {
                        $scope.editMode = false;
                        $scope.busy = false;
                        $scope.newTag = '';
                        ngModelCtrl.$render(); // Resets tagsWithCounts to match the current model
                    };
                    if (attrs.buttonContainer) {
                        element.find(".tb-editable-tags-input-buttons").appendTo($(attrs.buttonContainer));
                    }
                    $scope.displayTagHtml = VizPortal.TagsHelper.displayTagHtml;
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
// This directive was inspired by http://vitalets.github.io/angular-xeditable/#text-simple
// It displays text and an edit button on hover.  When clicking on the text or the button,
// a text input and confirmation buttons appear for editing
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbEditableText', [
        '$timeout',
        function ($timeout) {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'editableText.html',
                scope: {
                    onBeforeSave: '&',
                    editButtonText: '@',
                    maxlength: '@'
                },
                require: 'ngModel',
                link: function ($scope, element, attrs, ngModelCtrl) {
                    var input = element.find(".tb-edit-text-input");
                    ngModelCtrl.$render = function () {
                        $scope.modelValue = ngModelCtrl.$modelValue;
                        $scope.viewValue = ngModelCtrl.$modelValue;
                    };
                    attrs.$observe('readonly', function (attrReadonly) {
                        $scope.readonly = !!attrReadonly;
                        element.toggleClass('tb-readonly', $scope.readonly);
                    });
                    // When ever the viewValue changes, run the parsers against the newViewValue to validate the newViewValue
                    $scope.$watch(function () { return $scope.viewValue; }, function (newViewValue) {
                        _.forEach(ngModelCtrl.$parsers, function (fn) { return fn(newViewValue); });
                        $scope.invalid = ngModelCtrl.$invalid;
                    });
                    $scope.editable = false;
                    var reset = function () {
                        $scope.editMode = false;
                        $scope.busy = false;
                    };
                    reset();
                    $scope.edit = function () {
                        if ($scope.readonly)
                            return;
                        $scope.editMode = true;
                        $scope.busy = false;
                    };
                    $scope.save = function () {
                        var newText = $scope.viewValue;
                        $scope.busy = true;
                        $scope.onBeforeSave({ newText: newText }).then(
                        // Success
                        // Success
                        function () {
                            ngModelCtrl.$setViewValue(newText);
                            ngModelCtrl.$render();
                            reset();
                        }, 
                        // Error
                        // Error
                        function () {
                            $scope.busy = false;
                            // Reapply focus so the user can edit
                            $timeout(function () { return input.focus(); });
                        });
                    };
                    $scope.cancel = function () {
                        ngModelCtrl.$render(); // Restores the original value
                        $scope.editMode = false;
                    };
                    input.on("keydown", function ($event) {
                        switch ($event.which) {
                            // Save on Enter
                            case VizPortal.Keys.Enter:
                                $scope.$apply(function () { return $scope.save(); });
                                break;
                            // Cancel on escape
                            case VizPortal.Keys.Escape:
                                $scope.$apply(function () { return $scope.cancel(); });
                                break;
                        }
                    });
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var MAX_CHARACTER_LENGTH_DEFAULT = 50000;
    var ViewMode = 'view', EditMode = 'edit', PreviewMode = 'preview';
    VizPortal.Module.instance().directive('tbEditableTextarea', [
        '$timeout',
        function ($timeout) {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'editableTextarea.html',
                scope: {
                    onBeforeSave: '&',
                    disableEditButton: '=?',
                    maxCharacterLength: '=?',
                    disablePreviewMode: '=?',
                    mode: '=?'
                },
                require: 'ngModel',
                link: function ($scope, element, attrs, ctrl) {
                    attrs.$observe('readonly', function (attrReadonly) {
                        $scope.readonly = !!attrReadonly;
                        element.toggleClass('tb-readonly', $scope.readonly);
                    });
                    // If the "button-container" attribute is supplied, move the buttons to that container
                    if (attrs.buttonContainer) {
                        var buttons = element.find(".tb-editable-textarea-buttons");
                        buttons.appendTo($(attrs.buttonContainer));
                    }
                    if (!$scope.maxCharacterLength)
                        $scope.maxCharacterLength = MAX_CHARACTER_LENGTH_DEFAULT;
                    $scope.mode = ViewMode;
                    var textarea = element.find("textarea");
                    $scope.busy = false;
                    ctrl.$render = function () {
                        $scope.text = ctrl.$viewValue;
                    };
                    $scope.edit = function () {
                        if ($scope.readonly)
                            return;
                        if ($scope.mode === ViewMode) {
                            $scope.text = ctrl.$viewValue;
                        }
                        $scope.mode = EditMode;
                        $timeout(function () { return textarea.focus(); });
                    };
                    $scope.preview = function () {
                        $scope.mode = PreviewMode;
                    };
                    $scope.save = function () {
                        $scope.busy = true;
                        var newText = $scope.text;
                        $scope.onBeforeSave({ newText: $scope.text }).then(
                        // Success
                        // Success
                        function () {
                            ctrl.$setViewValue(newText);
                            $scope.mode = ViewMode;
                            $scope.busy = false;
                        }, 
                        // Error
                        // Error
                        function () {
                            // TODO: show error message
                            $scope.busy = false;
                        });
                    };
                    $scope.cancel = function () {
                        $scope.text = ctrl.$viewValue; // Restore the original value
                        $scope.mode = ViewMode;
                    };
                    // Keyboard handling
                    textarea.on("keydown", function ($event) {
                        switch ($event.which) {
                            // Save on Ctrl-Enter
                            case VizPortal.Keys.Enter:
                                if ($event.ctrlKey) {
                                    $scope.$apply(function () { return $scope.save(); });
                                }
                                break;
                            // Cancel on escape
                            case VizPortal.Keys.Escape:
                                $scope.$apply(function () { return $scope.cancel(); });
                                break;
                        }
                    });
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../resources/UserSettings.ts" />
/// <reference path="../services/UserSettingsNotification.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbEditDisplayName', [
        'UpdateUserDisplayNameNotification',
        'UserSettings',
        function (updateUserDisplayNameNotification, userSettings) {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'editDisplayName.html',
                scope: {
                    displayName: '@',
                    controls: '=?'
                },
                link: function (scope) {
                    scope.busy = false;
                    // save original displayName
                    scope.originalDisplayName = scope.displayName;
                    scope.controls = {
                        // make backend request to update the display name
                        submit: function (userId, username) {
                            scope.busy = true;
                            var displayName = scope.displayName;
                            return userSettings.updateUserDisplayName(userId, displayName)
                                .then(function (result) {
                                // toasts
                                updateUserDisplayNameNotification.notify(result, username, displayName);
                                scope.busy = false;
                            });
                        },
                        isBusy: function () {
                            return scope.busy;
                        },
                        // checks whether the field has been changed
                        isDirty: function () {
                            return scope.displayName !== scope.originalDisplayName;
                        },
                        // checks whether the input is valid
                        isValid: function () {
                            return !scope.displayNameForm.$invalid;
                        }
                    };
                }
            };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../resources/UserSettings.ts" />
/// <reference path="../services/UserSettingsNotification.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbEditEmail', [
        'UpdateUserEmailNotification',
        'UserSettings',
        function (updateUserEmailNotification, userSettings) {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'editEmail.html',
                scope: {
                    email: '@',
                    controls: '=?',
                    delayUpdateEmailRequest: '@'
                },
                link: function (scope) {
                    scope.busy = false;
                    // save original displayName
                    scope.originalEmail = scope.email;
                    scope.controls = {
                        // make backend request to update the display name
                        submit: function (userId, username) {
                            scope.busy = true;
                            var email = scope.email;
                            //In certain scenarios, updating a user's email requires updating their username as well
                            //This requires waiting for an index update, so the request should be delayed
                            if (scope.delayUpdateEmailRequest) {
                                return userSettings.updateUserEmailAndDelay(userId, email)
                                    .then(function (result) {
                                    // toasts
                                    updateUserEmailNotification.notify(result, username, email);
                                    scope.busy = false;
                                    return email;
                                });
                            }
                            return userSettings.updateUserEmail(userId, email)
                                .then(function (result) {
                                // toasts
                                updateUserEmailNotification.notify(result, username, email);
                                scope.busy = false;
                                return email;
                            });
                        },
                        isBusy: function () {
                            return scope.busy;
                        },
                        // checks whether the field has been changed
                        isDirty: function () {
                            return scope.email !== scope.originalEmail;
                        },
                        // checks whether the input is valid
                        isValid: function () {
                            return !scope.emailForm.$invalid;
                        }
                    };
                }
            };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbEditLanguageAndLocale', [
        '$q',
        '$state',
        'ChangeLanguageNotification',
        'ChangeLocaleNotification',
        'Languages',
        'Locales',
        'UserSettings',
        'ServerService',
        function ($q, $state, changeLanguageNotification, changeLocaleNotification, languages, locales, userSettings, serverService) {
            return {
                restrict: 'E',
                replace: 'true',
                templateUrl: 'editLanguageAndLocale.html',
                scope: {
                    controls: '=?',
                    serverUser: '=',
                    language: '=?',
                    locale: '=?'
                },
                link: function (scope) {
                    // these are shown as 'Unspecified' in the UI, and tell the server to use the server language/locale for the user.
                    var unspecifiedLanguage = languages.unspecifiedLanguage();
                    var unspecifiedLocale = locales.unspecifiedLocale();
                    // the server returns no language/locale for users that haven't explicitly set one.
                    // we need to map that to the special client-only value 'Unspecified' in the UI.
                    var applyUnspecifiedLanguageIfNecessary = function () {
                        if (!scope.language) {
                            scope.language = unspecifiedLanguage.language;
                        }
                    };
                    var applyUnspecifiedLocaleIfNecessary = function () {
                        if (!scope.locale) {
                            scope.locale = unspecifiedLocale.locale;
                        }
                    };
                    applyUnspecifiedLanguageIfNecessary();
                    applyUnspecifiedLocaleIfNecessary();
                    scope.$watch('language', function () {
                        applyUnspecifiedLanguageIfNecessary();
                    });
                    scope.$watch('locale', function () {
                        applyUnspecifiedLocaleIfNecessary();
                    });
                    scope.model = {
                        language: scope.language,
                        locale: scope.locale
                    };
                    languages.getAll().then(function (langs) {
                        // add unspecified to the list to allow the user to unset their language.
                        langs.unshift(unspecifiedLanguage);
                        scope.languages = langs;
                    });
                    locales.getAll().then(function (locs) {
                        // add unspecified to the list to allow the user to unset their locale
                        locs.unshift(unspecifiedLocale);
                        scope.locales = locs;
                    });
                    var isBusy = false;
                    var isDirty = function () {
                        return isLanguageDirty() || isLocaleDirty();
                    };
                    var isLanguageDirty = function () { return scope.model.language !== scope.language; };
                    var isLocaleDirty = function () { return scope.model.locale !== scope.locale; };
                    var userIsViewingTheirOwnSettings = function () {
                        return serverService.sessionUsername() === scope.serverUser.username
                            && serverService.sessionUserDomainName() === scope.serverUser.domainName;
                    };
                    var maybeShowChangeLanguageNotification = function (maybeUpdatedLanguagePromise) {
                        maybeUpdatedLanguagePromise.then(function (result) {
                            if (!!result) {
                                changeLanguageNotification.notify(result, scope.serverUser.username);
                            }
                        });
                    };
                    var maybeShowChangeLocaleNotification = function (maybeUpdatedLocalePromise) {
                        maybeUpdatedLocalePromise.then(function (result) {
                            if (!!result) {
                                changeLocaleNotification.notify(result, scope.serverUser.username);
                            }
                        });
                    };
                    scope.controls = {
                        save: function () {
                            isBusy = true;
                            var maybeUpdateLanguage = isLanguageDirty() ?
                                userSettings.updateUserLanguage(scope.serverUser.id, scope.model.language) :
                                $q.when(false);
                            var maybeUpdateLocale = isLocaleDirty() ?
                                userSettings.updateUserLocale(scope.serverUser.id, scope.model.locale) :
                                $q.when(false);
                            $q.all([maybeUpdateLanguage, maybeUpdateLocale]).then(function () {
                                // save completed successfully, so update the language and locale on the scope.
                                scope.language = scope.model.language;
                                scope.locale = scope.model.locale;
                                isBusy = false;
                                if (userIsViewingTheirOwnSettings()) {
                                    serverService.refreshSessionInfo().then(function () {
                                        $state.hardReload();
                                        // wait to show toast so that they are rendered in the new language
                                        maybeShowChangeLanguageNotification(maybeUpdateLanguage);
                                        maybeShowChangeLocaleNotification(maybeUpdateLocale);
                                    });
                                }
                                else {
                                    // show toast right away since we are changing for another user
                                    maybeShowChangeLanguageNotification(maybeUpdateLanguage);
                                    maybeShowChangeLocaleNotification(maybeUpdateLocale);
                                }
                            });
                        },
                        canSave: function () { return isDirty() && !isBusy; },
                        isBusy: function () { return isBusy; }
                    };
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/EmailValidationHelper.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbEmailInputValidator', [
        '$timeout',
        function ($timeout) {
            var keystrokeTimeout;
            var DEBOUNCE_MS = 350;
            return {
                restrict: 'A',
                require: 'ngModel',
                link: function (scope, elm, attrs, ctrl) {
                    ctrl.$parsers.push(function (inputEmail) {
                        // empty string = valid
                        var newValidity = !inputEmail || VizPortal.EmailValidationHelper.isValidEmail(inputEmail);
                        if (!newValidity) {
                            // Wait between keystrokes to mark as invalid
                            keystrokeTimeout = $timeout(function () { return ctrl.$setValidity('email', false); }, DEBOUNCE_MS);
                        }
                        else {
                            $timeout.cancel(keystrokeTimeout);
                            ctrl.$setValidity('email', true);
                        }
                        return inputEmail;
                    });
                }
            };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbEmbeddedPassword', [
        '$timeout',
        function ($timeout) {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'embeddedPassword.html',
                scope: {},
                require: 'ngModel',
                link: function ($scope, element, attrs, ctrl) {
                    $scope.passwordRequired = !_.isUndefined(attrs['tbEmbeddedPasswordRequired']);
                    $scope.password = {
                        isEmbedded: undefined,
                        newPassword: ''
                    };
                    var inEditMode = undefined;
                    ctrl.$render = function () {
                        $scope.password.isEmbedded = ctrl.$modelValue.isEmbedded;
                        // Determine initial password edit mode
                        if (_.isUndefined(inEditMode)) {
                            inEditMode = !$scope.password.isEmbedded;
                        }
                        if ($scope.passwordRequired) {
                            $scope.password.isEmbedded = true;
                        }
                    };
                    $scope.inPasswordEditMode = function () {
                        return inEditMode;
                    };
                    $scope.editPassword = function () {
                        inEditMode = true;
                        updateModel();
                    };
                    $scope.focusPasswordBox = function () {
                        $timeout(function () { return element.find(".tb-text-box-input").focus(); });
                    };
                    $scope.$watch('[password.isEmbedded, password.newPassword]', function () { return updateModel(); }, true);
                    function updateModel() {
                        ctrl.$setViewValue({
                            isEmbedded: $scope.password.isEmbedded,
                            newPassword: $scope.password.isEmbedded && inEditMode ? $scope.password.newPassword : VizPortal.PasswordUnchanged
                        });
                    }
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../ts/libs.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var StoreHelpers;
    (function (StoreHelpers) {
        function getAll(sliceable) {
            var deferred = Q.defer();
            var blockSize = 1000;
            var allItems = [];
            function fetchBlock(start) {
                sliceable.getSlice(start, blockSize)
                    .then(function (result) {
                    allItems = allItems.concat(result.items);
                    if (allItems.length < result.total) {
                        fetchBlock(start + blockSize);
                    }
                    else {
                        deferred.resolve(allItems);
                    }
                });
            }
            fetchBlock(0);
            return deferred.promise;
        }
        StoreHelpers.getAll = getAll;
    })(StoreHelpers = VizPortalReact.StoreHelpers || (VizPortalReact.StoreHelpers = {}));
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="StoreHelpers.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var FavoritesStore = (function () {
        function FavoritesStore(favorites) {
            this.favorites = favorites;
        }
        FavoritesStore.prototype.getAll = function () {
            return VizPortalReact.StoreHelpers.getAll(this.favorites.all());
        };
        return FavoritesStore;
    })();
    VizPortalReact.FavoritesStore = FavoritesStore;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../../common/react/FavoritesStore.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbFavoritesMenu', [
        '$translate', 'Favorites',
        function ($translate, favorites) {
            if (VizPortal.FeatureFlags.reactFavoritesMenu) {
                return {
                    restrict: 'E',
                    replace: true,
                    scope: {},
                    link: function (scope) {
                        scope.props = {
                            translate: $translate.instant,
                            favoritesStore: new VizPortalReact.FavoritesStore(favorites)
                        };
                    },
                    template: '<span><tb:react-favorites-menu props="props" /></span>'
                };
            }
            else {
                return {
                    restrict: 'E',
                    replace: true,
                    scope: {},
                    controller: VizPortal.FavoritesMenuCtrl,
                    templateUrl: 'favoritesMenu.html'
                };
            }
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/**
* Favorite toggle for adding and removing favorites
*
* Example:
*   tb:favorite-toggle(ng-model="workbook.favorite", on-add="addFavorite()", on-remove="removeFavorite()")
*
* Attributes:
*   ng-model="workbook.favorite":   Favorite bool to be toggled
*   on-add="addFn()":               Function responsible for calling Favorites service add
*   on-remove="removeFn()":         Function responsible for calling Favorites service remove
*
*/
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbFavoriteToggle', [
        function () {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'favoriteToggle.html',
                scope: {
                    onAdd: '&',
                    onRemove: '&'
                },
                require: 'ngModel',
                link: function ($scope, element, attrs, ngModelCtrl) {
                    $scope.selected = function () { return ngModelCtrl.$viewValue; };
                    $scope.toggle = function ($event) {
                        $event.stopPropagation(); // Prevent list item selection
                        if (ngModelCtrl.$viewValue) {
                            $scope.onRemove();
                        }
                        else {
                            $scope.onAdd();
                        }
                        ngModelCtrl.$setViewValue(!ngModelCtrl.$viewValue);
                    };
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../FeatureFlags.ts" />
var VizPortal;
(function (VizPortal) {
    /*
      usage:
  
        <ELEMENT tb-if-feature-flag="exampleFlag"> I will survive if the exampleFlag flag is true </ELEMENT>
  
        <ELEMENT tb-if-feature-flag="!exampleFlag"> I will survive if the exampleFlag flag is false .</ELEMENT>
  
    */
    VizPortal.Module.instance().directive('tbIfFeatureFlag', [
        function () {
            return {
                link: function (scope, element, attrs) {
                    var negated = attrs.tbIfFeatureFlag.charAt(0) === '!';
                    var flagEnabled = VizPortal.FeatureFlags[attrs.tbIfFeatureFlag.replace('!', '')] || false;
                    var hideElement = flagEnabled === negated;
                    if (hideElement) {
                        element.replaceWith('<!-- Element hidden with flag check: ' + attrs.tbIfFeatureFlag + ' -->');
                    }
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    /**
    * Adds behavior for attaching and handling drag and drop events for user files.
    * Attr value is callback function on file drop event.
    *
    * Example usage:
    *  div(tb-file-drop="onFileDropped(file)")
    *  div(tb-file-drop="onFileDropped()")
    *
    * Style hooks:
    *   '.tb-file-drop-dragging': if user is dragging file over element
    **/
    VizPortal.Module.instance().directive('tbFileDrop', [
        '$parse', '$timeout',
        function ($parse, $timeout) {
            var DRAGGING_CLASS = 'tb-file-drop-dragging';
            return {
                restrict: 'A',
                link: function ($scope, element, attr) {
                    var onDropFn = $parse(attr['tbFileDrop']);
                    var dragLeaveTimeout;
                    var eventNamespace = '.tbFileDrop' + $scope.$id;
                    var doc = angular.element(document);
                    var setDropEffect = function (event, effect) {
                        // Adds OS cursor feedback on some browsers
                        var originalEvent = event.originalEvent;
                        if (originalEvent && originalEvent.dataTransfer) {
                            originalEvent.dataTransfer.dropEffect = effect;
                        }
                    };
                    doc.on('dragenter' + eventNamespace + ' dragover' + eventNamespace, function (event) {
                        event.stopPropagation();
                        event.preventDefault();
                        if ($(event.target).closest(element).length) {
                            $timeout.cancel(dragLeaveTimeout);
                            element.addClass(DRAGGING_CLASS);
                            setDropEffect(event, 'copy');
                        }
                        else {
                            // Outside drop area
                            setDropEffect(event, 'none');
                        }
                    });
                    element.on('dragleave dragend', function (event) {
                        event.stopPropagation();
                        event.preventDefault();
                        $timeout.cancel(dragLeaveTimeout);
                        dragLeaveTimeout = $timeout(function () {
                            element.removeClass(DRAGGING_CLASS);
                        }, 20, false); // 20 ms to avoid flash when dragging from parent (dragleave) to child elm (dragenter)
                    });
                    doc.on('drop' + eventNamespace, function (event) {
                        event.stopPropagation();
                        event.preventDefault();
                        // Dropped file inside drop area
                        if ($(event.target).closest(element).length) {
                            $timeout.cancel(dragLeaveTimeout);
                            element.removeClass(DRAGGING_CLASS);
                            $scope.$apply(function () {
                                var originalEvent = event.originalEvent;
                                if (originalEvent &&
                                    originalEvent.dataTransfer &&
                                    originalEvent.dataTransfer.files &&
                                    originalEvent.dataTransfer.files[0]) {
                                    onDropFn($scope, { file: originalEvent.dataTransfer.files[0] });
                                }
                            });
                        }
                    });
                    element.on('$destroy', function () {
                        doc.off(eventNamespace);
                    });
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var id = 0;
    VizPortal.Module.instance().directive('tbFileInput', [
        function () {
            return {
                restrict: 'E',
                scope: {
                    name: '@',
                    filenameLocalizationKey: '@'
                },
                replace: true,
                templateUrl: 'fileInput.html',
                link: function (scope, element, attr) {
                    scope.required = !!attr.required; // coalesce to boolean because this is used by ng-required
                    scope.fileUploadId = 'file-upload-' + id++;
                    // <input type="file"/> in Angular 1.2.13+ does not update the ngModel attribute.
                    // Set up a listener to manually update the ngModel value.
                    var fileInput = element.find('input[type="file"]');
                    fileInput.change(function () { return scope.$evalAsync(function () {
                        // all browsers, even on mac, use c:\fakepath here
                        // IE will use fake path unless security settings are low enough, in which case it will use the full path
                        // the full path is often too long to display, so we just drop it and keep the filename only.
                        scope.filename = fileInput.val().split('\\').pop(); // remove path, keep only filename
                    }); });
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../FeatureFlags.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/DropdownHelper.ts" />
var VizPortal;
(function (VizPortal) {
    var FilteringListBoxColumnWidths = (function () {
        function FilteringListBoxColumnWidths(options) {
            this.ActiveRowColumnWidth = VizPortal.FeatureFlags.useUpdatedFontStyles ? 20 : 18; // Width of column that contains the active row icon
            this.IconColumnWidth = 26; // Width of icon column, used in favorites menu
            this.widths = [];
            if (options.showActiveRow) {
                this.widths.push(this.ActiveRowColumnWidth);
            }
            if (options.showIcons) {
                this.widths.push(this.IconColumnWidth);
            }
            this.withCounts = options.withCounts;
        }
        FilteringListBoxColumnWidths.prototype.getActual = function (index) {
            return this.widths[index];
        };
        FilteringListBoxColumnWidths.prototype.setWidths = function (currentWidths, containerWidth) {
            var optionalColumnWidths = _.reduce(this.widths, function (total, width) { return (total + width); }, 0);
            var countWidth = this.withCounts ? _.last(currentWidths) : 0;
            optionalColumnWidths += countWidth;
            this.widths.push(containerWidth - optionalColumnWidths, countWidth);
        };
        return FilteringListBoxColumnWidths;
    })();
    /**
     * A list box with a text input that filters the list
     *
     * Usage:
     *
     *    tb:filtering-list-box(source="getSiteNames", item-text="name", model="model")
     *
     * Required Arguments:
     *
     *    source:     (textInput: string) => ISliceable<any>. Sliceable that populates the list.
     *    model:      Bound to selection.
     *
     * Optional Arguments:
     *
     *    item-text:           (propertyName: string) The property to use for the displayed text of the list items.
     *    item-icon:           (propertyName: string) The property to use for the class of the icon column.
     *    match-prefixes-only: (default=true) If true, matches prefix for each token. Else, match substring
     *    on-item-clicked:     Called when the user clicks on a item
     *    is-row-separator:    (row: any) => boolean. Should return true if there should be a separator below this row
     */
    VizPortal.Module.instance().directive('tbFilteringListBox', [
        '$parse', '$timeout', '$translate',
        function ($parse, $timeout, $translate) {
            return {
                restrict: 'E',
                templateUrl: 'filteringListBox.html',
                replace: true,
                scope: {
                    model: '=',
                    onItemClicked: '&'
                },
                link: {
                    pre: function (scope, element, attrs) {
                        scope.matchPrefixesOnly = attrs.matchPrefixesOnly === 'true';
                        scope.showActiveRow = attrs.indicateActiveRow === 'true';
                        scope.showIcons = !!attrs.itemIcon;
                        scope.placeholderText = attrs.placeholderText || $translate.instant('search');
                        scope.getSliceableSource = $parse(attrs.source)(scope.$parent);
                        scope.isActiveRow = $parse(attrs.isActiveRow)(scope.$parent);
                        scope.isRowSeparator = $parse(attrs.isRowSeparator)(scope.$parent);
                        scope.getItemText = function (item) { return '' + (attrs.itemText ? item[attrs.itemText] : item); };
                        scope.getItemIcon = function (item) { return item[attrs.itemIcon]; };
                        if (attrs.tbTestId) {
                            scope.textBoxTestId = attrs.tbTestId + '-textbox';
                        }
                        scope.withCounts = (attrs.withCounts === 'true');
                        scope.rowHeight = VizPortal.FeatureFlags.useTallerRowHeight ? 28 : 23;
                    },
                    post: function (scope, element) {
                        scope.currentRow = {
                            index: 0
                        };
                        scope.rowClicked = function (row) {
                            if (scope.onItemClicked) {
                                scope.onItemClicked({ item: row });
                            }
                            // When the user clicks on a row, re-focus on the input control
                            $timeout(function () { return element.find('input').focus(); });
                        };
                        scope.columnWidths = new FilteringListBoxColumnWidths(scope);
                        // Keep the model in sync with the current row in the data-grid
                        scope.$watch('currentRow.object', function (item) {
                            if (item !== undefined) {
                                scope.model = item;
                            }
                        });
                        scope.$watch('textInput', function (value) {
                            // reload the values in the listbox when the input changes
                            scope.items = scope.getSliceableSource(value || '');
                            // If no row is selected and some text has been entered, select the first row
                            if (value && scope.currentRow.index === -1) {
                                scope.currentRow.index = 0;
                            }
                        });
                        scope.handleKeyEvent = function ($event) {
                            switch ($event.which) {
                                case VizPortal.Keys.ArrowDown:
                                    $event.preventDefault();
                                    scope.currentRow.index++;
                                    break;
                                case VizPortal.Keys.ArrowUp:
                                    $event.preventDefault();
                                    if (scope.currentRow.index > 0) {
                                        scope.currentRow.index--;
                                    }
                                    break;
                            }
                        };
                    }
                }
            };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../../ts/libs.ts" />
/// <reference path="./FocusCtrl.ts" />
var VizPortal;
(function (VizPortal) {
    /**
     * Give an element focus when it is first rendered.
     */
    VizPortal.Module.instance().directive('tbFocus', ['$timeout', 'BrowserSupportService',
        function ($timeout, BrowserSupportService) {
            return {
                restrict: 'A',
                link: function (scope, element, attrs, ctrl) {
                    // Suppress on touch devices, as a keyboard can be very obtrusive
                    if (BrowserSupportService.isTouch())
                        return;
                    // this check is necessary to check for a directive call with no given attribute value
                    if (attrs.tbFocus === "tb-focus")
                        attrs.tbFocus = "true";
                    if (!ctrl.hasFocusElement())
                        ctrl.setFocusElement(element);
                    scope.$watch(attrs.tbFocus, function (value) {
                        if (value) {
                            $timeout(function () { return ctrl.focus(); });
                        }
                    });
                },
                controller: VizPortal.FocusCtrl
            };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../controllers/AlertMenuCtrl.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbFormattingHints', function () {
        return {
            restrict: 'E',
            replace: true,
            scope: {},
            templateUrl: 'formattingHints.html',
            link: function (scope) { }
        };
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbHelpMenu', [
        function () {
            return {
                restrict: 'E',
                replace: true,
                scope: {},
                controller: VizPortal.HelpMenuCtrl,
                templateUrl: 'helpMenu.html'
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    /**
     * Adds 'tb-hidden' class to an element if the tb-hidden expression evaluates to true.
     *
     * Usage:
     *
     *   span.tb-outline-button(tb-hidden="isHidden()")
     *
     */
    VizPortal.Module.instance().directive('tbHidden', [
        function () {
            return {
                restrict: 'A',
                link: function (scope, element, attr) {
                    scope.$watch(attr['tbHidden'], function (hidden) {
                        // Must coerce to boolean for toggleClass to work correctly
                        var hidden = !!hidden;
                        element.toggleClass('tb-hidden', hidden);
                    });
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbIntegerInputValidator', function () {
        return {
            restrict: 'A',
            require: 'ngModel',
            link: function (scope, elm, attrs, ctrl) {
                var INTEGER_REGEXP = /^\-?\d+$/;
                ctrl.$parsers.push(function (inputVal) {
                    ctrl.$setValidity('integer', INTEGER_REGEXP.test(inputVal));
                    return inputVal;
                });
            }
        };
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/LockStatusHelper.ts" />
/// <reference path="../L10n/L10n.ts" />
var VizPortal;
(function (VizPortal) {
    // TODO: Add unit tests for this directive once we have the UX nailed down
    VizPortal.Module.instance().directive('tbLockUnlockProjectPermissions', [
        '$translate',
        'ConfirmActionDialog',
        'SetProjectControlledPermissionsAction',
        function ($translate, confirmActionDialog, SetProjectControlledPermissionsAction) {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'lockUnlockProjectPermissions.html',
                scope: {
                    authorizableType: '=',
                    authorizables: '=',
                    editable: '=',
                    editabilityShortMessage: '=',
                    editabilityLongMessage: '=',
                    lockState: '='
                },
                link: function (scope) {
                    var projects = getProjects();
                    scope.canLockProjectPermissions =
                        function () { return scope.editable && scope.authorizableType === VizPortal.ProjectContentType.name; };
                    scope.isChangeSourceLocked = function () {
                        return scope.lockState !== VizPortal.LockUnlockProjectPermissionsState.Locked &&
                            VizPortal.LockStatusHelper.getCombinedStatusOfAllItems(scope.permissionChangeSource.sources) ===
                                VizPortal.LockUnlockProjectPermissionsState.Locked;
                    };
                    scope.getLockIconClass = function () { return VizPortal.LockStatusHelper.getWhiteLockIconClass(scope.lockState); };
                    scope.buttonText = function () { return $translate.instant(VizPortal.LockStatusHelper.getLockButtonText(scope.lockState)); };
                    // set the default value to 0 so it's not undefined.
                    scope.percentComplete = 0;
                    scope.permissionState = VizPortal.LockUnlockProjectPermissionsState;
                    scope.FeatureFlagProjectControlledPermissionsEnabled =
                        VizPortal.FeatureFlags.projectControlledPermissionsEnabled;
                    scope.permissionsDialogMessage = $translate.instant("lockProjectPermissions_dialogMessage", {
                        PROJECT_COUNT: projects.size(),
                        PROJECT_NAME: VizPortal.L10n.elideIfLong(projects.first().name)
                    }, VizPortal.L10n.Interpolations.Count);
                    scope.warningMessage = $translate.instant("lockProjectPermissionsWarningMessage", { PROJECT_COUNT: projects.size() }, VizPortal.L10n.Interpolations.Count);
                    scope.showConfirmationDialog = function () {
                        scope.permissionChangeSource = { sources: VizPortal.LockStatusHelper.getLockStatusOfAllProjects(projects) };
                        confirmActionDialog.open({
                            title: $translate.instant("lockProjectPermissions_dialogTitle"),
                            bodyTemplateUrl: 'lockUnlockProjectPermissionsDialog.html',
                            scope: scope,
                            position: { reserveHeight: 450 },
                            actionName: $translate.instant("save"),
                            action: function () {
                                // TODO: filter through the projects and only select the ones to update whose
                                // controlledPermissionsEnabled field is the opposite of the chosen permssion source.
                                // This reduces the number of projects we have to update and is particularly useful in the case
                                // that there are mixed projects - i.e. some projects have permissions locked to the project and others
                                // managed by the owner. Additionally, it helps if the user selects the current state of all the projects
                                // since that means we don't have to update anything.
                                SetProjectControlledPermissionsAction.execute(projects, scope.permissionChangeSource.sources, scope)
                                    .then(function (result) {
                                    if (!VizPortal.ResultHelper.hasErrors(result)) {
                                        updateControlledPermissionsEnabled(scope.permissionChangeSource.sources);
                                        scope.lockState = VizPortal.LockStatusHelper.getLockState(projects);
                                    }
                                });
                            },
                            confirmDisabled: function () {
                                var enumState = VizPortal.LockStatusHelper.getCombinedStatusOfAllItems(scope.permissionChangeSource.sources);
                                return enumState === VizPortal.LockUnlockProjectPermissionsState.Mixed || enumState === scope.lockState;
                            },
                            errorMessage: $translate.instant("lockProjectPermissionsError")
                        });
                    };
                    function updateControlledPermissionsEnabled(updatedPermissionSource) {
                        // TODO: ideally you want to look at the server response to see which projects had their permissions
                        // updated and which didn't, but for now this will suffice since the server response is empty for now
                        // and not implemented.
                        var updatedControlledPermissions = _.first(updatedPermissionSource) === VizPortal.LockUnlockProjectPermissionsState.Locked;
                        scope.authorizables.each(function (proj) {
                            if (proj.controlledPermissionsEnabled !== updatedControlledPermissions) {
                                proj.controlledPermissionsEnabled = updatedControlledPermissions;
                            }
                        });
                    }
                    function getProjects() {
                        // TODO: Request information from the server about THE selected project since when we're in the permissions
                        // subplace, the counts related to the selected project don't show up, but when you're in the permissions
                        // dialog they show up.
                        return scope.authorizables;
                    }
                }
            };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbSigningIn', [
        '$interval',
        function ($interval) {
            return {
                restrict: 'E',
                replace: true,
                scope: {},
                templateUrl: 'signingIn.html',
                link: function (scope, element, attributes) {
                    scope.showSigningIn = false;
                    // Display the "Signing in" after a small delay
                    $interval(function () { return scope.showSigningIn = true; }, 1000, 1);
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbMatchingInputsValidator', function () {
        return {
            restrict: 'A',
            require: 'ngModel',
            scope: {
                match: '='
            },
            link: function (scope, elm, attrs, ctrl) {
                scope.$watch(function () {
                    // compare passed in data against the current model value
                    return attrs['matchData'] === ctrl.$modelValue;
                }, function (currentValue) {
                    ctrl.$setValidity('match', currentValue);
                });
            }
        };
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbModeSwitcher', [
        '$location',
        function ($location) {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'modeSwitcher.html',
                scope: {
                    displayMode: '='
                }
            };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbMouseCapture', [
        '$parse',
        function ($parse) {
            return {
                link: function (scope, element, attr) {
                    // TODO: namespace can come from component using this directive.
                    var eventNamespace = '.tbMouseCapture';
                    // Note: $parse(attr[]) is the pattern used by angular directives. Not a binding.
                    var moveFn = $parse(attr['tbMouseCapture']);
                    var downFn = $parse(attr['tbMouseCaptureDown']);
                    var upFn = $parse(attr['tbMouseCaptureUp']);
                    var doc = angular.element(document);
                    element.on('mousedown' + eventNamespace, function (downEvent) {
                        // create an invisible overlay element to prevent other events (such as hover)
                        // from triggering digests while mousedown.  We'll remove this on mouseup.
                        var fillDiv = angular.element('<div>').addClass('tb-fill').appendTo(document.body);
                        // apply the mousedown fn.
                        scope.$apply(function () {
                            downFn(scope, { $event: downEvent });
                        });
                        // register the mousemove fn.
                        doc.on('mousemove' + eventNamespace, function (moveEvent) {
                            moveFn(scope, { $event: moveEvent });
                        });
                        // register the mouseup fn.
                        doc.on('mouseup' + eventNamespace, function (upEvent) {
                            fillDiv.remove();
                            doc.off(eventNamespace);
                            scope.$apply(function () {
                                upFn(scope, { $event: upEvent });
                            });
                        });
                    });
                }
            };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbMousedownOutside', [
        '$parse',
        function ($parse) {
            return {
                link: function (scope, element, attr) {
                    var eventNamespace = '.tbMousedownOutside' + scope.$id;
                    var downOutsideFn = $parse(attr['tbMousedownOutside']);
                    var doc = angular.element(document);
                    var mousedownEvents = 'mousedown' + eventNamespace + ' touchstart' + eventNamespace;
                    doc.on(mousedownEvents, function (downEvent) {
                        var target = $(downEvent.target);
                        if (target.closest(element).length === 0) {
                            scope.$apply(function () {
                                downOutsideFn(scope, { $event: downEvent });
                            });
                        }
                    });
                    element.on('$destroy', function () {
                        doc.off(eventNamespace);
                    });
                }
            };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbMouseTrack', [
        '$parse',
        function ($parse) {
            return {
                link: function (scope, element, attr) {
                    // TODO: namespace can come from component using this directive.
                    var eventNamespace = '.tbMouseTrack';
                    // Note: $parse(attr[]) is the pattern used by angular directives. Not a binding.
                    var moveFn = $parse(attr['tbMouseTrack']);
                    var enterFn = $parse(attr['tbMouseTrackEnter']);
                    var leaveFn = $parse(attr['tbMouseTrackLeave']);
                    element.on('mouseenter' + eventNamespace, function (enterEvent) {
                        enterFn(scope, { $event: enterEvent });
                        element.on('mousemove' + eventNamespace, function (moveEvent) {
                            moveFn(scope, { $event: moveEvent });
                        });
                    });
                    element.on('mouseleave' + eventNamespace, function (leaveEvent) {
                        element.off('mousemove' + eventNamespace);
                        leaveFn(scope, { $event: leaveEvent });
                    });
                }
            };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/Keys.ts" />
/// <reference path="../helpers/Order.ts" />
/// <reference path="../models/OrderKeys.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../resources/Datasources.ts" />
/// <reference path="../resources/Projects.ts" />
/// <reference path="../resources/Users.ts" />
/// <reference path="../resources/Views.ts" />
/// <reference path="../resources/Workbooks.ts" />
/// <reference path="../services/ServerService.ts" />
var VizPortal;
(function (VizPortal) {
    var OmniboxCtrl = (function () {
        function OmniboxCtrl($scope, $state, $location, $translate, $window, server, datasources, projects, users, views, workbooks) {
            var _this = this;
            this.$scope = $scope;
            this.$state = $state;
            this.$location = $location;
            this.$translate = $translate;
            this.$window = $window;
            this.server = server;
            this.datasources = datasources;
            this.projects = projects;
            this.users = users;
            this.views = views;
            this.workbooks = workbooks;
            this.startIndexForType = {};
            var debouncedUpdate = _.debounce(function () {
                _this.$scope.$evalAsync(function () {
                    _this.updateResults();
                });
            }, 200);
            this.$scope.$watch('searchText', function () {
                debouncedUpdate();
            });
            this.$scope.close = function ($event) {
                if ($event && $($event.target).attr('name') === OmniboxCtrl.TextBoxName) {
                    return;
                }
                _this.$scope.clearSearch();
                _this.updateResults();
            };
            this.$scope.keydown = function ($event) {
                switch ($event.which) {
                    case VizPortal.Keys.ArrowUp:
                        if (_this.selectedIndex > 0) {
                            _this.selectedIndex--;
                        }
                        else {
                            _this.selectedIndex = _this.maxSelectedIndex;
                        }
                        break;
                    case VizPortal.Keys.ArrowDown:
                        if (_this.selectedIndex < _this.maxSelectedIndex) {
                            _this.selectedIndex++;
                        }
                        else {
                            _this.selectedIndex = Math.min(0, _this.maxSelectedIndex);
                        }
                        break;
                    // TODO: Close the results box when esc is pressed
                    case VizPortal.Keys.Enter:
                        if (_this.selectedIndex >= 0) {
                            var href = $('.tb-omnibox-results').find('.tb-omnibox-menu-item.tb-selected').attr('href');
                            if (href.charAt(0) === '#') {
                                href = href.slice(1);
                            }
                            _this.$location.url(href);
                            _this.$scope.close();
                        }
                        break;
                    case VizPortal.Keys.Escape:
                        _this.$scope.close();
                        break;
                }
                ;
            };
            this.$scope.isItemSelected = function (type, index) {
                return _this.startIndexForType[type] + index === _this.selectedIndex;
            };
            this.$scope.selectItem = function (type, index) {
                if (!type || !_.isNumber(index))
                    return;
                _this.selectedIndex = _this.startIndexForType[type] + index;
            };
            this.$scope.itemHref = function (state, params) {
                return _this.$state.href(state, params);
            };
            this.$scope.seeAllHref = function (state) {
                return _this.$state.href(state) + '?search=' + encodeURIComponent(_this.$scope.searchText);
            };
            this.$scope.showSeeAll = function (list, type) {
                return list.total > OmniboxCtrl.MaxResultsPerType
                    && !(type === 'users' && !server.isSessionSiteOrServerAdmin());
            };
            this.$scope.tooltipForDataSource = function (datasource) {
                return _this.$translate.instant('itemWithProject', { ITEM: datasource.name, PROJECT: datasource.project.name });
            };
            this.$scope.tooltipForView = function (view) {
                return _this.$translate.instant('viewWithWorkbook', { VIEW: view.name, WORKBOOK: view.workbook.name });
            };
            this.$scope.tooltipForWorkbook = function (workbook) {
                return _this.$translate.instant('itemWithProject', { ITEM: workbook.name, PROJECT: workbook.project.name });
            };
            this.$scope.maxResultsPerType = OmniboxCtrl.MaxResultsPerType;
            var windowElement = $(this.$window);
            this.$scope.popupMaxHeight = function () {
                return windowElement.height() - OmniboxCtrl.SpaceLeftWhenMaxHeight;
            };
            this.$scope.clearSearch = function () { return _this.$scope.searchText = ''; };
            this.$scope.textBoxName = OmniboxCtrl.TextBoxName;
        }
        OmniboxCtrl.prototype.updateResults = function () {
            var _this = this;
            if (!!this.$scope.searchText) {
                var requestProgress = {
                    pendingRequests: 5,
                    totalResults: 0
                };
                this.currentRequestProgress = requestProgress;
                var updateProgress = function (result) {
                    if (_this.currentRequestProgress === requestProgress) {
                        requestProgress.totalResults += result.total;
                        requestProgress.pendingRequests--;
                        if (requestProgress.pendingRequests === 0) {
                            _this.currentRequestProgress = null;
                            _this.$scope.showResults = (requestProgress.totalResults > 0);
                            _this.$scope.showNoResults = !_this.$scope.showResults;
                            _this.updateStartIndexes();
                            _this.selectedIndex = -1;
                            _this.maxSelectedIndex = requestProgress.totalResults > 0
                                ? _this.startIndexForType['users'] + _this.itemsForType(_this.$scope.users) - 1
                                : -1;
                        }
                    }
                };
                this.updateType(this.datasources.published(), VizPortal.OrderKeys.name, VizPortal.Order.asc, function (result) { _this.$scope.datasources = result; updateProgress(result); });
                this.updateType(this.projects.all(), VizPortal.OrderKeys.name, VizPortal.Order.asc, function (result) { _this.$scope.projects = result; updateProgress(result); });
                this.updateType(this.users.all(), VizPortal.OrderKeys.displayName, VizPortal.Order.asc, function (result) { _this.$scope.users = result; updateProgress(result); });
                if (VizPortal.FeatureFlags.contentAnalyticsEnabled) {
                    this.updateType(this.views.all(), VizPortal.OrderKeys.relevancy, VizPortal.Order.desc, function (result) { _this.$scope.views = result; updateProgress(result); });
                    this.updateType(this.workbooks.all(), VizPortal.OrderKeys.relevancy, VizPortal.Order.desc, function (result) { _this.$scope.workbooks = result; updateProgress(result); });
                }
                else {
                    this.updateType(this.views.all(), VizPortal.OrderKeys.name, VizPortal.Order.asc, function (result) { _this.$scope.views = result; updateProgress(result); });
                    this.updateType(this.workbooks.all(), VizPortal.OrderKeys.name, VizPortal.Order.asc, function (result) { _this.$scope.workbooks = result; updateProgress(result); });
                }
            }
            else {
                this.$scope.datasources = VizPortal.ListResult.empty();
                this.$scope.projects = VizPortal.ListResult.empty();
                this.$scope.users = VizPortal.ListResult.empty();
                this.$scope.views = VizPortal.ListResult.empty();
                this.$scope.workbooks = VizPortal.ListResult.empty();
                this.$scope.showResults = false;
                this.$scope.showNoResults = false;
                this.updateStartIndexes();
                this.selectedIndex = -1;
                this.maxSelectedIndex = -1;
            }
        };
        OmniboxCtrl.prototype.updateType = function (query, sortField, order, updateFn) {
            query
                .addFilter(VizPortal.Filter.search(this.$scope.searchText))
                .withOrder([order(sortField)])
                .getSlice(0, OmniboxCtrl.MaxResultsPerType)
                .then(function (result) {
                updateFn(result);
            });
        };
        OmniboxCtrl.prototype.updateStartIndexes = function () {
            this.startIndexForType['views'] = 0;
            this.startIndexForType['workbooks'] = this.startIndexForType['views'] + this.itemsForType(this.$scope.views);
            this.startIndexForType['datasources'] = this.startIndexForType['workbooks'] + this.itemsForType(this.$scope.workbooks);
            this.startIndexForType['projects'] = this.startIndexForType['datasources'] + this.itemsForType(this.$scope.datasources);
            this.startIndexForType['users'] = this.startIndexForType['projects'] + this.itemsForType(this.$scope.projects);
        };
        OmniboxCtrl.prototype.itemsForType = function (list) {
            if (VizPortal.FeatureFlags.contentAnalyticsEnabled) {
                // TODO: Give keyboard support for the "see all" option
                return list.total > OmniboxCtrl.MaxResultsPerType ? OmniboxCtrl.MaxResultsPerType : list.items.length;
            }
            else {
                return list.total > OmniboxCtrl.MaxResultsPerType ? OmniboxCtrl.MaxResultsPerType + 1 : list.items.length;
            }
        };
        OmniboxCtrl.MaxResultsPerType = 5;
        OmniboxCtrl.SpaceLeftWhenMaxHeight = 100;
        OmniboxCtrl.TextBoxName = 'omniboxTextBox';
        OmniboxCtrl.$inject = [
            '$scope',
            '$state',
            '$location',
            '$translate',
            '$window',
            'ServerService',
            'DataSources',
            'Projects',
            'Users',
            'Views',
            'Workbooks'
        ];
        return OmniboxCtrl;
    })();
    VizPortal.OmniboxCtrl = OmniboxCtrl;
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../controllers/OmniboxCtrl.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbOmnibox', function () {
        var templateUrl = VizPortal.FeatureFlags.contentAnalyticsEnabled
            ? 'omniboxContentAnalytics.html' : 'omnibox.html';
        return {
            restrict: 'E',
            replace: true,
            templateUrl: templateUrl,
            scope: {},
            controller: VizPortal.OmniboxCtrl
        };
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../controllers/PermissionsPanelCtrl.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbPermissionsPanel', function () {
        if (VizPortal.FeatureFlags.projectControlledPermissionsEnabled) {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'permissionsPanel.html',
                scope: {
                    authorizableType: '=',
                    authorizables: '=',
                    templateType: '=',
                    showPrompt: '='
                },
                controller: VizPortal.PermissionsPanelCtrl
            };
        }
        else {
            // TODO: The feature flag deprecates the readOnly and permissionsInfoMessage scope bindings;
            // remove them from permissionsDialog.jade when the flag is killed
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'permissionsPanelWithoutPCP.html',
                scope: {
                    authorizableType: '=',
                    authorizables: '=',
                    permissionsInfoMessage: '=',
                    readOnly: '&',
                    templateType: '='
                },
                controller: VizPortal.PermissionsPanelCtrl
            };
        }
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../FeatureFlags.ts" />
/// <reference path="../controllers/PermissionRuleEditorCtrl.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbPermissionRuleEditor', [
        '$compile', '$q', 'PermissionRoles',
        function ($compile, $q, permissionRoles) {
            return {
                restrict: 'E',
                controller: VizPortal.PermissionRuleEditorCtrl,
                require: 'tbPermissionRuleEditor',
                scope: {
                    action: '=',
                    updateAuthorizables: '&',
                    hideRowMenu: '&',
                    // the column widths in the editable row are based on the column widths of the underlying permissions panel
                    permissionsPanelColumnWidths: '=columnWidths',
                    authorizables: '=',
                    getPositionElement: '=',
                    selectedRow: '=row',
                    // used to control expand/collapse of section groups
                    accordion: '='
                },
                link: function (scope, element, attributes, controller) {
                    var authorizableType = scope.authorizables.type;
                    var positionElement = scope.getPositionElement();
                    scope.$watch('selectedRow', function () {
                        controller.initializeFromSelectedRow();
                        positionEditor();
                    });
                    function positionEditor() {
                        var positionElement = scope.getPositionElement();
                        var position = positionElement.position();
                        var dimensions = {
                            height: positionElement.height(),
                            width: positionElement.width()
                        };
                        permissionRuleEditor.css({
                            top: position.top,
                            left: position.left,
                            height: dimensions.height,
                            width: dimensions.width
                        });
                    }
                    var explicitPermissionsScrollContent = positionElement.parents('.tb-scroll-content-area');
                    var effectivePermissionsScrollContent = element.parents('.tb-permissions-container')
                        .find('.tb-effective-permissions-container .tb-scroll-content-area');
                    // add backdrop to explicit permissions panel
                    var explicitPermissionsBackdrop = $('<div>')
                        .addClass('tb-backdrop-white').appendTo(explicitPermissionsScrollContent);
                    // add backdrop to effective permissions panel
                    var effectivePermissionsBackdrop = $('<div>')
                        .addClass('tb-backdrop-white').appendTo(effectivePermissionsScrollContent);
                    // Render the editor inside of the selected row's datagrid.
                    // Note: ng-include can't be on the top level dom element because it replaces itself with the template
                    var permissionRuleEditor = $('<div>')
                        .addClass('tb-permission-rule-editor')
                        .append($('<div>')
                        .attr({ 'ng-include': '"permissionRuleEditor.html"' }))
                        .appendTo(explicitPermissionsScrollContent);
                    $compile(permissionRuleEditor)(scope);
                    scope.$on('$destroy', function () {
                        permissionRuleEditor.remove();
                        explicitPermissionsBackdrop.remove();
                        effectivePermissionsBackdrop.remove();
                    });
                    // populate the options in the role dropdown.
                    // TODO: cache these
                    scope.roleOptions = function (contentType) { return permissionRoles.getAvailableRolesForType(contentType); };
                    // must be nested to avoid the dot problem
                    scope.templates = {
                        cells: null // initialized by permissionRuleEditor.jade
                    };
                    scope.isDeleteActionSelected = function () {
                        return scope.action === VizPortal.L10n.Keys.delete_ ||
                            _.every(_.values(scope.selectedRoleByContentType), function (role) { return role === VizPortal.L10n.Keys.none; });
                    };
                    scope.getSavePermissionRuleTranslationID = function () {
                        if (scope.isDeleteActionSelected()) {
                            return VizPortal.L10n.Keys.delete_;
                        }
                        else {
                            return VizPortal.L10n.Keys.save;
                        }
                    };
                    scope.savePermissionRule = function () {
                        controller.savePermissionRule();
                    };
                    scope.getTooltipText = function ($event) { return controller.getTooltipText($event); };
                    scope.saveDisabled = function () { return controller.saveDisabled(); };
                    scope.cancel = function () {
                        var maybeUpdateAuthorizables = $q.when();
                        if (scope.action === VizPortal.PermissionRuleEditorCommands.add) {
                            // the new row as already been inserted in the permissions panel, so
                            // trigger a refresh to clean it up.
                            maybeUpdateAuthorizables = scope.updateAuthorizables();
                        }
                        maybeUpdateAuthorizables.then(function () { return scope.hideRowMenu(); });
                    };
                    _.each(_.keys(scope.selectedRoleByContentType), function (contentType) {
                        scope.$watch('selectedRoleByContentType' + '["' + contentType + '"]', function (role) {
                            if (!role || role === VizPortal.L10n.Keys.custom)
                                return;
                            if (VizPortal.FeatureFlags.projectPermissionsTemplatesEnabled) {
                                scope.data.row.permissionsByContentType[contentType] = controller.getCapabilitiesForTypeAndRole(contentType, role);
                            }
                            else {
                                scope.data.row.permissions = controller.getCapabilitiesForRole(role);
                            }
                        });
                        // update permission role when individual permissions change
                        if (VizPortal.FeatureFlags.projectPermissionsTemplatesEnabled) {
                            scope.$watch('data.row.permissionsByContentType' + '["' + contentType + '"]', function (newPermissions) {
                                var permissions = VizPortal.PermissionsHelper.PermissionsFromIPermissions(newPermissions);
                                scope.selectedRoleByContentType[contentType] = permissionRoles.getExplicitRoleForTypeAndPermissions(contentType, permissions);
                            }, true);
                        }
                    });
                    // update permission role when individual permissions change
                    if (!VizPortal.FeatureFlags.projectPermissionsTemplatesEnabled) {
                        scope.$watch('data.row.permissions', function () {
                            // TODO: move to a helper or refactor so we don't have to do this conversion.
                            var permissions = VizPortal.PermissionsHelper.PermissionsFromIPermissions(scope.data.row.permissions);
                            scope.selectedRoleByContentType[authorizableType] = permissionRoles.getExplicitRoleForTypeAndPermissions(authorizableType, permissions);
                        }, true);
                    }
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbPlaceDescription', [
        '$state',
        function ($state) {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'placeDescription.html',
                scope: {
                    type: '@',
                    id: '=',
                    description: '='
                },
                link: function (scope, element) {
                    var holderElement = element.find('.tb-place-description-text-holder');
                    scope.showReadMore = function () {
                        return holderElement.get(0).scrollWidth > holderElement.width()
                            && !$state.includes('**.details'); // Do not show link on details tab
                    };
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    (function (Corner) {
        Corner[Corner["TopLeft"] = 0] = "TopLeft";
        Corner[Corner["TopRight"] = 1] = "TopRight";
        Corner[Corner["BottomLeft"] = 2] = "BottomLeft";
        Corner[Corner["BottomRight"] = 3] = "BottomRight";
    })(VizPortal.Corner || (VizPortal.Corner = {}));
    var Corner = VizPortal.Corner;
    var StackedElement = (function () {
        function StackedElement(positionCorner, positionElement, contentCorner, contentElement) {
            var _this = this;
            this.positionCorner = positionCorner;
            this.positionElement = positionElement;
            this.contentCorner = contentCorner;
            this.contentElement = contentElement;
            this.rendered = false;
            // Binds updateContentElementPosition to this StackedElement instance and is a handle used to remove listeners
            this.updatePositionListener = function () {
                if (_this.scope) {
                    _this.scope.$evalAsync(function () { return _this.updateContentElementPosition(); });
                }
                else {
                    _this.updateContentElementPosition();
                }
            };
            this.positionElement.parents().on('scroll', this.updatePositionListener);
            $(window).on('resize', this.updatePositionListener);
            this.updateContentElementPosition();
        }
        StackedElement.prototype.setScope = function (scope) {
            this.scope = scope;
        };
        StackedElement.prototype.destroy = function () {
            // Assumes the position element was never detached
            this.positionElement.parents().off('scroll', this.updatePositionListener);
            $(window).off('resize', this.updatePositionListener);
        };
        StackedElement.prototype.getPositionX = function (positionCorner, positionOffset, positionSize) {
            switch (positionCorner) {
                case Corner.TopLeft:
                case Corner.BottomLeft:
                    return positionOffset.left;
                case Corner.TopRight:
                case Corner.BottomRight:
                    return positionOffset.left + positionSize.width;
            }
        };
        StackedElement.prototype.getPositionY = function (positionCorner, positionOffset, positionSize) {
            switch (positionCorner) {
                case Corner.TopLeft:
                case Corner.TopRight:
                    return positionOffset.top;
                case Corner.BottomLeft:
                case Corner.BottomRight:
                    return positionOffset.top + positionSize.height;
            }
        };
        StackedElement.prototype.getContentLeft = function (contentCorner, positionX, contentSize) {
            switch (contentCorner) {
                case Corner.TopLeft:
                case Corner.BottomLeft:
                    return positionX;
                case Corner.TopRight:
                case Corner.BottomRight:
                    return positionX - contentSize.width;
            }
        };
        StackedElement.prototype.getContentTop = function (contentCorner, positionY, contentSize) {
            switch (contentCorner) {
                case Corner.TopLeft:
                case Corner.TopRight:
                    return positionY;
                case Corner.BottomLeft:
                case Corner.BottomRight:
                    return positionY - contentSize.height;
            }
        };
        StackedElement.prototype.flipVertical = function (corner) {
            switch (corner) {
                case Corner.TopLeft: return Corner.BottomLeft;
                case Corner.TopRight: return Corner.BottomRight;
                case Corner.BottomLeft: return Corner.TopLeft;
                case Corner.BottomRight: return Corner.TopRight;
            }
        };
        StackedElement.prototype.flipHorizontal = function (corner) {
            switch (corner) {
                case Corner.TopLeft: return Corner.TopRight;
                case Corner.TopRight: return Corner.TopLeft;
                case Corner.BottomLeft: return Corner.BottomRight;
                case Corner.BottomRight: return Corner.BottomLeft;
            }
        };
        StackedElement.prototype.contentWidth = function () {
            var width = this.contentElement.outerWidth();
            this.rendered = width > 0;
            return width;
        };
        StackedElement.prototype.contentHeight = function () {
            var height = this.contentElement.outerHeight();
            this.rendered = height > 0;
            return height;
        };
        StackedElement.prototype.calculateDisplayPosition = function (positionCorner, positionSize, positionOffset, contentCorner, contentSize) {
            var positionX = this.getPositionX(positionCorner, positionOffset, positionSize);
            var positionY = this.getPositionY(positionCorner, positionOffset, positionSize);
            var contentLeft = this.getContentLeft(contentCorner, positionX, contentSize);
            var contentTop = this.getContentTop(contentCorner, positionY, contentSize);
            return { left: contentLeft, top: contentTop };
        };
        StackedElement.prototype.invalidHorizontalPosition = function (position, contentWidth, windowWidth) {
            return position.left < 0 || position.left > (windowWidth - contentWidth)
                || position.right < 0 || position.right > (windowWidth - contentWidth);
        };
        StackedElement.prototype.invalidVerticalPosition = function (position, contentHeight, windowHeight) {
            return position.top < 0 || position.top > (windowHeight - contentHeight)
                || position.bottom < 0 || position.bottom > (windowHeight - contentHeight);
        };
        StackedElement.prototype.getContentSize = function () {
            var contentSize = {
                height: this.contentElement.outerHeight(),
                width: this.contentElement.outerWidth()
            };
            this.rendered = (contentSize.height > 0) && (contentSize.width > 0);
            return contentSize;
        };
        StackedElement.prototype.getPositionSize = function () {
            return {
                height: this.positionElement.outerHeight(),
                width: this.positionElement.outerWidth()
            };
        };
        StackedElement.prototype.getWindowSize = function () {
            return {
                height: $(window).height(),
                width: $(window).width()
            };
        };
        StackedElement.prototype.updateContentElementPosition = function () {
            var _this = this;
            // Initialize size variables
            var positionCorner = this.positionCorner;
            var positionSize = this.getPositionSize();
            var positionOffset = this.positionElement.offset();
            var contentCorner = this.contentCorner;
            var contentSize = this.getContentSize();
            var windowSize = this.getWindowSize();
            // Initialize helper functions
            var calculatePosition = function () { return _this.calculateDisplayPosition(positionCorner, positionSize, positionOffset, contentCorner, contentSize); };
            var flipHorizontal = function () {
                positionCorner = _this.flipHorizontal(positionCorner);
                contentCorner = _this.flipHorizontal(contentCorner);
                cornerPosition = calculatePosition();
            };
            var flipVertical = function () {
                positionCorner = _this.flipVertical(positionCorner);
                contentCorner = _this.flipVertical(contentCorner);
                cornerPosition = calculatePosition();
            };
            // Logic
            var cornerPosition = calculatePosition();
            if (this.invalidHorizontalPosition(cornerPosition, contentSize.width, windowSize.width)) {
                flipHorizontal();
                // If flipping to the opposite the corner didn't help, then flip back the preferred corner
                if (this.invalidHorizontalPosition(cornerPosition, contentSize.width, windowSize.width)) {
                    flipHorizontal();
                }
            }
            if (this.invalidVerticalPosition(cornerPosition, contentSize.height, windowSize.height)) {
                flipVertical();
                // If flipping to the opposite the corner didn't help, then flip back the preferred corner
                if (this.invalidVerticalPosition(cornerPosition, contentSize.height, windowSize.height)) {
                    flipVertical();
                }
            }
            this.cornerPosition = cornerPosition;
            return cornerPosition;
        };
        StackedElement.prototype.getContentElementPosition = function () {
            if (!this.rendered)
                this.updateContentElementPosition();
            return this.cornerPosition;
        };
        return StackedElement;
    })();
    VizPortal.StackedElement = StackedElement;
    var StackedElementsService = (function () {
        function StackedElementsService() {
            this.stackedElements = [];
        }
        StackedElementsService.prototype.createStackedElement = function (positionCorner, positionElement, contentCorner, contentElement) {
            return this.addStackedElement(new StackedElement(positionCorner, positionElement, contentCorner, contentElement));
        };
        StackedElementsService.prototype.addStackedElement = function (element) {
            this.stackedElements.push(element);
            return element;
        };
        StackedElementsService.prototype.removeStackedElement = function (element) {
            var index = _.indexOf(this.stackedElements, element);
            if (index !== -1) {
                this.stackedElements.splice(index, 1);
            }
        };
        StackedElementsService.$inject = [];
        return StackedElementsService;
    })();
    VizPortal.StackedElementsService = StackedElementsService;
    VizPortal.Module.instance().service('StackedElementsService', StackedElementsService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../services/StackedElementsService.ts" />
var VizPortal;
(function (VizPortal) {
    var Popup = (function () {
        function Popup(getPositionElement, getContentElement, stackedElementsService) {
            this.getPositionElement = getPositionElement;
            this.getContentElement = getContentElement;
            this.stackedElementsService = stackedElementsService;
        }
        Popup.prototype.show = function (positionCorner, contentCorner) {
            this.stackedElement = this.stackedElementsService.createStackedElement(positionCorner, this.getPositionElement(), contentCorner, this.getContentElement());
        };
        Popup.prototype.hide = function () {
            this.stackedElementsService.removeStackedElement(this.stackedElement);
        };
        return Popup;
    })();
    VizPortal.Popup = Popup;
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../models/Popup.ts" />
/// <reference path="../services/StackedElementsService.ts" />
var VizPortal;
(function (VizPortal) {
    var PopupCtrl = (function () {
        function PopupCtrl($scope, $element, $transclude, stackedElementService) {
            this.scope = $scope;
            var getPositionElement = function () {
                return _.isFunction($scope.getPositionElement) ? $scope.getPositionElement() : $element;
            };
            this.popup = new VizPortal.Popup(getPositionElement, function () { return $transclude(function (clone) { return clone; }); }, stackedElementService);
        }
        PopupCtrl.prototype.hidePopup = function () {
            this.scope.show = false;
        };
        PopupCtrl.$inject = [
            '$scope',
            '$element',
            '$transclude',
            'StackedElementsService'
        ];
        return PopupCtrl;
    })();
    VizPortal.PopupCtrl = PopupCtrl;
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../controllers/PopupCtrl.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbPopup', [
        function () {
            return {
                restrict: 'E',
                transclude: true,
                replace: true,
                template: '<div class="tb-popup"></div>',
                scope: {
                    show: '=',
                    positionCorner: '@',
                    contentCorner: '@',
                    getPositionElement: '=?'
                },
                controller: VizPortal.PopupCtrl,
                link: function (scope, element, attributes, controller) {
                    var popup = controller.popup;
                    function cornerFromString(cornerString) {
                        switch (cornerString) {
                            case 'tl': return VizPortal.Corner.TopLeft;
                            case 'tr': return VizPortal.Corner.TopRight;
                            case 'bl': return VizPortal.Corner.BottomLeft;
                            case 'br': return VizPortal.Corner.BottomRight;
                        }
                    }
                    scope.$watch('show', function (show) {
                        if (popup) {
                            if (show) {
                                popup.show(cornerFromString(scope.positionCorner), cornerFromString(scope.contentCorner));
                            }
                            else {
                                popup.hide();
                            }
                        }
                    });
                    element.on('$destroy', function () {
                        if (popup) {
                            popup.hide();
                        }
                    });
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../helpers/Keys.ts" />
var VizPortal;
(function (VizPortal) {
    var PopupMenuCtrl = (function () {
        function PopupMenuCtrl($element, $scope) {
            this.$element = $element;
            this.contentMatchButtonWidth = false;
            this._open = false;
            this.scope = $scope;
            this.scope.popupMenu = this;
        }
        PopupMenuCtrl.prototype.setButton = function (button) {
            this.button = button;
        };
        PopupMenuCtrl.prototype.getButtonWidth = function () {
            return this.button.outerWidth();
        };
        PopupMenuCtrl.prototype.setContent = function (content) {
            this.content = content;
        };
        PopupMenuCtrl.prototype.getContent = function () {
            return this.content;
        };
        PopupMenuCtrl.prototype.getContentScope = function () {
            var _this = this;
            return {
                popupMenu: {
                    button: this.button,
                    close: function () { return _this.close(); }
                }
            };
        };
        PopupMenuCtrl.prototype.isUp = function () {
            switch (this.scope.direction) {
                case 'dr':
                case 'dl':
                default:
                    return false;
                case 'ur':
                case 'ul':
                    return true;
            }
        };
        PopupMenuCtrl.prototype.positionCorner = function () {
            switch (this.scope.direction) {
                case 'dr':
                default:
                    return 'bl';
                case 'dl':
                    return 'br';
                case 'ur':
                    return 'tl';
                case 'ul':
                    return 'tr';
            }
        };
        PopupMenuCtrl.prototype.contentCorner = function () {
            switch (this.scope.direction) {
                case 'dr':
                default:
                    return 'tl';
                case 'dl':
                    return 'tr';
                case 'ur':
                    return 'bl';
                case 'ul':
                    return 'br';
            }
        };
        PopupMenuCtrl.prototype.isDisabled = function () {
            // If disabled is undefined, then default to enabled.
            return this.scope.disabled === true;
        };
        PopupMenuCtrl.prototype.isOpen = function () {
            return this._open;
        };
        PopupMenuCtrl.prototype.keydown = function ($event) {
            if (this.isDisabled()) {
                return;
            }
            switch ($event.which) {
                case VizPortal.Keys.Enter:
                    this.toggle();
                    $event.stopPropagation(); // Prevents Enter from closing containing dialog (if any)
                    break;
                case VizPortal.Keys.Space:
                    if (!this._open) {
                        this.open();
                    }
                    break;
            }
        };
        PopupMenuCtrl.prototype.toggle = function () {
            if (!this.isDisabled()) {
                if (this._open) {
                    this.close();
                }
                else {
                    this.open();
                }
            }
        };
        PopupMenuCtrl.prototype.open = function () {
            this._open = true;
            this.contentWidth = this.contentMatchButtonWidth ? this.getButtonWidth() : null;
            this.scope.opened({ closeFn: angular.bind(this, this.close) });
        };
        /*
        focusElement - the JQuery element to focus on after this popup has closed.
        Default is the button used to open the popup.
        */
        PopupMenuCtrl.prototype.close = function (focusElement) {
            if (focusElement === void 0) { focusElement = this.$element; }
            this._open = false;
            this.scope.closed();
            focusElement.focus();
        };
        PopupMenuCtrl.prototype.mousedownOutside = function (downEvent) {
            var target = $(downEvent.target);
            if (target.closest(this.button).length === 0) {
                this.close(target); //focus should be placed wherever the user clicks.
            }
        };
        PopupMenuCtrl.$inject = [
            '$element',
            '$scope'
        ];
        return PopupMenuCtrl;
    })();
    VizPortal.PopupMenuCtrl = PopupMenuCtrl;
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../controllers/PopupMenuCtrl.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbPopupMenu', [
        function () {
            return {
                restrict: 'E',
                replace: true,
                require: '?tbDisabled',
                transclude: true,
                templateUrl: 'popupMenu.html',
                scope: {
                    direction: '@',
                    disabled: '=tbDisabled',
                    opened: '&',
                    closed: '&'
                },
                controller: VizPortal.PopupMenuCtrl
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../controllers/PopupMenuCtrl.ts" />
var VizPortal;
(function (VizPortal) {
    var buttons = [
        { name: 'tbPopupMenuButton', templateUrl: 'popupMenuButton.html' },
        { name: 'tbPopupMenuCustomButton', templateUrl: 'popupMenuCustomButton.html' },
        { name: 'tbPopupMenuSignatureButton', templateUrl: 'popupMenuSignatureButton.html' },
        { name: 'tbPopupMenuTextButton', templateUrl: 'popupMenuTextButton.html' }
    ];
    _.each(buttons, function (button) {
        VizPortal.Module.instance().directive(button.name, function () {
            return {
                restrict: 'E',
                replace: true,
                transclude: true,
                templateUrl: button.templateUrl,
                scope: {},
                require: '^tbPopupMenu',
                link: function (scope, element, attributes, popupMenuCtrl) {
                    popupMenuCtrl.setButton(element);
                    scope.popupMenu = popupMenuCtrl;
                }
            };
        });
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../controllers/PopupMenuCtrl.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbPopupMenuContent', function () {
        return {
            restrict: 'E',
            transclude: true,
            require: '^tbPopupMenu',
            link: function (scope, element, attributes, popupMenuCtrl, transclude) {
                popupMenuCtrl.setContent(transclude);
                popupMenuCtrl.contentMatchButtonWidth = (attributes.matchButtonWidth === 'true');
            }
        };
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var MAX_PORT = 65535;
    // Allows port values 0 through 65535
    VizPortal.Module.instance().directive('tbPortInputValidator', function () {
        return {
            restrict: 'A',
            require: 'ngModel',
            link: function (scope, elm, attrs, ctrl) {
                var isValidPort = function (val) { return (/^\d*$/.exec(val) && parseInt(val, 10) <= MAX_PORT); };
                ctrl.$parsers.push(function (inputVal) {
                    ctrl.$setValidity('port', !inputVal || isValidPort(inputVal));
                    return inputVal;
                });
            }
        };
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbPreventInput', ['$parse', function ($parse) {
            return {
                require: '?ngModel',
                link: function (scope, element, attrs, ngModelCtrl) {
                    if (!ngModelCtrl) {
                        return;
                    }
                    var preventFn = $parse(attrs.tbPreventInput);
                    ngModelCtrl.$parsers.push(function (val) {
                        var lastValidValue = ngModelCtrl.$modelValue;
                        if (val && preventFn(scope, { value: val })) {
                            ngModelCtrl.$setViewValue(lastValidValue);
                            ngModelCtrl.$render();
                        }
                        else {
                            lastValidValue = val;
                        }
                        return lastValidValue;
                    });
                    //Needed to prevent added spaces before and after the input
                    element.bind('keypress', function (event) {
                        if (event.keyCode === VizPortal.Keys.Space && preventFn(scope, { value: element.val() + ' ' })) {
                            event.preventDefault();
                        }
                    });
                }
            };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive("tbProgressBar", [
        '$translate',
        function ($translate) {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'progressBar.html',
                scope: {
                    percentComplete: '='
                }
            };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    /* Custom radio button control. Two ways to use:
    *
    *  1. Two-way binding to a scope property, like in a form. Multiple radio buttons can be bound
    *     to the same ng-model. The tb-value attribute is a JavaScript expression that evaluates
    *     to the target value; when the radio button is clicked, the model is assigned the target
    *     value.
    *     Includes all the fancy Angular form features: http://docs.angularjs.org/guide/forms
    *     To disable, use our own tb-disabled rather than ng-disabled.
    *
    *       tb:radio-button(ng-model="model.bool")
    *
    *     For a radio button with a clickable label:
    *
    *       tb:radio-button-group
    *         tb:radio-button(
    *           ng-model="model",
    *           tb-value="target value expression")
    *         tb:radio-button-label Content
    *
    *     The ng-model can also be an array, in which case the radio buttons can be tri-state:
    *       If all of the items match tb-value, then the button will appear selected;
    *       If some, but not all, of the items match tb-value, then the button will appear mixed;
    *       If none of the items match tb-value, then the button will appear empty.
    *
    *  2. Reflect value of expressions. You'll have to define an ng-click if you want behavior on click.
    *     For this usage, omit the ng-model attribute. This version works only for dual-state radio buttons.
    *
    *       tb:radio-button(selected="amIAwesome()")
    *
    */
    VizPortal.Module.instance().directive('tbRadioButton', [
        function () {
            var SELECTED_CLASS = 'tb-selected';
            var MIXED_CLASS = 'tb-mixed';
            var EMPTY_CLASS = '';
            return {
                restrict: 'E',
                replace: true,
                require: ['?ngModel', '^?tbRadioButtonGroup'],
                templateUrl: 'radioButton.html',
                scope: {
                    selected: '&',
                    value: '&tbValue'
                },
                link: function (scope, elm, attrs, ctrls) {
                    var ngModelCtrl = ctrls[0];
                    var groupCtrl = ctrls[1];
                    // If the radio button is instantiated to reflect the value of an expression (#2, above),
                    // there is no ngModel and we use the selected() function that was passed in.
                    if (!ngModelCtrl) {
                        scope.classForState = function () {
                            return scope.selected() ? SELECTED_CLASS : EMPTY_CLASS;
                        };
                        return;
                    }
                    var disabled = function () { return elm.hasClass('tb-disabled'); };
                    scope.classForState = function () {
                        if (!_.isArray(ngModelCtrl.$viewValue)) {
                            return ngModelCtrl.$viewValue === scope.value() ? SELECTED_CLASS : EMPTY_CLASS;
                        }
                        // for array ngModels, the radio button could be mixed
                        var array = ngModelCtrl.$viewValue;
                        var count = 0;
                        for (var i = 0; i < array.length; i++) {
                            if (array[i] === scope.value())
                                count++;
                        }
                        if (count === array.length) {
                            return SELECTED_CLASS;
                        }
                        else if (count === 0) {
                            return EMPTY_CLASS;
                        }
                        else {
                            return MIXED_CLASS;
                        }
                    };
                    scope.select = function () {
                        if (disabled())
                            return;
                        if (_.isArray(ngModelCtrl.$viewValue)) {
                            ngModelCtrl.$setViewValue(_.map(ngModelCtrl.$viewValue, function () {
                                return scope.value();
                            }));
                        }
                        else {
                            ngModelCtrl.$setViewValue(scope.value());
                        }
                        ngModelCtrl.$render();
                    };
                    if (groupCtrl) {
                        groupCtrl.select = scope.select;
                        groupCtrl.disabled = disabled;
                    }
                }
            };
        }
    ]);
    var RadioButtonGroupCtrl = (function () {
        function RadioButtonGroupCtrl() {
        }
        return RadioButtonGroupCtrl;
    })();
    VizPortal.Module.instance().directive('tbRadioButtonGroup', [
        function () {
            return {
                restrict: 'E',
                transclude: true,
                replace: true,
                template: '<div class="tb-radio-button-group" ng-transclude></div>',
                controller: RadioButtonGroupCtrl
            };
        }
    ]);
    VizPortal.Module.instance().directive('tbRadioButtonLabel', [
        function () {
            return {
                restrict: 'E',
                transclude: true,
                replace: true,
                require: '^tbRadioButtonGroup',
                templateUrl: 'radioButtonLabel.html',
                link: function ($scope, elm, attrs, ctrl) {
                    $scope.ctrl = ctrl;
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbResetStartPage', [
        '$translate',
        'ConfirmActionDialog',
        'ServerService',
        'ToasterService',
        'UserSettingsActions',
        function ($translate, confirmActionDialog, serverService, toaster, userSettingsActions) {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'resetStartPage.html',
                scope: {
                    userSettings: '=',
                    serverUser: '='
                },
                link: function (scope) {
                    scope.resetStartPage = function () {
                        confirmActionDialog.open({
                            title: $translate.instant('resetStartPageConfirmTitle'),
                            bodyText: $translate.instant('resetStartPageConfirmMessage'),
                            actionName: $translate.instant('resetStartPageConfirmButton'),
                            action: function (dialogInstance) {
                                var user = scope.serverUser;
                                return userSettingsActions.resetStartPage(user).
                                    then(function (result) {
                                    // TODO: move this logic into an action or store
                                    if (!result || result.errors) {
                                        dialogInstance.showErrorMessage($translate.instant('resetStartPageError'));
                                    }
                                });
                            }
                        });
                    };
                    scope.userPageOverridden = function () { return !!scope.userSettings.startPage; };
                }
            };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../controllers/ScrollCtrl.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbScroll', function () {
        return {
            restrict: 'E',
            replace: true,
            transclude: true,
            templateUrl: 'scrolling.html',
            scope: {
                items: '=',
                layout: '=',
                sliceChanged: '&',
                scrollControls: '=?',
                scrollLeftChanged: '&'
            },
            controller: VizPortal.ScrollCtrl
        };
    });
    VizPortal.Module.instance().directive('tbScrollContentArea', function () {
        return {
            require: '^tbScroll',
            link: function (scope, element, attributes, scrollCtrl) {
                scrollCtrl.contentArea = element;
            }
        };
    });
    VizPortal.Module.instance().directive('tbScrollContent', function () {
        return {
            require: '^tbScroll',
            link: function (scope, element, attributes, scrollCtrl) {
                scrollCtrl.content = element;
            }
        };
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../controllers/PopupMenuCtrl.ts" />
/*
This is an internal implementation of an HTML Select component
 */
var VizPortal;
(function (VizPortal) {
    var SelectController = (function () {
        function SelectController() {
            this.options = [];
        }
        SelectController.prototype.currentOptionTranscludeFn = function () {
            if (this.selectedOption) {
                return this.selectedOption.transclude;
            }
            else {
                // Displayed when there is no currently selected option, whether options exist or not.
                // Useful for displaying calls to action.
                return this.noneOptionTransclude;
            }
        };
        SelectController.prototype.select = function (value) {
            this.value = value;
            this.selectedOption = _.findWhere(this.options, { value: value });
        };
        SelectController.prototype.selectOption = function (option) {
            this.selectedOption = option;
            this.value = this.selectedOption.value;
        };
        SelectController.prototype.selectPrevious = function () {
            var currentIndex = _.indexOf(this.options, this.selectedOption);
            var previousEnabledIndex = currentIndex - 1;
            // Skip over disabled options
            while (previousEnabledIndex >= 0 && this.options[previousEnabledIndex].disabled) {
                previousEnabledIndex--;
            }
            if (previousEnabledIndex >= 0) {
                this.selectOption(this.options[previousEnabledIndex]);
            }
        };
        SelectController.prototype.selectNext = function () {
            var currentIndex = _.indexOf(this.options, this.selectedOption);
            var nextEnabledIndex = currentIndex + 1;
            // Skip over disabled options
            while (nextEnabledIndex < this.options.length && this.options[nextEnabledIndex].disabled) {
                nextEnabledIndex++;
            }
            if (nextEnabledIndex < this.options.length) {
                this.selectOption(this.options[nextEnabledIndex]);
            }
        };
        SelectController.prototype.addOption = function (option) {
            this.options.push(option);
            if (this.isOptionForValue(option, this.value))
                this.selectedOption = option;
        };
        SelectController.prototype.setNoneOptionTransclude = function (transclude) {
            this.noneOptionTransclude = transclude;
        };
        SelectController.prototype.removeOption = function (option) {
            this.options = _(this.options).without(option);
            if (this.selectedOption === option)
                this.selectedOption = null;
        };
        SelectController.prototype.verifySelection = function () {
            this.select(this.value);
        };
        SelectController.prototype.isOptionForValue = function (option, value) {
            return _.isEqual(option.value, value);
        };
        return SelectController;
    })();
    VizPortal.Module.instance().directive('tbSelect', [
        function () {
            return {
                restrict: 'E',
                replace: true,
                require: ['tbSelect', '?ngModel'],
                controllerAs: 'selectCtrl',
                transclude: true,
                templateUrl: 'select.html',
                scope: {
                    contentClass: "@tbSelectContentClass",
                    disabled: '=tbDisabled',
                    matchButtonWidth: '@'
                },
                controller: SelectController,
                link: function (scope, element, attrs, ctrls) {
                    var selectCtrl = ctrls[0];
                    var modelCtrl = ctrls[1];
                    // Calculate the maximum number of 'count' digits we need
                    scope.maxCountDigits = 0;
                    scope.$watch(function () { return selectCtrl.options; }, function () {
                        if (selectCtrl.options) {
                            scope.maxCountDigits = _.max(_.map(selectCtrl.options, function (option) {
                                if (_.isNumber(option.count)) {
                                    return ('' + option.count).length;
                                }
                                return 0;
                            }));
                        }
                    });
                    // Model-View synchronization
                    if (modelCtrl) {
                        modelCtrl.$render = function () { return selectCtrl.select(modelCtrl.$viewValue); };
                    }
                    scope.$watch(function () { return selectCtrl.selectedOption; }, function (selectedOption) {
                        if (selectedOption && modelCtrl)
                            modelCtrl.$setViewValue(selectedOption.value);
                        element.trigger('change');
                    }, true);
                    scope.$watch('selectCtrl.selectedOption.value', function (val) { return selectCtrl.verifySelection(); });
                    // Mouse handling
                    scope.optionClicked = function (option) {
                        selectCtrl.selectOption(option);
                        element.focus(); // Return focus to tb:select when an option is clicked
                    };
                    // Keyboard handling
                    // ... CONSIDER: this is ugly. Perhaps remove dependency on popup menu i.e. merge popup-menu
                    //     into tb:select and/or add or move keyboard handling logic to popup menu.
                    var popupMenuCtrl = function () { return element.find(".tb-popup").scope().popupMenu; };
                    scope.keydown = function ($event) {
                        switch ($event.which) {
                            case VizPortal.Keys.ArrowUp:
                                selectCtrl.selectPrevious();
                                break;
                            case VizPortal.Keys.ArrowDown:
                                selectCtrl.selectNext();
                                break;
                            case VizPortal.Keys.Tab:
                            case VizPortal.Keys.Escape:
                                if (!scope.disabled && popupMenuCtrl().isOpen()) {
                                    popupMenuCtrl().close();
                                    $event.preventDefault(); // Prevents Tab from moving to the next control
                                    $event.stopPropagation(); // Prevents Escape from closing containing dialog (if any)
                                }
                                break;
                            // Otherwise, delegate the keydown event to the popupMenuCtrl
                            default:
                                popupMenuCtrl().keydown($event);
                                break;
                        }
                    };
                }
            };
        }
    ]);
    VizPortal.Module.instance().directive('tbSelectOption', [
        function () {
            return {
                restrict: 'E',
                replace: true,
                transclude: true,
                require: '^tbSelect',
                scope: {
                    value: '=',
                    count: '=',
                    disabled: '=tbDisabled'
                },
                link: function (scope, element, attrs, selectCtrl, transcludeFn) {
                    var option = {
                        value: scope.value,
                        disabled: scope.disabled,
                        transclude: transcludeFn,
                        count: scope.count
                    };
                    scope.$watch(function () { return scope.value; }, function () {
                        option.value = scope.value;
                    });
                    element.on('$destroy', function () { return selectCtrl.removeOption(option); });
                    selectCtrl.addOption(option);
                }
            };
        }]);
    VizPortal.Module.instance().directive('tbSelectNone', ['$parse',
        function ($parse) {
            return {
                restrict: 'E',
                replace: true,
                transclude: true,
                require: '^tbSelect',
                scope: {},
                link: function (scope, element, attrs, selectCtrl, transcludeFn) {
                    selectCtrl.setNoneOptionTransclude(transcludeFn);
                }
            };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbSelected', [
        function () {
            return {
                restrict: 'A',
                link: function (scope, element, attr) {
                    scope.$watch(attr['tbSelected'], function (selected) {
                        element.toggleClass('tb-selected', selected);
                    });
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbServerSettingsForm', function () {
        return {
            restrict: 'E',
            replace: true,
            require: '^tbSettingsCoordinator',
            templateUrl: 'serverSettingsForm.html',
            link: function ($scope, elm, attrs, settingsCoordinatorCtrl) {
                settingsCoordinatorCtrl.registerFormState($scope.serverSettingsFormState);
            },
            controller: VizPortal.ServerSettingsFormCtrl
        };
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/ServerService.ts" />
/// <reference path="../services/WindowLocationService.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbSignedInUserMenu', [
        '$state',
        '$translate',
        'ServerService',
        'StartPageService',
        'UserSettingsActions',
        'ConfirmActionDialog',
        'ToasterService',
        function ($state, $translate, server, startPageService, userSettingsActions, confirmActionDialog, toaster) {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'signedInUserMenu.html',
                scope: {},
                link: function (scope) {
                    scope.server = server;
                    scope.inServerArea = function () { return server.isSessionMultiSite() && $state.includes('main.server'); };
                    scope.changeDefaultStartPage = function () { return userSettingsActions.confirmChangeDefaultStartPage(); };
                    scope.changeUserStartPage = function () { return userSettingsActions.confirmChangeUserStartPage(); };
                    scope.signOutKey = function () {
                        var authType = server.authenticationType();
                        if (authType === VizPortal.ServerApi.AuthenticationType.Sspi ||
                            authType === VizPortal.ServerApi.AuthenticationType.Kerberos) {
                            return 'switchUser';
                        }
                        else {
                            return 'signOut';
                        }
                    };
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbSignInLogo', [
        'LogoService',
        function (LogoService) {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'signInLogo.html',
                link: function (scope, element, attributes) {
                    scope.signInLogo = LogoService.getSignInLogo();
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbSiteRolePermissionsTable', [
        function () {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'siteRolePermissionsTable.html',
                scope: {
                    siteRoles: '='
                },
                link: function (scope) {
                    scope.rows = SiteRolePermissionsTable.permissionsForRoles(scope.siteRoles);
                }
            };
        }
    ]);
    var SiteRolePermissionsTable;
    (function (SiteRolePermissionsTable) {
        function permissionsForRoles(siteRoles) {
            return [
                {
                    role: VizPortal.ServerApi.SiteRoles.ServerAdministrator,
                    webAccess: true,
                    interact: true,
                    publish: true,
                    manage: true
                },
                {
                    role: VizPortal.ServerApi.SiteRoles.SiteAdministrator,
                    webAccess: true,
                    interact: true,
                    publish: true,
                    manage: true
                },
                {
                    role: VizPortal.ServerApi.SiteRoles.Publisher,
                    webAccess: true,
                    interact: true,
                    publish: true
                },
                {
                    role: VizPortal.ServerApi.SiteRoles.Interactor,
                    webAccess: true,
                    interact: true
                },
                {
                    role: VizPortal.ServerApi.SiteRoles.Viewer,
                    webAccess: true
                },
                {
                    role: VizPortal.ServerApi.SiteRoles.Unlicensed
                },
                {
                    divider: true,
                    role: VizPortal.ServerApi.SiteRoles.ViewerWithPublish,
                    webAccess: true,
                    publish: true
                },
                {
                    role: VizPortal.ServerApi.SiteRoles.UnlicensedWithPublish,
                    publish: true
                },
            ];
        }
        SiteRolePermissionsTable.permissionsForRoles = permissionsForRoles;
    })(SiteRolePermissionsTable = VizPortal.SiteRolePermissionsTable || (VizPortal.SiteRolePermissionsTable = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbSiteRolesPicker', [
        function () {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'siteRolesPicker.html',
                controller: VizPortal.SiteRolesPickerCtrl,
                scope: {
                    usersWithSiteRoles: '=?',
                    changes: '=',
                    busy: '=?'
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbSiteSettingsForServerAdminForm', function () {
        return {
            restrict: 'E',
            replace: true,
            require: '^?tbSettingsCoordinator',
            templateUrl: 'siteSettingsForServerAdminForm.html',
            link: function ($scope, elm, attrs, settingsCoordinatorCtrl) {
                if (settingsCoordinatorCtrl) {
                    settingsCoordinatorCtrl.registerFormState($scope.siteSettingsForServerAdminFormState);
                }
            },
            controller: VizPortal.SiteSettingsForServerAdminFormCtrl
        };
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbSiteSettingsForSiteAdminForm', function () {
        return {
            restrict: 'E',
            replace: true,
            require: '^?tbSettingsCoordinator',
            templateUrl: 'siteSettingsForSiteAdminForm.html',
            link: function ($scope, elm, attrs, settingsCoordinatorCtrl) {
                if (settingsCoordinatorCtrl) {
                    settingsCoordinatorCtrl.registerFormState($scope.siteSettingsForSiteAdminFormState);
                }
            },
            controller: VizPortal.SiteSettingsForSiteAdminFormCtrl
        };
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../controllers/SiteSwitcherCtrl.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbSiteSwitcher', function () {
        return {
            restrict: 'E',
            replace: true,
            templateUrl: 'siteSwitcher.html',
            scope: {
                siteSelected: '&'
            },
            controller: VizPortal.SiteSwitcherCtrl
        };
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var SortToolCtrl = (function () {
        function SortToolCtrl($scope, $element, $location) {
            var _this = this;
            this.items = [];
            this.itemIndex = {};
            var closeFn;
            $scope.menuOpened = function (cf) {
                closeFn = cf;
            };
            $scope.items = this.items;
            $scope.currentSort = function () {
                var key = $scope.sortKey + ":" + ($scope.sortAscending ? SortToolCtrl.Ascending : SortToolCtrl.Descending);
                return _this.itemIndex[key] || SortToolCtrl.INVALID_ITEM;
            };
            $scope.sortBy = function (key) {
                var parts = key.split(':');
                $location.search('order', VizPortal.Order.serialize([
                    {
                        field: parts[0],
                        ascending: parts[1] === SortToolCtrl.Ascending
                    }]));
                if (closeFn) {
                    closeFn();
                    closeFn = null;
                }
            };
        }
        SortToolCtrl.prototype.add = function (item) {
            this.items.push(item);
            this.itemIndex[item.key] = item;
        };
        SortToolCtrl.Ascending = 'asc';
        SortToolCtrl.Descending = 'desc';
        SortToolCtrl.$inject = ['$scope', '$element', '$location'];
        SortToolCtrl.INVALID_ITEM = { key: '', label: '' };
        return SortToolCtrl;
    })();
    VizPortal.SortToolCtrl = SortToolCtrl;
    VizPortal.Module.instance()
        .directive('tbSortTool', function () {
        return {
            restrict: 'E',
            templateUrl: 'sortTool.html',
            replace: true,
            transclude: true,
            scope: {
                sortKey: '=',
                sortAscending: '='
            },
            controller: SortToolCtrl
        };
    })
        .directive('tbSortToolItem', function () {
        return {
            require: '^tbSortTool',
            restrict: 'E',
            link: function (scope, element, attrs, sortToolController) {
                sortToolController.add({ key: attrs['key'], label: element.text() });
            }
        };
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/StackedElementsService.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbStackedElement', [
        function () {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'inline_stackedElement.html',
                scope: {
                    stackedElement: '='
                },
                link: function (scope, element) {
                    var stackedElement = scope.stackedElement;
                    element.html('').append(stackedElement.contentElement);
                    if (stackedElement.setScope)
                        stackedElement.setScope(scope);
                    scope.$watch(function () { return stackedElement.getContentElementPosition(); }, function (position) {
                        scope.left = position.left;
                        scope.top = position.top;
                        scope.right = position.right;
                        scope.bottom = position.bottom;
                        scope.visible = true;
                    }, true);
                    element.on('$destroy', function () { return stackedElement.destroy && stackedElement.destroy(); });
                }
            };
        }
    ]);
    VizPortal.Module.instance().directive('tbStackedElements', [
        'StackedElementsService',
        function (StackedElementsService) {
            return {
                restrict: 'E',
                replace: true,
                template: '<tb:stacked-element ng-repeat="stackedElement in stackedElements" stacked-element="stackedElement"></tb:stacked-element>',
                link: function (scope, element) {
                    scope.stackedElements = StackedElementsService.stackedElements;
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    function urlWithParams(url, params) {
        var pairs = _.map(params, function (value, key) {
            return encodeURIComponent(key) + '=' + encodeURIComponent(value);
        });
        if (pairs.length > 0) {
            var separator = (url.indexOf('?') >= 0) ? '&' : '?';
            var paramsString = pairs.join('&');
            return url + separator + paramsString;
        }
        else {
            return url;
        }
    }
    VizPortal.Module.instance().directive('tbStateHref', [
        '$location',
        '$state',
        function ($location, $state) {
            return {
                restrict: 'A',
                link: function (scope, element, attributes) {
                    var config = scope.$eval(attributes.tbStateHrefConfig || '') || {};
                    var params = scope.$eval(attributes.tbStateHrefParams || '') || null;
                    var opts = scope.$eval(attributes.tbStateHrefOpts || '') || null;
                    var keepSearch = config.keepSearch;
                    var omitParams = config.omitParams || [];
                    var state;
                    var updateHref = function () {
                        if (_.isString(state)) {
                            var href = $state.href(state, params, opts);
                            if (keepSearch) {
                                href = urlWithParams(href, _.omit($location.search(), omitParams));
                            }
                            attributes.$set('href', href);
                        }
                    };
                    attributes.$observe('tbStateHref', function (value) {
                        state = value;
                        updateHref();
                    });
                    if (keepSearch) {
                        scope.$on('$locationChangeSuccess', updateHref);
                    }
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../../common/attributes/tbFocus/tbFocus.ts" />
/// <reference path="../../common/attributes/tbFocus/FocusCtrl.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbTagsInput', [
        'SearchSuggestionsService',
        function (searchSuggestionsService) {
            return {
                restrict: 'E',
                require: ['ngModel', '?tbFocus'],
                templateUrl: 'tagsInput.html',
                replace: true,
                scope: {
                    newTag: '=?textInputModel'
                },
                link: function (scope, element, attributes, controllersArr) {
                    var ngModelCtrl = controllersArr[0];
                    var ctrlFocus = controllersArr[1];
                    // Initialize
                    scope.selectedTagIndex = -1;
                    scope.currentRow = {
                        index: 0,
                        object: null
                    };
                    // Helper methods
                    var deselectTags = function () {
                        scope.selectedTagIndex = -1;
                    };
                    // Scope methods
                    scope.addTag = function (newTag) {
                        if (!newTag)
                            return;
                        var quotedNewTag = VizPortal.TagsHelper.quote(newTag);
                        scope.removeTag(quotedNewTag);
                        ngModelCtrl.$setViewValue(ngModelCtrl.$modelValue.concat([{ name: quotedNewTag, added: true }]));
                        deselectTags();
                        scope.newTag = '';
                    };
                    scope.removeTag = function (tagName) {
                        ngModelCtrl.$setViewValue(_.reject(ngModelCtrl.$modelValue, function (tag) {
                            return (tag.name === tagName)
                                || (tag.name === VizPortal.TagsHelper.unquote(tagName));
                        }));
                        scope.selectedTagIndex--;
                    };
                    scope.selectTag = function (tagName) {
                        scope.selectedTagIndex = _.indexOf(scope.currentTags, _.findWhere(scope.currentTags, { name: tagName }));
                    };
                    scope.displayTag = VizPortal.TagsHelper.unquote;
                    scope.displayTagHtml = VizPortal.TagsHelper.displayTagHtml;
                    var getNewTagName = function () {
                        // scope.currentRow.object may have a stale object when scope.newTag goes to an empty string
                        if (!scope.newTag || !scope.currentRow.object)
                            return '';
                        return scope.currentRow.object.name;
                    };
                    scope.handleKeyEvent = function (event) {
                        var selectedTag = scope.currentTags[scope.selectedTagIndex];
                        switch (event.which) {
                            case VizPortal.Keys.Tab:
                                if (!selectedTag)
                                    scope.addTag(getNewTagName());
                                break;
                            case VizPortal.Keys.Enter:
                                if (selectedTag) {
                                }
                                else {
                                    scope.addTag(getNewTagName());
                                }
                                event.preventDefault();
                                break;
                            case VizPortal.Keys.Backspace:
                                if (selectedTag) {
                                    scope.removeTag(selectedTag.name);
                                    event.preventDefault();
                                }
                                else if (input.caret() === 0) {
                                    scope.selectedTagIndex = scope.currentTags.length - 1;
                                }
                                break;
                            case VizPortal.Keys.Delete:
                                if (selectedTag.name) {
                                    scope.removeTag(selectedTag.name);
                                    scope.selectedTagIndex++; // Move to the next tag
                                    event.preventDefault();
                                }
                                break;
                            case VizPortal.Keys.ArrowRight:
                                if (selectedTag) {
                                    scope.selectedTagIndex++;
                                    event.preventDefault();
                                }
                                else {
                                    deselectTags();
                                }
                                break;
                            case VizPortal.Keys.ArrowLeft:
                                if (selectedTag) {
                                    if (scope.selectedTagIndex > 0)
                                        scope.selectedTagIndex--;
                                    event.preventDefault();
                                }
                                else if (input.caret() === 0) {
                                    scope.selectedTagIndex = scope.currentTags.length - 1;
                                    event.preventDefault();
                                }
                                break;
                            case VizPortal.Keys.ArrowDown:
                                scope.currentRow.index++;
                                event.preventDefault();
                                break;
                            case VizPortal.Keys.ArrowUp:
                                // Don't let the index go below 0 on arrow up.  An item must always be selected
                                scope.currentRow.index = Math.max(scope.currentRow.index - 1, 0);
                                event.preventDefault();
                                break;
                            default:
                                deselectTags();
                        }
                        // Pass keydown events to the outer element
                        if (!event.isDefaultPrevented())
                            element.trigger(event.type, event);
                    };
                    // Watchers
                    // Get a list of possible tags every time newTag changes. Add newTag into the list if it's not already in the list
                    scope.$watch(function () { return scope.newTag; }, function (newTag) {
                        var newTagAddedToList = false;
                        var firstSlice = true;
                        scope.tagSource = {
                            getSlice: function (start, size) {
                                return searchSuggestionsService.tags(newTag).getSlice(start, size).then(function (result) {
                                    if (firstSlice) {
                                        scope.currentRow.index = 0; //Reset the tags to the beginning
                                        firstSlice = false;
                                    }
                                    if (result.index === 0 && (result.items.length === 0 || result.items[0].name !== scope.newTag)) {
                                        result.items.unshift({ name: scope.newTag });
                                        newTagAddedToList = true;
                                    }
                                    if (newTagAddedToList) {
                                        if (result.index !== 0)
                                            result.index++;
                                        result.total++;
                                    }
                                    return result;
                                });
                            }
                        };
                        // Simulate server tag splitting logic
                        if (!newTag || newTag.split('"').length === 2)
                            return; // If there is only 1 double quote then ignore parsing
                        var tagList = VizPortal.TagsHelper.parseTagString(newTag);
                        if (tagList.length > 1) {
                            _.forEach(tagList.slice(0, -1), scope.addTag);
                        }
                        scope.newTag = _.last(tagList) || '';
                        // Ensure the typeahead dropdown matches the width of the tags input when typing new tags
                        scope.dropdownWidth = element.width();
                    });
                    scope.$watch(function () { return ngModelCtrl.$modelValue; }, function (newVal) {
                        scope.currentTags = _.isArray(newVal) ? newVal : [];
                        if (scope.selectedTagIndex >= scope.currentTags.length)
                            deselectTags();
                    });
                    // Element listeners
                    var input = element.find('.tb-tag-input');
                    if (ctrlFocus)
                        ctrlFocus.setFocusElement(input);
                    input.on('blur', function () { return scope.$apply(deselectTags); });
                    element.click(function (event) {
                        if (ctrlFocus)
                            ctrlFocus.focus(); //Keep focus on the input element to handle key events
                        else
                            input.focus();
                        // Deselect tags if they didn't click on a tag
                        if ($(event.target).closest('.tb-tag-container').length === 0) {
                            scope.$apply(deselectTags);
                        }
                    });
                }
            };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../models/ITemplate.ts" />
var VizPortal;
(function (VizPortal) {
    var TemplateListCtrl = (function () {
        function TemplateListCtrl() {
            this.templates = [];
        }
        return TemplateListCtrl;
    })();
    VizPortal.Module.instance().directive('tbTemplateList', function () {
        return {
            require: 'tbTemplateList',
            restrict: 'E',
            controller: TemplateListCtrl,
            scope: {
                templates: '=?'
            },
            link: function (scope, element, attrs, templateListCtrl) {
                scope.templates = templateListCtrl.templates;
                element.remove();
            }
        };
    });
    VizPortal.Module.instance().directive('tbTemplate', function () {
        return {
            require: '^tbTemplateList',
            restrict: 'E',
            transclude: true,
            link: function (scope, element, attrs, templateListCtrl, transclude) {
                var ifExpression = attrs['templateIf'];
                if (ifExpression === undefined || scope.$eval(ifExpression)) {
                    templateListCtrl.templates.push({ attrs: attrs, linkFn: transclude });
                }
            }
        };
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    // A sentinel value to mean mixed text field values
    VizPortal.TextBoxMixedValues = "———";
    var directives = [
        { name: 'tbTextBox', template: 'textBox.html' },
        { name: 'tbPasswordBox', template: 'passwordBox.html' },
        { name: 'tbNumberBox', template: 'numberBox.html' }
    ];
    /**
     * A wrapper around input(type="text") or input(type="password"). Will put given tb-test-id
     * onto the input element for easier testing.
     *
     * Usage:
     *
     *  tb:text-box(tb-text-box-model="model", tb-test-id="testId")
     *
     * Attributes:
     *
     * tb-text-box-model="model":     Model to bind to
     * tb-text-box-name="n":          Used for form validation.
     * tb-text-box-disabled="bool":   See ng-disabled directive
     * tb-text-box-required="bool":   See ng-required directive
     * tb-text-box-keydown="keydown($event)": See ng-keydown directive
     * tb-text-box-enter="enter()":   See tb-enter directive
     * tb-text-box-auto-select="bool":see tb-auto-select directive
     * tb-text-box-max-length="32":   Adds maxlength attribute to input element
     * tb-text-box-focus:             If present, puts focus on element when linked
     * tb-text-box-clearable="bool":  Has clear button when true
     * tb-text-box-clear="clear()":   Called when clear button is pressed
     * tb-text-box-paste="p()":       Called when content is pasted into the element
     * tb-text-box-model-options="{'updateOn': 'enter clear'}":
     *   Modeled after Angular 1.3 ngModelOptions
     */
    _.each(directives, function (directive) {
        VizPortal.Module.instance().directive(directive.name, ['$timeout', '$compile',
            function ($timeout, $compile) {
                return {
                    restrict: 'E',
                    replace: true,
                    templateUrl: directive.template,
                    scope: {
                        disabled: '=tbTextBoxDisabled',
                        required: '=tbTextBoxRequired',
                        model: '=tbTextBoxModel',
                        maxLength: '@tbTextBoxMaxLength',
                        options: '@tbTextBoxModelOptions',
                        onEnter: '&tbTextBoxEnter',
                        focus: '=tbTextBoxFocus',
                        clearable: '=tbTextBoxClearable',
                        onClear: '&tbTextBoxClear',
                        onPaste: '&tbTextBoxPaste',
                        autoSelect: '=tbTextBoxAutoSelect',
                        keydown: '&tbTextBoxKeydown',
                        validation: '@tbTextBoxValidation',
                        min: '=tbTextBoxValidationMin',
                        max: '=tbTextBoxValidationMax',
                        match: '=tbMatchData',
                        placeholder: '=tbTextBoxPlaceholder',
                        clearValue: '=?tbTextBoxClearValue',
                        tabIndex: '@tbTextBoxTabindex'
                    },
                    link: function (scope, element, attrs) {
                        if (_.isUndefined(scope.model))
                            scope.model = ''; // Ensure the model is initialized to an empty string
                        var inputElement = element.find('.tb-text-box-input');
                        // This is a workaround for Angular form validation not respecting interpolated input names
                        // Angularjs issue#1404
                        if (attrs['tbTextBoxName']) {
                            inputElement.prop('name', attrs['tbTextBoxName']);
                        }
                        if (scope.validation) {
                            var inputElementClone = inputElement.clone();
                            _.each(scope.validation.split(' '), function (validatorName) {
                                inputElementClone.attr(validatorName, '');
                            });
                            inputElement.replaceWith(inputElementClone);
                            $compile(inputElementClone)(scope);
                            inputElement = inputElementClone;
                        }
                        scope.clearValue = function () { return scope.textValue = ''; };
                        scope.$watch('model', function () {
                            scope.textValue = scope.model;
                            // Mixed-values handling
                            if (scope.model === VizPortal.TextBoxMixedValues) {
                                addMixedValueHandlers();
                            }
                            else {
                                removeMixedValueHandlers();
                            }
                        });
                        if (attrs['tbTestId']) {
                            scope.inputTestId = attrs['tbTestId'] + '-input';
                        }
                        if (scope.maxLength !== undefined) {
                            inputElement.attr("maxlength", scope.maxLength);
                        }
                        // The timeout is necessary because the element may not be
                        // rendered yet. $timeout gives it time to render
                        var focus = function () { return $timeout(function () { return inputElement.focus(); }); };
                        scope.clearAndFocus = function () {
                            scope.textValue = '';
                            if (scope.onClear) {
                                scope.onClear();
                            }
                            inputElement.trigger('clear');
                            focus();
                        };
                        scope.triggerEnter = function () {
                            inputElement.trigger('enter');
                        };
                        var options = scope.$eval(attrs['tbTextBoxModelOptions']);
                        var syncModelToText = function () { return scope.model = scope.textValue; };
                        if (options && options.updateOn) {
                            inputElement.on(options.updateOn, function () {
                                // Use $evalAsync instead of $apply because some events may be triggered during a digest cycle
                                scope.$evalAsync(syncModelToText);
                            });
                        }
                        else {
                            scope.$watch('textValue', syncModelToText);
                        }
                        inputElement.on('focus', function () {
                            element.addClass('tb-focus');
                        });
                        inputElement.on('blur', function () {
                            element.removeClass('tb-focus');
                        });
                        // Special handling for mixed values
                        var addMixedValueHandlers = _.once(function () {
                            inputElement.addClass('tb-text-box-mixed');
                            // ... Select all text when focused
                            inputElement.on('focus.mixed', function () {
                                inputElement.select();
                            });
                            // ... Try to prevent deselection
                            inputElement.on('keydown.mixed', function ($event) {
                                switch ($event.which) {
                                    case VizPortal.Keys.ArrowDown:
                                    case VizPortal.Keys.ArrowUp:
                                    case VizPortal.Keys.ArrowLeft:
                                    case VizPortal.Keys.ArrowRight:
                                    case VizPortal.Keys.Home:
                                    case VizPortal.Keys.End:
                                        $event.preventDefault();
                                }
                            });
                            // ... This prevents deselection by not allowing the user to click to set the cursor position
                            inputElement.on('mouseup.mixed', function ($event) {
                                $event.preventDefault();
                            });
                        });
                        var removeMixedValueHandlers = function () {
                            inputElement.removeClass('tb-text-box-mixed');
                            inputElement.off(".mixed");
                        };
                    }
                };
            }
        ]);
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/DropdownHelper.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbTextDropdown', [
        '$timeout', '$translate', 'SliceableFactory',
        function ($timeout, $translate, sliceableFactory) {
            return {
                restrict: 'E',
                templateUrl: 'textDropdown.html',
                replace: true,
                scope: {
                    model: '=ngModel',
                    optionList: '=',
                    preventInput: '&tbPreventInput'
                },
                link: function (scope, element, attributes) {
                    scope.items = sliceableFactory.fromArray(scope.optionList);
                    var rowToModel = function (option) {
                        return option ? option.value : scope.textValue;
                    };
                    VizPortal.DropdownHelper.setupDropdownScope(scope, $timeout, element.find("input"), rowToModel);
                    scope.itemText = function (model) {
                        var option = _.findWhere(scope.optionList, { value: model });
                        return option ? $translate.instant(option.translate) : model;
                    };
                    scope.$watch('editMode', function (editMode) {
                        if (editMode) {
                            scope.width = element.width();
                        }
                    });
                    scope.$watch('textValue', function () { return scope.currentRow.index = -1; });
                }
            };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    // This converter uses textile-js (https://github.com/borgar/textile-js) to perform the conversion.
    var TextileJsConverter = (function () {
        function TextileJsConverter() {
        }
        TextileJsConverter.prototype.makeHtml = function (text) {
            return textile(text);
        };
        return TextileJsConverter;
    })();
    VizPortal.Module.instance().service('TextileConverter', TextileJsConverter);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../services/TextileConverter.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    // A directive for formatting textile content.
    // Uses ideas from https://github.com/btford/angular-markdown-directive/blob/master/markdown.js
    VizPortal.Module.instance().directive('tbTextile', [
        '$sanitize', 'TextileConverter',
        function ($sanitize, textileConverter) {
            return {
                restrict: 'A',
                link: function (scope, element, attrs) {
                    element.addClass("tb-textile tb-enable-selection");
                    scope.$watch(attrs['tbTextile'], function (newVal) {
                        var html = newVal ? $sanitize(textileConverter.makeHtml(newVal)) : '';
                        element.html(html);
                        element.find('a').not('[target]').attr('target', '_blank');
                    });
                }
            };
        }
    ]);
    // This directive extracts plain text from textile formatted content.
    VizPortal.Module.instance().directive('tbTextilePlaintext', [
        '$sanitize', 'TextileConverter',
        function ($sanitize, textileConverter) {
            return {
                restrict: 'A',
                link: function (scope, element, attrs) {
                    scope.$watch(attrs['tbTextilePlaintext'], function (newVal) {
                        var html = newVal ? $sanitize(textileConverter.makeHtml(newVal)) : '';
                        var text = $(html).text();
                        element.text(text);
                    });
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbTimePicker', [
        function () {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'timePicker.html',
                require: '?ngModel',
                scope: {},
                link: function (scope, elm, attrs, ngModel) {
                    if (!ngModel)
                        return; // do nothing if no ng-model
                    var use24HourTimeCycle = VizPortal.L10n.is24HourTimeCycle();
                    scope.use24HourTimeCycle = use24HourTimeCycle;
                    scope.precisionIncludesMinutes = attrs.precision !== 'hours';
                    scope.hours = use24HourTimeCycle ? _.range(0, 24) : _.range(1, 13);
                    scope.minutes = _.range(0, 60, 15);
                    // View -> Model
                    function modelValueFromView() {
                        var minutesAfterMidnight = scope.time.minute;
                        var hour = scope.time.hour;
                        if (use24HourTimeCycle) {
                            // 24-hr time
                            minutesAfterMidnight += hour * 60;
                        }
                        else {
                            // 12-hr time
                            if (hour !== 12) {
                                minutesAfterMidnight += hour * 60;
                            }
                            if (scope.time.meridiem === 'PM') {
                                minutesAfterMidnight += 60 * 12;
                            }
                        }
                        return minutesAfterMidnight;
                    }
                    scope.$watch(modelValueFromView, function (newValue) {
                        ngModel.$setViewValue(newValue);
                    });
                    // Model -> View
                    ngModel.$render = function () {
                        var minutesAfterMidnight = ngModel.$viewValue;
                        if (!(0 <= minutesAfterMidnight && minutesAfterMidnight <= 24 * 60)) {
                            minutesAfterMidnight = 0;
                            ngModel.$setViewValue(0);
                        }
                        if (use24HourTimeCycle) {
                            scope.time = {
                                hour: Math.floor(minutesAfterMidnight / 60),
                                minute: minutesAfterMidnight % 60
                            };
                        }
                        else {
                            var hours = Math.floor(minutesAfterMidnight / 60) % 12;
                            scope.time = {
                                hour: hours > 0 ? hours : 12,
                                minute: minutesAfterMidnight % 60,
                                meridiem: minutesAfterMidnight >= 12 * 60 ? 'PM' : 'AM'
                            };
                        }
                    };
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbTypeaheadFilter', [
        '$translate', function ($translate) {
            if (VizPortal.FeatureFlags.reactTypeaheadFilter) {
                return {
                    restrict: 'E',
                    replace: true,
                    link: function (scope) {
                        scope.props = {
                            filter: scope.filter,
                            getFieldValueQuery: function () { return scope.getFieldValueQuery(scope.filter.definition.field); },
                            translate: $translate.instant
                        };
                    },
                    template: '<span><tb:react-typeahead-filter props="props" /></span>'
                };
            }
            else {
                return {
                    restrict: 'E',
                    replace: true,
                    templateUrl: 'typeaheadFilter.html'
                };
            }
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var FadeInTime = 100; /// 100 ms
    var FadeOutTime = 3 * 1000; /// 3 seconds
    var FadeInEasing = 'linear';
    var FadeOutEasing = 'easeOutCubic';
    VizPortal.Module.instance().directive('tbToast', [
        'ToasterService', '$interval',
        function (toasterService, $interval) {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'inline_toast.html',
                scope: {
                    toast: '=tbToast'
                },
                link: function (scope, element, attr) {
                    scope.close = function () { return toasterService.close(scope.toast.id); };
                    scope.stopTimer = function () {
                        if (scope.toast.timeout) {
                            $interval.cancel(scope.toast.timeout);
                            scope.toast.timeout = null;
                        }
                        if (scope.isFadingOut) {
                            element.stop();
                            element.css('opacity', 1);
                        }
                    };
                    scope.restartTimer = function () {
                        scope.stopTimer();
                        if (scope.toast.timeoutDelay !== VizPortal.ToasterService.NoTimeout) {
                            if (scope.isFadingOut) {
                                fadeOut();
                            }
                            else {
                                scope.toast.timeout = $interval(function () { return fadeOut(); }, scope.toast.timeoutDelay, 1);
                            }
                        }
                    };
                    function fadeIn() {
                        element.css('opacity', 0);
                        element.animate({
                            opacity: 1
                        }, FadeInTime, FadeInEasing, function () {
                            if (scope.toast.timeoutDelay !== VizPortal.ToasterService.NoTimeout) {
                                scope.toast.timeout = $interval(function () { return fadeOut(); }, scope.toast.timeoutDelay, 1);
                            }
                            ;
                        });
                    }
                    ;
                    function fadeOut() {
                        scope.isFadingOut = true;
                        element.animate({
                            opacity: 0
                        }, FadeOutTime, FadeOutEasing, function () {
                            scope.close(scope.toast.id);
                            scope.$apply();
                        });
                    }
                    ;
                    fadeIn();
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbToaster', [
        'ToasterService',
        function (ToasterService) {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'inline_toaster.html',
                link: function (scope) {
                    scope.toasts = ToasterService.toasts;
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbTooltipArea', [
        '$parse',
        function ($parse) {
            return {
                link: function (scope, element, attr) {
                    var offset = 10;
                    var textFn = $parse(attr['tbTooltipArea']);
                    var eventNamespace = '.tbTooltipArea';
                    var origin;
                    var tooltip;
                    var updateTooltip = function (mouseEvent) {
                        var tooltipText = textFn(scope, { $event: mouseEvent });
                        if (tooltipText) {
                            tooltip.text(tooltipText);
                            var left = mouseEvent.pageX - origin.left + offset;
                            var top = mouseEvent.pageY - origin.top + offset;
                            tooltip.css({
                                display: 'block',
                                left: left,
                                top: top
                            });
                            var tooltipWidth = tooltip.outerWidth();
                            var tooltipHeight = tooltip.outerHeight();
                            var containerWidth = element.width();
                            var containerHeight = element.height();
                            var maxLeft = containerWidth - tooltipWidth;
                            var maxTop = containerHeight - tooltipHeight;
                            if (left > maxLeft) {
                                left = maxLeft;
                                tooltip.css('left', left);
                            }
                            ;
                            if (top > maxTop) {
                                top -= tooltipHeight + offset * 2;
                                tooltip.css('top', top);
                            }
                        }
                        else {
                            tooltip.css('display', 'none');
                        }
                    };
                    element.on('mouseenter' + eventNamespace, function (enterEvent) {
                        origin = element.offset();
                        if (tooltip) {
                            tooltip.remove();
                        }
                        tooltip = $('<div>').addClass('tb-tooltip').appendTo(element);
                        updateTooltip(enterEvent);
                        element.on('mousemove' + eventNamespace, function (moveEvent) {
                            updateTooltip(moveEvent);
                        });
                    });
                    element.on('mouseleave' + eventNamespace, function (leaveEvent) {
                        element.off('mousemove' + eventNamespace);
                        tooltip.remove();
                        tooltip = null;
                    });
                    scope.$on('$destroy', function () {
                        if (tooltip) {
                            tooltip.remove();
                            tooltip = null;
                        }
                        element.off(eventNamespace);
                    });
                }
            };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../controllers/TopBarCtrl.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbTopBar', function () {
        return {
            restrict: 'E',
            replace: true,
            templateUrl: 'topBar.html',
            controller: VizPortal.TopBarCtrl,
            scope: {
                settings: '='
            }
        };
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbTranscludeFn', function () {
        return {
            restrict: 'A',
            link: function (scope, element, attrs) {
                var currentClone = $();
                scope.$watch(attrs.tbTranscludeFn, function (fn) {
                    currentClone.remove();
                    if (!fn)
                        return;
                    var extraProperties = scope.$eval(attrs.tbTranscludeScope);
                    fn(function (clone, scope) {
                        angular.extend(scope, extraProperties);
                        currentClone = clone;
                        element.append(currentClone);
                    });
                });
            }
        };
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbTypeaheadFormat', ['$interpolate',
        function ($interpolate) {
            function escapeRegexp(queryToEscape) {
                return _.escape(queryToEscape).replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
            }
            function formatMatch(input, target, prefixesOnly) {
                // Construct regex for highlighting matching fragments. The input string is tokenized
                // and each token is a potential match.
                // e.g. the input string 'Ab Cd' is turned into the regex '(Ab|Cd)'.
                var regex = (prefixesOnly ? '\\b' : '') + '(' + _.compact(escapeRegexp(input).split(' ')).join('|') + ')';
                return _.escape(target).replace(new RegExp(regex, 'gi'), '<strong>$&</strong>');
            }
            return {
                restrict: 'A',
                link: function (scope, element, attrs) {
                    var matchText = scope.$eval(attrs.tbTypeaheadFormat);
                    var matchPrefixesOnly = scope.$eval(attrs.tbMatchPrefixesOnly);
                    var itemText = $interpolate(element.text())(scope);
                    if (matchText) {
                        element.empty().append(formatMatch(matchText, itemText, matchPrefixesOnly));
                    }
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../filters/SizeFilter.ts" />
/// <reference path="../models/IVizPortalCookies.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/LogoService.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbUpdateSiteLogoForm', [
        function () {
            return {
                templateUrl: 'updateSiteLogoForm.html',
                replace: true,
                restrict: 'E',
                scope: {},
                require: '^?tbSettingsCoordinator',
                controller: UpdateSiteLogoCtrl,
                link: function ($scope, form, attr, settingsCoordinatorCtrl) {
                    $scope.form = form;
                    $scope.fileInput = form.find('input[type="file"]');
                    $scope.previewImgWrapper = form.find('.tb-update-site-logo-preview-img-wrapper');
                    $scope.fileInput.on('change', function () { return $scope.$evalAsync($scope.onFileInputChange); });
                    // Register form for syncing with form Save/Revert controls
                    if (settingsCoordinatorCtrl) {
                        var settingsFormState = {
                            save: function () { return $scope.submitSiteLogoForm(); },
                            cancel: function () { return $scope.init(); },
                            isBusy: function () { return false; },
                            isFormUnchanged: function () { return !$scope.formIsDirty; },
                            isValid: function () { return $scope.formIsValid; }
                        };
                        settingsCoordinatorCtrl.registerFormState(settingsFormState);
                    }
                    $scope.init();
                }
            };
        }
    ]);
    var UpdateSiteLogoCtrl = (function () {
        function UpdateSiteLogoCtrl($scope, $cookies, $q, $timeout, $translate, RestApiPrefix, ServerService, LogoService, BrowserSupportService) {
            $scope.endpoint = RestApiPrefix + 'updateSiteLogo';
            $scope.xsrfToken = $cookies[VizPortal.CookieKeys.XsrfToken];
            $scope.usingCustomLogo = function () { return LogoService.isUsingCustomSiteLogo(); };
            $scope.dragAndDropEnabled = BrowserSupportService.supportsDragAndDropEvents() &&
                BrowserSupportService.supportsFormData() &&
                !BrowserSupportService.isTouch();
            $scope.previewEnabled = BrowserSupportService.supportsFileReader();
            $scope.init = function () {
                $scope.fileInput.val(null);
                $scope.formIsDirty = false;
                $scope.resetToDefault = false;
                $scope.formIsValid = true;
                $scope.errorMessage = undefined;
                $scope.file = undefined;
                $scope.filename = undefined;
                $scope.previewUrl = undefined;
                return $q.when({});
            };
            $scope.onFileAddedOrChanged = function (filename, file) {
                $scope.formIsDirty = true;
                $scope.resetToDefault = false;
                if (file && !_.contains(UpdateSiteLogoCtrl.SupportedImageTypes, file.type)) {
                    $scope.formIsValid = false;
                    $scope.errorMessage = $translate.instant('uploadSiteLogoErrorFileTypeNotSupported');
                }
                else if (file && file.size && file.size > UpdateSiteLogoCtrl.MaxImageSize) {
                    $scope.formIsValid = false;
                    $scope.errorMessage = $translate.instant('uploadSiteLogoErrorFileLargerThan2Megabytes');
                }
                else {
                    $scope.file = file;
                    $scope.filename = filename;
                    $scope.formIsValid = true;
                    $scope.errorMessage = undefined;
                    if ($scope.previewEnabled) {
                        // Generate preview
                        var reader = new FileReader();
                        reader.onload = function () { return $scope.$apply(function () { return $scope.previewUrl = reader.result; }); };
                        reader.onerror = function () { return $scope.errorMessage = $translate.instant('uploadSiteLogoErrorFileReadError'); };
                        // CSS fade animation - Use JQuery instead of $apply() for speed (50ms to allow CSS reflow)
                        reader.onloadstart = function () { return $scope.previewImgWrapper.addClass('tb-without-img'); };
                        reader.onloadend = function () { return $timeout(function () { return $scope.previewImgWrapper.removeClass('tb-without-img'); }, 50); };
                        // Start reading file
                        reader.readAsDataURL($scope.file);
                    }
                }
            };
            $scope.onFileDrop = function (file) {
                if ($scope.dragAndDropEnabled) {
                    $scope.fileInput.val(null);
                    $scope.onFileAddedOrChanged(file.name, file);
                }
            };
            $scope.onFileInputChange = function () {
                var fileInput = $scope.fileInput;
                if (!!fileInput.val()) {
                    // File object is not accessible in all browsers
                    var name = fileInput.val().split('\\').pop();
                    var fileInputElement = fileInput[0];
                    var file = fileInputElement.files && fileInputElement.files[0];
                    $scope.onFileAddedOrChanged(name, file);
                }
                else if (!$scope.resetToDefault) {
                    // User clicked 'cancel' in OS file selection
                    $scope.init();
                }
            };
            $scope.handleResetToDefaultClick = function () {
                $scope.fileInput.val(null);
                $scope.formIsDirty = true;
                $scope.resetToDefault = true;
                $scope.formIsValid = true;
                $scope.errorMessage = undefined;
                $scope.file = undefined;
                $scope.filename = undefined;
                $scope.previewUrl = LogoService.getServerTopBarLogo().image;
            };
            $scope.getPreviewUrl = function () {
                return $scope.previewUrl ? $scope.previewUrl : LogoService.getTopBarLogo().image;
            };
            $scope.submitSiteLogoForm = function () {
                if ($scope.formIsDirty) {
                    if (!$scope.dragAndDropEnabled) {
                        $scope.form.submit(); // Fall back to old school form submission
                        return $q.when({});
                    }
                    else {
                        var updatePromise;
                        if (!$scope.resetToDefault) {
                            updatePromise = LogoService.uploadSiteLogo($scope.file);
                        }
                        else {
                            updatePromise = LogoService.resetSiteLogoToDefault();
                        }
                        return updatePromise.then(function (result) { return $scope.handleFormSubmitResult(result); });
                    }
                }
            };
            $scope.handleFormSubmitResult = function (result) {
                if (result.errors && result.errors.length) {
                    var errorMessage;
                    switch (result.errors[0].code) {
                        case VizPortal.CommonErrorCode.FileSizeTooLarge:
                            $scope.errorMessage = $translate.instant('uploadSiteLogoErrorFileLargerThan2Megabytes');
                            break;
                        case VizPortal.OnlineErrorCode.SiteCustomizationUnavailable:
                            $scope.errorMessage = $translate.instant('actionNotAvailable');
                            break;
                        case VizPortal.OnlineErrorCode.InvalidImage:
                        case VizPortal.OnlineErrorCode.ImageProcessingError:
                        case VizPortal.OnlineErrorCode.StorageException:
                        default:
                            $scope.errorMessage = $translate.instant('uploadSiteLogoErrorSaveError');
                            break;
                    }
                    return $q.reject();
                }
                return ServerService.refreshSessionInfo() // Fetch the updated logo
                    .then(function () { return $scope.init(); });
            };
        }
        UpdateSiteLogoCtrl.SupportedImageTypes = ['image/png', 'image/jpeg', 'image/gif'];
        UpdateSiteLogoCtrl.MaxImageSize = VizPortal.ByteSizeConversionFactor.ONE_MB * 2;
        UpdateSiteLogoCtrl.$inject = [
            '$scope',
            '$cookies',
            '$q',
            '$timeout',
            '$translate',
            'RestApiPrefix',
            'ServerService',
            'LogoService',
            'BrowserSupportService'
        ];
        return UpdateSiteLogoCtrl;
    })();
    VizPortal.UpdateSiteLogoCtrl = UpdateSiteLogoCtrl;
    VizPortal.Module.instance().controller('UpdateSiteLogoCtrl', UpdateSiteLogoCtrl);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var id = 0;
    VizPortal.Module.instance().directive('tbUploadIframe', [function () {
            return {
                scope: {
                    handleResult: '&',
                    iframeId: '=?' // passed out
                },
                restrict: 'E',
                replace: true,
                link: function (scope, element, attrs) {
                    scope.iframeId = 'upload-iframe-' + id++;
                    // IMPORTANT!
                    // The iframe needs to be created with the name property set in order for it to work as a form submit target.
                    // The name prop cannot be copied down to the element later by angular or the form submit won't go to the iframe.
                    var iframe = angular.element('<iframe name="' + scope.iframeId + '" ' +
                        'border="0" width="0" height="0" ' +
                        'style="width:0px;height:0px;border:none;display:none">');
                    element.after(iframe);
                    iframe.on('load', function () {
                        var result = iframe.prop('contentWindow').result;
                        // IE will call load when the iframe is first added to the DOM,
                        // so make sure we actually have a result.
                        if (result) {
                            scope.handleResult(result);
                        }
                    });
                }
            };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbUsernameInputValidator', function () {
        return {
            restrict: 'A',
            require: 'ngModel',
            link: function (scope, elm, attrs, ctrl) {
                // this regex string requires double escaping, once for the string and once for the regex
                // it's matching the following chars: ; ,
                var USERNAME_REGEXP = new RegExp('[;,]');
                ctrl.$parsers.push(function (inputName) {
                    ctrl.$setValidity('username', !USERNAME_REGEXP.test(inputName));
                    return inputName;
                });
            }
        };
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbUserOrGroupSelector', [
        'SearchSuggestionsService',
        function (searchSuggestions) {
            return {
                restrict: 'E',
                templateUrl: 'userOrGroupSelector.html',
                replace: true,
                scope: {
                    autoEdit: '=',
                    userSelected: '&',
                    groupSelected: '&'
                },
                link: function (scope) {
                    scope.selected = {
                        granteeType: 'group' // group is selected by default.
                    };
                    scope.userSearchSuggestions = function (match) { return searchSuggestions.users(match); };
                    scope.groupSearchSuggestions = function (match) { return searchSuggestions.groups(match); };
                    scope.$watch('selected.user', function (user) {
                        if (user) {
                            scope.selected.user = null;
                            scope.userSelected({ user: user });
                        }
                    });
                    scope.$watch('selected.group', function (group) {
                        if (group) {
                            scope.selected.group = null;
                            scope.groupSelected({ group: group });
                        }
                    });
                }
            };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbVisible', function () {
        return {
            restrict: 'A',
            link: function (scope, element, attributes) {
                scope.$watch(attributes['tbVisible'], function (visible) {
                    element.css({ 'visibility': visible ? 'visible' : 'hidden' });
                });
            }
        };
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbWindowResize', [
        '$parse',
        function ($parse) {
            return {
                link: function (scope, element, attr) {
                    var resizeFn = $parse(attr['tbWindowResize']);
                    var win = angular.element(window);
                    var eventNamespace = '.tbWindowResize' + scope.$id;
                    var lazyResizeFn = _.debounce(function () {
                        scope.$apply(resizeFn(scope));
                    }, 50);
                    win.on('resize' + eventNamespace, function () {
                        lazyResizeFn();
                    });
                    element.on('$destroy', function () {
                        win.off(eventNamespace);
                    });
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/GetWorkerProcessStatus.ts" />
/// <reference path="../ServerApi/types/IWorkerProcess.ts" />
/// <reference path="../services/ServerService.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbWorkerProcessStatus', ['$interval', '$translate', 'ServerService', 'HelpService',
        function ($interval, $translate, server, help) {
            var PollMS = 60000;
            return {
                scope: {
                    process: '=',
                    isPreferred: '&'
                },
                restrict: 'E',
                replace: true,
                templateUrl: 'workerProcessStatus.html',
                link: function ($scope) {
                    var refreshStatusInterval;
                    var scopeDestroyed = false;
                    var refreshStatus = function () {
                        server.sendRequest(new VizPortal.ServerApi.GetWorkerProcessStatus({ process: $scope.process }))
                            .then(function (result) {
                            if (scopeDestroyed) {
                                // If the scope has been destroyed while the request was pending (user left the page)
                                return;
                            }
                            $scope.status = result.status;
                            $scope.pending = result.pendingTransfers;
                            $scope.syncTimestamp = result.syncTimestamp;
                            refreshStatusInterval = $interval(refreshStatus, PollMS, 1, false);
                        });
                    };
                    refreshStatus();
                    $scope.showStatusText = function () {
                        var status = $scope.status;
                        switch ($scope.process.type) {
                            case VizPortal.ServerApi.WorkerProcessType.clusterController:
                                return status === VizPortal.ServerApi.WorkerStatusType.down;
                            case VizPortal.ServerApi.WorkerProcessType.fileStore:
                                return _.contains([
                                    VizPortal.ServerApi.WorkerStatusType.activeSyncing,
                                    VizPortal.ServerApi.WorkerStatusType.down,
                                    VizPortal.ServerApi.WorkerStatusType.decommissioningReadOnly,
                                    VizPortal.ServerApi.WorkerStatusType.decommissionFailedReadOnly,
                                    VizPortal.ServerApi.WorkerStatusType.readyForRemoval
                                ], status);
                            case VizPortal.ServerApi.WorkerProcessType.repository:
                                return status === VizPortal.ServerApi.WorkerStatusType.statusNotAvailableSyncing;
                            default:
                                return false;
                        }
                    };
                    $scope.statusText = function () {
                        return $translate.instant($scope.process.type + '_' + $scope.status + '_status');
                    };
                    $scope.statusTooltip = function () {
                        if ($scope.pending > 0 || $scope.status === VizPortal.ServerApi.WorkerStatusType.activeSyncing) {
                            return $translate.instant('filestore_activesyncing_tooltip', { PENDING_COUNT: $scope.pending }, VizPortal.L10n.Interpolations.Count);
                        }
                        else {
                            return $translate.instant($scope.process.type + '_' + $scope.status + '_tooltip');
                        }
                    };
                    $scope.statusIconType = function () {
                        switch ($scope.status) {
                            case VizPortal.ServerApi.WorkerStatusType.active:
                            case VizPortal.ServerApi.WorkerStatusType.decommissionFailedReadOnly:
                            case VizPortal.ServerApi.WorkerStatusType.readyForRemoval:
                                return VizPortal.ServerApi.WorkerStatusType.active;
                            case VizPortal.ServerApi.WorkerStatusType.passive:
                            case VizPortal.ServerApi.WorkerStatusType.readOnly:
                                return VizPortal.ServerApi.WorkerStatusType.passive;
                            case VizPortal.ServerApi.WorkerStatusType.busy:
                            case VizPortal.ServerApi.WorkerStatusType.activeSyncing:
                            case VizPortal.ServerApi.WorkerStatusType.decommissioningReadOnly:
                            case VizPortal.ServerApi.WorkerStatusType.statusNotAvailableSyncing:
                                return VizPortal.ServerApi.WorkerStatusType.busy;
                            case VizPortal.ServerApi.WorkerStatusType.unlicensed:
                            case VizPortal.ServerApi.WorkerStatusType.down:
                            case VizPortal.ServerApi.WorkerStatusType.statusNotAvailable:
                                return $scope.status;
                        }
                    };
                    $scope.serverStatusHelpUrl = help.getServerHelpUrlByCategory('status1');
                    $scope.$on(VizPortal.ServerStatusCtrl.refreshProcessStatusEvent, function () {
                        $interval.cancel(refreshStatusInterval);
                        $scope.status = undefined; // Show spinner if refresh is manually triggered
                        refreshStatus();
                    });
                    $scope.$on('$destroy', function () {
                        $interval.cancel(refreshStatusInterval);
                        scopeDestroyed = true;
                    });
                }
            };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/types/IOAuthCredential.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().filter('credentialType', [
        '$translate',
        function ($translate) {
            return function (credentialType) {
                switch (credentialType) {
                    case VizPortal.ServerApi.OAuthCredentialTypes.Salesforce: return $translate.instant('salesforce');
                    case VizPortal.ServerApi.OAuthCredentialTypes.BigQuery: return $translate.instant('googleBigQuery');
                    case VizPortal.ServerApi.OAuthCredentialTypes.GoogleAnalytics: return $translate.instant('googleAnalytics');
                }
                return '';
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().filter('cronExpression', ['$translate', '$filter', function ($translate, $filter) {
            return function (cronExpression) {
                var dayOfWeek = $filter('cronExpression.dayOfWeekField')(VizPortal.CronExpressionHelper.getDayOfWeekField(cronExpression));
                return $filter('cronExpression.minutesOfHourField')(VizPortal.CronExpressionHelper.getMinutesField(cronExpression)) +
                    $filter('cronExpression.hoursOfDayField')(VizPortal.CronExpressionHelper.getHoursField(cronExpression)) +
                    (dayOfWeek ? ' ' + dayOfWeek : '');
            };
        }]);
    VizPortal.Module.instance().filter('cronExpression.minutesOfHourField', ['$translate', '$filter', function ($translate, $filter) {
            return function (minutesOfHourField) {
                var minutesParts = VizPortal.CronExpressionHelper.getTimeFieldSubsetParts(minutesOfHourField);
                if (_.isNumber(minutesParts.increment)) {
                    return $filter('sentenceAsFragment')($translate.instant('remoteRefreshScheduleExpressionStatementFragmentMinuteIncrement', { MINUTE_COUNT: minutesParts.increment }, VizPortal.L10n.Interpolations.Count));
                }
                else {
                    return '';
                }
            };
        }]);
    VizPortal.Module.instance().filter('cronExpression.hoursOfDayField', ['$translate', '$filter', function ($translate, $filter) {
            return function (hourOfDayField) {
                var translation = '';
                var fragment = '';
                var hoursParts = VizPortal.CronExpressionHelper.getTimeFieldSubsetParts(hourOfDayField);
                if (_.isNumber(hoursParts.increment)) {
                    fragment = $translate.instant('remoteRefreshScheduleExpressionStatementFragmentHourIncrement', { HOUR_COUNT: hoursParts.increment }, VizPortal.L10n.Interpolations.Count);
                    translation = $filter('sentenceAsFragment')(fragment);
                }
                if (_.isNumber(hoursParts.from) && _.isNumber(hoursParts.to)) {
                    var hoursFromDate = new Date();
                    hoursFromDate.setHours(hoursParts.from, 0, 0, 0);
                    var hoursToDate = new Date();
                    hoursToDate.setHours(hoursParts.to, 0, 0, 0);
                    fragment = $translate.instant('remoteRefreshScheduleExpressionStatementFragmentRange', { FROM_DATETIME: VizPortal.L10n.localizedShortTime(hoursFromDate), TO_DATETIME: VizPortal.L10n.localizedShortTime(hoursToDate) });
                    translation = translation + ' ' + $filter('sentenceAsFragment')(fragment);
                }
                if (_.isNumber(hoursParts.specific)) {
                    var hoursSpecificDate = new Date();
                    hoursSpecificDate.setHours(hoursParts.specific, 0, 0, 0);
                    fragment = $translate.instant('remoteRefreshScheduleExpressionStatementFragmentSpecific', { DATETIME: VizPortal.L10n.localizedShortTime(hoursSpecificDate) });
                    translation = $filter('sentenceAsFragment')(fragment);
                }
                return translation;
            };
        }]);
    VizPortal.Module.instance().filter('cronExpression.dayOfWeekField', ['$translate', '$filter', function ($translate, $filter) {
            return function (dayOfWeekField) {
                var translation = '';
                var fragment = '';
                var addSentenceSeparator = function (sentence) {
                    if (sentence !== '') {
                        return sentence + ' ';
                    }
                    else {
                        return sentence;
                    }
                };
                _.each(dayOfWeekField.split(','), function (subset) {
                    var type = VizPortal.CronExpressionHelper.getTypeFromFieldSubset(subset);
                    if (type === VizPortal.CronExpressionFieldSubsetTypes.Range) {
                        translation = addSentenceSeparator(translation);
                        var dash = subset.indexOf('-');
                        var start = parseInt(subset.substring(0, dash), 10);
                        var end = parseInt(subset.substring(dash + 1), 10);
                        fragment = $translate.instant('remoteRefreshScheduleExpressionStatementFragmentRange', {
                            FROM_DATETIME: $filter('cronExpression.specificDayOfWeek')(start),
                            TO_DATETIME: $filter('cronExpression.specificDayOfWeek')(end)
                        });
                        translation = translation + $filter('sentenceAsFragment')(fragment);
                    }
                    else if (type === VizPortal.CronExpressionFieldSubsetTypes.Specific) {
                        translation = addSentenceSeparator(translation);
                        fragment = $filter('cronExpression.specificDayOfWeek')(parseInt(subset[0], 10));
                        translation = translation + $filter('sentenceAsFragment')(fragment);
                    }
                    else if (type === VizPortal.CronExpressionFieldSubsetTypes.All) {
                    }
                    else {
                        throw 'Cron day of week expression could not be parsed: ' + dayOfWeekField;
                    }
                });
                return translation;
            };
        }]);
    VizPortal.Module.instance().filter('cronExpression.specificDayOfWeek', [function () {
            return function (dayOfWeek) {
                // This array has Sunday at index 0 or 6 depending on the locale.
                var wideDayNames = VizPortal.L10n.wideDayNames();
                // returns 0 for Sunday, 1 for Monday
                var firstDayOfWeek = VizPortal.L10n.firstDayOfWeek();
                return wideDayNames[(parseInt(dayOfWeek, 10) + 6 - firstDayOfWeek) % 7];
            };
        }]);
    VizPortal.Module.instance().filter('sentenceAsFragment', ['$translate', function ($translate) {
            return function (fragment) {
                return $translate.instant('remoteRefreshScheduleExpressionStatementSentence', { FRAGMENT: fragment });
            };
        }]);
    VizPortal.Module.instance().filter('minutesOrHours', ['$translate', function ($translate) {
            return function (minutes) {
                if (minutes < 60) {
                    return $translate.instant('minutes', { MINUTES: minutes });
                }
                else {
                    return $translate.instant('hours', { HOURS: Math.floor(minutes / 60) });
                }
            };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().filter('localizedLastSignedInDateTime', ['$translate', function ($translate) {
            return function (value) {
                if (value) {
                    return VizPortal.L10n.localizedDateTime(value);
                }
                else {
                    return $translate.instant("never");
                }
            };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().filter('list', [
        '$translate',
        function ($translate) {
            function formatListMiddleAndEnd(items) {
                if (items.length === 2) {
                    return $translate.instant('listEnd', {
                        START_ITEMS: items[0],
                        LAST_ITEM: items[1]
                    });
                }
                return $translate.instant('listMiddle', {
                    FIRST_ITEMS: items[0],
                    LAST_ITEMS: formatListMiddleAndEnd(items.slice(1))
                });
            }
            return function (items) {
                switch (items.length) {
                    case 0:
                        return '';
                    case 1:
                        return items[0];
                    case 2:
                        return $translate.instant('listTwo', {
                            ITEM1: items[0],
                            ITEM2: items[1]
                        });
                    default:
                        return $translate.instant('listStart', {
                            FIRST_ITEM: items[0],
                            REMAINING_ITEMS: formatListMiddleAndEnd(items.slice(1))
                        });
                }
            };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().filter('localizedCount', function () {
        return VizPortal.L10n.localizedCount;
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().filter('localizedDate', function () {
        return VizPortal.L10n.localizedDate;
    });
    VizPortal.Module.instance().filter('localizedDateTime', function () {
        return VizPortal.L10n.localizedDateTime;
    });
    VizPortal.Module.instance().filter('localizedTime', function () {
        return VizPortal.L10n.localizedTime;
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().filter('localizedPercent', function () {
        return VizPortal.L10n.localizedPercent;
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    // See http://stackoverflow.com/a/21712550 for an explanation
    VizPortal.Module.instance().filter('pad', function () {
        return function (numberToPad, length) {
            return (1e4 + numberToPad + "").slice(-length);
        };
    });
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().filter('remoteRefreshScheduleTypeName', [
        '$translate',
        function ($translate) {
            return function (remoteRefreshType) { return $translate.instant('remoteRefreshScheduleTypeName' + remoteRefreshType); };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().filter('scheduleActionName', [
        '$translate',
        function ($translate) {
            return function (scheduleAction) {
                switch (scheduleAction) {
                    case VizPortal.ServerApi.ScheduleActions.Extract:
                        return $translate.instant('extractRefresh');
                    case VizPortal.ServerApi.ScheduleActions.Subscription:
                        return $translate.instant('subscription');
                }
                return '';
            };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().filter('scheduleFrequencyDescription', [
        '$translate',
        '$filter',
        function ($translate, $filter) {
            function formatTime(minutesAfterMidnight) {
                var date = new Date();
                date.setHours(minutesAfterMidnight / 60);
                date.setMinutes(minutesAfterMidnight % 60);
                return VizPortal.L10n.localizedTime(date);
            }
            function formatHourly(schedule) {
                var hourly = schedule.scheduleDetails;
                var frequency = hourly.recurrenceMinutes < 60
                    ? $translate.instant('minutes', { MINUTES: hourly.recurrenceMinutes })
                    : $translate.instant('hours', { HOURS: hourly.recurrenceMinutes / 60 });
                return $translate.instant('scheduleHourlyDescription', {
                    FREQUENCY: frequency,
                    START: formatTime(hourly.startTime),
                    END: formatTime(hourly.endTime)
                });
            }
            function formatDaily(schedule) {
                var daily = schedule.scheduleDetails;
                return $translate.instant('scheduleDailyDescription', {
                    START: formatTime(daily.startTime)
                });
            }
            function formatWeekly(schedule) {
                var weekly = schedule.scheduleDetails;
                var days = _.map(weekly.recurrenceDaysOfWeek, dayName);
                return $translate.instant('scheduleWeeklyDescription', {
                    START: formatTime(weekly.startTime),
                    DAYS: $filter('list')(days)
                });
            }
            function dayName(dayCode) {
                return $translate.instant('dayName' + dayCode);
            }
            function formatMonthly(schedule) {
                var monthly = schedule.scheduleDetails;
                var dayOfMonth = monthly.recurrenceDayOfMonth === VizPortal.ServerApi.ScheduleLastDayOfMonth
                    ? $translate.instant('last')
                    : $translate.instant('dayOfMonth', { DAY: parseInt(monthly.recurrenceDayOfMonth, 10) });
                return $translate.instant('scheduleMonthlyDescription', {
                    START: formatTime(monthly.startTime),
                    DAYOFMONTH: dayOfMonth
                });
            }
            return function (schedule) {
                switch (schedule.scheduleType) {
                    case VizPortal.ServerApi.ScheduleTypes.Hourly:
                        return formatHourly(schedule);
                    case VizPortal.ServerApi.ScheduleTypes.Daily:
                        return formatDaily(schedule);
                    case VizPortal.ServerApi.ScheduleTypes.Weekly:
                        return formatWeekly(schedule);
                    case VizPortal.ServerApi.ScheduleTypes.Monthly:
                        return formatMonthly(schedule);
                }
                throw "Unknown schedule type: " + schedule.scheduleType;
            };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().filter('scheduleTypeName', [
        '$translate',
        function ($translate) {
            return function (scheduleType) { return $translate.instant(scheduleType.toLowerCase()); };
        }]);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().filter('siteRole', [
        '$translate',
        function ($translate) {
            return function (siteRole) {
                return !!siteRole ? $translate.instant('siteRole_' + siteRole) : '';
            };
        }]);
})(VizPortal || (VizPortal = {}));
// External references
// TODO: remove the following external references:
/// <reference path="../../ts/helpers/Keys.ts" />
/// <reference path="../../ts/models/ContentTypes.ts" />
/// <reference path="../../ts/models/Set.ts" />
/// <reference path="../../ts/models/resourceInfoParts.ts" />
// Giving up... The remaining dependencies have too long of a dependency tail to track
/// <reference path="../../ts/vizportal.ts" /> 
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../ts/libs.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var Location = (function () {
        function Location() {
        }
        Location.prototype.setUrl = function (url) {
            window.location.href = url;
        };
        Location.prototype.search = function () {
            return window.location.search;
        };
        Location.instance = new Location();
        return Location;
    })();
    VizPortalReact.Location = Location;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../../ts/libs.ts" />
/// <reference path="../CommonStyles.ts" />
/// <reference path="../IReactTranslateService.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var SearchBox = (function (_super) {
        __extends(SearchBox, _super);
        function SearchBox() {
            _super.apply(this, arguments);
        }
        SearchBox.prototype.render = function () {
            var inputProps = _.extend({}, {
                placeholder: this.props.translate ? this.props.translate('search') : '',
                className: 'tb-placeholder'
            }, this.props);
            inputProps.style = _.extend({}, {
                fontSize: VizPortalReact.CommonStyles.Sizes.SmallFontSize,
                fontFamily: VizPortalReact.CommonStyles.Fonts.BodyFont,
                paddingTop: VizPortalReact.CommonStyles.Sizes.TextBoxPadding,
                paddingBottom: VizPortalReact.CommonStyles.Sizes.TextBoxPadding,
                paddingLeft: VizPortalReact.CommonStyles.Sizes.TextBoxPadding + VizPortalReact.CommonStyles.Sizes.SmallIconSize,
                borderWidth: VizPortalReact.CommonStyles.Sizes.TextBoxBorderSize,
                borderColor: VizPortalReact.CommonStyles.Colors.BorderColor,
                borderStyle: 'solid',
                boxSizing: 'border-box',
                background: 'url(img/magnifying_glass_small_normal.png) 0 center no-repeat',
                outline: 'none'
            }, this.props.style);
            return React.DOM.input(inputProps);
        };
        SearchBox.displayName = 'SearchBox';
        SearchBox.element = React.createFactory(SearchBox);
        return SearchBox;
    })(React.Component);
    VizPortalReact.SearchBox = SearchBox;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../../ts/libs.ts" />
/// <reference path="../Location.ts" />
/// <reference path="SearchBox.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var FilteringListBox = (function (_super) {
        __extends(FilteringListBox, _super);
        function FilteringListBox() {
            _super.apply(this, arguments);
            // React routines
            this.state = {
                data: [],
                selectedIndex: -1,
                searchTerm: '',
                searchBoxHeight: 0,
                measuredRowHeight: 0,
                indexOfFirstVisibleSection: 0,
                indexOfLastVisibleSection: 0,
                anyIcons: false,
                maxCountDigits: 0
            };
        }
        FilteringListBox.prototype.render = function () {
            var _this = this;
            var sectionsWrapper = React.DOM.div({
                style: {
                    height: this.state.data.length * this.state.measuredRowHeight,
                    overflow: 'hidden'
                }
            }, this.renderSections());
            return React.DOM.div({
                style: this.props.style
            }, VizPortalReact.SearchBox.element({
                ref: 'searchBox',
                placeholder: this.props.searchBoxPlaceholder,
                onChange: function (event) { return _this.searchTermChanged(event); },
                onKeyDown: function (event) { return _this.handleKeyDown(event); },
                style: { width: '100%' }
            }), React.DOM.div({
                ref: 'listbox',
                style: {
                    position: 'absolute',
                    left: 0,
                    right: 0,
                    top: this.state.searchBoxHeight + VizPortalReact.CommonStyles.Sizes.SmallSpace,
                    bottom: 0,
                    overflowX: 'hidden',
                    overflowY: 'auto'
                },
                onScroll: function (event) { return _this.onScroll(event); }
            }, sectionsWrapper));
        };
        FilteringListBox.prototype.renderSections = function () {
            var _this = this;
            var matchPrefixesOnly = this.matchPrefixesOnly();
            var sectionHeight = FilteringListBox.sectionSize * this.state.measuredRowHeight;
            var sections = [];
            for (var i = this.state.indexOfFirstVisibleSection; i <= this.state.indexOfLastVisibleSection; i++) {
                var firstRowIndex = i * FilteringListBox.sectionSize;
                var lastRowIndex = Math.min(firstRowIndex + FilteringListBox.sectionSize - 1, this.state.data.length - 1);
                var sectionRows = [];
                for (var rowIndex = firstRowIndex; rowIndex <= lastRowIndex; rowIndex++) {
                    var item = this.state.data[rowIndex];
                    sectionRows.push(FilteringListBox.Row.element({
                        key: rowIndex,
                        ref: FilteringListBox.ItemRefPrefix + rowIndex,
                        item: item,
                        searchTerm: this.state.searchTerm,
                        matchPrefixesOnly: matchPrefixesOnly,
                        selected: rowIndex === this.state.selectedIndex,
                        showIcon: this.state.anyIcons,
                        maxCountDigits: this.state.maxCountDigits,
                        onClick: function () {
                            if (_this.props.itemSelected) {
                                _this.props.itemSelected(item);
                            }
                        }
                    }));
                }
                var marginTop = i === this.state.indexOfFirstVisibleSection ? i * sectionHeight : 0;
                sections.push(React.DOM.div({
                    key: i,
                    style: {
                        marginTop: marginTop,
                        height: sectionHeight,
                        overflow: 'hidden'
                    }
                }, sectionRows));
            }
            return sections;
        };
        FilteringListBox.prototype.matchPrefixesOnly = function () {
            return _.isBoolean(this.props.matchPrefixesOnly) ? this.props.matchPrefixesOnly : true;
        };
        FilteringListBox.prototype.searchTermChanged = function (event) {
            var _this = this;
            var searchTerm = event.target.value.toLowerCase();
            // For a non-empty search term, automatically select the top-most matching item
            var selectedIndex = searchTerm.length === 0 ? -1 : 0;
            this.resetScrollPosition();
            this.setState({
                searchTerm: searchTerm,
                selectedIndex: selectedIndex
            }, function () { return _this.fetch(); });
        };
        FilteringListBox.prototype.resetScrollPosition = function () {
            var viewPortNode = $(React.findDOMNode(this.refs['listbox']));
            viewPortNode.scrollTop(0);
        };
        FilteringListBox.prototype.handleKeyDown = function (event) {
            var _this = this;
            switch (event.keyCode) {
                case VizPortal.Keys.ArrowUp:
                    this.setState({
                        selectedIndex: Math.max(this.state.selectedIndex - 1, 0)
                    }, function () { return _this.scrollItemIntoView(); });
                    event.preventDefault();
                    event.stopPropagation();
                    break;
                case VizPortal.Keys.ArrowDown:
                    this.setState({
                        selectedIndex: Math.min(this.state.selectedIndex + 1, this.state.data.length - 1)
                    }, function () { return _this.scrollItemIntoView(); });
                    event.preventDefault();
                    event.stopPropagation();
                    break;
                case VizPortal.Keys.Enter:
                    if (this.state.selectedIndex >= 0 && this.state.selectedIndex < this.state.data.length) {
                        var selectedItem = this.state.data[this.state.selectedIndex];
                        // Navigate to the selected item's url, if any.
                        if (selectedItem.url) {
                            // TODO: I'd prefer to use getDefaultProps to provide a default location service, but
                            // it doesn't seem to work with TypeScript's class syntax.
                            var locationService = this.props.locationService || VizPortalReact.Location.instance;
                            locationService.setUrl(selectedItem.url);
                        }
                        if (this.props.itemSelected) {
                            this.props.itemSelected(selectedItem);
                        }
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    break;
            }
        };
        FilteringListBox.prototype.scrollItemIntoView = function () {
            var viewPortNode = $(React.findDOMNode(this.refs['listbox']));
            var scrollTop = viewPortNode.scrollTop();
            var viewPortBottom = viewPortNode.height();
            var itemTop = this.state.selectedIndex * this.state.measuredRowHeight;
            var itemBottom = itemTop + this.state.measuredRowHeight;
            if (itemTop < scrollTop) {
                viewPortNode.scrollTop(itemTop);
            }
            else if (itemBottom > scrollTop + viewPortBottom) {
                viewPortNode.scrollTop(itemBottom - viewPortBottom);
            }
            this.updateVisibleSectionIndexes();
        };
        FilteringListBox.prototype.componentDidMount = function () {
            // Initially focus on the search box
            var searchBox = $(React.findDOMNode(this.refs['searchBox']));
            setTimeout(function () { return searchBox.focus(); }, 0);
            // Record the height of the search box
            this.setState({ searchBoxHeight: searchBox.outerHeight() });
            // Load the initial batch of data
            this.fetch();
        };
        FilteringListBox.prototype.updateMaxCountDigitsAndIcons = function () {
            var anyIcons = this.state.anyIcons || _.any(this.state.data, function (item) { return _.isString(item.icon); });
            // Determine the maximum number of digits in the item counts. This is used to calculate
            // the width of the 'count' column.
            var maxCount = _.max(_.map(this.state.data, function (item) { return (item.count || 0); }));
            var maxCountDigits = ('' + maxCount).length;
            this.setState({
                anyIcons: anyIcons,
                maxCountDigits: maxCountDigits
            });
        };
        FilteringListBox.prototype.measureRowHeight = function () {
            // Measure the height of the first row we find
            var firstRowKey = _.find(_.keys(this.refs), function (key) { return key.substr(0, FilteringListBox.ItemRefPrefix.length) === FilteringListBox.ItemRefPrefix; });
            var firstRowNode = $(React.findDOMNode(this.refs[firstRowKey]));
            if (firstRowNode.length > 0) {
                this.setState({ measuredRowHeight: firstRowNode.outerHeight() });
            }
        };
        FilteringListBox.prototype.onScroll = function (event) {
            this.updateVisibleSectionIndexes();
        };
        FilteringListBox.prototype.updateVisibleSectionIndexes = function () {
            var _this = this;
            var visibleSections = this.calculateVisibleSectionIndexes();
            if (visibleSections.indexOfFirstVisibleSection !== this.state.indexOfFirstVisibleSection
                || visibleSections.indexOfLastVisibleSection !== this.state.indexOfLastVisibleSection) {
                this.setState(visibleSections, function () { return _this.fetch(); });
            }
        };
        FilteringListBox.prototype.calculateVisibleSectionIndexes = function () {
            var measuredRowHeight = this.state.measuredRowHeight || 100;
            var sectionHeight = FilteringListBox.sectionSize * measuredRowHeight;
            var viewPortNode = $(React.findDOMNode(this.refs['listbox']));
            var viewportTop = viewPortNode.scrollTop();
            var viewportBottom = viewportTop + viewPortNode.height();
            var indexOfFirstVisibleSection = Math.floor(viewportTop / sectionHeight);
            var indexOfLastVisibleSection = Math.ceil(viewportBottom / sectionHeight);
            return {
                indexOfFirstVisibleSection: indexOfFirstVisibleSection,
                indexOfLastVisibleSection: indexOfLastVisibleSection
            };
        };
        FilteringListBox.prototype.fetch = function () {
            var _this = this;
            var startIndex = this.state.indexOfFirstVisibleSection * FilteringListBox.sectionSize;
            var endIndex = (this.state.indexOfLastVisibleSection + 1) * FilteringListBox.sectionSize - 1;
            this.props.itemStore.getItems(this.state.searchTerm, startIndex, endIndex).then(function (data) {
                _this.setState({ data: data }, function () {
                    _this.updateMaxCountDigitsAndIcons();
                    if (_this.state.measuredRowHeight === 0) {
                        setTimeout(function () { return _this.measureRowHeight(); }, 0);
                    }
                });
            });
        };
        FilteringListBox.displayName = 'FilteringListBox';
        FilteringListBox.sectionSize = 10;
        FilteringListBox.ItemRefPrefix = 'item';
        FilteringListBox.element = React.createFactory(FilteringListBox);
        return FilteringListBox;
    })(React.Component);
    VizPortalReact.FilteringListBox = FilteringListBox;
    var FilteringListBox;
    (function (FilteringListBox) {
        var Row = (function (_super) {
            __extends(Row, _super);
            function Row() {
                _super.apply(this, arguments);
                this.state = {
                    hovered: false
                };
            }
            // TODO: make mouse hovering a mixin
            Row.prototype.handleMouseOver = function () {
                this.setState({ hovered: true });
            };
            Row.prototype.handleMouseOut = function () {
                this.setState({ hovered: false });
            };
            Row.prototype.render = function () {
                var _this = this;
                var item = this.props.item;
                var topBottomItemPadding = VizPortalReact.CommonStyles.Sizes.DefaultSpace + VizPortalReact.CommonStyles.Sizes.LineWidth;
                var backgroundColor = null;
                if (this.state.hovered) {
                    backgroundColor = VizPortalReact.CommonStyles.Colors.Grey245;
                }
                if (this.props.selected) {
                    backgroundColor = VizPortalReact.CommonStyles.Colors.BlueHighlight;
                }
                var rowStyle = {
                    display: 'block',
                    paddingLeft: VizPortalReact.CommonStyles.Sizes.DefaultSpace + (this.props.showIcon ? VizPortalReact.CommonStyles.Sizes.SmallIconSize : 0),
                    paddingRight: 0,
                    paddingTop: topBottomItemPadding,
                    paddingBottom: topBottomItemPadding,
                    backgroundImage: item && item.icon ? 'url(' + item.icon + ')' : null,
                    backgroundPosition: '1px center',
                    backgroundRepeat: 'no-repeat',
                    backgroundColor: backgroundColor,
                    textDecoration: 'none',
                    textOverflow: 'ellipsis',
                    overflow: 'hidden',
                    whiteSpace: 'nowrap',
                    color: VizPortalReact.CommonStyles.Colors.NormalTextColor
                };
                if (item.isDivider) {
                    rowStyle.paddingBottom--;
                    rowStyle.borderBottom = '1px solid ' + VizPortalReact.CommonStyles.Colors.Grey224;
                }
                var itemCount = item && _.isNumber(item.count)
                    ? React.DOM.span({
                        style: {
                            float: 'right',
                            textAlign: 'right',
                            // Max digit width is about 7px, so allocate '7 * number of digits' width.
                            width: 7 * this.props.maxCountDigits,
                            paddingLeft: VizPortalReact.CommonStyles.Sizes.DefaultSpace,
                            paddingRight: VizPortalReact.CommonStyles.Sizes.SmallSpace
                        }
                    }, item.count)
                    : null;
                var itemLabel = this.itemLabel();
                return React.DOM.a({
                    href: item && item.url,
                    style: rowStyle,
                    onClick: function () { _this.props.onClick(); },
                    onMouseOver: function () { return _this.handleMouseOver(); },
                    onMouseOut: function () { return _this.handleMouseOut(); }
                }, itemCount, itemLabel);
            };
            Row.prototype.itemLabel = function () {
                var item = this.props.item;
                if (!item) {
                    return React.DOM.span({
                        className: 'tb-icon-spinner'
                    });
                }
                var labelHTML = this.props.searchTerm
                    ? Filter.formatMatch(this.props.searchTerm, item.label, this.props.matchPrefixesOnly)
                    : _.escape(item.label);
                // For empty labels, use a non-breaking space to ensure the row is the right height
                if (labelHTML === '') {
                    labelHTML = '&nbsp;';
                }
                return React.DOM.span({
                    dangerouslySetInnerHTML: { __html: labelHTML }
                });
            };
            Row.displayName = 'FilteringListBoxRow';
            Row.element = React.createFactory(Row);
            return Row;
        })(React.Component);
        FilteringListBox.Row = Row;
        var Filter;
        (function (Filter) {
            function filterDataBySearchTerm(data, searchTerm, matchPrefixesOnly) {
                // If search term is blank, no filtering is necessary. Just return all the data.
                if (searchTerm.length === 0) {
                    return {
                        fetchedRows: _.compact(data),
                        estimatedTotalRowCount: data.length
                    };
                }
                var fetchedData = _.compact(data);
                var fetchedCount = fetchedData.length;
                var regex = regexForSearchTerm(searchTerm, matchPrefixesOnly);
                var filteredData = _.compact(_.map(fetchedData, function (item) {
                    if (regex.test(item.label)) {
                        // Item matches regex
                        return _.extend({}, item, {
                            labelHTML: formatMatch(searchTerm, item.label, matchPrefixesOnly)
                        });
                    }
                    else {
                        return null; // Item does not match regex
                    }
                }));
                // If we've only fetched some of the data, we don't know the exact length of the
                // filteredData, so take a guess:
                var unfetchedCount = data.length - fetchedCount;
                var estimatedTotalRowCount = filteredData.length;
                if (unfetchedCount > 0) {
                    if (fetchedCount > 0) {
                        estimatedTotalRowCount = Math.max(filteredData.length + 1, Math.ceil(data.length * filteredData.length / fetchedCount));
                    }
                    else {
                        // We have no way to estimate the total matching rows with no fetched data, so just
                        // assume all data will match (anything reasonable would work here).
                        estimatedTotalRowCount = data.length;
                    }
                }
                return {
                    fetchedRows: filteredData,
                    estimatedTotalRowCount: estimatedTotalRowCount
                };
            }
            Filter.filterDataBySearchTerm = filterDataBySearchTerm;
            // Constructs a regex for finding items that match the search term.
            // See http://stackoverflow.com/a/5421978 for the derivation of the regex.
            function regexForSearchTerm(searchTerm, matchPrefixesOnly) {
                var searchTermTokens = _.compact(escapeRegexp(searchTerm).split(' '));
                var regexParts = ['^'];
                _.each(searchTermTokens, function (token) {
                    regexParts.push('(?=.*' + (matchPrefixesOnly ? '\\b' : '') + token + ')');
                });
                return new RegExp(regexParts.join(''), 'gi');
            }
            // TODO: these regex/formatting methods could be put on a separate class or module to ease testability/reuse.
            function escapeRegexp(queryToEscape) {
                return _.escape(queryToEscape).replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
            }
            function formatMatch(searchTerm, target, matchPrefixesOnly) {
                // Construct regex for highlighting matching fragments. The input string is tokenized
                // and each token is a potential match.
                // e.g. the input string 'Ab Cd' is turned into the regex '(Ab|Cd)'.
                var regex = (matchPrefixesOnly ? '\\b' : '') + '(' + _.compact(escapeRegexp(searchTerm).split(' ')).join('|') + ')';
                return _.escape(target).replace(new RegExp(regex, 'gi'), '<strong style="text-decoration: underline">$&</strong>');
            }
            Filter.formatMatch = formatMatch;
        })(Filter = FilteringListBox.Filter || (FilteringListBox.Filter = {}));
    })(FilteringListBox = VizPortalReact.FilteringListBox || (VizPortalReact.FilteringListBox = {}));
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../../ts/libs.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var Menu = (function (_super) {
        __extends(Menu, _super);
        function Menu() {
            _super.apply(this, arguments);
            this.state = {
                open: false,
                hovered: false
            };
        }
        Menu.prototype.componentDidMount = function () {
            this.id = '' + Menu.nextId++;
            this.closeMenuOnMouseDownOutside();
        };
        // TODO: This should be a mixin, but I couldn't figure out how to make it work
        Menu.prototype.closeMenuOnMouseDownOutside = function () {
            var _this = this;
            var element = $(React.findDOMNode(this));
            var eventNamespace = this.getEventNamespace();
            var mouseDownEvents = 'mousedown' + eventNamespace + ' touchstart' + eventNamespace;
            // $todo: use react event system or at least something that plays nice with react
            $(document).on(mouseDownEvents, function (downEvent) {
                var target = $(downEvent.target);
                if (target.closest(element).length === 0) {
                    _this.setState({ open: false });
                }
            });
        };
        Menu.prototype.componentWillUnmount = function () {
            $(document).off(this.getEventNamespace());
        };
        Menu.prototype.getEventNamespace = function () {
            return '.mousedownOutside' + this.id;
        };
        Menu.prototype.render = function () {
            var _this = this;
            var menuButtonWrapper = Menu.ButtonWrapper.element({
                onClick: function () { return _this.toggleMenu(); },
                menuButtonFactory: this.props.menuButtonFactory,
                menuOpen: this.state.open
            });
            var menuPanelWrapper = this.state.open
                ? Menu.PanelWrapper.element({ style: this.props.menuPanelStyle }, this.props.menuPanelFactory({}))
                : null;
            var menuStyle = _.extend({}, {
                position: 'relative',
                display: 'inline-block'
            }, this.props.style);
            return React.DOM.span({
                'data-tb-test-id': this.props.tbTestId,
                style: menuStyle,
                onKeyDown: function (e) { return _this.onKeyDown(e); }
            }, menuButtonWrapper, menuPanelWrapper);
        };
        Menu.prototype.onKeyDown = function (event) {
            if (event.keyCode === VizPortal.Keys.Escape) {
                this.closeMenu();
            }
        };
        Menu.prototype.toggleMenu = function () {
            if (this.isMenuOpen()) {
                this.closeMenu();
            }
            else {
                this.openMenu();
            }
        };
        Menu.prototype.isMenuOpen = function () {
            return this.state.open;
        };
        Menu.prototype.openMenu = function () {
            var _this = this;
            if (this.props.onBeforeMenuOpen) {
                this.props.onBeforeMenuOpen().then(function () { return _this.setState({ open: true }); });
            }
            else {
                this.setState({ open: true });
            }
        };
        Menu.prototype.closeMenu = function () {
            this.setState({ open: false });
        };
        Menu.displayName = 'Menu';
        Menu.nextId = 1;
        Menu.element = React.createFactory(Menu);
        return Menu;
    })(React.Component);
    VizPortalReact.Menu = Menu;
    var Menu;
    (function (Menu) {
        var ButtonWrapper = (function (_super) {
            __extends(ButtonWrapper, _super);
            function ButtonWrapper() {
                _super.apply(this, arguments);
                this.state = {
                    hovered: false
                };
            }
            ButtonWrapper.prototype.render = function () {
                var _this = this;
                return React.DOM.span({
                    onClick: function () { return _this.props.onClick(); },
                    onMouseOver: function () { return _this.handleMouseOver(); },
                    onMouseOut: function () { return _this.handleMouseOut(); },
                    style: { cursor: 'pointer' }
                }, this.props.menuButtonFactory({
                    hovered: this.state.hovered,
                    menuOpen: this.props.menuOpen
                }));
            };
            ButtonWrapper.prototype.handleMouseOver = function () {
                this.setState({ hovered: true });
            };
            ButtonWrapper.prototype.handleMouseOut = function () {
                this.setState({ hovered: false });
            };
            ButtonWrapper.displayName = 'MenuButtonWrapper';
            ButtonWrapper.element = React.createFactory(ButtonWrapper);
            return ButtonWrapper;
        })(React.Component);
        Menu.ButtonWrapper = ButtonWrapper;
        var PanelWrapper = (function (_super) {
            __extends(PanelWrapper, _super);
            function PanelWrapper() {
                _super.apply(this, arguments);
                this.state = {
                    alignRight: false
                };
            }
            PanelWrapper.prototype.componentDidMount = function () {
                var node = $(React.findDOMNode(this));
                var rightEdge = node.offset().left + node.outerWidth();
                var windowWidth = $(window).width();
                if (rightEdge >= windowWidth) {
                    this.setState({ alignRight: true });
                }
            };
            PanelWrapper.prototype.render = function () {
                var style = _.extend({
                    position: 'absolute',
                    left: this.state.alignRight ? null : 0,
                    right: this.state.alignRight ? 0 : null,
                    zIndex: 1,
                    textAlign: 'left'
                }, this.props.style);
                return React.DOM.div({ style: style }, this.props.children);
            };
            PanelWrapper.displayName = 'MenuPanelWrapper';
            PanelWrapper.element = React.createFactory(PanelWrapper);
            return PanelWrapper;
        })(React.Component);
        Menu.PanelWrapper = PanelWrapper;
    })(Menu = VizPortalReact.Menu || (VizPortalReact.Menu = {}));
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../common/react/CommonStyles.ts" />
/// <reference path="../../common/react/IReactTranslateService.ts" />
/// <reference path="../../common/react/components/FilteringListBox.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var FavoritesMenuPanel = (function (_super) {
        __extends(FavoritesMenuPanel, _super);
        function FavoritesMenuPanel() {
            _super.apply(this, arguments);
            this.state = {
                filteredData: this.props.data
            };
        }
        FavoritesMenuPanel.prototype.render = function () {
            var _this = this;
            return React.DOM.div({ style: VizPortalReact.HeaderStyles.MenuPanelStyle }, VizPortalReact.FilteringListBox.element({
                itemStore: {
                    getItems: function (filter, start, end) {
                        return Q.when(VizPortalReact.FilteringListBox.Filter.filterDataBySearchTerm(_this.props.data, filter, true).fetchedRows);
                    }
                },
                searchBoxPlaceholder: this.props.translate('searchFavorites'),
                itemSelected: function () { return _this.props.itemSelected(); },
                style: VizPortalReact.CommonStyles.Helpers.Edges(VizPortalReact.CommonStyles.Sizes.SmallSpace)
            }));
        };
        FavoritesMenuPanel.displayName = 'FavoritesMenuPanel';
        FavoritesMenuPanel.element = React.createFactory(FavoritesMenuPanel);
        return FavoritesMenuPanel;
    })(React.Component);
    VizPortalReact.FavoritesMenuPanel = FavoritesMenuPanel;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../common/react/CommonStyles.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var HeaderMenuButton = (function (_super) {
        __extends(HeaderMenuButton, _super);
        function HeaderMenuButton() {
            _super.apply(this, arguments);
        }
        HeaderMenuButton.prototype.render = function () {
            var highlight = this.props.hovered || this.props.menuOpen;
            var menuButtonStyle = {
                display: 'block',
                height: VizPortalReact.CommonStyles.Sizes.NormalIconSize,
                lineHeight: VizPortalReact.CommonStyles.Sizes.NormalIconSize + 'px',
                fontFamily: VizPortalReact.CommonStyles.Fonts.HeaderFont,
                fontSize: VizPortalReact.CommonStyles.Sizes.HeaderFontSize,
                letterSpacing: VizPortalReact.HeaderStyles.LetterSpacing,
                color: VizPortalReact.CommonStyles.Colors.White,
                opacity: highlight ? VizPortalReact.HeaderStyles.HoverOpacity : VizPortalReact.HeaderStyles.RestOpacity
            };
            // Add icon
            if (this.props.iconUrl) {
                _.extend(menuButtonStyle, {
                    paddingLeft: VizPortalReact.CommonStyles.Sizes.NormalIconSize + VizPortalReact.CommonStyles.Sizes.SmallSpace,
                    backgroundImage: this.props.iconUrl,
                    backgroundPosition: 'left center',
                    backgroundRepeat: 'no-repeat'
                });
            }
            // Apply style overrides
            _.extend(menuButtonStyle, this.props.style);
            return React.DOM.span({ style: menuButtonStyle }, this.props.label);
        };
        HeaderMenuButton.displayName = 'HeaderMenuButton';
        HeaderMenuButton.element = React.createFactory(HeaderMenuButton);
        return HeaderMenuButton;
    })(React.Component);
    VizPortalReact.HeaderMenuButton = HeaderMenuButton;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../common/react/FavoritesStore.ts" />
/// <reference path="../../common/react/IReactTranslateService.ts" />
/// <reference path="../../common/react/components/FilteringListBox.ts" />
/// <reference path="../../common/react/components/Menu.ts" />
/// <reference path="./FavoritesMenuPanel.ts" />
/// <reference path="./HeaderMenuButton.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var FavoritesMenu = (function (_super) {
        __extends(FavoritesMenu, _super);
        function FavoritesMenu() {
            _super.apply(this, arguments);
            this.state = {
                data: []
            };
        }
        FavoritesMenu.prototype.render = function () {
            var _this = this;
            return VizPortalReact.Menu.element({
                ref: "menu",
                tbTestId: 'favorites-menu',
                style: this.props.style,
                menuButtonFactory: function (props) {
                    props.iconUrl = 'url(img/star_header_icon.png)';
                    return VizPortalReact.HeaderMenuButton.element(props);
                },
                menuPanelFactory: function (props) {
                    props.translate = _this.props.translate;
                    props.data = _this.state.data;
                    props.itemSelected = function () {
                        _this.refs['menu'].closeMenu();
                    };
                    return VizPortalReact.FavoritesMenuPanel.element(props);
                },
                onBeforeMenuOpen: function () {
                    return _this.loadFavorites();
                }
            });
        };
        FavoritesMenu.prototype.loadFavorites = function () {
            var _this = this;
            return this.props.favoritesStore.getAll()
                .then(function (items) {
                var data = _.map(items, function (item) {
                    return {
                        label: item.objectName,
                        icon: item.objectType === VizPortal.FavoriteObjectType.VIEW ? VizPortalReact.CommonStyles.IconUrls.View : VizPortalReact.CommonStyles.IconUrls.Workbook,
                        url: item.objectType === VizPortal.FavoriteObjectType.VIEW
                            ? _this.props.siteUrls.favoriteView(item.objectId)
                            : _this.props.siteUrls.favoriteWorkbook(item.objectId)
                    };
                });
                _this.setState({ data: data });
            });
        };
        FavoritesMenu.displayName = 'FavoritesMenu';
        FavoritesMenu.element = React.createFactory(FavoritesMenu);
        return FavoritesMenu;
    })(React.Component);
    VizPortalReact.FavoritesMenu = FavoritesMenu;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="StoreHelpers.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var SiteStore = (function () {
        function SiteStore(siteNames) {
            this.siteNames = siteNames;
        }
        SiteStore.prototype.getAll = function () {
            return VizPortalReact.StoreHelpers.getAll(this.siteNames.all());
        };
        return SiteStore;
    })();
    VizPortalReact.SiteStore = SiteStore;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../common/react/CommonStyles.ts" />
/// <reference path="../../common/react/components/Menu.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var SiteSwitcherMenuButton = (function (_super) {
        __extends(SiteSwitcherMenuButton, _super);
        function SiteSwitcherMenuButton() {
            _super.apply(this, arguments);
        }
        SiteSwitcherMenuButton.prototype.render = function () {
            var highlight = this.props.hovered || this.props.menuOpen;
            var paddingRight = VizPortalReact.CommonStyles.Sizes.NormalIconSize + VizPortalReact.CommonStyles.Sizes.SmallSpace;
            return React.DOM.span({
                style: {
                    display: 'inline-block',
                    // Constrain the maximum width of the site title
                    width: 150 + paddingRight,
                    overflow: 'hidden',
                    textOverflow: 'ellipsis',
                    textAlign: 'right',
                    verticalAlign: 'middle',
                    // Font
                    fontFamily: VizPortalReact.CommonStyles.Fonts.HeaderFont,
                    fontSize: VizPortalReact.CommonStyles.Sizes.HeaderFontSize,
                    letterSpacing: '0.08em',
                    // Color & Opacity
                    color: highlight ? VizPortalReact.HeaderStyles.SiteSwitcherHoverColor : VizPortalReact.HeaderStyles.SiteSwitcherRestColor,
                    opacity: highlight ? VizPortalReact.HeaderStyles.SiteSwitcherHoverOpacity : VizPortalReact.HeaderStyles.SiteSwitcherRestOpacity,
                    // Dropdown icon
                    paddingRight: paddingRight,
                    backgroundImage: 'url(img/' + (highlight ? VizPortalReact.HeaderStyles.SiteSwitcherDropdownHoverImage : VizPortalReact.HeaderStyles.SiteSwitcherDropdownRestImage) + ')',
                    backgroundPosition: 'right center',
                    backgroundRepeat: 'no-repeat'
                },
                'data-tb-test-id': 'site-switcher-button'
            }, this.props.buttonTitle);
        };
        SiteSwitcherMenuButton.displayName = 'SiteSwitcherMenuButton';
        SiteSwitcherMenuButton.element = React.createFactory(SiteSwitcherMenuButton);
        return SiteSwitcherMenuButton;
    })(React.Component);
    VizPortalReact.SiteSwitcherMenuButton = SiteSwitcherMenuButton;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../common/react/CommonStyles.ts" />
/// <reference path="../../common/react/IReactTranslateService.ts" />
/// <reference path="../../common/react/components/FilteringListBox.ts" />
/// <reference path="HeaderStyles.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var SiteSwitcherMenuPanel = (function (_super) {
        __extends(SiteSwitcherMenuPanel, _super);
        function SiteSwitcherMenuPanel() {
            _super.apply(this, arguments);
        }
        SiteSwitcherMenuPanel.prototype.render = function () {
            var _this = this;
            // Slightly different dimensions to the other menu panels
            var menuPanelStyle = _.extend({}, VizPortalReact.HeaderStyles.MenuPanelStyle, {
                width: 210,
                height: 300
            });
            return React.DOM.div({
                style: menuPanelStyle,
                'data-tb-test-id': 'site-switcher-dropdown'
            }, VizPortalReact.FilteringListBox.element({
                itemStore: {
                    getItems: function (filter, start, end) {
                        var filteredRows = VizPortalReact.FilteringListBox.Filter.filterDataBySearchTerm(_this.props.sites, filter, true).fetchedRows;
                        // Add the "All Sites" link at the top (unless filtering)
                        if (filter === '') {
                            filteredRows.splice(0, 0, {
                                label: _this.props.translate('siteSwitcher_manageAllSites'),
                                url: _this.props.serverUrls.status(),
                                icon: _this.props.onServerPage ? 'img/bullet.png' : null,
                                isDivider: true
                            });
                        }
                        return Q.when(filteredRows);
                    }
                },
                searchBoxPlaceholder: this.props.translate('search'),
                itemSelected: function () { return _this.props.itemSelected(); },
                style: VizPortalReact.CommonStyles.Helpers.Edges(VizPortalReact.CommonStyles.Sizes.SmallSpace)
            }));
        };
        SiteSwitcherMenuPanel.displayName = 'SiteSwitcherMenuPanel';
        SiteSwitcherMenuPanel.element = React.createFactory(SiteSwitcherMenuPanel);
        return SiteSwitcherMenuPanel;
    })(React.Component);
    VizPortalReact.SiteSwitcherMenuPanel = SiteSwitcherMenuPanel;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../common/react/SiteStore.ts" />
/// <reference path="../../common/react/Location.ts" />
/// <reference path="../../common/react/IReactTranslateService.ts" />
/// <reference path="../../common/react/components/FilteringListBox.ts" />
/// <reference path="../../common/react/components/Menu.ts" />
/// <reference path="./SiteSwitcherMenuButton.ts" />
/// <reference path="./SiteSwitcherMenuPanel.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var SiteSwitcher = (function (_super) {
        __extends(SiteSwitcher, _super);
        function SiteSwitcher() {
            _super.apply(this, arguments);
            this.state = {
                sites: []
            };
        }
        SiteSwitcher.prototype.render = function () {
            var _this = this;
            return VizPortalReact.Menu.element({
                ref: 'menu',
                tbTestId: 'site-switcher',
                menuButtonFactory: function (props) {
                    props.buttonTitle =
                        _this.onServerPage()
                            ? _this.props.translate('siteSwitcher_allSites')
                            : (_this.props.currentSite && _this.props.currentSite.name) || '';
                    return VizPortalReact.SiteSwitcherMenuButton.element(props);
                },
                menuPanelFactory: function (props) {
                    props.translate = _this.props.translate;
                    props.sites = _this.state.sites;
                    props.itemSelected = function () {
                        _this.refs['menu'].closeMenu();
                    };
                    props.serverUrls = _this.props.serverUrls;
                    props.onServerPage = _this.onServerPage();
                    return VizPortalReact.SiteSwitcherMenuPanel.element(props);
                },
                onBeforeMenuOpen: function () {
                    return _this.loadSites();
                }
            });
        };
        SiteSwitcher.prototype.loadSites = function () {
            var _this = this;
            return this.props.siteStore.getAll()
                .then(function (items) {
                var sites = _.map(items, function (item) {
                    var isCurrentSite = !_this.onServerPage() && _this.props.currentSite.urlName === item.urlName;
                    return {
                        label: item.name,
                        icon: isCurrentSite ? 'img/bullet.png' : null,
                        url: _this.siteUrl(item)
                    };
                });
                _this.setState({ sites: sites });
            });
        };
        SiteSwitcher.prototype.onServerPage = function () {
            return VizPortalReact.Navigation.isServerLocation(this.props.navLocation);
        };
        SiteSwitcher.prototype.siteUrl = function (site) {
            var hash = site.urlName ? '#/site/' + site.urlName + '/projects' : '#/projects';
            var locationSearch = (this.props.location || VizPortalReact.Location.instance).search();
            return '/' + locationSearch + hash;
        };
        SiteSwitcher.displayName = 'SiteSwitcher';
        SiteSwitcher.element = React.createFactory(SiteSwitcher);
        return SiteSwitcher;
    })(React.Component);
    VizPortalReact.SiteSwitcher = SiteSwitcher;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var AlertActions = (function () {
        function AlertActions(alerts, extractTasks, datasources, workbooks) {
            this.alerts = alerts;
            this.extractTasks = extractTasks;
            this.datasources = datasources;
            this.workbooks = workbooks;
        }
        AlertActions.prototype.getAlertCount = function () {
            GetAlertCountAction(this.alerts);
        };
        AlertActions.prototype.getAlerts = function () {
            GetAlertsAction(this.alerts);
        };
        AlertActions.prototype.tryAgain = function (alert) {
            var _this = this;
            var taskId = alert.taskId;
            var extractType = alert.alertType; // either 'IncrementExtract' or 'RefreshExtract'.
            if (taskId) {
                // run extract task by ID
                this.extractTasks.run([taskId]).then(function () { return _this.getAlerts(); });
            }
            else if (extractType) {
                // if we don't have a task ID,
                // we may need to run a datasource or workbook refresh by the item ID & refresh type.
                // if datasourceId is present, the alert item is a datasource.
                // if datasourceId is not present, the alert item is a workbook with ID affectedWorkbookIds[0].
                var datasourceId = alert.datasource && alert.datasource.id;
                var workbookId = alert.workbooks && alert.workbooks[0] && alert.workbooks[0].id;
                if (datasourceId) {
                    // refresh datasource
                    this.datasources.refreshExtracts([datasourceId], extractType).then(function () { return function () { return _this.getAlerts(); }; });
                }
                else if (workbookId) {
                    // refresh workbook
                    this.workbooks.refreshExtracts([workbookId], extractType).then(function () { return function () { return _this.getAlerts(); }; });
                }
            }
            AlertTryAgainAction(alert.id);
        };
        return AlertActions;
    })();
    VizPortalReact.AlertActions = AlertActions;
    function GetAlertCountAction(alerts) {
        alerts.getCount().then(function (count) {
            var payload = {
                actionType: GetAlertCountAction.Type,
                count: count
            };
            VizPortalReact.Dispatcher.instance.dispatch(payload);
        });
    }
    VizPortalReact.GetAlertCountAction = GetAlertCountAction;
    var GetAlertCountAction;
    (function (GetAlertCountAction) {
        GetAlertCountAction.Type = 'get-alert-count';
    })(GetAlertCountAction = VizPortalReact.GetAlertCountAction || (VizPortalReact.GetAlertCountAction = {}));
    function GetAlertsAction(alerts) {
        alerts.getList().then(function (alertList) {
            var payload = {
                actionType: GetAlertsAction.Type,
                alerts: alertList
            };
            VizPortalReact.Dispatcher.instance.dispatch(payload);
        });
    }
    VizPortalReact.GetAlertsAction = GetAlertsAction;
    var GetAlertsAction;
    (function (GetAlertsAction) {
        GetAlertsAction.Type = 'get-alerts';
    })(GetAlertsAction = VizPortalReact.GetAlertsAction || (VizPortalReact.GetAlertsAction = {}));
    function AlertTryAgainAction(alertId) {
        VizPortalReact.Dispatcher.instance.dispatch({
            actionType: AlertTryAgainAction.Type,
            alertId: alertId
        });
    }
    VizPortalReact.AlertTryAgainAction = AlertTryAgainAction;
    var AlertTryAgainAction;
    (function (AlertTryAgainAction) {
        AlertTryAgainAction.Type = 'alert-try-again';
    })(AlertTryAgainAction = VizPortalReact.AlertTryAgainAction || (VizPortalReact.AlertTryAgainAction = {}));
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../ts/models/IAlertInfo.ts" />
/// <reference path="AlertActions.ts" />
/// <reference path="Dispatcher.ts" />
/// <reference path="Store.ts" />
/// <reference path="StoreHelpers.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var AlertsStore = (function (_super) {
        __extends(AlertsStore, _super);
        function AlertsStore() {
            var _this = this;
            _super.call(this);
            this.alertList = AlertsStore.AlertsPending;
            VizPortalReact.Dispatcher.instance.register(function (payload) {
                switch (payload.actionType) {
                    case VizPortalReact.GetAlertCountAction.Type:
                        _this.count = payload.count;
                        _this.broadcast();
                        break;
                    case VizPortalReact.GetAlertsAction.Type:
                        _this.alertList = payload.alerts;
                        _this.count = _this.alertList.total;
                        _this.broadcast();
                        break;
                    case VizPortalReact.AlertTryAgainAction.Type:
                        var alertId = payload.alertId;
                        var remainingAlerts = _.filter(_this.alertList.alerts, function (alert) { return alert.id !== alertId; });
                        _this.alertList = {
                            alerts: remainingAlerts,
                            total: remainingAlerts.length
                        };
                        _this.count = remainingAlerts.length;
                        _this.broadcast();
                        break;
                }
            });
        }
        AlertsStore.prototype.getCount = function () {
            return this.count;
        };
        AlertsStore.prototype.getAlerts = function () {
            return this.alertList;
        };
        // A sentinel value to represent a pending alerts list.
        AlertsStore.AlertsPending = { total: 0, alerts: [] };
        return AlertsStore;
    })(VizPortalReact.Store);
    VizPortalReact.AlertsStore = AlertsStore;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../common/react/CommonStyles.ts" />
/// <reference path="../../common/react/IReactTranslateService.ts" />
/// <reference path="../../ts/L10n/L10n.ts" />
/// <reference path="HeaderStyles.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var AlertsMenuPanel = (function (_super) {
        __extends(AlertsMenuPanel, _super);
        function AlertsMenuPanel() {
            _super.apply(this, arguments);
        }
        AlertsMenuPanel.prototype.componentDidMount = function () {
            this.props.alertActions.getAlerts();
        };
        AlertsMenuPanel.prototype.render = function () {
            return React.DOM.div({ style: AlertsMenuPanel.alertsMenuContainerStyle }, this.alertItems());
        };
        AlertsMenuPanel.prototype.alertItems = function () {
            var _this = this;
            var alertList = this.props.alertsStore.getAlerts();
            // Alerts pending
            if (alertList === VizPortalReact.AlertsStore.AlertsPending) {
                return null; // TODO: maybe a loading indicator?
            }
            // No alerts
            if (alertList.alerts.length === 0) {
                return React.DOM.div({
                    style: {
                        padding: VizPortalReact.CommonStyles.Sizes.DefaultSpace,
                        fontStyle: 'italic'
                    }
                }, this.props.translate('noAlerts'));
            }
            // Some alerts
            return React.DOM.div({}, _.map(alertList.alerts, function (alert) {
                return AlertsMenuItem.element({
                    key: alert.id,
                    translate: _this.props.translate,
                    siteUrls: _this.props.siteUrls,
                    alertActions: _this.props.alertActions,
                    alert: alert,
                    itemSelected: _this.props.itemSelected
                });
            }));
        };
        AlertsMenuPanel.displayName = 'AlertsMenuPanel';
        AlertsMenuPanel.element = React.createFactory(AlertsMenuPanel);
        AlertsMenuPanel.alertsMenuContainerStyle = _.extend({}, VizPortalReact.HeaderStyles.MenuPanelStyle, {
            width: 350,
            height: 'inherit',
            maxHeight: 600,
            overflow: 'auto',
            padding: VizPortalReact.CommonStyles.Sizes.SmallSpace
        });
        return AlertsMenuPanel;
    })(React.Component);
    VizPortalReact.AlertsMenuPanel = AlertsMenuPanel;
    var AlertsMenuItem = (function (_super) {
        __extends(AlertsMenuItem, _super);
        function AlertsMenuItem() {
            _super.apply(this, arguments);
        }
        AlertsMenuItem.prototype.render = function () {
            var _this = this;
            var alert = this.props.alert;
            return React.DOM.div({
                className: 'tb-alert-item',
                style: {
                    whiteSpace: 'normal'
                }
            }, React.DOM.span({
                style: {
                    fontWeight: 'bold'
                }
            }, this.title()), React.DOM.table({ cellSpacing: '0', cellPadding: '0' }, 
            // Datasource row
            React.DOM.tr({}, this.labelCell(this.props.translate('tableDatasource')), React.DOM.td({}, alert.datasource
                ? React.DOM.a({
                    href: this.props.siteUrls.datasourceDetailsUrl(alert.datasource.id),
                    onClick: function () { return _this.props.itemSelected(); }
                }, alert.datasource.name)
                : this.props.translate('embedded'))), 
            // Failure type row
            React.DOM.tr({}, this.labelCell(this.props.translate('tableFailureType')), React.DOM.td({}, this.failureType(alert.statusCode))), 
            // Most recent failure date row
            React.DOM.tr({}, this.labelCell(this.props.translate('tableRefreshFailed')), React.DOM.td({}, this.dateTimeOrNever(alert.mostRecentFailureAt))), 
            // Most recent success date row
            React.DOM.tr({}, this.labelCell(this.props.translate('tableLastRefresh')), React.DOM.td({}, this.dateTimeOrNever(alert.lastSuccessAt))), this.tryAgainLink(), this.connectionDetailsLink()));
        };
        AlertsMenuItem.prototype.labelCell = function (text) {
            return React.DOM.td({ style: AlertsMenuItem.labelStyle }, text);
        };
        AlertsMenuItem.prototype.title = function () {
            var workbooks = this.props.alert.workbooks;
            if (!workbooks || workbooks.length === 0) {
                return this.props.translate('outOfDateWorkbookNone');
            }
            if (workbooks.length === 1) {
                return this.props.translate('outOfDateWithName', {
                    NAME: VizPortal.L10n.elideIfLong(workbooks[0].name)
                });
            }
            else {
                // more than one
                return this.props.translate('outOfDateWorkbooksWithCount', {
                    LIST_COUNT: workbooks.length
                }, VizPortal.L10n.Interpolations.Count);
            }
        };
        AlertsMenuItem.prototype.failureType = function (statusCode) {
            switch (statusCode) {
                case VizPortal.AlertErrorCode.AlertSignInFailed:
                case VizPortal.AlertErrorCode.AlertRemoteSignInFailed:
                    return this.props.translate('signInFailedUnknownReason');
                case VizPortal.AlertErrorCode.AlertExpiredPassword:
                case VizPortal.AlertErrorCode.AlertRemoteExpiredPassword:
                    return this.props.translate('expiredPassword');
                case VizPortal.AlertErrorCode.AlertAccessTokenValidation:
                    return this.props.translate('accessTokenValidation');
                case VizPortal.AlertErrorCode.AlertAuthConfiguration:
                    return this.props.translate('authConfiguration');
                case VizPortal.AlertErrorCode.AlertConnectionFailure:
                case VizPortal.AlertErrorCode.AlertRemoteConnectionFailure:
                    return this.props.translate('connectionFailure');
                case VizPortal.AlertErrorCode.AlertOverlappingSchedules:
                    return this.props.translate('overlappingSchedules');
                case VizPortal.AlertErrorCode.AlertFullRefreshRequired:
                    return this.props.translate('fullRefreshRequired');
                case VizPortal.AlertErrorCode.AlertConnectionlessFailure:
                    return this.props.translate('connectionlessFailure');
                default:
                    // AlertErrorCode.AlertUnknownFailure or AlertErrorCode.AlertRemoteUnknownFailure
                    return this.props.translate('unknownFailure');
            }
        };
        AlertsMenuItem.prototype.dateTimeOrNever = function (date) {
            return date ? VizPortal.L10n.localizedDateTime(date) : this.props.translate('never');
        };
        AlertsMenuItem.prototype.tryAgainLink = function () {
            var _this = this;
            if (this.isRemoteRefresh()) {
                return null;
            }
            return React.DOM.tr({}, React.DOM.td({ colSpan: 2 }, React.DOM.a({
                onClick: function () {
                    _this.props.alertActions.tryAgain(_this.props.alert);
                    _this.props.itemSelected();
                }
            }, this.props.translate('tryAgain'))));
        };
        AlertsMenuItem.prototype.connectionDetailsLink = function () {
            var _this = this;
            if (!this.isEditableFailure()) {
                return null;
            }
            if (!this.props.alert.datasource && this.props.alert.workbooks.length === 0) {
                return null;
            }
            return React.DOM.tr({}, React.DOM.td({ colSpan: 2 }, React.DOM.a({
                href: this.props.alert.datasource
                    ? this.props.siteUrls.datasourceDataConnectionUrl(this.props.alert.datasource.id)
                    : this.props.siteUrls.workbookDatasourcesUrl(this.props.alert.workbooks[0].id),
                style: {
                    float: 'right',
                    marginRight: VizPortalReact.CommonStyles.Sizes.DefaultSpace,
                    color: VizPortalReact.CommonStyles.Colors.ActionOrange
                },
                onClick: function () { return _this.props.itemSelected(); }
            }, this.props.translate('connectionDetails'))));
        };
        AlertsMenuItem.prototype.isEditableFailure = function () {
            return this.props.alert.statusCode !== VizPortal.AlertErrorCode.AlertOverlappingSchedules;
        };
        AlertsMenuItem.prototype.isRemoteRefresh = function () {
            return _.contains(AlertsMenuItem.remoteRefreshStatusCodes, this.props.alert.statusCode);
        };
        AlertsMenuItem.displayName = 'AlertsMenuItem';
        AlertsMenuItem.element = React.createFactory(AlertsMenuItem);
        AlertsMenuItem.remoteRefreshStatusCodes = [
            VizPortal.AlertErrorCode.AlertRemoteUnknownFailure,
            VizPortal.AlertErrorCode.AlertRemoteSignInFailed,
            VizPortal.AlertErrorCode.AlertRemoteExpiredPassword,
            VizPortal.AlertErrorCode.AlertRemoteConnectionFailure,
        ];
        AlertsMenuItem.labelStyle = {
            whiteSpace: 'nowrap',
            paddingTop: VizPortalReact.CommonStyles.Sizes.SmallSpace,
            paddingBottom: VizPortalReact.CommonStyles.Sizes.SmallSpace,
            paddingRight: VizPortalReact.CommonStyles.Sizes.DefaultSpace
        };
        return AlertsMenuItem;
    })(React.Component);
    VizPortalReact.AlertsMenuItem = AlertsMenuItem;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../common/react/AlertsStore.ts" />
/// <reference path="../../common/react/IReactTranslateService.ts" />
/// <reference path="../../common/react/components/Menu.ts" />
/// <reference path="./AlertsMenuPanel.ts" />
/// <reference path="./HeaderMenuButton.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var AlertsMenu = (function (_super) {
        __extends(AlertsMenu, _super);
        function AlertsMenu(props) {
            _super.call(this, props);
            this.state = {
                alertCount: undefined
            };
            this.boundOnAlertsStoreChange = this.onAlertsStoreChange.bind(this);
        }
        AlertsMenu.prototype.componentDidMount = function () {
            this.props.alertsStore.addChangeListener(this.boundOnAlertsStoreChange);
            this.getAlertCount();
        };
        AlertsMenu.prototype.componentWillUnmount = function () {
            this.props.alertsStore.removeChangeListener(this.boundOnAlertsStoreChange);
        };
        AlertsMenu.prototype.onAlertsStoreChange = function () {
            this.setState({ alertCount: this.props.alertsStore.getCount() });
        };
        AlertsMenu.prototype.getAlertCount = function () {
            this.props.alertActions.getAlertCount();
        };
        AlertsMenu.prototype.render = function () {
            var _this = this;
            return VizPortalReact.Menu.element({
                ref: "menu",
                tbTestId: 'alerts-menu',
                style: this.props.style,
                menuButtonFactory: function (props) {
                    var alertCount = _this.state.alertCount;
                    props.iconUrl = 'url(img/alert_header_icon.png)';
                    props.label = _.isNumber(alertCount) && alertCount > 0 ? alertCount.toString() : '';
                    props.style = {
                        fontSize: VizPortalReact.HeaderStyles.AlertsCountFontSize
                    };
                    return VizPortalReact.HeaderMenuButton.element(props);
                },
                menuPanelFactory: function (props) {
                    props.translate = _this.props.translate;
                    props.itemSelected = function () {
                        _this.refs['menu'].closeMenu();
                    };
                    props.alertActions = _this.props.alertActions;
                    props.alertsStore = _this.props.alertsStore;
                    props.siteUrls = _this.props.siteUrls;
                    return VizPortalReact.AlertsMenuPanel.element(props);
                }
            });
        };
        AlertsMenu.displayName = 'AlertsMenu';
        AlertsMenu.element = React.createFactory(AlertsMenu);
        return AlertsMenu;
    })(React.Component);
    VizPortalReact.AlertsMenu = AlertsMenu;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../common/react/CommonStyles.ts" />
/// <reference path="../../common/react/IReactTranslateService.ts" />
/// <reference path="../../common/react/components/FilteringListBox.ts" />
/// <reference path="HeaderStyles.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var HelpMenuPanel = (function (_super) {
        __extends(HelpMenuPanel, _super);
        function HelpMenuPanel(props) {
            var _this = this;
            _super.call(this, props);
            this.boundItemSelected = function () { return _this.props.itemSelected(); };
            this.boundShowAbout = function () {
                _this.props.helpActions.showAbout();
                _this.props.itemSelected();
            };
            this.boundShowGettingStarted = function () {
                _this.props.helpActions.showGettingStarted();
                _this.props.itemSelected();
            };
        }
        HelpMenuPanel.prototype.render = function () {
            return React.DOM.div({ style: HelpMenuPanel.helpMenuContainerStyle }, this.renderSearchBox(), this.renderMenuItems());
        };
        HelpMenuPanel.prototype.renderSearchBox = function () {
            var _this = this;
            return React.DOM.input({
                ref: 'searchBox',
                style: {
                    width: '100%',
                    boxSizing: 'border-box',
                    height: VizPortalReact.CommonStyles.Sizes.RowHeight,
                    fontFamily: VizPortalReact.CommonStyles.Fonts.BodyFont,
                    fontSize: VizPortalReact.CommonStyles.Sizes.SmallFontSize,
                    border: '1px solid ' + VizPortalReact.CommonStyles.Colors.Grey178,
                    color: VizPortalReact.CommonStyles.Colors.GreyTextColor,
                    backgroundImage: 'url(img/magnifying_glass_small_normal.png)',
                    backgroundPosition: 'left center',
                    backgroundRepeat: 'no-repeat',
                    paddingLeft: 23,
                    outline: 'none'
                },
                placeholder: this.props.translate('searchHelp'),
                onKeyDown: function (event) {
                    if (event.keyCode === VizPortal.Keys.Enter) {
                        var searchBox = $(React.findDOMNode(_this.refs['searchBox']));
                        var searchTerm = searchBox.val();
                        searchBox.val('');
                        _this.props.itemSelected();
                        _this.props.helpActions.searchHelp(searchTerm);
                    }
                }
            });
        };
        HelpMenuPanel.prototype.renderMenuItems = function () {
            var menuItems = [
                VizPortalReact.HeaderMenuItem.element({
                    key: 'help',
                    label: this.props.serverHelpLabel,
                    url: this.props.serverHelpUrl,
                    target: '_blank',
                    onClick: this.boundItemSelected
                })
            ];
            if (!this.props.isOfflineHelpEnabled) {
                menuItems.push(VizPortalReact.HeaderMenuItem.element({
                    key: 'support',
                    label: this.props.translate('support'),
                    url: this.props.supportUrl,
                    target: '_blank',
                    onClick: this.boundItemSelected
                }));
            }
            if (this.props.showGettingStartedLink) {
                menuItems.push(VizPortalReact.HeaderMenuItem.element({
                    key: 'welcomeScreen',
                    label: this.props.translate('welcomeScreen'),
                    onClick: this.boundShowGettingStarted
                }));
            }
            menuItems.push(VizPortalReact.HeaderMenuItem.element({
                key: 'aboutServer',
                label: this.props.translate('aboutServer', { SERVER_NAME: this.props.serverName }),
                onClick: this.boundShowAbout
            }));
            return menuItems;
        };
        HelpMenuPanel.displayName = 'HelpMenuPanel';
        HelpMenuPanel.element = React.createFactory(HelpMenuPanel);
        HelpMenuPanel.helpMenuContainerStyle = _.extend({}, VizPortalReact.HeaderStyles.MenuPanelStyle, {
            height: 'auto',
            padding: VizPortalReact.CommonStyles.Sizes.SmallSpace
        });
        return HelpMenuPanel;
    })(React.Component);
    VizPortalReact.HelpMenuPanel = HelpMenuPanel;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../common/react/IReactTranslateService.ts" />
/// <reference path="../../common/react/components/FilteringListBox.ts" />
/// <reference path="../../common/react/components/Menu.ts" />
/// <reference path="./HeaderMenuButton.ts" />
/// <reference path="./HelpMenuPanel.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var HelpMenu = (function (_super) {
        __extends(HelpMenu, _super);
        function HelpMenu() {
            _super.apply(this, arguments);
        }
        HelpMenu.prototype.render = function () {
            var _this = this;
            return VizPortalReact.Menu.element({
                ref: "menu",
                tbTestId: 'help-menu',
                style: this.props.style,
                menuButtonFactory: function (props) {
                    props.iconUrl = 'url(img/help_header_icon.png)';
                    return VizPortalReact.HeaderMenuButton.element(props);
                },
                menuPanelFactory: function (helpMenuPanelProps) {
                    helpMenuPanelProps.itemSelected = function () {
                        _this.refs['menu'].closeMenu();
                    };
                    // Copy properties from HelpMenu to HelpMenuPanel
                    _.extend(helpMenuPanelProps, _this.props);
                    return VizPortalReact.HelpMenuPanel.element(helpMenuPanelProps);
                }
            });
        };
        HelpMenu.displayName = 'HelpMenu';
        HelpMenu.element = React.createFactory(HelpMenu);
        return HelpMenu;
    })(React.Component);
    VizPortalReact.HelpMenu = HelpMenu;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../common/react/CommonStyles.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var HeaderSearchBox = (function (_super) {
        __extends(HeaderSearchBox, _super);
        function HeaderSearchBox() {
            var _this = this;
            _super.apply(this, arguments);
            this.state = {
                hovered: false,
                open: false
            };
            this.boundBlur = function () { return _this.handleBlur(); };
            this.boundClick = function () { return _this.handleClick(); };
            this.boundMouseEnter = function () { return _this.setState({ hovered: true }); };
            this.boundMouseLeave = function () { return _this.setState({ hovered: false }); };
        }
        HeaderSearchBox.prototype.handleClick = function () {
            this.setState({ open: true }, function () {
                setTimeout(function () {
                    $('input[name="omniboxTextBox"]').focus();
                }, 0);
            });
        };
        HeaderSearchBox.prototype.handleBlur = function () {
            this.setState({ hovered: false, open: false });
        };
        HeaderSearchBox.prototype.render = function () {
            return React.DOM.div({
                onMouseEnter: this.boundMouseEnter,
                onMouseLeave: this.boundMouseLeave
            }, this.contents());
        };
        HeaderSearchBox.prototype.contents = function () {
            if (this.state.open) {
                // show angular search box
                var content = VizPortalReact.AngularDirective.element({
                    angularContext: this.props.angularContext,
                    template: "<tb:omnibox ng-show='showSiteControls()'></tb:omnibox>"
                });
                return React.DOM.div({
                    ref: 'omniboxSearchOpen',
                    style: {
                        paddingRight: '12px',
                        width: '350px' // matches $omniboxPopupWidth in omnibox.styl
                    },
                    onBlur: this.boundBlur
                }, content);
            }
            else {
                // searchbox closed, show magnifying glass.
                return React.DOM.span({
                    ref: 'omniboxSearchClosed',
                    style: {
                        backgroundImage: 'url(img/magnifying_glass_large_white_normal.png)',
                        backgroundPosition: 'left center',
                        backgroundRepeat: 'no-repeat',
                        cursor: 'pointer',
                        opacity: this.state.hovered ? VizPortalReact.HeaderStyles.HoverOpacity : VizPortalReact.HeaderStyles.RestOpacity,
                        padding: '12px 24px 12px 12px'
                    },
                    onClick: this.boundClick
                });
            }
        };
        HeaderSearchBox.displayName = 'HeaderSearchBox';
        HeaderSearchBox.element = React.createFactory(HeaderSearchBox);
        return HeaderSearchBox;
    })(React.Component);
    VizPortalReact.HeaderSearchBox = HeaderSearchBox;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../common/react/CommonStyles.ts" />
/// <reference path="../SiteUrls.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var Logo = (function (_super) {
        __extends(Logo, _super);
        function Logo() {
            _super.apply(this, arguments);
        }
        Logo.prototype.render = function () {
            var logo = this.props.logo;
            return React.DOM.a({
                href: logo.href || this.props.siteUrls.projectsUrl(),
                'data-tb-test-id': 'top-bar-logo-link',
                tabIndex: -1,
                style: {
                    width: logo.width,
                    height: logo.height,
                    backgroundImage: 'url(' + logo.image + ')',
                    display: 'inline-block',
                    marginLeft: 18,
                    marginRight: 35,
                    marginTop: 9,
                    marginBottom: 9,
                    // This is used with the ' ' text content to prevent a strange issue with
                    // links with no text content. Without text content, the logo was somehow expanding
                    // the containing div height by 3px.
                    whiteSpace: 'pre'
                },
                title: logo.title
            }, ' ');
        };
        Logo.displayName = 'Logo';
        Logo.element = React.createFactory(Logo);
        return Logo;
    })(React.Component);
    VizPortalReact.Logo = Logo;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../common/react/CommonStyles.ts" />
/// <reference path="HeaderStyles.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var HeaderMenuItem = (function (_super) {
        __extends(HeaderMenuItem, _super);
        function HeaderMenuItem(props) {
            var _this = this;
            _super.call(this, props);
            this.state = {
                hovered: false
            };
            this.boundMouseEnter = function () { return _this.setState({ hovered: true }); };
            this.boundMouseLeave = function () { return _this.setState({ hovered: false }); };
        }
        HeaderMenuItem.prototype.render = function () {
            var style = _.extend({}, HeaderMenuItem.linkStyle, {
                color: this.props.isDisabled ? VizPortalReact.CommonStyles.Colors.Grey224 : VizPortalReact.CommonStyles.Colors.Grey102,
                backgroundColor: this.state.hovered && !this.props.isDisabled ? VizPortalReact.CommonStyles.Colors.Grey245 : 'inherit'
            });
            return React.DOM.a({
                href: this.props.url,
                title: this.props.title,
                target: this.props.target,
                style: style,
                onClick: this.props.onClick,
                onMouseEnter: this.boundMouseEnter,
                onMouseLeave: this.boundMouseLeave
            }, this.props.label);
        };
        HeaderMenuItem.displayName = 'HeaderMenuItem';
        HeaderMenuItem.element = React.createFactory(HeaderMenuItem);
        HeaderMenuItem.linkStyle = {
            display: 'block',
            padding: VizPortalReact.CommonStyles.Sizes.DefaultSpace,
            textDecoration: 'none',
            color: VizPortalReact.CommonStyles.Colors.Grey102
        };
        return HeaderMenuItem;
    })(React.Component);
    VizPortalReact.HeaderMenuItem = HeaderMenuItem;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../common/react/CommonStyles.ts" />
/// <reference path="../../common/react/IReactTranslateService.ts" />
/// <reference path="HeaderMenuItem.ts" />
/// <reference path="HeaderStyles.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var UserMenuPanel = (function (_super) {
        __extends(UserMenuPanel, _super);
        function UserMenuPanel(props) {
            var _this = this;
            _super.call(this, props);
            this.boundItemSelected = function () { return _this.props.itemSelected(); };
            this.boundSignout = function () {
                _this.props.userActions.signout();
                _this.props.itemSelected();
            };
            this.boundChangeUserStartPage = function () {
                _this.props.userActions.changeUserStartPage();
                _this.props.itemSelected();
            };
            this.boundChangeDefaultStartPage = function () {
                _this.props.userActions.changeDefaultStartPage();
                _this.props.itemSelected();
            };
        }
        UserMenuPanel.prototype.render = function () {
            var menuItems = [];
            var inServerArea = this.props.isSessionMultiSite && VizPortalReact.Navigation.isServerLocation(this.props.location);
            if (inServerArea) {
                menuItems.push(VizPortalReact.HeaderMenuItem.element({
                    key: 'myContentSiteOnly',
                    label: this.props.translate('myContentSiteOnly'),
                    isDisabled: true
                }));
                menuItems.push(VizPortalReact.HeaderMenuItem.element({
                    key: 'myAccountSettingsServer',
                    label: this.props.translate('myAccountSettingsServer'),
                    url: this.props.serverUrls.userSettingsUrl(this.props.user),
                    onClick: this.boundItemSelected
                }));
            }
            else {
                menuItems.push(VizPortalReact.HeaderMenuItem.element({
                    key: 'myContent',
                    label: this.props.translate('myContent'),
                    url: this.props.siteUrls.userContentUrl(this.props.user),
                    onClick: this.boundItemSelected
                }));
                menuItems.push(VizPortalReact.HeaderMenuItem.element({
                    key: 'myAccountSettings',
                    label: this.props.translate('myAccountSettings'),
                    url: this.props.siteUrls.userSettingsUrl(this.props.user),
                    onClick: this.boundItemSelected
                }));
            }
            // Change start page
            menuItems.push(VizPortalReact.HeaderMenuItem.element({
                key: 'userStartPageChange',
                label: this.props.translate('userStartPageChange'),
                onClick: this.boundChangeUserStartPage
            }));
            // Change all users start page
            if (this.props.isSessionServerAdmin) {
                var isContentPage = this.props.location === VizPortalReact.Navigation.Location.SiteContent;
                menuItems.push(VizPortalReact.HeaderMenuItem.element({
                    key: 'defaultStartPageChange',
                    isDisabled: !isContentPage,
                    title: isContentPage ? '' : this.props.translate('defaultStartPageRestriction'),
                    label: this.props.translate('defaultStartPageChange'),
                    onClick: this.boundChangeDefaultStartPage
                }));
            }
            // Logout
            if (this.props.isLogoutEnabled) {
                var switchUser = this.props.authenticationType === VizPortal.ServerApi.AuthenticationType.Sspi ||
                    this.props.authenticationType === VizPortal.ServerApi.AuthenticationType.Kerberos;
                menuItems.push(VizPortalReact.HeaderMenuItem.element({
                    key: 'signOut',
                    label: switchUser ? this.props.translate('switchUser') : this.props.translate('signOut'),
                    onClick: this.boundSignout
                }));
            }
            return React.DOM.div({ style: UserMenuPanel.userMenuContainerStyle }, menuItems);
        };
        UserMenuPanel.displayName = 'UserMenuPanel';
        UserMenuPanel.element = React.createFactory(UserMenuPanel);
        UserMenuPanel.userMenuContainerStyle = _.extend({}, VizPortalReact.HeaderStyles.MenuPanelStyle, {
            height: 'auto',
            padding: VizPortalReact.CommonStyles.Sizes.SmallSpace
        });
        return UserMenuPanel;
    })(React.Component);
    VizPortalReact.UserMenuPanel = UserMenuPanel;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../common/react/IReactTranslateService.ts" />
/// <reference path="../../common/react/components/Menu.ts" />
/// <reference path="./HeaderMenuButton.ts" />
/// <reference path="./UserMenuPanel.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var UserMenu = (function (_super) {
        __extends(UserMenu, _super);
        function UserMenu() {
            _super.apply(this, arguments);
        }
        UserMenu.prototype.render = function () {
            var _this = this;
            return VizPortalReact.Menu.element({
                ref: "menu",
                tbTestId: 'user-menu',
                style: this.props.style,
                menuButtonFactory: function (props) {
                    props.label = _this.props.user.displayName;
                    props.iconUrl = 'url(img/dropdown_arrow_header_icon.png)';
                    // Override the default styles to place the dropdown arrow to the right of the label
                    props.style = {
                        paddingLeft: 0,
                        paddingRight: VizPortalReact.CommonStyles.Sizes.NormalIconSize,
                        backgroundPosition: 'right center'
                    };
                    return VizPortalReact.HeaderMenuButton.element(props);
                },
                menuPanelFactory: function (props) {
                    props.translate = _this.props.translate;
                    props.itemSelected = function () {
                        _this.refs['menu'].closeMenu();
                    };
                    props.siteUrls = _this.props.siteUrls;
                    props.serverUrls = _this.props.serverUrls;
                    props.user = _this.props.user;
                    props.userActions = _this.props.userActions;
                    props.location = _this.props.location;
                    props.isLogoutEnabled = _this.props.isLogoutEnabled;
                    props.isSessionMultiSite = _this.props.isSessionMultiSite;
                    props.isSessionServerAdmin = _this.props.isSessionServerAdmin;
                    props.authenticationType = _this.props.authenticationType;
                    return VizPortalReact.UserMenuPanel.element(props);
                }
            });
        };
        UserMenu.displayName = 'UserMenu';
        UserMenu.element = React.createFactory(UserMenu);
        return UserMenu;
    })(React.Component);
    VizPortalReact.UserMenu = UserMenu;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var UserActions = (function () {
        function UserActions(serverService, userSettingsActions) {
            this.serverService = serverService;
            this.userSettingsActions = userSettingsActions;
        }
        UserActions.prototype.signout = function () {
            this.serverService.signOut();
        };
        UserActions.prototype.changeUserStartPage = function () {
            this.userSettingsActions.confirmChangeUserStartPage();
        };
        UserActions.prototype.changeDefaultStartPage = function () {
            this.userSettingsActions.confirmChangeDefaultStartPage();
        };
        return UserActions;
    })();
    VizPortalReact.UserActions = UserActions;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="AlertsMenu.ts" />
/// <reference path="HelpMenu.ts" />
/// <reference path="FavoritesMenu.ts" />
/// <reference path="HeaderSearchBox.ts" />
/// <reference path="Logo.ts" />
/// <reference path="Navigation.ts" />
/// <reference path="UserMenu.ts" />
/// <reference path="../../common/react/AlertActions.ts" />
/// <reference path="../../common/react/HelpActions.ts" />
/// <reference path="../../common/react/UserActions.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var TopBar = (function (_super) {
        __extends(TopBar, _super);
        function TopBar() {
            _super.apply(this, arguments);
            this.state = {};
        }
        TopBar.prototype.render = function () {
            if (!VizPortal.FeatureFlags.reactTopBar) {
                // Just render a blank div.
                // This is necessary because tbIfFeatureFlag still links the child directives, causing
                // TopBar to render, even if the feature flag is off.
                return React.DOM.div({});
            }
            return React.DOM.div({
                style: {
                    backgroundColor: VizPortalReact.HeaderStyles.HeaderBackgroundColor
                }
            }, this.logo(), React.DOM.div({
                style: {
                    position: 'absolute',
                    top: 0,
                    left: this.props.logo.width + 48,
                    right: 0
                }
            }, React.DOM.div({
                style: {
                    display: 'table',
                    width: '100%',
                    whiteSpace: 'nowrap',
                    fontSize: VizPortalReact.CommonStyles.Sizes.HeaderFontSize
                }
            }, React.DOM.div({ style: { display: 'table-row' } }, this.siteSwitcher(), this.navigation(), this.onServerPage() ? null : this.searchBox(), this.menus()))));
        };
        TopBar.prototype.onServerPage = function () {
            return VizPortalReact.Navigation.isServerLocation(this.props.navLocation);
        };
        TopBar.prototype.logo = function () {
            return VizPortalReact.Logo.element({
                siteUrls: this.props.siteUrls,
                logo: this.props.logo
            });
        };
        TopBar.prototype.tableCell = function (key, content, style) {
            style = _.extend({
                display: 'table-cell',
                verticalAlign: 'middle'
            }, style);
            return React.DOM.div({ key: key, style: style }, content);
        };
        TopBar.prototype.siteSwitcher = function () {
            return this.tableCell('siteSwitcher', VizPortalReact.SiteSwitcher.element({
                siteStore: this.props.siteStore,
                translate: this.props.translate,
                location: this.props.location,
                navLocation: this.props.navLocation,
                currentSite: this.props.currentSite,
                serverUrls: this.props.serverUrls
            }));
        };
        TopBar.prototype.searchBox = function () {
            return this.tableCell('searchBox', VizPortalReact.HeaderSearchBox.element({
                angularContext: this.props.angularContext
            }));
        };
        TopBar.prototype.menus = function () {
            var menus = [];
            if (!this.onServerPage()) {
                menus.push(this.alertsMenu());
                menus.push(this.favoritesMenu());
            }
            menus.push(this.helpMenu());
            menus.push(this.userMenu());
            return this.tableCell('menus', React.DOM.div({}, menus), {
                width: '100%',
                textAlign: 'right'
            });
        };
        TopBar.prototype.alertsMenu = function () {
            return VizPortalReact.AlertsMenu.element({
                key: 'alerts',
                style: TopBar.menuButtonStyle,
                angularContext: this.props.angularContext,
                translate: this.props.translate,
                alertsStore: this.props.alertsStore,
                alertActions: this.props.alertActions,
                siteUrls: this.props.siteUrls
            });
        };
        TopBar.prototype.favoritesMenu = function () {
            return VizPortalReact.FavoritesMenu.element({
                key: 'favorites',
                style: TopBar.menuButtonStyle,
                angularContext: this.props.angularContext,
                favoritesStore: this.props.favoritesStore,
                translate: this.props.translate,
                siteUrls: this.props.siteUrls
            });
        };
        TopBar.prototype.helpMenu = function () {
            return VizPortalReact.HelpMenu.element({
                key: 'help',
                style: TopBar.menuButtonStyle,
                angularContext: this.props.angularContext,
                translate: this.props.translate,
                helpActions: this.props.helpActions,
                isOfflineHelpEnabled: this.props.isOfflineHelpEnabled,
                showGettingStartedLink: this.props.showGettingStartedLink,
                serverHelpLabel: this.props.serverHelpLabel,
                serverHelpUrl: this.props.serverHelpUrl,
                supportUrl: this.props.supportUrl,
                serverName: this.props.serverName
            });
        };
        TopBar.prototype.userMenu = function () {
            return VizPortalReact.UserMenu.element({
                key: 'user',
                style: TopBar.menuButtonStyle,
                angularContext: this.props.angularContext,
                translate: this.props.translate,
                user: this.props.user,
                siteUrls: this.props.siteUrls,
                serverUrls: this.props.serverUrls,
                userActions: this.props.userActions,
                location: this.props.navLocation,
                isLogoutEnabled: this.props.isLogoutEnabled,
                isSessionMultiSite: this.props.isSessionMultiSite,
                isSessionServerAdmin: this.props.isSessionServerAdmin,
                authenticationType: this.props.authenticationType
            });
        };
        TopBar.prototype.navigation = function () {
            return this.tableCell('navigation', VizPortalReact.Navigation.element({
                translate: this.props.translate,
                siteUrls: this.props.siteUrls,
                serverUrls: this.props.serverUrls,
                currentLocation: this.props.navLocation,
                hideRightDivider: this.onServerPage() // The server page doesn't have a search box, so no divider is necessary
            }));
        };
        TopBar.displayName = 'TopBar';
        TopBar.element = React.createFactory(TopBar);
        TopBar.menuButtonStyle = {
            marginRight: 16,
            verticalAlign: 'top'
        };
        return TopBar;
    })(React.Component);
    VizPortalReact.TopBar = TopBar;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../common/react/CommonStyles.ts" />
/// <reference path="../../common/react/components/Menu.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var TypeaheadFilterButton = (function (_super) {
        __extends(TypeaheadFilterButton, _super);
        function TypeaheadFilterButton() {
            _super.apply(this, arguments);
        }
        TypeaheadFilterButton.prototype.render = function () {
            var highlight = this.props.hovered || this.props.menuOpen;
            var valueSpan = React.DOM.span({
                style: {
                    overflow: 'hidden',
                    textOverflow: 'ellipsis',
                    whiteSpace: 'nowrap',
                    display: 'block',
                    height: VizPortalReact.CommonStyles.Sizes.LineHeight,
                    paddingTop: VizPortalReact.CommonStyles.Sizes.TextBoxPadding,
                    paddingLeft: VizPortalReact.CommonStyles.Sizes.TextBoxPadding
                }
            }, this.props.buttonTitle);
            return React.DOM.span({
                style: {
                    display: 'inline-block',
                    width: '100%',
                    height: VizPortalReact.CommonStyles.Sizes.RowHeight,
                    backgroundColor: VizPortalReact.CommonStyles.Colors.White,
                    boxSizing: 'border-box',
                    borderWidth: VizPortalReact.CommonStyles.Sizes.TextBoxBorderSize,
                    borderColor: VizPortalReact.CommonStyles.Colors.BorderColor,
                    borderStyle: 'solid'
                }
            }, React.DOM.span({
                style: {
                    float: 'right',
                    display: 'block',
                    width: VizPortalReact.CommonStyles.Sizes.NormalIconSize - VizPortalReact.CommonStyles.Sizes.TextBoxBorderSize,
                    height: '100%',
                    background: 'url(img/dropdown_arrow_normal.png) center center no-repeat',
                    borderLeftWidth: VizPortalReact.CommonStyles.Sizes.TextBoxBorderSize,
                    borderLeftColor: VizPortalReact.CommonStyles.Colors.BorderColor,
                    borderLeftStyle: 'solid'
                }
            }), valueSpan);
        };
        TypeaheadFilterButton.displayName = 'TypeaheadFilterButton';
        TypeaheadFilterButton.element = React.createFactory(TypeaheadFilterButton);
        return TypeaheadFilterButton;
    })(React.Component);
    VizPortalReact.TypeaheadFilterButton = TypeaheadFilterButton;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../common/react/CommonStyles.ts" />
/// <reference path="../../common/react/IReactTranslateService.ts" />
/// <reference path="../../common/react/components/FilteringListBox.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var TypeaheadFilterPanel = (function (_super) {
        __extends(TypeaheadFilterPanel, _super);
        function TypeaheadFilterPanel() {
            _super.apply(this, arguments);
        }
        TypeaheadFilterPanel.prototype.render = function () {
            var _this = this;
            var menuPanelStyle = {
                boxSizing: 'border-box',
                height: 308,
                backgroundColor: VizPortalReact.CommonStyles.Colors.White,
                borderWidth: VizPortalReact.CommonStyles.Sizes.LineWidth,
                borderColor: VizPortalReact.CommonStyles.Colors.BorderColor,
                borderStyle: 'solid'
            };
            return React.DOM.div({ style: menuPanelStyle }, VizPortalReact.FilteringListBox.element({
                itemStore: this.props.itemStore,
                searchBoxPlaceholder: this.props.translate('search'),
                matchPrefixesOnly: this.props.matchPrefixesOnly,
                itemSelected: function () { return _this.props.itemSelected(); },
                style: VizPortalReact.CommonStyles.Helpers.Edges(VizPortalReact.CommonStyles.Sizes.SmallSpace)
            }));
        };
        TypeaheadFilterPanel.displayName = 'TypeaheadFilterPanel';
        TypeaheadFilterPanel.element = React.createFactory(TypeaheadFilterPanel);
        return TypeaheadFilterPanel;
    })(React.Component);
    VizPortalReact.TypeaheadFilterPanel = TypeaheadFilterPanel;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="../../common/react/SparseCachedList.ts" />
/// <reference path="../../common/react/IReactTranslateService.ts" />
/// <reference path="../../common/react/components/FilteringListBox.ts" />
/// <reference path="../../common/react/components/Menu.ts" />
/// <reference path="./TypeaheadFilterButton.ts" />
/// <reference path="./TypeaheadFilterPanel.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var TypeaheadFilter = (function (_super) {
        __extends(TypeaheadFilter, _super);
        function TypeaheadFilter() {
            _super.apply(this, arguments);
            this.lastFilter = null;
            this.state = {
                fieldValues: []
            };
        }
        TypeaheadFilter.prototype.render = function () {
            var _this = this;
            return VizPortalReact.Menu.element({
                ref: 'menu',
                tbTestId: ['typeahead-filter', this.props.filter.definition.name].join('-'),
                style: {
                    // The width of the menu button should be equal to the width of the containing filter control
                    width: '100%'
                },
                menuPanelStyle: {
                    // The width of the panel should be equal to the width of the containing filter control
                    width: '100%',
                    // Overlap the top border of the menu panel with the bottom border of the menu button
                    marginTop: -VizPortalReact.CommonStyles.Sizes.TextBoxBorderSize
                },
                menuButtonFactory: function (props) {
                    props.buttonTitle = _this.props.filter.value ? _this.props.filter.value.label : '';
                    return VizPortalReact.TypeaheadFilterButton.element(props);
                },
                menuPanelFactory: function (props) {
                    props.itemStore = {
                        getItems: function (filter, start, end) {
                            if (filter !== _this.lastFilter) {
                                _this.initializeCachedFieldValues(filter);
                            }
                            return _this.cachedFieldValues.getItems(start, end);
                        }
                    };
                    props.translate = _this.props.translate;
                    props.matchPrefixesOnly = _this.props.filter.definition.matchPrefixesOnly;
                    props.itemSelected = function () {
                        _this.refs['menu'].closeMenu();
                    };
                    return VizPortalReact.TypeaheadFilterPanel.element(props);
                },
                onBeforeMenuOpen: function () {
                    _this.resetCachedFieldValues();
                    return Q.when();
                }
            });
        };
        TypeaheadFilter.prototype.resetCachedFieldValues = function () {
            this.initializeCachedFieldValues('');
        };
        TypeaheadFilter.prototype.initializeCachedFieldValues = function (searchTerm) {
            var _this = this;
            var location = window.location.href;
            this.cachedFieldValues = new VizPortalReact.SparseCachedList(this.props.getFieldValueQuery().withMatchText(searchTerm), function (item) {
                return {
                    label: item.label,
                    count: item.count,
                    url: _this.addParameter(location, _this.props.filter.definition.name, item.value)
                };
            });
            this.lastFilter = searchTerm;
        };
        // TODO: this may be useful elsewhere - consider moving to a helper class
        // Adapted from the answer at http://stackoverflow.com/a/7648182
        TypeaheadFilter.prototype.addParameter = function (originalUrl, param, value) {
            // Using a positive lookahead (?=\=) to find the
            // given parameter, preceded by a ? or &, and followed
            // by a = with a value after than (using a non-greedy selector)
            // and then followed by a & or the end of the string
            var val = new RegExp('(\\?|\\&)' + param + '=.*?(?=(&|$))'), parts = originalUrl.toString().split('#'), url = parts[0], hash = parts[1], qstring = /\?.+$/;
            // Check if the parameter exists
            if (val.test(hash)) {
                // if it does, replace it, using the captured group
                // to determine & or ? at the beginning
                return url + '#' + hash.replace(val, '$1' + param + '=' + value);
            }
            else if (qstring.test(hash)) {
                // otherwise, if there is a query string at all
                // add the param to the end of it
                return originalUrl + '&' + param + '=' + value;
            }
            else {
                // if there's no query string, add one
                return originalUrl + '?' + param + '=' + value;
            }
        };
        TypeaheadFilter.displayName = 'TypeaheadFilter';
        TypeaheadFilter.element = React.createFactory(TypeaheadFilter);
        return TypeaheadFilter;
    })(React.Component);
    VizPortalReact.TypeaheadFilter = TypeaheadFilter;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../../ts/libs.ts" />
/// <reference path="../../../ts/helpers/LockStatusHelper.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var PermissionLockStatus = (function (_super) {
        __extends(PermissionLockStatus, _super);
        function PermissionLockStatus() {
            _super.apply(this, arguments);
        }
        PermissionLockStatus.prototype.render = function () {
            var iconClass = 'tb-lock-icon ' + VizPortal.LockStatusHelper.getGrayLockIconClass(this.props.lockState);
            return React.DOM.div({ className: 'tb-section-header-lock-status' }, React.DOM.span({ className: iconClass }), React.DOM.span({ className: 'tb-section-header-lock-text' }, this.props.translate(VizPortal.LockStatusHelper.getSectionHeaderText(this.props.lockState))));
        };
        PermissionLockStatus.displayName = 'PermissionLockStatus';
        PermissionLockStatus.element = React.createFactory(PermissionLockStatus);
        return PermissionLockStatus;
    })(React.Component);
    VizPortalReact.PermissionLockStatus = PermissionLockStatus;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var Normalizer = (function () {
        function Normalizer(values, width, height) {
            this.width = width;
            this.height = height;
            this.n = values.length - 1;
            this.max = _.max(values);
        }
        Normalizer.prototype.y = function (value) {
            // Because SVG's y axis starts with 0 at the top and increases downward, the normalization
            // also inverts the numbers on the axis so lower numbers appear lower on the screen.
            return (this.max === 0) ? this.height : (this.max - value) * this.height / this.max;
        };
        Normalizer.prototype.x = function (i) {
            return (this.n === 0) ? this.width : i * this.width / this.n;
        };
        return Normalizer;
    })();
    var PathBuilder = (function () {
        function PathBuilder(normalize) {
            this.normalize = normalize;
        }
        PathBuilder.prototype.buildMovement = function (name, x, y) {
            return name + x + ',' + y;
        };
        PathBuilder.prototype.buildPath = function (dataPoints) {
            var _this = this;
            return dataPoints.reduce(function (movements, value, i) {
                var moveType = (i === 0) ? 'M' : 'L';
                var x = _this.normalize.x(i);
                var y = _this.normalize.y(value);
                return movements + _this.buildMovement(moveType, x, y);
            }, '');
        };
        return PathBuilder;
    })();
    // Exported for the unit tests
    var OffsetCorrector = (function () {
        function OffsetCorrector(element) {
            this.boundRect = element.getBoundingClientRect();
        }
        OffsetCorrector.prototype.correctHorizontalOffset = function (element) {
            var elementRect = element.getBoundingClientRect();
            var rightOverreach = elementRect.right - (this.boundRect.right - Sparkline.TextBuffer);
            var leftOverreach = (this.boundRect.left + Sparkline.TextBuffer) - elementRect.left;
            var n = 0;
            var totalCorrection = 0;
            if (rightOverreach > 0) {
                totalCorrection -= rightOverreach;
                n++;
            }
            if (leftOverreach > 0) {
                totalCorrection += leftOverreach;
                n++;
            }
            // Average the two corrections
            return n === 0 ? 0 : (totalCorrection / n);
        };
        return OffsetCorrector;
    })();
    VizPortalReact.OffsetCorrector = OffsetCorrector;
    var Sparkline = (function (_super) {
        __extends(Sparkline, _super);
        function Sparkline(props) {
            _super.call(this, props);
            this.state = this.defaultState(props);
        }
        /*
         * Measures each text label and makes sure it will render within the confines of the SVG element.
         * Then, calls setState() to signify to the component that it's ready for a full render
         */
        Sparkline.prototype.measureTextAndSetOffsets = function () {
            var _this = this;
            var offsetCorrector = new OffsetCorrector(React.findDOMNode(this.refs['svg']));
            var labels = this.state.dataPointsToLabel.map(function (label) {
                var textElement = React.findDOMNode(_this.refs[label.key + 'Label']);
                var newLabel = _.clone(label);
                newLabel.xOffset = offsetCorrector.correctHorizontalOffset(textElement);
                return newLabel;
            });
            this.setState({
                dataPointsToLabel: labels,
                readyForFullRender: true
            });
        };
        Sparkline.prototype.defaultState = function (props) {
            return {
                readyForFullRender: false,
                dataPointsToLabel: this.getPointsToLabel(this.props.dataPoints)
            };
        };
        /*
         * When new props are received, the component must clear its state so that the two-pass render
         * can happen in full again.
         */
        Sparkline.prototype.componentWillReceiveProps = function (nextProps) {
            this.setState(this.defaultState(nextProps));
        };
        /*
         * As soon as the component has finished the first pass of the two-pass render,
         * perform the measurements and state change that will trigger the second pass.
         */
        Sparkline.prototype.componentDidMount = function () {
            this.measureTextAndSetOffsets();
        };
        Sparkline.prototype.componentDidUpdate = function () {
            if (!this.state.readyForFullRender) {
                this.measureTextAndSetOffsets();
            }
        };
        /*
         * This component renders itself in two passes. The first time, only the text labels are
         * rendered and the element is hidden. Then, on componentDidMount/compenentDidUpdate, the text
         * elements are measured, and the component computes the appropriate layout parameters to make
         * everything fits. Once this new state is set, the render happens again, this time visibly
         * rendering the entire component with the correct spacing.
         */
        Sparkline.prototype.render = function () {
            var _this = this;
            var fullRender = this.state.readyForFullRender;
            var innerWidth = this.props.width - Sparkline.DefaultPadding.paddingLeft - Sparkline.DefaultPadding.paddingRight;
            var innerHeight = this.props.height - Sparkline.DefaultPadding.paddingTop - Sparkline.DefaultPadding.paddingBottom;
            var svgStyle = _.extend({
                display: 'block',
                backgroundColor: Sparkline.BackgroundColor
            }, Sparkline.DefaultPadding);
            var svgAttrs = {
                ref: 'svg',
                height: innerHeight,
                width: innerWidth,
                style: fullRender ? svgStyle : _.extend(svgStyle, { visibility: 'hidden' }),
                'data-tb-test-id': 'sparkline'
            };
            this.normalize = new Normalizer(this.props.dataPoints, innerWidth, innerHeight);
            var subcomponents = [];
            if (fullRender) {
                subcomponents.push(this.path());
            }
            this.state.dataPointsToLabel.forEach(function (spec) {
                subcomponents.push(_this.labelAtDataPoint(spec));
                if (fullRender) {
                    subcomponents.push(_this.circleAtDataPoint(spec));
                }
            });
            return (_a = React.DOM).svg.apply(_a, [svgAttrs].concat(subcomponents));
            var _a;
        };
        Sparkline.prototype.path = function () {
            var pathBuilder = new PathBuilder(this.normalize);
            return React.DOM.path({
                key: 'path',
                stroke: Sparkline.LineColor,
                strokeWidth: Sparkline.LineWidth,
                fill: 'none',
                d: pathBuilder.buildPath(this.props.dataPoints)
            });
        };
        Sparkline.prototype.circleAtDataPoint = function (spec) {
            var fullName = spec.key + 'Circle';
            return React.DOM.circle(_.extend({
                key: fullName,
                'data-tb-test-id': fullName,
                cx: this.normalize.x(spec.index),
                cy: this.normalize.y(this.props.dataPoints[spec.index])
            }, spec.circleStyle));
        };
        /*
         * Puts a label at data point i, with the data point's value as the circle text.
         * If circleStyle is passed in, it is assumed that a circle exists on that data point with the given style.
         * above denotes the vertical position of the label with respect to the data point:
         *   true puts it above; false puts it below.
         */
        Sparkline.prototype.labelAtDataPoint = function (spec) {
            var labelValue = this.props.dataPoints[spec.index];
            var fullName = spec.key + 'Label';
            var textBuffer = spec.circleStyle.r + spec.circleStyle.strokeWidth + Sparkline.TextBuffer;
            var yOffset = spec.above ? -textBuffer : textBuffer + Sparkline.LabelStyle.fontSize - 1.5;
            return React.DOM.text({
                ref: fullName,
                key: fullName,
                'data-tb-test-id': fullName,
                style: Sparkline.LabelStyle,
                x: this.normalize.x(spec.index),
                y: this.normalize.y(labelValue),
                dy: yOffset,
                dx: spec.xOffset,
                textAnchor: 'middle'
            }, labelValue);
        };
        Sparkline.prototype.getPointsToLabel = function (dataPoints) {
            var minIndex = _.indexOf(dataPoints, _.min(dataPoints));
            var maxIndex = _.indexOf(dataPoints, _.max(dataPoints));
            var endIndex = dataPoints.length - 1;
            var endPointHigher = dataPoints[endIndex] >= dataPoints[endIndex - 1];
            var labelPoints = [];
            labelPoints.push({
                key: 'end',
                index: endIndex,
                circleStyle: Sparkline.CircleStyleEnd,
                above: endPointHigher });
            if (endIndex !== maxIndex) {
                labelPoints.push({
                    key: 'max',
                    index: maxIndex,
                    circleStyle: Sparkline.CircleStyleMax,
                    above: true
                });
            }
            if (endIndex !== minIndex && maxIndex !== minIndex) {
                labelPoints.push({
                    key: 'min',
                    index: minIndex,
                    circleStyle: Sparkline.CircleStyleMin,
                    above: false
                });
            }
            return labelPoints;
        };
        Sparkline.displayName = 'Sparkline';
        Sparkline.element = React.createFactory(Sparkline);
        // Style properties of the sparkline.
        Sparkline.LineWidth = 2;
        Sparkline.LineColor = VizPortalReact.CommonStyles.Colors.Grey153;
        Sparkline.BackgroundColor = VizPortalReact.CommonStyles.Colors.Grey245;
        // The number of pixels by which a text should be separated from other elements
        Sparkline.TextBuffer = 3;
        // The amount of padding from the edge of the SVG to the edges of the path. Circles and text
        // might occupy this space, so the values must be greater than any of the circles' (r + strokeWidth).
        Sparkline.DefaultPadding = {
            paddingTop: 18,
            paddingRight: 12,
            paddingBottom: 18,
            paddingLeft: 12
        };
        Sparkline.CircleStyleEnd = {
            r: 3.5,
            strokeWidth: 0,
            fill: VizPortalReact.CommonStyles.Colors.Grey102
        };
        Sparkline.CircleStyleMax = {
            r: 2.5,
            strokeWidth: 1,
            fill: VizPortalReact.CommonStyles.Colors.White,
            stroke: VizPortalReact.CommonStyles.Colors.Grey102
        };
        Sparkline.CircleStyleMin = {
            r: 2.5,
            strokeWidth: 0,
            fill: VizPortalReact.CommonStyles.Colors.Grey136
        };
        Sparkline.LabelStyle = {
            fontFamily: VizPortalReact.CommonStyles.Fonts.BodyFont,
            fontSize: VizPortalReact.CommonStyles.Sizes.SmallFontSize,
            fill: VizPortalReact.CommonStyles.Colors.GreyTextColor // SVG text color uses the 'fill' attribute
        };
        return Sparkline;
    })(React.Component);
    VizPortalReact.Sparkline = Sparkline;
    var SparklineWithTitle = (function (_super) {
        __extends(SparklineWithTitle, _super);
        function SparklineWithTitle() {
            _super.apply(this, arguments);
        }
        SparklineWithTitle.prototype.render = function () {
            var elements = [Sparkline.element(this.props.sparklineProps)];
            if (this.props.title) {
                var title = React.DOM.div({
                    style: SparklineWithTitle.TitleStyle
                }, this.props.title);
                elements.unshift(title);
            }
            if (this.props.caption) {
                var caption = React.DOM.div({
                    style: SparklineWithTitle.CaptionStyle
                }, this.props.caption);
                elements.push(caption);
            }
            return (_a = React.DOM).div.apply(_a, [{}].concat(elements));
            var _a;
        };
        SparklineWithTitle.displayName = 'SparklineWithTitle';
        SparklineWithTitle.element = React.createFactory(SparklineWithTitle);
        SparklineWithTitle.TitleStyle = {
            fontFamily: VizPortalReact.CommonStyles.Fonts.BodyFont,
            fontSize: VizPortalReact.CommonStyles.Sizes.NormalFontSize,
            color: VizPortalReact.CommonStyles.Colors.NormalTextColor,
            marginBottom: 5,
            textAlign: 'left'
        };
        SparklineWithTitle.CaptionStyle = {
            fontFamily: VizPortalReact.CommonStyles.Fonts.BodyFont,
            fontSize: VizPortalReact.CommonStyles.Sizes.SmallFontSize,
            color: VizPortalReact.CommonStyles.Colors.GreyTextColor,
            marginTop: 6,
            textAlign: 'center'
        };
        return SparklineWithTitle;
    })(React.Component);
    VizPortalReact.SparklineWithTitle = SparklineWithTitle;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../../../ts/libs.ts" />
/// <reference path="../../Dispatcher.ts" />
/// <reference path="../../Store.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var StackedComponentStore = (function (_super) {
        __extends(StackedComponentStore, _super);
        function StackedComponentStore() {
            _super.call(this);
            this.stackedComponents = [];
        }
        StackedComponentStore.instance = function () {
            if (!StackedComponentStore._instance) {
                StackedComponentStore._instance = new StackedComponentStore();
                VizPortalReact.Dispatcher.instance.register(StackedComponentStore._instance.handleAction.bind(StackedComponentStore._instance));
            }
            return StackedComponentStore._instance;
        };
        StackedComponentStore.prototype.handleAction = function (action) {
            switch (action.actionType) {
                case VizPortalReact.AddStackedComponentAction.Type:
                    this.addStackedComponent(action.stackedComponent);
                    break;
                case VizPortalReact.RemoveStackedComponentAction.Type:
                    this.removeStackedComponent(action.stackedComponent);
                    break;
            }
        };
        StackedComponentStore.prototype.getAll = function () {
            return this.stackedComponents;
        };
        StackedComponentStore.prototype.addStackedComponent = function (component) {
            this.stackedComponents = React.addons.update(this.stackedComponents, { $push: [component] });
            this.broadcast(StackedComponentStore.ChangeEvent);
        };
        StackedComponentStore.prototype.removeStackedComponent = function (component) {
            this.stackedComponents = _.without(this.stackedComponents, component);
            this.broadcast(StackedComponentStore.ChangeEvent);
        };
        StackedComponentStore.ChangeEvent = 'stacked-components-changed';
        return StackedComponentStore;
    })(VizPortalReact.Store);
    VizPortalReact.StackedComponentStore = StackedComponentStore;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../../../ts/libs.ts" />
/// <reference path="StackedComponentStore.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var ComponentStacker = (function (_super) {
        __extends(ComponentStacker, _super);
        function ComponentStacker() {
            _super.call(this, {}, {});
            this.state = ComponentStacker.getStackedComponentsState();
        }
        ComponentStacker.getStackedComponentsState = function () {
            return {
                allStackedComponents: VizPortalReact.StackedComponentStore.instance().getAll()
            };
        };
        ComponentStacker.prototype.render = function () {
            return React.DOM.div({}, this.state.allStackedComponents);
        };
        ComponentStacker.prototype.componentDidMount = function () {
            var _this = this;
            VizPortalReact.StackedComponentStore.instance().addChangeListener(function () { return _this.refresh(); });
        };
        ComponentStacker.prototype.componentWillUnmount = function () {
            var _this = this;
            VizPortalReact.StackedComponentStore.instance().removeChangeListener(function () { return _this.refresh(); });
        };
        ComponentStacker.prototype.refresh = function () {
            this.setState(ComponentStacker.getStackedComponentsState());
        };
        ComponentStacker.displayName = 'ComponentStacker';
        ComponentStacker.element = React.createFactory(ComponentStacker);
        return ComponentStacker;
    })(React.Component);
    VizPortalReact.ComponentStacker = ComponentStacker;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../../ts/libs.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var ThumbnailImage = (function (_super) {
        __extends(ThumbnailImage, _super);
        function ThumbnailImage() {
            _super.apply(this, arguments);
        }
        ThumbnailImage.prototype.render = function () {
            return React.DOM.div({
                className: this.props.className,
                style: _.extend({
                    backgroundImage: 'url(' + encodeURI(this.props.url) + ')',
                    backgroundSize: 'cover',
                    backgroundPosition: 'top',
                    backgroundRepeat: 'no-repeat'
                }, this.props.style),
                'data-tb-test-id': this.props.tbTestId
            });
        };
        ThumbnailImage.displayName = 'ThumbnailImage';
        ThumbnailImage.element = React.createFactory(ThumbnailImage);
        return ThumbnailImage;
    })(React.Component);
    VizPortalReact.ThumbnailImage = ThumbnailImage;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../../../ts/libs.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var ActionMenuButton = (function (_super) {
        __extends(ActionMenuButton, _super);
        function ActionMenuButton() {
            _super.call(this, {}, {});
        }
        ActionMenuButton.prototype.render = function () {
            return React.DOM.span({ className: 'tb-action-icon' });
        };
        ActionMenuButton.displayName = 'ActionMenuButton';
        ActionMenuButton.element = React.createFactory(ActionMenuButton);
        return ActionMenuButton;
    })(React.Component);
    VizPortalReact.ActionMenuButton = ActionMenuButton;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../../../ts/libs.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var ActionMenuItem = (function (_super) {
        __extends(ActionMenuItem, _super);
        function ActionMenuItem(props) {
            _super.call(this, props, {});
        }
        ActionMenuItem.prototype.render = function () {
            var _this = this;
            // $todo: tbDisabled also modifies the tabindex property
            var isDisabled = this.props.actionButton.isDisabled &&
                this.props.actionButton.isDisabled(this.props.selectedItems, this.props.detailedItem, this.props.allowedActions);
            var classes = React.addons.classSet({
                'tb-popup-menu-item': true,
                'tb-disabled': isDisabled
            });
            var elm = React.DOM.div({
                className: classes,
                disabled: isDisabled,
                onClick: function () {
                    if (!isDisabled) {
                        _this.props.actionButton.execute(_this.props.selectedItems, { scope: _this.props.contentSubplaceScope }, _this.props.detailedItem);
                    }
                }
            }, 
            // $todo: tb-test-id
            // $todo: translate
            this.props.actionButton.translate || this.props.actionButton.name);
            return elm;
        };
        ActionMenuItem.displayName = 'ActionMenuItem';
        ActionMenuItem.element = React.createFactory(ActionMenuItem);
        return ActionMenuItem;
    })(React.Component);
    VizPortalReact.ActionMenuItem = ActionMenuItem;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../../../ts/libs.ts" />
/// <reference path="../../Dispatcher.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    function AddStackedComponentAction(component) {
        var payload = {
            actionType: AddStackedComponentAction.Type,
            stackedComponent: component
        };
        VizPortalReact.Dispatcher.instance.dispatch(payload);
    }
    VizPortalReact.AddStackedComponentAction = AddStackedComponentAction;
    var AddStackedComponentAction;
    (function (AddStackedComponentAction) {
        AddStackedComponentAction.Type = 'add-stacked-component';
    })(AddStackedComponentAction = VizPortalReact.AddStackedComponentAction || (VizPortalReact.AddStackedComponentAction = {}));
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../../../ts/libs.ts" />
/// <reference path="../../Dispatcher.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    function RemoveStackedComponentAction(component) {
        var payload = {
            actionType: RemoveStackedComponentAction.Type,
            stackedComponent: component
        };
        VizPortalReact.Dispatcher.instance.dispatch(payload);
    }
    VizPortalReact.RemoveStackedComponentAction = RemoveStackedComponentAction;
    var RemoveStackedComponentAction;
    (function (RemoveStackedComponentAction) {
        RemoveStackedComponentAction.Type = 'remove-stacked-component';
    })(RemoveStackedComponentAction = VizPortalReact.RemoveStackedComponentAction || (VizPortalReact.RemoveStackedComponentAction = {}));
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var MousedownOutsideDetector;
    (function (MousedownOutsideDetector) {
        function attach(element, getIdFn, downOutsideFn) {
            var doc = $(document);
            var eventNamespace = '.MousedownOutsideDetector' + getIdFn(element);
            var events = 'mousedown' + eventNamespace + ' touchstart' + eventNamespace;
            doc.on(events, function (downEvent) {
                var target = $(downEvent.target);
                if (target.closest(element).length === 0) {
                    downOutsideFn(downEvent);
                }
            });
            return function () { return doc.off(eventNamespace); };
        }
        MousedownOutsideDetector.attach = attach;
    })(MousedownOutsideDetector = VizPortal.MousedownOutsideDetector || (VizPortal.MousedownOutsideDetector = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../../../ts/libs.ts" />
/// <reference path="../../../ts/helpers/MousedownOutsideDetector.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var Popup = (function (_super) {
        __extends(Popup, _super);
        function Popup(props) {
            _super.call(this, props);
        }
        Popup.prototype.render = function () {
            var classes = [
                'tb-popup-menu-content',
                'tb-padded-small'
            ];
            return React.DOM.div({
                style: (this.props.width ? { width: this.props.width + 'px' } : {})
            }, React.DOM.div({ className: classes.join(' '), onClick: this.props.closePopupMenu }, this.props.popupContentDescriptor));
        };
        Popup.prototype.componentDidMount = function () {
            var id = '' + Popup.nextId++;
            this.detachMousedownOutsideDetector = VizPortal.MousedownOutsideDetector.attach($(React.findDOMNode(this)), function (element) { return id; }, this.props.mouseDownOutsideFunc);
        };
        Popup.prototype.componentWillUnmount = function () {
            this.detachMousedownOutsideDetector();
        };
        Popup.displayName = 'Popup';
        Popup.element = React.createFactory(Popup);
        Popup.nextId = 1;
        return Popup;
    })(React.Component);
    VizPortalReact.Popup = Popup;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../../ts/libs.ts" />
/// <reference path="stackedComponents/AddStackedComponentAction.ts" />
/// <reference path="stackedComponents/RemoveStackedComponentAction.ts" />
/// <reference path="Popup.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    // ============================================================
    // PopupMenu
    //
    // Allows consumer to specify a child component as the
    // popupmenu's button. Popup content is specified through the
    // props.
    //
    // $todo: example of usage
    // $todo: standardize our comment blocks?
    // ============================================================
    var PopupMenu = (function (_super) {
        __extends(PopupMenu, _super);
        function PopupMenu(props, context) {
            if (context === void 0) { context = {}; }
            _super.call(this, props, context);
            // React routines
            this.state = {
                open: false
            };
            // Other internal members
            this.popupComponent = null;
        }
        PopupMenu.prototype.render = function () {
            var _this = this;
            var classes = ['tb-popup-menu'];
            if (this.state.open) {
                classes.push('tb-selected');
            }
            var elm = React.DOM.div({
                className: classes.join(' '),
                tabIndex: 0,
                onClick: function () { return _this.props.buttonClickHandler(); },
                onKeyDown: function (e) { return _this.onKeyDown(e); },
                ref: "popupMenu"
            }, React.DOM.div({ ref: "menuButton", onClick: function () { return _this.toggle(); } }, this.props.children // oop up menu contents
            ));
            return elm;
        };
        // Other functions
        PopupMenu.prototype.onKeyDown = function (e) {
            if (this.isDisabled()) {
                return;
            }
            switch (e.which) {
                case VizPortal.Keys.Enter:
                    this.toggle();
                    e.stopPropagation(); // Prevents Enter from closing containing dialog (if any)
                    break;
                case VizPortal.Keys.Space:
                    if (!this.state.open) {
                        this.open();
                    }
                    break;
            }
        };
        PopupMenu.prototype.toggle = function () {
            if (!this.isDisabled()) {
                if (this.state.open) {
                    this.close();
                }
                else {
                    this.open();
                }
            }
        };
        PopupMenu.prototype.open = function () {
            var _this = this;
            var button = $(React.findDOMNode(this.refs['menuButton']));
            var buttonWidth = button.outerWidth();
            var popupProps = {
                popupContentDescriptor: this.props.popupContentDescriptor,
                positionCorner: this.positionCorner(),
                contentCorner: this.contentCorner(),
                width: (this.props.contentMatchButtonWidth ? buttonWidth : null),
                mouseDownOutsideFunc: function (mouseDownEvent) {
                    var target = $(mouseDownEvent.target);
                    if (target.closest(button).length === 0) {
                        _this.close();
                    }
                },
                closePopupMenu: function () {
                    _this.close();
                }
            };
            // render as a stacked component
            this.popupComponent = VizPortalReact.Popup.element(popupProps);
            VizPortalReact.AddStackedComponentAction(this.popupComponent);
            if (this.props.onPopupOpened) {
                this.props.onPopupOpened({
                    closeFn: function () { _this.close(); }
                });
            }
            this.setState({ open: true });
        };
        PopupMenu.prototype.close = function () {
            // remove from stack components
            VizPortalReact.RemoveStackedComponentAction(this.popupComponent);
            if (this.props.onPopupClosed) {
                this.props.onPopupClosed();
            }
            $(React.findDOMNode(this.refs['popupMenu'])).focus();
            this.setState({ open: false });
        };
        PopupMenu.prototype.isDisabled = function () {
            return this.props.isDisabled;
        };
        PopupMenu.prototype.positionCorner = function () {
            switch (this.props.direction) {
                case 'dr':
                default:
                    return 'bl';
                case 'dl':
                    return 'br';
                case 'ur':
                    return 'tl';
                case 'ul':
                    return 'tr';
            }
        };
        PopupMenu.prototype.contentCorner = function () {
            switch (this.props.direction) {
                case 'dr':
                default:
                    return 'tl';
                case 'dl':
                    return 'tr';
                case 'ur':
                    return 'bl';
                case 'ul':
                    return 'br';
            }
        };
        PopupMenu.displayName = 'PopupMenu';
        PopupMenu.element = React.createFactory(PopupMenu);
        return PopupMenu;
    })(React.Component);
    VizPortalReact.PopupMenu = PopupMenu;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../../../ts/libs.ts" />
/// <reference path="ActionMenuButton.ts" />
/// <reference path="ActionMenuItem.ts" />
/// <reference path="../PopupMenu.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var ActionsMenu = (function (_super) {
        __extends(ActionsMenu, _super);
        function ActionsMenu(props) {
            _super.call(this, props, {});
        }
        ActionsMenu.prototype.render = function () {
            var _this = this;
            return React.DOM.div({}, this.props.menuActions.map(function (button) {
                return VizPortalReact.ActionMenuItem.element({
                    actionButton: button,
                    selectedItems: _this.props.selectedItems,
                    actionMenuContext: _this.props.actionMenuContext,
                    detailedItem: _this.props.detailedItem,
                    allowedActions: _this.props.allowedActions,
                    contentSubplaceScope: _this.props.contentSubplaceScope
                });
            }));
        };
        ActionsMenu.displayName = 'ActionsMenu';
        ActionsMenu.element = React.createFactory(ActionsMenu);
        return ActionsMenu;
    })(React.Component);
    VizPortalReact.ActionsMenu = ActionsMenu;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../../ts/libs.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var FavoriteToggle = (function (_super) {
        __extends(FavoriteToggle, _super);
        function FavoriteToggle() {
            _super.apply(this, arguments);
            this.state = {
                favorite: this.props.item.favorite
            };
        }
        FavoriteToggle.prototype.toggle = function () {
            var props = this.props;
            var item = props.item;
            // TODO: stop propagation
            if (this.state.favorite) {
                props.removeFavorite(this.props.item);
            }
            else {
                props.addFavorite(this.props.item);
            }
            this.setState({ favorite: !this.state.favorite });
        };
        FavoriteToggle.prototype.selected = function () {
            return !!this.state.favorite;
        };
        FavoriteToggle.prototype.show = function () {
            return !!this.state.favorite || !!this.props.hover || !!this.props.isTouch;
        };
        FavoriteToggle.prototype.render = function () {
            var classes = ['tb-favorite-button', 'tb-thumbnail-favorite'];
            if (this.state.favorite) {
                classes.push('tb-selected');
            }
            if (!this.show()) {
                classes.push('ng-hide'); // TODO: don't depend on angular classes
            }
            return React.DOM.span({
                className: classes.join(' '),
                onClick: this.toggle,
                tabIndex: 0
            });
        };
        FavoriteToggle.prototype.shouldComponentUpdate = function (nextProps, nextState) {
            return React.addons.PureRenderMixin.shouldComponentUpdate.call(this, nextProps, nextState);
        };
        FavoriteToggle.displayName = 'FavoriteToggle';
        FavoriteToggle.element = React.createFactory(FavoriteToggle);
        return FavoriteToggle;
    })(React.Component);
    VizPortalReact.FavoriteToggle = FavoriteToggle;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../../ts/libs.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    /**
    * This is a react component that is used to instantiate angular directives. The purpose of this component is to
    * allow angular directives to be ported to React one at a time.
    */
    var AngularDirective = (function (_super) {
        __extends(AngularDirective, _super);
        function AngularDirective(props, context) {
            _super.call(this, props, context);
        }
        AngularDirective.prototype.componentDidMount = function () {
            this.updateFromProps();
        };
        AngularDirective.prototype.componentDidUpdate = function (prevProps) {
            this.updateFromProps(prevProps);
        };
        AngularDirective.prototype.render = function () {
            return this.props.children || React.DOM.span({});
        };
        AngularDirective.prototype.componentWillUnmount = function () {
            // If we don't remove the element we created using JQuery remove,
            // then we'll leak some memory when React removes it.
            var element = $(React.findDOMNode(this));
            element.remove();
        };
        /**
        * updates the DOM element based on the value of current props. Uses prevProps to determine if the things that have changed
        * require angular compilation of the element or just a digest cycle.
        */
        AngularDirective.prototype.updateFromProps = function (prevProps) {
            if (prevProps === void 0) { prevProps = {}; }
            var shouldCompile = false;
            var currentProps = this.props;
            var element = $(React.findDOMNode(this));
            var attrs = currentProps.attributes || {};
            _.each(attrs, function (value, key) {
                if (!prevProps.attributes || !prevProps.attributes[key]) {
                    // if we haven't seen this attribute directive before, it will need to be compiled
                    shouldCompile = true;
                }
                element.attr(key, value);
            });
            // any attributes that have been removed should be removed from the element
            var attributesToRemove = _.difference(_.keys(prevProps.attributes), _.keys(currentProps.attributes));
            attributesToRemove.map(function (key) {
                element.removeAttr(key);
            });
            if (currentProps.template && currentProps.template !== prevProps.template) {
                // template was updated or is new
                shouldCompile = true;
                element.empty();
                element.append(currentProps.template);
            }
            else if (prevProps.template && !currentProps.template) {
                // template was removed
                element.empty();
            }
            if (shouldCompile) {
                this.compileElement();
            }
            else {
                this.digest();
            }
        };
        AngularDirective.prototype.compileElement = function () {
            var angularContext = this.props.angularContext;
            var element = $(React.findDOMNode(this));
            angularContext.compileElement(element, this.props.setupScope);
        };
        AngularDirective.prototype.digest = function () {
            var angularContext = this.props.angularContext;
            angularContext.enqueueDigest();
        };
        AngularDirective.element = React.createFactory(AngularDirective);
        return AngularDirective;
    })(React.Component);
    VizPortalReact.AngularDirective = AngularDirective;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../../ts/libs.ts" />
/// <reference path="AngularDirective.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    /**
     * Opens an angular tb-popover.
     * $todo: Replace with native react popover implementation
     */
    var PopoverTrigger = (function (_super) {
        __extends(PopoverTrigger, _super);
        function PopoverTrigger() {
            _super.apply(this, arguments);
        }
        PopoverTrigger.prototype.render = function () {
            var _this = this;
            return VizPortalReact.AngularDirective.element({
                attributes: {
                    'tb-popover': "'" + this.props.popoverTemplateUrl + "'",
                    'tb-popover-class': 'tb-content-item-popover'
                },
                setupScope: function (scope) {
                    _this.scope = scope.$new();
                    _this.scope.item = _this.props.item; // tb-popover's template assumes the item is on the scope. This was done by ngrepeat before.
                    _this.scope.getItemDetails = _this.props.getItemDetails;
                    return _this.scope;
                },
                angularContext: this.props.angularContext
            }, this.props.children);
        };
        PopoverTrigger.prototype.componentWillUnmount = function () {
            if (this.scope) {
                this.scope.$destroy();
            }
        };
        PopoverTrigger.element = React.createFactory(PopoverTrigger);
        return PopoverTrigger;
    })(React.Component);
    VizPortalReact.PopoverTrigger = PopoverTrigger;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../../ts/libs.ts" />
/// <reference path="actionMenu/ActionsMenu.ts" />
/// <reference path="FavoriteToggle.ts" />
/// <reference path="PopoverTrigger.ts" />
/// <reference path="PopupMenu.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    /**
     * An thumbnail representing a single workbook or view.
     */
    var Thumbnail = (function (_super) {
        __extends(Thumbnail, _super);
        function Thumbnail(props) {
            _super.call(this, props, {});
            this.state = {
                hover: false
            };
            this.angularContext = this.props.angularContext;
        }
        Thumbnail.prototype.mouseEnter = function () {
            this.setState({ hover: true });
        };
        Thumbnail.prototype.mouseLeave = function () {
            this.setState({ hover: false });
        };
        Thumbnail.prototype.isSelected = function () {
            return this.props.selectedItems.contains(this.props.item);
        };
        Thumbnail.prototype.toggleSelected = function () {
            var _this = this;
            // Call apply here so that angular directives that use selectedItems see this update.
            // TODO: get rid of this force update.
            this.angularContext.evalAsync(function () {
                _this.props.selectedItems.toggle(_this.props.item);
                _this.forceUpdate();
            });
        };
        Thumbnail.prototype.render = function () {
            var _this = this;
            var item = this.props.item;
            var detailsUrl = this.props.detailsUrl;
            var classes = React.addons.classSet({
                'tb-thumbnail': true,
                'tb-hover': this.state.hover,
                'tb-selected': this.isSelected()
            });
            // $todo: tb-thumbnail-touch
            var elm = VizPortalReact.PopoverTrigger.element(_.extend({ item: item, angularContext: this.props.angularContext, popoverTemplateUrl: this.props.popoverTemplateUrl }, this.props.popoverTriggerProps), React.DOM.span({ className: classes, onMouseEnter: function () { return _this.mouseEnter(); }, onMouseLeave: function () { return _this.mouseLeave(); } }, React.DOM.a({ className: 'tb-thumbnail-slide', href: detailsUrl }, 
            // TODO: Replace this with an instance of the ThumbnailImage component
            React.DOM.img({ className: 'tb-thumbnail-slide-image', src: item.thumbnailUrl })), React.DOM.a({ className: 'tb-thumbnail-checkbox-background' }), React.DOM.div({ className: 'tb-thumbnail-checkbox-target', onClick: function () { return _this.toggleSelected(); } }), 
            // corner image
            React.DOM.a({
                className: 'tb-thumbnail-action-menu-background tb-thumbnail-slide-action-menu-background',
                href: detailsUrl
            }), 
            // popup menu
            React.DOM.div({ className: 'tb-thumbnail-action-menu' }, VizPortalReact.PopupMenu.element({
                buttonClickHandler: function () {
                    _this.angularContext.evalAsync(function () {
                        _this.props.selectedItems.clear();
                        _this.props.selectedItems.add(item);
                        _this.forceUpdate();
                    });
                },
                popupContentDescriptor: VizPortalReact.ActionsMenu.element(this.props.actionsMenuProps)
            }, VizPortalReact.ActionMenuButton.element({}))), React.DOM.div({ className: 'tb-thumbnail-caption' }, React.DOM.a({ className: 'tb-thumbnail-caption-link', href: detailsUrl }, item.name), VizPortalReact.FavoriteToggle.element(_.extend({}, this.props.favoriteProps, { item: item, hover: this.state.hover })))));
            return elm;
        };
        Thumbnail.displayName = 'Thumbnail';
        Thumbnail.element = React.createFactory(Thumbnail);
        return Thumbnail;
    })(React.Component);
    VizPortalReact.Thumbnail = Thumbnail;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../../ts/libs.ts" />
/// <reference path="actionMenu/ActionsMenu.ts" />
/// <reference path="Thumbnail.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    /**
     * The thumbnails view in the Views and Workbooks subplaces.
     */
    var Thumbnails = (function (_super) {
        __extends(Thumbnails, _super);
        function Thumbnails(props) {
            _super.call(this, props, {});
        }
        Thumbnails.prototype.render = function () {
            var _this = this;
            var items = this.props.items || [];
            var selectedItems = this.props.selectedItems;
            var favoriteProps = this.props.favoriteProps;
            var getDetailsUrl = this.props.getDetailsUrl;
            var actionsMenuProps = this.props.actionsMenuProps;
            var contentType = this.props.contentType;
            var popoverTemplateUrl = contentType === VizPortal.ViewContentType.name ? 'viewPopover.html' : 'workbookPopover.html';
            return React.DOM.span({}, items.map(function (item, key) {
                return VizPortalReact.Thumbnail.element({
                    key: key,
                    item: item,
                    detailsUrl: getDetailsUrl(item),
                    getItemDetails: _this.props.getItemDetails,
                    selected: selectedItems.contains(item),
                    selectedItems: selectedItems,
                    favoriteProps: favoriteProps,
                    actionsMenuProps: actionsMenuProps,
                    popoverTriggerProps: _this.props.popoverTriggerProps,
                    popoverTemplateUrl: popoverTemplateUrl,
                    angularContext: _this.props.angularContext
                });
            }));
        };
        Thumbnails.displayName = 'Thumbnails';
        Thumbnails.element = React.createFactory(Thumbnails);
        return Thumbnails;
    })(React.Component);
    VizPortalReact.Thumbnails = Thumbnails;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../../ts/libs.ts" />
/// <reference path="../CommonStyles.ts" />
/// <reference path="../IReactTranslateService.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    var Toast = (function (_super) {
        __extends(Toast, _super);
        function Toast(props) {
            _super.call(this, props);
            this.isFading = false;
            this.state = {
                fadeOpacity: 0
            };
            this.boundHover = this.hover.bind(this);
            this.boundFadeOut = this.fadeOut.bind(this);
            this.boundClose = this.close.bind(this);
            this.boundMouseOut = this.mouseOut.bind(this);
        }
        Toast.prototype.close = function () {
            clearTimeout(this.fadeOutTimeoutId);
            clearTimeout(this.closeTimeoutId);
            this.props.close();
        };
        Toast.prototype.componentDidMount = function () {
            var _this = this;
            // timeout is necessary to make sure that DOM has been udpated with opacity 0 from initial state.
            setTimeout(function () {
                _this.setState({ fadeOpacity: 1, fadeTransitionTime: Toast.FadeInTime });
            }, 0);
            // fade out after timeoutDelay milliseconds
            if (this.props.timeoutDelay !== VizPortal.ToasterService.NoTimeout) {
                this.fadeOutTimeoutId = setTimeout(this.boundFadeOut, this.props.timeoutDelay);
            }
        };
        Toast.prototype.mouseOut = function () {
            if (this.props.timeoutDelay !== VizPortal.ToasterService.NoTimeout) {
                if (this.isFading) {
                    this.boundFadeOut();
                }
                else {
                    this.fadeOutTimeoutId = setTimeout(this.boundFadeOut, this.props.timeoutDelay);
                }
            }
        };
        Toast.prototype.hover = function () {
            if (this.props.timeoutDelay !== VizPortal.ToasterService.NoTimeout) {
                this.setState({ fadeOpacity: 1, fadeTransitionTime: Toast.HoverRestoreTime });
                clearTimeout(this.fadeOutTimeoutId);
                clearTimeout(this.closeTimeoutId);
            }
        };
        Toast.prototype.fadeOut = function () {
            this.setState({ fadeOpacity: 0, fadeTransitionTime: Toast.FadeOutTime });
            this.closeTimeoutId = setTimeout(this.boundClose, Toast.FadeOutTime);
            this.isFading = true;
        };
        Toast.prototype.render = function () {
            var classes = 'tb-toast tb-toast-' + this.props.toastType;
            var fadeStyle = {
                transitionDuration: this.state.fadeTransitionTime + 'ms',
                opacity: this.state.fadeOpacity,
                transitionTimingFunction: this.state.fadeOpacity === 0 ? Toast.FadeOutEasing : Toast.FadeInEasing
            };
            // if lines are available, put each one in a div, otherwise use the toastContent prop
            var content = this.props.lines ? _.map(this.props.lines, function (content, i) {
                return React.DOM.div({ key: i }, content);
            }) : this.props.toastContent;
            var lineWrapper = React.DOM.div({ key: 'toastContent', className: 'tb-toast-text' }, content);
            var clearButton = React.DOM.span({ key: 'closeButton', className: 'tb-clear-button tb-disable-selection', onClick: this.boundClose }, '×');
            var mainDiv = React.DOM.div({ style: fadeStyle, onMouseOver: this.boundHover, onMouseOut: this.boundMouseOut, key: 'toast', className: classes }, lineWrapper, clearButton);
            return mainDiv;
        };
        Toast.displayName = 'Toast';
        Toast.element = React.createFactory(Toast);
        Toast.FadeOutTime = 3000; // 3 seconds
        Toast.FadeInTime = 100; // 100ms
        Toast.HoverRestoreTime = 30; // 30ms
        Toast.FadeOutEasing = 'ease-out';
        Toast.FadeInEasing = 'linear';
        return Toast;
    })(React.Component);
    VizPortalReact.Toast = Toast;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../../ts/libs.ts" />
/// <reference path="../CommonStyles.ts" />
/// <reference path="../IReactTranslateService.ts" />
/// <reference path="./Toast.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    VizPortalReact.ToastType = {
        Info: 'info',
        Error: 'error',
        External: 'external'
    };
    var Toaster = (function (_super) {
        __extends(Toaster, _super);
        function Toaster(props) {
            _super.call(this, props, {});
            this.state = { toasts: [] };
            this.boundListenerFn = this.toastsUpdated.bind(this);
            this.angularContext = this.props.angularContext;
            this.toasterService = this.angularContext.getService('ToasterService');
        }
        ;
        Toaster.prototype.componentDidMount = function () {
            this.listenerId = this.toasterService.addListener({ toastsUpdated: this.boundListenerFn });
        };
        Toaster.prototype.componentWillUnmount = function () {
            this.toasterService.removeListener(this.listenerId);
        };
        Toaster.prototype.close = function (id) {
            this.toasterService.close(id);
        };
        Toaster.prototype.toastsUpdated = function (toastOptionsArray) {
            var _this = this;
            var newToasts = [];
            _.each(toastOptionsArray, function (toastOptions) {
                var t = VizPortalReact.Toast.element({
                    key: toastOptions.id,
                    close: function () { _this.close(toastOptions.id); },
                    toastType: toastOptions.type,
                    timeoutDelay: toastOptions.timeoutDelay,
                    toastContent: toastOptions.content,
                    lines: toastOptions.lines
                });
                newToasts.push(t);
            });
            this.setState({ toasts: newToasts });
        };
        Toaster.prototype.render = function () {
            return React.DOM.div({ className: 'tb-toaster tb-enable-selection' }, this.state.toasts);
        };
        Toaster.displayName = 'Toaster';
        Toaster.element = React.createFactory(Toaster);
        return Toaster;
    })(React.Component);
    VizPortalReact.Toaster = Toaster;
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../ts/libs.ts" />
/// <reference path="externalReferences.ts" />
// TODO: Figure out how to replace this dependency in this file
/// <reference path="../../ts/directives/reactDirectiveFactory.ts" />
/// <reference path="../../app/header/FavoritesMenu.ts" />
/// <reference path="../../app/header/SiteSwitcher.ts" />
/// <reference path="../../app/header/TopBar.ts" />
/// <reference path="../../app/content/TypeaheadFilter.ts" />
/// <reference path="../../app/content/Permissions/PermissionLockStatus.ts" />
/// <reference path="../../app/content/Sparkline.ts" />
/// <reference path="components/stackedComponents/ComponentStacker.ts" />
/// <reference path="components/ThumbnailImage.ts" />
/// <reference path="components/Thumbnails.ts" />
/// <reference path="components/Toaster.ts" />
/// <reference path="components/dataGrid/DataGrid.ts" />
var VizPortalReact;
(function (VizPortalReact) {
    VizPortal.ReactDirectiveFactory.create({ name: 'tbComponentStacker', componentFactory: VizPortalReact.ComponentStacker.element });
    VizPortal.ReactDirectiveFactory.create({ name: 'tbThumbnails', componentFactory: VizPortalReact.Thumbnails.element });
    VizPortal.ReactDirectiveFactory.create({ name: 'tbReactFavoritesMenu', componentFactory: VizPortalReact.FavoritesMenu.element });
    VizPortal.ReactDirectiveFactory.create({ name: 'tbReactDataGrid', componentFactory: VizPortalReact.DataGrid.element, watch: 'props.update' });
    VizPortal.ReactDirectiveFactory.create({ name: 'tbReactTypeaheadFilter', componentFactory: VizPortalReact.TypeaheadFilter.element, watch: 'props.filter.value' });
    VizPortal.ReactDirectiveFactory.create({ name: 'tbReactToaster', componentFactory: VizPortalReact.Toaster.element });
    VizPortal.ReactDirectiveFactory.create({ name: 'tbReactTopBar', componentFactory: VizPortalReact.TopBar.element });
    VizPortal.ReactDirectiveFactory.create({ name: 'tbPermissionLockStatus', componentFactory: VizPortalReact.PermissionLockStatus.element, watch: 'props.lockState' });
    VizPortal.ReactDirectiveFactory.create({ name: 'tbSparklineWithTitle', componentFactory: VizPortalReact.SparklineWithTitle.element });
    VizPortal.ReactDirectiveFactory.create({ name: 'tbThumbnailImage', componentFactory: VizPortalReact.ThumbnailImage.element });
})(VizPortalReact || (VizPortalReact = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var UpdateConnectionsOAuthRequest = (function (_super) {
            __extends(UpdateConnectionsOAuthRequest, _super);
            function UpdateConnectionsOAuthRequest(params) {
                _super.call(this, 'updateConnectionsOAuth', params);
            }
            return UpdateConnectionsOAuthRequest;
        })(ServerApi.Request);
        ServerApi.UpdateConnectionsOAuthRequest = UpdateConnectionsOAuthRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/ServerService.ts" />
/// <reference path="../ServerApi/requests/CheckConnectionRequest.ts" />
/// <reference path="../ServerApi/requests/UpdateConnectionsRequest.ts" />
/// <reference path="../ServerApi/requests/UpdateConnectionsOAuthRequest.ts" />
var VizPortal;
(function (VizPortal) {
    var DataConnections = (function () {
        function DataConnections($q, ErrorNotifyingServer, LongRunningActionService) {
            this.$q = $q;
            this.ErrorNotifyingServer = ErrorNotifyingServer;
            this.LongRunningActionService = LongRunningActionService;
            this.server = ErrorNotifyingServer.getServerService();
        }
        DataConnections.prototype.checkExistingConnection = function (dataSourceId) {
            var request = new VizPortal.ServerApi.CheckConnectionRequest({ id: dataSourceId });
            return this.ErrorNotifyingServer.sendRequest(request);
        };
        DataConnections.prototype.checkConnection = function (dataSourceId, connectionUpdate) {
            var _this = this;
            var requestParams = {
                id: dataSourceId,
                server: connectionUpdate.server,
                port: connectionUpdate.port,
                username: connectionUpdate.username
            };
            return this.setPasswordParams(requestParams, connectionUpdate.passwordUpdate).then(function () {
                return _this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.CheckConnectionRequest(requestParams));
            });
        };
        DataConnections.prototype.updateConnections = function (dataSourceIds, connectionUpdate) {
            var _this = this;
            var requestParams = {
                ids: dataSourceIds,
                server: connectionUpdate.server,
                port: connectionUpdate.port,
                username: connectionUpdate.username
            };
            return this.setPasswordParams(requestParams, connectionUpdate.passwordUpdate)
                .then(function () { return _this.ErrorNotifyingServer.sendRequest(new VizPortal.ServerApi.UpdateConnectionsRequest(requestParams)); })
                .then(this.LongRunningActionService.startProgressTrackingForResponse())
                .then(this.LongRunningActionService.delayResultForSolr());
        };
        DataConnections.prototype.updateConnectionsOAuth = function (dataSourceIds, keychainEntryId) {
            return this.ErrorNotifyingServer
                .sendRequest(new VizPortal.ServerApi.UpdateConnectionsOAuthRequest({
                ids: dataSourceIds,
                keychainEntryId: keychainEntryId
            }))
                .then(this.LongRunningActionService.startProgressTrackingForResponse())
                .then(this.LongRunningActionService.delayResultForSolr());
        };
        DataConnections.prototype.setPasswordParams = function (requestParams, passwordUpdate) {
            if (passwordUpdate) {
                requestParams.embedPassword = passwordUpdate.isEmbedded;
                if (_.isString(passwordUpdate.newPassword)) {
                    return this.server.sendRequest(new VizPortal.ServerApi.GeneratePublicKeyRequest()).
                        then(function (generatePublicKeyResult) {
                        requestParams.encryptedPassword = rsa.encrypt(passwordUpdate.newPassword, generatePublicKeyResult.key);
                        requestParams.encryptedPasswordKeyId = generatePublicKeyResult.keyId;
                    });
                }
            }
            return this.$q.when({});
        };
        DataConnections.$inject = ['$q', 'ErrorNotifyingServer', 'LongRunningActionService'];
        return DataConnections;
    })();
    VizPortal.DataConnections = DataConnections;
    VizPortal.Module.instance().service('DataConnections', DataConnections);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../types/IGetItemsParams.ts" />
/// <reference path="../types/IGetItemsResult.ts" />
/// <reference path="../types/IDataConnectionType.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetDataConnectionTypesRequest = (function (_super) {
            __extends(GetDataConnectionTypesRequest, _super);
            function GetDataConnectionTypesRequest(params) {
                _super.call(this, 'getDataConnectionTypes', params);
            }
            return GetDataConnectionTypesRequest;
        })(ServerApi.Request);
        ServerApi.GetDataConnectionTypesRequest = GetDataConnectionTypesRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/GetDataConnectionTypesRequest.ts" />
/// <reference path="../services/ServerService.ts" />
/// <reference path="Resource.ts" />
var VizPortal;
(function (VizPortal) {
    var DataConnectionTypes = (function (_super) {
        __extends(DataConnectionTypes, _super);
        function DataConnectionTypes(server, FetcherFactory) {
            _super.call(this, FetcherFactory.getServerResourceFetcher(VizPortal.ServerApi.GetDataConnectionTypesRequest, function (result) { return result.dataConnectionTypes; }));
            this.fieldValuesFetcher = FetcherFactory.getServerResourceFetcher(VizPortal.ServerApi.GetFieldValuesRequest, VizPortal.ServerApiMapper.fieldValues);
        }
        DataConnectionTypes.prototype.getByDataConnectionType = function (dataConnectionType) {
            return this.all()
                .withFilters([VizPortal.Filter.stringFieldEq(VizPortal.ServerApi.FilterFieldNames.connectionType, dataConnectionType)])
                .getFirst();
        };
        DataConnectionTypes.prototype.valuesForField = function (field) {
            return new VizPortal.FieldValuesQuery(this.fieldValuesFetcher, field, VizPortal.ServerApi.FieldValueResourceType.dataConnection);
        };
        DataConnectionTypes.$inject = ['ServerService', 'FetcherFactory'];
        return DataConnectionTypes;
    })(VizPortal.Resource);
    VizPortal.DataConnectionTypes = DataConnectionTypes;
    VizPortal.Module.instance().service('DataConnectionTypes', DataConnectionTypes);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../types/IGetItemsParams.ts" />
/// <reference path="../types/IGetItemsResult.ts" />
/// <reference path="../types/IProject.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetProjectNamesRequest = (function (_super) {
            __extends(GetProjectNamesRequest, _super);
            function GetProjectNamesRequest(params) {
                _super.call(this, 'getProjectNames', params);
            }
            return GetProjectNamesRequest;
        })(ServerApi.Request);
        ServerApi.GetProjectNamesRequest = GetProjectNamesRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/GetProjectNamesRequest.ts" />
/// <reference path="Resource.ts" />
var VizPortal;
(function (VizPortal) {
    var ProjectNames = (function (_super) {
        __extends(ProjectNames, _super);
        function ProjectNames(FetcherFactory) {
            _super.call(this, FetcherFactory.getServerResourceFetcher(VizPortal.ServerApi.GetProjectNamesRequest, function (result) { return result.projects; }));
        }
        ProjectNames.$inject = ['FetcherFactory'];
        return ProjectNames;
    })(VizPortal.Resource);
    VizPortal.ProjectNames = ProjectNames;
    VizPortal.Module.instance().service('ProjectNames', ProjectNames);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="../types/IGetItemsParams.ts" />
/// <reference path="../types/IGetItemsResult.ts" />
/// <reference path="../types/ITag.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetTagsRequest = (function (_super) {
            __extends(GetTagsRequest, _super);
            function GetTagsRequest(params) {
                _super.call(this, 'getTags', params);
            }
            return GetTagsRequest;
        })(ServerApi.Request);
        ServerApi.GetTagsRequest = GetTagsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/GetTagsRequest.ts" />
/// <reference path="../ServerApi/types/ITag.ts" />
/// <reference path="Resource.ts" />
var VizPortal;
(function (VizPortal) {
    var Tags = (function (_super) {
        __extends(Tags, _super);
        function Tags(FetcherFactory) {
            _super.call(this, FetcherFactory.getServerResourceFetcher(VizPortal.ServerApi.GetTagsRequest, function (result) { return result.tags; }));
        }
        Tags.$inject = ['FetcherFactory'];
        return Tags;
    })(VizPortal.Resource);
    VizPortal.Tags = Tags;
    VizPortal.Module.instance().service('Tags', Tags);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../types/IGetItemsParams.ts" />
/// <reference path="../types/IGetItemsResult.ts" />
/// <reference path="../types/IUser.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetUserNamesRequest = (function (_super) {
            __extends(GetUserNamesRequest, _super);
            function GetUserNamesRequest(params) {
                _super.call(this, 'getUserNames', params);
            }
            return GetUserNamesRequest;
        })(ServerApi.Request);
        ServerApi.GetUserNamesRequest = GetUserNamesRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/GetUserNamesRequest.ts" />
/// <reference path="../ServerApi/types/IUser.ts" />
/// <reference path="Resource.ts" />
var VizPortal;
(function (VizPortal) {
    var UserNames = (function (_super) {
        __extends(UserNames, _super);
        function UserNames(FetcherFactory) {
            _super.call(this, FetcherFactory.getServerResourceFetcher(VizPortal.ServerApi.GetUserNamesRequest, function (result) { return result.users; }));
        }
        UserNames.$inject = ['FetcherFactory'];
        return UserNames;
    })(VizPortal.Resource);
    VizPortal.UserNames = UserNames;
    VizPortal.Module.instance().service('UserNames', UserNames);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var AddUsersToGroupAction = (function () {
        function AddUsersToGroupAction(modal) {
            this.modal = modal;
        }
        AddUsersToGroupAction.prototype.showAddUsersToGroupDialog = function (group) {
            var dialogInstance = this.modal.open({
                templateUrl: 'addUsersToGroupDialog.html',
                size: VizPortal.ModalSize.medium,
                controller: VizPortal.AddUsersToGroupDialogCtrl,
                resolve: {
                    group: function () { return group; }
                }
            });
            return dialogInstance.result;
        };
        AddUsersToGroupAction.$inject = ['ModalService'];
        return AddUsersToGroupAction;
    })();
    VizPortal.AddUsersToGroupAction = AddUsersToGroupAction;
    VizPortal.Module.instance().service('AddUsersToGroupAction', AddUsersToGroupAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var AssignPermissionsToContentsRequest = (function (_super) {
            __extends(AssignPermissionsToContentsRequest, _super);
            function AssignPermissionsToContentsRequest(params) {
                _super.call(this, 'assignPermissionsToContents', params);
            }
            return AssignPermissionsToContentsRequest;
        })(ServerApi.Request);
        ServerApi.AssignPermissionsToContentsRequest = AssignPermissionsToContentsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../ServerApi/requests/assignPermissionsToContentsRequest.ts" />
/// <reference path="../services/ServerService.ts" />
var VizPortal;
(function (VizPortal) {
    var AssignPermissionsToContentsService = (function () {
        function AssignPermissionsToContentsService($translate, server, lrActionService, toasterService) {
            this.$translate = $translate;
            this.server = server;
            this.lrActionService = lrActionService;
            this.toasterService = toasterService;
            this.assignPermissionsToContentsPercent = 0;
            this.assignPermissionsToContentsPending = false;
        }
        AssignPermissionsToContentsService.prototype.handleCurrentJob = function () {
            var _this = this;
            return this.lrActionService.getLastByType(VizPortal.LongRunningActionType.AssignPermissionsToContents)
                .then(function (action) { return _this.handleAssignPermissionsToContentsStatus(action); });
        };
        AssignPermissionsToContentsService.prototype.getAssignPermissionsToContentsPercent = function () {
            return this.assignPermissionsToContentsPercent;
        };
        AssignPermissionsToContentsService.prototype.getAssignPermissionsToContentsPending = function () {
            return this.assignPermissionsToContentsPending;
        };
        AssignPermissionsToContentsService.prototype.assignPermissionsToContents = function (params) {
            var _this = this;
            this.assignPermissionsToContentsPercent = 0;
            return this.server.sendRequest(new VizPortal.ServerApi.AssignPermissionsToContentsRequest(params))
                .then(function (result) {
                var existingAssignment = !result.actionId;
                if (!existingAssignment) {
                    _this.trackAssignPermissionsToContentsProgress(result.actionId);
                }
                else {
                    _this.getAssignPermissionsToContentsStatus();
                }
            });
        };
        AssignPermissionsToContentsService.prototype.cancelPoll = function () {
            if (this.assignPermissionsToContentsPoller) {
                this.assignPermissionsToContentsPoller.cancel();
            }
            this.assignPermissionsToContentsPercent = 0;
            this.assignPermissionsToContentsPending = false;
        };
        AssignPermissionsToContentsService.prototype.trackAssignPermissionsToContentsProgress = function (actionId) {
            var _this = this;
            var completeFn = function (action) {
                if (action && action.succeeded === false) {
                    failFn(action && action.response && action.response.errors);
                }
                else {
                    _this.assignPermissionsToContentsPercent = 100;
                    _this.toasterService.pop({ type: VizPortal.ToastType.Info, text: _this.$translate.instant('assignPermissionsToContentsSuccess') });
                }
            };
            var notifyFn = function (action) {
                _this.assignPermissionsToContentsPercent = action.percentComplete;
            };
            var failFn = function (reason) {
                if (reason !== VizPortal.ErrorReason.Canceled) {
                    _this.toasterService.pop({ type: VizPortal.ToastType.Info, text: _this.$translate.instant('assignPermissionsToContentsError') });
                }
            };
            if (actionId) {
                this.assignPermissionsToContentsPending = true;
                this.assignPermissionsToContentsPoller = this.lrActionService.trackProgress(actionId);
                this.assignPermissionsToContentsPoller.promise
                    .then(completeFn, failFn, notifyFn)
                    .fin(function () { return _this.assignPermissionsToContentsPending = false; });
            }
            else {
                failFn(VizPortal.ErrorReason.Unknown);
            }
        };
        AssignPermissionsToContentsService.prototype.getAssignPermissionsToContentsStatus = function () {
            var _this = this;
            this.lrActionService.getLastByType(VizPortal.LongRunningActionType.AssignPermissionsToContents)
                .then(function (action) { return _this.handleAssignPermissionsToContentsStatus(action); });
        };
        AssignPermissionsToContentsService.prototype.handleAssignPermissionsToContentsStatus = function (action) {
            if (action && action.state !== VizPortal.LongRunningActionState.Complete) {
                this.assignPermissionsToContentsPercent = action.percentComplete;
                this.trackAssignPermissionsToContentsProgress(action.id);
            }
        };
        AssignPermissionsToContentsService.$inject = [
            '$translate',
            'ServerService',
            'LongRunningActionService',
            'ToasterService'
        ];
        return AssignPermissionsToContentsService;
    })();
    VizPortal.AssignPermissionsToContentsService = AssignPermissionsToContentsService;
    VizPortal.Module.instance().service('AssignPermissionsToContentsService', AssignPermissionsToContentsService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var BackdropService = (function () {
        function BackdropService(StackedElementsService) {
            this.StackedElementsService = StackedElementsService;
        }
        BackdropService.prototype.add = function () {
            var _this = this;
            var fillWindow = function () { return { left: 0, top: 0, right: 0, bottom: 0 }; };
            var backdropElement = angular.element('<div>').addClass('tb-backdrop');
            var backdropStackedElement = this.StackedElementsService.addStackedElement({
                contentElement: backdropElement,
                getContentElementPosition: fillWindow
            });
            var backdropInstance = {
                remove: function () { _this.StackedElementsService.removeStackedElement(backdropStackedElement); }
            };
            return backdropInstance;
        };
        BackdropService.$inject = ['StackedElementsService'];
        return BackdropService;
    })();
    VizPortal.BackdropService = BackdropService;
    VizPortal.Module.instance().service('BackdropService', BackdropService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var BulkImportUsersAction = (function () {
        function BulkImportUsersAction(modal) {
            this.modal = modal;
        }
        BulkImportUsersAction.prototype.showBulkImportSiteUsersDialog = function (dialogScope) {
            return this.showBulkImportUsersDialog(dialogScope, VizPortal.BulkImportUsersDialogCtrl.Method.ImportUsersFromCsv);
        };
        BulkImportUsersAction.prototype.showBulkImportServerUsersDialog = function (dialogScope) {
            return this.showBulkImportUsersDialog(dialogScope, VizPortal.BulkImportUsersDialogCtrl.Method.ImportServerUsersFromCsv);
        };
        BulkImportUsersAction.prototype.showBulkImportUsersDialog = function (dialogScope, method) {
            var dialogInstance = this.modal.open({
                scope: dialogScope,
                templateUrl: 'bulkImportUsersDialog.html',
                size: VizPortal.ModalSize.fitToContent,
                controller: VizPortal.BulkImportUsersDialogCtrl,
                resolve: {
                    method: function () { return method; } // BulkImportUsersDialogCtrl.Method
                }
            });
            return dialogInstance.result;
        };
        BulkImportUsersAction.$inject = ['ModalService'];
        return BulkImportUsersAction;
    })();
    VizPortal.BulkImportUsersAction = BulkImportUsersAction;
    VizPortal.Module.instance().service('BulkImportUsersAction', BulkImportUsersAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/ErrorCodes.ts" />
var VizPortal;
(function (VizPortal) {
    var ChangeDatasourceRefreshModeAction = (function () {
        function ChangeDatasourceRefreshModeAction($translate, $q, toaster, DataSources) {
            this.$translate = $translate;
            this.$q = $q;
            this.toaster = toaster;
            this.DataSources = DataSources;
        }
        ChangeDatasourceRefreshModeAction.prototype.execute = function (datasource, currentRefreshMode, newRefreshMode, currentRemoteAgentName, suppressSuccessToast, suppressErrorToast) {
            var _this = this;
            if (currentRefreshMode === newRefreshMode) {
                // no-op because the mode hasn't changed
                return this.$q.when({});
            }
            return this.DataSources.setRefreshMode(datasource.id, newRefreshMode).then(function (result) {
                if (!suppressErrorToast && result.errors && result.errors.length) {
                    _this.toaster.pop({ type: VizPortal.ToastType.Error, text: _this.errorMessageFor(result.errors[0], datasource) });
                }
                if (!suppressSuccessToast && (!result.errors || !result.errors.length)) {
                    if (newRefreshMode === VizPortal.ServerApi.RefreshModeTypes.Remote) {
                        _this.toaster.pop({
                            type: VizPortal.ToastType.Info,
                            text: _this.$translate.instant('editRemoteRefreshPropertiesAgentSuccess', { AGENT_NAME: VizPortal.L10n.elideIfLong(currentRemoteAgentName) })
                        });
                    }
                    else {
                        _this.toaster.pop({ type: VizPortal.ToastType.Info, text: _this.$translate.instant('editRemoteRefreshPropertiesServerSuccess') });
                    }
                }
                return result;
            });
        };
        ChangeDatasourceRefreshModeAction.prototype.errorMessageFor = function (error, datasource) {
            switch (error.code) {
                case VizPortal.CommonErrorCode.DatasourceNotFound:
                    return this.$translate.instant('errorDatasourceNotFound', { DATASOURCE_NAME: VizPortal.L10n.elideIfLong(datasource.name) });
                default:
                    return this.$translate.instant('errorUnknown');
            }
        };
        ChangeDatasourceRefreshModeAction.$inject = ['$translate', '$q', 'ToasterService', 'DataSources'];
        return ChangeDatasourceRefreshModeAction;
    })();
    VizPortal.ChangeDatasourceRefreshModeAction = ChangeDatasourceRefreshModeAction;
    VizPortal.Module.instance().service('ChangeDatasourceRefreshModeAction', ChangeDatasourceRefreshModeAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/ErrorCodes.ts" />
var VizPortal;
(function (VizPortal) {
    var ChangeDatasourceRemoteAgentAction = (function () {
        function ChangeDatasourceRemoteAgentAction($translate, $q, ToasterService, DataSources) {
            this.$translate = $translate;
            this.$q = $q;
            this.ToasterService = ToasterService;
            this.DataSources = DataSources;
        }
        ChangeDatasourceRemoteAgentAction.prototype.execute = function (datasource, currentRemoteAgentName, newRemoteAgentName, currentRefreshMode, suppressSuccessToast, suppressErrorToast) {
            var _this = this;
            if (currentRemoteAgentName === newRemoteAgentName || currentRefreshMode !== VizPortal.ServerApi.RefreshModeTypes.Remote) {
                // no-op because the remote agent hasn't changed or the refresh mode isn't remote
                return this.$q.when({});
            }
            return this.DataSources.setRemoteAgent(datasource.id, newRemoteAgentName).then(function (result) {
                if (!suppressErrorToast && result.errors && result.errors.length) {
                    _this.ToasterService.pop({ type: VizPortal.ToastType.Error, text: _this.errorMessageFor(result.errors[0], datasource) });
                }
                if (!suppressSuccessToast && (!result.errors || !result.errors.length)) {
                    if (currentRefreshMode === VizPortal.ServerApi.RefreshModeTypes.Remote) {
                        _this.ToasterService.pop({
                            type: VizPortal.ToastType.Info,
                            text: _this.$translate.instant('editRemoteRefreshPropertiesAgentSuccess', { AGENT_NAME: VizPortal.L10n.elideIfLong(newRemoteAgentName) })
                        });
                    }
                    else {
                        _this.ToasterService.pop({ type: VizPortal.ToastType.Info, text: _this.$translate.instant('editRemoteRefreshPropertiesServerSuccess') });
                    }
                }
                return result;
            });
        };
        ChangeDatasourceRemoteAgentAction.prototype.errorMessageFor = function (error, datasource) {
            switch (error.code) {
                default:
                    return this.$translate.instant('errorUnknown');
            }
        };
        ChangeDatasourceRemoteAgentAction.$inject = ['$translate', '$q', 'ToasterService', 'DataSources'];
        return ChangeDatasourceRemoteAgentAction;
    })();
    VizPortal.ChangeDatasourceRemoteAgentAction = ChangeDatasourceRemoteAgentAction;
    VizPortal.Module.instance().service('ChangeDatasourceRemoteAgentAction', ChangeDatasourceRemoteAgentAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="ContentActionNotification.ts" />
var VizPortal;
(function (VizPortal) {
    // Notification For:
    // => deleting groups
    var DeleteGroupsActionNotification = (function () {
        function DeleteGroupsActionNotification($state, $translate, contentActionNotification) {
            this.$state = $state;
            this.$translate = $translate;
            this.contentActionNotification = contentActionNotification;
        }
        DeleteGroupsActionNotification.prototype.notify = function (result, groups) {
            var _this = this;
            // create a notification object for result reporting
            var notification = VizPortal.MultipleResultNotificationOptions.create(new VizPortal.MultipleItemResult(groups, result), {
                describeSuccessSummary: function (successCount) {
                    return _this.$translate.instant('deleteGroupsSuccess', { ITEM_COUNT: successCount, ITEM_NAME: VizPortal.L10n.elideIfLong(groups.first().name) }, VizPortal.L10n.Interpolations.Count);
                },
                describeErrorSummary: function (errorCount) {
                    return _this.$translate.instant('deleteGroupsError', { ERROR_COUNT: errorCount, ITEM_NAME: VizPortal.L10n.elideIfLong(groups.first().name) }, VizPortal.L10n.Interpolations.Count);
                },
                describeErrorDetail: function (errorItem) {
                    return {
                        itemName: errorItem.item.name,
                        itemUrl: _this.$state.href("main.site.group", { id: errorItem.item.id }),
                        errorMessage: _this.errorMessageFor(errorItem.error, errorItem.item.name)
                    };
                }
            });
            // pass the notification object to the service for displaying
            this.contentActionNotification.notify(notification);
        };
        DeleteGroupsActionNotification.prototype.errorMessageFor = function (error, groupName) {
            switch (error.code) {
                case VizPortal.CommonErrorCode.GroupNotFound:
                    return this.$translate.instant('errorGroupNotFound', { ITEM_NAME: VizPortal.L10n.elideIfLong(groupName) });
                case VizPortal.GroupErrorCode.GroupCannotBeDeleted:
                    return this.$translate.instant('errorUnableToDeleteAllUsersGroup', { GROUP_NAME: VizPortal.L10n.elideIfLong(groupName) });
                default:
                    return this.$translate.instant('errorUnknown');
            }
        };
        DeleteGroupsActionNotification.$inject = [
            '$state',
            '$translate',
            'ContentActionNotification'];
        return DeleteGroupsActionNotification;
    })();
    VizPortal.DeleteGroupsActionNotification = DeleteGroupsActionNotification;
    VizPortal.Module.instance().service('DeleteGroupsActionNotification', DeleteGroupsActionNotification);
    // Notification For:
    // => renaming a group
    var RenameGroupActionNotification = (function () {
        function RenameGroupActionNotification($translate, toaster) {
            this.$translate = $translate;
            this.toaster = toaster;
        }
        RenameGroupActionNotification.prototype.notify = function (showErrorMsgFunc, result, newGroupName, oldGroupName) {
            if (!!result.errors && result.errors.length > 0) {
                var errorMsg = this.errorMessageFor(result.errors[0], newGroupName, oldGroupName);
                showErrorMsgFunc(errorMsg);
            }
            else {
                var successMsg = this.$translate.instant('updateGroupNameSuccessMsg', {
                    NEW_ITEM_NAME: VizPortal.L10n.elideIfLong(newGroupName),
                    ITEM_NAME: VizPortal.L10n.elideIfLong(oldGroupName)
                });
                this.toaster.pop({ type: VizPortal.ToastType.Info, text: successMsg });
            }
        };
        RenameGroupActionNotification.prototype.errorMessageFor = function (error, newGroupName, oldGroupName) {
            switch (error.code) {
                case VizPortal.UserErrorCode.UserGroupInvalidName:
                    return this.$translate.instant('errorUserGroupInvalidName', { NEW_ITEM_NAME: VizPortal.L10n.elideIfLong(newGroupName) });
                case VizPortal.UserErrorCode.UserGroupWithNameAlreadyExists:
                    return this.$translate.instant('errorUserGroupWithNameAlreadyExists', { NEW_ITEM_NAME: VizPortal.L10n.elideIfLong(newGroupName) });
                case VizPortal.UserErrorCode.UserAllUsersGroupAlreadyExists:
                    return this.$translate.instant('errorUserAllUsersGroupAlreadyExists', { NEW_ITEM_NAME: VizPortal.L10n.elideIfLong(newGroupName) });
                case VizPortal.CommonErrorCode.GroupNotFound:
                    return this.$translate.instant('errorGroupNotFound', { ITEM_NAME: VizPortal.L10n.elideIfLong(oldGroupName) });
                default:
                    return this.$translate.instant('errorUnknown');
            }
        };
        RenameGroupActionNotification.$inject = [
            '$translate',
            'ToasterService'];
        return RenameGroupActionNotification;
    })();
    VizPortal.RenameGroupActionNotification = RenameGroupActionNotification;
    VizPortal.Module.instance().service('RenameGroupActionNotification', RenameGroupActionNotification);
    // Notification For:
    // => creating a group
    var CreateGroupActionNotification = (function () {
        function CreateGroupActionNotification($translate, toaster) {
            this.$translate = $translate;
            this.toaster = toaster;
        }
        CreateGroupActionNotification.prototype.notify = function (showErrorMsgFunc, result, groupName) {
            if (!!result.errors && result.errors.length > 0) {
                var errorMsg = this.errorMessageFor(result.errors[0], groupName);
                showErrorMsgFunc(errorMsg);
            }
            else {
                var successMsg = this.$translate.instant('createGroupSuccessMsg', { NEW_ITEM_NAME: VizPortal.L10n.elideIfLong(groupName) });
                this.toaster.pop({ type: VizPortal.ToastType.Info, text: successMsg });
            }
        };
        CreateGroupActionNotification.prototype.errorMessageFor = function (error, groupName) {
            switch (error.code) {
                case VizPortal.UserErrorCode.UserGroupInvalidName:
                    return this.$translate.instant('errorUserGroupInvalidName', { NEW_ITEM_NAME: VizPortal.L10n.elideIfLong(groupName) });
                case VizPortal.UserErrorCode.UserGroupWithNameAlreadyExists:
                    return this.$translate.instant('errorUserGroupWithNameAlreadyExists', { NEW_ITEM_NAME: VizPortal.L10n.elideIfLong(groupName) });
                case VizPortal.UserErrorCode.UserAllUsersGroupAlreadyExists:
                    return this.$translate.instant('errorUserAllUsersGroupAlreadyExists', { NEW_ITEM_NAME: VizPortal.L10n.elideIfLong(groupName) });
                default:
                    return this.$translate.instant('errorUnknown');
            }
        };
        CreateGroupActionNotification.$inject = [
            '$translate',
            'ToasterService'];
        return CreateGroupActionNotification;
    })();
    VizPortal.CreateGroupActionNotification = CreateGroupActionNotification;
    VizPortal.Module.instance().service('CreateGroupActionNotification', CreateGroupActionNotification);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/GroupsActionNotification.ts" />
var VizPortal;
(function (VizPortal) {
    var CreateGroupDialogAction = (function () {
        function CreateGroupDialogAction($translate, ConfirmActionDialog, createGroupActionNotification, Groups, ServerService) {
            this.$translate = $translate;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.createGroupActionNotification = createGroupActionNotification;
            this.Groups = Groups;
            this.ServerService = ServerService;
        }
        CreateGroupDialogAction.prototype.showCreateGroupDialog = function (parentScope) {
            var _this = this;
            var dialogScope = parentScope.$new();
            dialogScope.description = this.$translate.instant('createGroupDesc');
            dialogScope.input = {
                text: '',
                maxLength: 255
            };
            var activeDirectoryEnabled = this.ServerService.isServerDomainFamilyActiveDirectory();
            var dialogInstance = this.ConfirmActionDialog.open({
                title: this.$translate.instant(activeDirectoryEnabled ? 'createLocalGroupTitle' : 'createGroupTitle'),
                bodyTemplateUrl: 'confirmActionDialogInput.html',
                scope: dialogScope,
                position: { reserveHeight: 250 },
                confirmDisabled: function () { return _.isEmpty(dialogScope.input.text); },
                actionName: this.$translate.instant('createGroupDialogSubmit'),
                action: function (dialogInstance) {
                    return _this.Groups.createGroup(dialogScope.input.text).then(function (result) {
                        _this.createGroupActionNotification.notify(function (errorMsg) {
                            dialogInstance.showErrorMessage(errorMsg);
                        }, result, dialogScope.input.text);
                    });
                }
            });
            dialogInstance.result.fin(function () { return dialogScope.$destroy(); });
            return dialogInstance.result;
        };
        CreateGroupDialogAction.$inject = ['$translate',
            'ConfirmActionDialog',
            'CreateGroupActionNotification',
            'Groups',
            'ServerService'];
        return CreateGroupDialogAction;
    })();
    VizPortal.CreateGroupDialogAction = CreateGroupDialogAction;
    VizPortal.Module.instance().service('CreateGroupDialogAction', CreateGroupDialogAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var DataSourceErrors = (function () {
        function DataSourceErrors(ContentUrl, $translate) {
            this.ContentUrl = ContentUrl;
            this.$translate = $translate;
        }
        DataSourceErrors.prototype.errorDetailsFor = function (datasourceErrorItem) {
            return {
                itemName: datasourceErrorItem.item.name,
                itemUrl: datasourceErrorItem.error.code === VizPortal.CommonErrorCode.DatasourceNotFound
                    || datasourceErrorItem.error.code === VizPortal.CommonErrorCode.DataConnectionNotFound
                    ? null
                    : this.ContentUrl.forItem(datasourceErrorItem.item, VizPortal.DatasourceContentType),
                errorMessage: this.errorMessageForItem(datasourceErrorItem)
            };
        };
        DataSourceErrors.prototype.errorMessageForItem = function (errorItem) {
            return this.errorMessageFor(errorItem.error, errorItem.item.name);
        };
        DataSourceErrors.prototype.errorMessageFor = function (error, datasourceName) {
            if (datasourceName === void 0) { datasourceName = ''; }
            switch (error.code) {
                case VizPortal.CommonErrorCode.DatasourceNotFound:
                case VizPortal.CommonErrorCode.DataConnectionNotFound:
                    return this.$translate.instant('errorDatasourceNotFound', { DATASOURCE_NAME: VizPortal.L10n.elideIfLong(datasourceName) });
                case VizPortal.DatasourceErrorCode.DatasourceChangeOwnerDisabled:
                    return this.$translate.instant('errorDatasourceChangeOwnerDisabled');
                // Permissions errors
                // TODO: Do we want specific error messages for each of these cases?
                case VizPortal.DatasourceErrorCode.DatasourceMoveInsufficientPermissionsOnDatasource:
                case VizPortal.DatasourceErrorCode.DatasourceMoveInsufficientPermissionsOnDestinationProject:
                case VizPortal.DatasourceErrorCode.DatasourceMoveInsufficientPermissionsOnSourceProject:
                    return this.$translate.instant('errorDatasourceMoveInsufficientPermissions');
                case VizPortal.DatasourceErrorCode.DatasourceWithSameNameInDestinationProject:
                    return this.$translate.instant('errorDatasourceWithSameNameInDestinationProject');
                case VizPortal.CommonErrorCode.CallingUserInsufficientPermissions:
                    return this.$translate.instant('errorDatasourceInsufficientPermissions');
                default:
                    return this.$translate.instant('errorUnknown');
            }
        };
        DataSourceErrors.$inject = ['ContentUrl', '$translate'];
        return DataSourceErrors;
    })();
    VizPortal.DataSourceErrors = DataSourceErrors;
    VizPortal.Module.instance().service('DataSourceErrors', DataSourceErrors);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var DeleteGroupAction = (function () {
        function DeleteGroupAction($translate, ConfirmActionDialog, deleteGroupsActionNotification, Groups, toaster) {
            this.$translate = $translate;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.deleteGroupsActionNotification = deleteGroupsActionNotification;
            this.Groups = Groups;
            this.toaster = toaster;
        }
        DeleteGroupAction.prototype.showDeleteGroupDialog = function (groups, dialogScope) {
            var _this = this;
            var dialogBody;
            var successMessage;
            if (groups.size() === 1) {
                var group = groups.first();
                dialogBody = this.$translate.instant('confirmDeleteGroup', { GROUP_NAME: VizPortal.L10n.elideIfLong(group.name) });
                successMessage = this.$translate.instant('groupDeleted', { GROUP_NAME: VizPortal.L10n.elideIfLong(group.name) });
            }
            else {
                dialogBody = this.$translate.instant('confirmDeleteGroups', { GROUP_COUNT: groups.size() }, VizPortal.L10n.Interpolations.Count);
                successMessage = this.$translate.instant('groupsDeleted', { GROUP_COUNT: groups.size() }, VizPortal.L10n.Interpolations.Count);
            }
            var dialogInstance = this.ConfirmActionDialog.open({
                scope: dialogScope,
                title: this.$translate.instant('delete'),
                bodyText: dialogBody,
                actionName: this.$translate.instant('confirmDeleteButton', { ITEM_COUNT: groups.size() }, VizPortal.L10n.Interpolations.Count),
                isDeleteAction: true,
                action: function () { return _this.Groups.deleteGroups(groups.keys()); }
            });
            dialogInstance.result.then(function (result) {
                _this.deleteGroupsActionNotification.notify(result, groups);
            });
            return dialogInstance.result;
        };
        DeleteGroupAction.$inject = ['$translate',
            'ConfirmActionDialog',
            'DeleteGroupsActionNotification',
            'Groups',
            'ToasterService'];
        return DeleteGroupAction;
    })();
    VizPortal.DeleteGroupAction = DeleteGroupAction;
    VizPortal.Module.instance().service('DeleteGroupAction', DeleteGroupAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var DeleteServerUsersRequest = (function (_super) {
            __extends(DeleteServerUsersRequest, _super);
            function DeleteServerUsersRequest(params) {
                _super.call(this, 'deleteServerUsers', params);
            }
            return DeleteServerUsersRequest;
        })(ServerApi.Request);
        ServerApi.DeleteServerUsersRequest = DeleteServerUsersRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../models/IServerUserInfo.ts" />
/// <reference path="../ServerApi/types/IServerUser.ts" />
/// <reference path="../ServerApi/requests/DeleteServerUsersRequest.ts" />
var VizPortal;
(function (VizPortal) {
    var DeleteUsersFromServerAction = (function () {
        function DeleteUsersFromServerAction($state, $translate, ConfirmActionDialog, userActionNotification, ServerUsers, toaster) {
            this.$state = $state;
            this.$translate = $translate;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.userActionNotification = userActionNotification;
            this.ServerUsers = ServerUsers;
            this.toaster = toaster;
        }
        DeleteUsersFromServerAction.prototype.showDeleteUsersFromServerDialog = function (serverUsers, context) {
            var _this = this;
            var dialogBody = this.$translate.instant('confirmDeleteUsers', {
                USER_NAME: VizPortal.L10n.elideIfLong(serverUsers.first().displayName),
                USER_COUNT: serverUsers.size()
            }, VizPortal.L10n.Interpolations.Count);
            var dialogInstance = this.ConfirmActionDialog.open({
                scope: context.scope,
                title: this.$translate.instant('delete'),
                bodyText: dialogBody,
                actionName: this.$translate.instant('confirmDeleteButton', {
                    ITEM_COUNT: serverUsers.size()
                }, VizPortal.L10n.Interpolations.Count),
                isDeleteAction: true,
                action: function () { return _this.ServerUsers.deleteUsers(serverUsers.keys()); }
            });
            dialogInstance.result.then(function (result) {
                var params = {
                    users: serverUsers,
                    results: result.results,
                    errors: result.errors,
                    successCode: '11'
                };
                _this.userActionNotification.notify(params);
            });
            return dialogInstance.result;
        };
        DeleteUsersFromServerAction.$inject = ['$state',
            '$translate',
            'ConfirmActionDialog',
            'UserActionNotification',
            'ServerUsers',
            'ToasterService'];
        return DeleteUsersFromServerAction;
    })();
    VizPortal.DeleteUsersFromServerAction = DeleteUsersFromServerAction;
    VizPortal.Module.instance().service('DeleteUsersFromServerAction', DeleteUsersFromServerAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="./WindowLocationService.ts" />
var VizPortal;
(function (VizPortal) {
    // Launches Desktop application using "tableau:" URI scheme
    var DesktopLaunchService = (function () {
        function DesktopLaunchService($q, $timeout, $window, windowLocationService) {
            this.$q = $q;
            this.$timeout = $timeout;
            this.windowLocationService = windowLocationService;
            this.initHiddenIFrame($window);
        }
        DesktopLaunchService.prototype.initHiddenIFrame = function ($window) {
            this.hiddenIFrame = $window.document.createElement("iframe");
            this.hiddenIFrame.className = 'ng-hide';
            $window.document.body.appendChild(this.hiddenIFrame);
        };
        // Launch Desktop.
        // Focus on focusElm to detect window blur (heuristic for knowing whether something opened)
        DesktopLaunchService.prototype.launchDesktop = function (focusElm) {
            focusElm.focus();
            var blurDeferred = this.$q.defer();
            focusElm.one('blur', function () {
                // Focus was blurred! Assume success since something opened to take focus away.
                blurDeferred.resolve(); // report success
            });
            // Fail after not getting blur event for a while
            this.$timeout(function () { return blurDeferred.reject(); }, DesktopLaunchService.DesktopLaunchTimeoutMillis);
            try {
                this.windowLocationService.navigateIFrameTo(this.hiddenIFrame, DesktopLaunchService.URIScheme);
            }
            catch (e) {
                // Fail fast.
                // We were lucky enough to get an exception for the failure!
                // (Currently only Firefox will throw an exception here when the protocol is not recognized)
                return this.$q.reject();
            }
            // Wait for focus to blur or not...
            return blurDeferred.promise;
        };
        DesktopLaunchService.DesktopLaunchTimeoutMillis = 4000;
        DesktopLaunchService.URIScheme = 'tableau:';
        DesktopLaunchService.$inject = [
            '$q',
            '$timeout',
            '$window',
            'WindowLocationService'
        ];
        return DesktopLaunchService;
    })();
    VizPortal.DesktopLaunchService = DesktopLaunchService;
    VizPortal.Module.instance().service('DesktopLaunchService', DesktopLaunchService);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="../../libs.ts" />
/// <reference path="../types/IGetDetailParams.ts" />
/// <reference path="Request.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetDetailRequest = (function (_super) {
            __extends(GetDetailRequest, _super);
            function GetDetailRequest(method, id) {
                _super.call(this, method, { id: id });
            }
            return GetDetailRequest;
        })(ServerApi.Request);
        ServerApi.GetDetailRequest = GetDetailRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../fetchers/IDetailFetcher.ts" />
/// <reference path="../ServerApi/requests/GetDetailRequest.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerDetailFetcher = (function () {
        function ServerDetailFetcher(server, $q, requestMethod, resultMapper) {
            this.server = server;
            this.$q = $q;
            this.requestMethod = requestMethod;
            this.resultMapper = resultMapper;
        }
        ServerDetailFetcher.prototype.fetchById = function (id) {
            var _this = this;
            return this.server
                .sendRequest(new VizPortal.ServerApi.GetDetailRequest(this.requestMethod, id))
                .then(VizPortal.ResultHelper.rejectResultOnError(this.$q))
                .then(function (result) { return _this.$q.when(_this.resultMapper(result)); }, function (result) { return _this.$q.reject(result.errors && result.errors[0] && result.errors[0].code); });
        };
        return ServerDetailFetcher;
    })();
    VizPortal.ServerDetailFetcher = ServerDetailFetcher;
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="ServerService.ts" />
/// <reference path="../fetchers/IDetailFetcher.ts" />
/// <reference path="../fetchers/ServerResourceFetcher.ts" />
/// <reference path="../fetchers/ServerDetailFetcher.ts" />
var VizPortal;
(function (VizPortal) {
    var FetcherFactory = (function () {
        function FetcherFactory($q, server) {
            this.$q = $q;
            this.server = server;
        }
        FetcherFactory.prototype.getServerDetailFetcher = function (requestMethod, resultMapper) {
            return new VizPortal.ServerDetailFetcher(this.server, this.$q, requestMethod, resultMapper);
        };
        FetcherFactory.prototype.getServerResourceFetcher = function (requestType, resultMapper) {
            return new VizPortal.ServerResourceFetcher(this.server, requestType, resultMapper);
        };
        FetcherFactory.$inject = [
            '$q',
            'ServerService'
        ];
        return FetcherFactory;
    })();
    VizPortal.FetcherFactory = FetcherFactory;
    VizPortal.Module.instance().service('FetcherFactory', FetcherFactory);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
var VizPortal;
(function (VizPortal) {
    var ServerApi;
    (function (ServerApi) {
        var GetActionableObjectsRequest = (function (_super) {
            __extends(GetActionableObjectsRequest, _super);
            function GetActionableObjectsRequest(params) {
                _super.call(this, 'getActionableObjects', params);
            }
            return GetActionableObjectsRequest;
        })(ServerApi.Request);
        ServerApi.GetActionableObjectsRequest = GetActionableObjectsRequest;
    })(ServerApi = VizPortal.ServerApi || (VizPortal.ServerApi = {}));
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../helpers/RequestHelper.ts" />
/// <reference path="../ServerApi/requests/GetActionableObjectsRequest.ts" />
var VizPortal;
(function (VizPortal) {
    // TODO: in the future, this class and the underlying API will support more action types than editPermissions
    //       see http://mytableau/display/devft/getActionableObjects for details
    var GetActionableObjectsForAction = (function () {
        function GetActionableObjectsForAction(server) {
            this.server = server;
        }
        GetActionableObjectsForAction.prototype.editPermissions = function (ids) {
            return this.server.sendRequests(VizPortal.RequestHelper.buildRequests(ids.ids, function (idsBlock) { return new VizPortal.ServerApi.GetActionableObjectsRequest({
                authorizables: {
                    type: ids.type,
                    ids: idsBlock
                }
            }); }), GetActionableObjectsForAction.combineResults);
        };
        GetActionableObjectsForAction.combineResults = function (results) {
            return {
                ids: VizPortal.ResultHelper.combineIds(results),
                errors: VizPortal.ResultHelper.combineErrors(results)
            };
        };
        GetActionableObjectsForAction.$inject = ['ServerService'];
        return GetActionableObjectsForAction;
    })();
    VizPortal.GetActionableObjectsForAction = GetActionableObjectsForAction;
    VizPortal.Module.instance().service('GetActionableObjectsForAction', GetActionableObjectsForAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var ProjectErrors = (function () {
        function ProjectErrors($state, $translate) {
            this.$state = $state;
            this.$translate = $translate;
        }
        ProjectErrors.prototype.errorDetailsFor = function (projectErrorItem) {
            return {
                itemName: projectErrorItem.item.name,
                itemUrl: projectErrorItem.error.code === VizPortal.CommonErrorCode.ProjectNotFound
                    ? null
                    : this.projectUrl(projectErrorItem.item),
                errorMessage: this.errorMessageFor(projectErrorItem)
            };
        };
        ProjectErrors.prototype.projectUrl = function (project) {
            return this.$state.href('main.site.content.project.details', { id: project.id });
        };
        ProjectErrors.prototype.errorMessageFor = function (errorItem) {
            var project = errorItem.item;
            switch (errorItem.error.code) {
                case VizPortal.ProjectErrorCode.ProjectChangeOwnerDisabled:
                    return this.$translate.instant('errorProjectChangeOwnerDisabled');
                case VizPortal.ProjectErrorCode.ProjectDescriptionGreaterThanMaxLength:
                    return this.$translate.instant('errorProjectDescriptionTooLong');
                case VizPortal.ProjectErrorCode.ProjectNameAlreadyExists:
                    return this.$translate.instant('errorProjectNameAlreadyExists');
                case VizPortal.CommonErrorCode.ProjectNotFound:
                    return this.$translate.instant('errorProjectNotFound', { PROJECT_NAME: VizPortal.L10n.elideIfLong(project.name) });
                case VizPortal.CommonErrorCode.CallingUserInsufficientPermissions:
                    return this.$translate.instant('errorProjectInsufficientPermissions');
                default:
                    return this.$translate.instant('errorUnknown');
            }
        };
        ProjectErrors.$inject = ['$state', '$translate'];
        return ProjectErrors;
    })();
    VizPortal.ProjectErrors = ProjectErrors;
    VizPortal.Module.instance().service('ProjectErrors', ProjectErrors);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var RemoveUsersFromGroupAction = (function () {
        function RemoveUsersFromGroupAction($translate, ConfirmActionDialog, SiteUsers, groupMembershipUpdateActionNotification) {
            this.$translate = $translate;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.SiteUsers = SiteUsers;
            this.groupMembershipUpdateActionNotification = groupMembershipUpdateActionNotification;
        }
        RemoveUsersFromGroupAction.prototype.showRemoveUsersFromGroupDialog = function (groupUsers, group) {
            var _this = this;
            var dialogBody = this.$translate.instant('confirmRemoveUsersFromGroup', {
                USER_NAME: VizPortal.L10n.elideIfLong(groupUsers.first().displayName),
                USER_COUNT: groupUsers.size(),
                GROUP_NAME: VizPortal.L10n.elideIfLong(group.name)
            }, VizPortal.L10n.Interpolations.Count);
            var dialogInstance = this.ConfirmActionDialog.open({
                title: this.$translate.instant('remove'),
                bodyText: dialogBody,
                actionName: this.$translate.instant('confirmRemoveButton', {
                    ITEM_COUNT: groupUsers.size()
                }, VizPortal.L10n.Interpolations.Count),
                isDeleteAction: true,
                action: function () { return _this.SiteUsers.removeFromGroups(groupUsers.keys(), [group.id]); }
            });
            dialogInstance.result.then(function (result) {
                _this.groupMembershipUpdateActionNotification.notify(result, groupUsers, 0, null, 1, group.name);
            });
            return dialogInstance.result;
        };
        RemoveUsersFromGroupAction.$inject = ['$translate',
            'ConfirmActionDialog',
            'SiteUsers',
            'GroupMembershipUpdateActionNotification'];
        return RemoveUsersFromGroupAction;
    })();
    VizPortal.RemoveUsersFromGroupAction = RemoveUsersFromGroupAction;
    VizPortal.Module.instance().service('RemoveUsersFromGroupAction', RemoveUsersFromGroupAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../models/ILongRunningAction.ts" />
/// <reference path="../helpers/ErrorCodes.ts" />
var VizPortal;
(function (VizPortal) {
    var SetProjectControlledPermissionsAction = (function () {
        function SetProjectControlledPermissionsAction($translate, toaster, Projects, longRunningActionService, scope) {
            this.$translate = $translate;
            this.toaster = toaster;
            this.Projects = Projects;
            this.longRunningActionService = longRunningActionService;
            this.scope = scope;
        }
        SetProjectControlledPermissionsAction.prototype.execute = function (projects, updatedPermissionSource, scope) {
            this.scope = scope;
            if (_.first(updatedPermissionSource) === VizPortal.LockUnlockProjectPermissionsState.Locked) {
                return this.lockProjectPermissions(projects);
            }
            else {
                return this.unlockProjectPermissions(projects);
            }
        };
        SetProjectControlledPermissionsAction.prototype.lockProjectPermissions = function (projects) {
            var _this = this;
            var projIds = projects.pluck("id");
            return this.Projects.setProjectControlledPermissions(projIds)
                .then(function (result) {
                var toast;
                if (result.errors && result.errors.length) {
                    toast = {
                        type: VizPortal.ToastType.Error,
                        text: _this.errorMessageFor(result.errors[0], projects.first())
                    };
                }
                else {
                    var permission_source = _this.$translate.instant('lockProjectPermissionsChangeSuccess_locked', { PROJECT_COUNT: projects.size() });
                    toast = {
                        type: VizPortal.ToastType.Info,
                        text: _this.$translate.instant('lockProjectPermissionsChangeSuccess', { PROJECT_COUNT: projects.size(),
                            PROJECT_NAME: VizPortal.L10n.elideIfLong(projects.first().name),
                            PERMISSION_SOURCE: permission_source
                        }, VizPortal.L10n.Interpolations.Count)
                    };
                }
                _this.toaster.pop(toast);
                return result;
            });
        };
        SetProjectControlledPermissionsAction.prototype.unlockProjectPermissions = function (projects) {
            var _this = this;
            var projIds = projects.pluck("id");
            var permissionChangeSuccess = function (result) {
                if (result && result.succeeded === false) {
                    permissionsChangeFail(VizPortal.ErrorReason.Unknown);
                }
                else {
                    _this.scope.percentComplete = result.percentComplete;
                    var permission_source = _this.$translate.instant('lockProjectPermissionsChangeSuccess_unlocked', { PROJECT_COUNT: projects.size() });
                    var toast = {
                        type: VizPortal.ToastType.Info,
                        text: _this.$translate.instant('lockProjectPermissionsChangeSuccess', { PROJECT_COUNT: projects.size(),
                            PROJECT_NAME: VizPortal.L10n.elideIfLong(projects.first().name),
                            PERMISSION_SOURCE: permission_source
                        }, VizPortal.L10n.Interpolations.Count)
                    };
                    _this.toaster.pop(toast);
                    _this.scope.busyUnlocking = false;
                }
                return result.response;
            };
            var permissionsChangeFail = function (reason) {
                _this.scope.busyUnlocking = false;
                var toast = {
                    type: VizPortal.ToastType.Error,
                    text: _this.$translate.instant('errorUnknown')
                };
                _this.toaster.pop(toast);
            };
            var notifyProgress = function (action) {
                _this.scope.busyUnlocking = true;
                _this.scope.percentComplete = action.percentComplete;
            };
            return this.Projects.setContentControlledPermissions(projIds)
                .then(function (result) {
                var progress = _this.longRunningActionService.trackProgress(result.actionId);
                return progress.promise.then(permissionChangeSuccess, permissionsChangeFail, notifyProgress);
            });
        };
        SetProjectControlledPermissionsAction.prototype.errorMessageFor = function (error, project) {
            switch (error.code) {
                case VizPortal.CommonErrorCode.ProjectNotFound:
                    return this.$translate.instant('errorProjectNotFound', { PROJECT_NAME: VizPortal.L10n.elideIfLong(project.name) });
                default:
                    return this.$translate.instant('errorUnknown');
            }
        };
        SetProjectControlledPermissionsAction.$inject = ['$translate', 'ToasterService', 'Projects', 'LongRunningActionService'];
        return SetProjectControlledPermissionsAction;
    })();
    VizPortal.SetProjectControlledPermissionsAction = SetProjectControlledPermissionsAction;
    VizPortal.Module.instance().service('SetProjectControlledPermissionsAction', SetProjectControlledPermissionsAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
/// <reference path="../services/GroupsActionNotification.ts" />
var VizPortal;
(function (VizPortal) {
    var UpdateGroupNameAction = (function () {
        function UpdateGroupNameAction($translate, $q, ConfirmActionDialog, Groups, renameGroupActionNotification, toaster) {
            this.$translate = $translate;
            this.$q = $q;
            this.ConfirmActionDialog = ConfirmActionDialog;
            this.Groups = Groups;
            this.renameGroupActionNotification = renameGroupActionNotification;
            this.toaster = toaster;
        }
        // update group name on the groups list page (confirmation dialog with text input for name entry).
        UpdateGroupNameAction.prototype.showUpdateGroupNameDialog = function (group, parentScope) {
            var _this = this;
            var dialogScope = parentScope.$new();
            dialogScope.description = this.$translate.instant('updateGroupNameDesc', {
                GROUP_NAME: VizPortal.L10n.elideIfLong(group.name)
            });
            dialogScope.input = {
                text: group.name,
                maxLength: 255
            };
            var dialogInstance = this.ConfirmActionDialog.open({
                title: this.$translate.instant('updateGroupNameTitle'),
                bodyTemplateUrl: 'confirmActionDialogInput.html',
                scope: dialogScope,
                position: { reserveHeight: 250 },
                confirmDisabled: function () { return _.isEmpty(dialogScope.input.text); },
                actionName: this.$translate.instant('updateGroupNameTitle'),
                action: function (dialogInstance) {
                    return _this.Groups.updateGroupName(group.id, dialogScope.input.text).then(function (result) {
                        _this.renameGroupActionNotification.notify(function (errorMsg) {
                            dialogInstance.showErrorMessage(errorMsg);
                        }, result, dialogScope.input.text, group.name);
                        return result;
                    });
                }
            });
            dialogInstance.result.fin(function () { return dialogScope.$destroy(); });
            return dialogInstance.result;
        };
        // update group name on the group details page (in-place editing; no dialog)
        UpdateGroupNameAction.prototype.updateGroupNameInPlace = function (group, newName) {
            var _this = this;
            return this.rejectOnError(this.Groups.updateGroupName(group.id, newName).then(function (result) {
                // show the toast
                var msg = '';
                if (result.errors && result.errors.length) {
                    msg = _this.$translate.instant('updateGroupNameErrorMsg', { ITEM_NAME: VizPortal.L10n.elideIfLong(group.name), NEW_ITEM_NAME: VizPortal.L10n.elideIfLong(newName) });
                    _this.toaster.pop({ type: VizPortal.ToastType.Error, text: msg });
                }
                else {
                    msg = _this.$translate.instant('updateGroupNameSuccessMsg', { ITEM_NAME: VizPortal.L10n.elideIfLong(group.name), NEW_ITEM_NAME: VizPortal.L10n.elideIfLong(newName) });
                    _this.toaster.pop({ type: VizPortal.ToastType.Info, text: msg });
                    // update the UI's model of the name to the new name, if the request didn't error
                    group.name = newName;
                }
                return result;
            }));
        };
        // Helper method to reject a promise if the result returned from the server contains any errors.
        UpdateGroupNameAction.prototype.rejectOnError = function (serverResult) {
            var _this = this;
            return serverResult.then(function (result) {
                if (result.errors && result.errors.length) {
                    return _this.$q.reject(result);
                }
            });
        };
        UpdateGroupNameAction.$inject = ['$translate',
            '$q',
            'ConfirmActionDialog',
            'Groups',
            'RenameGroupActionNotification',
            'ToasterService'];
        return UpdateGroupNameAction;
    })();
    VizPortal.UpdateGroupNameAction = UpdateGroupNameAction;
    VizPortal.Module.instance().service('UpdateGroupNameAction', UpdateGroupNameAction);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var UserActionResultCode = (function () {
        function UserActionResultCode($translate) {
            this.$translate = $translate;
            UserActionResultCode.validUserActionCodes = {};
            var codes = [1]
                .concat(_.range(10, 16))
                .concat(_.range(20, 22))
                .concat(_.range(30, 33))
                .concat(_.range(40, 43))
                .concat(_.range(50, 58));
            _.each(codes, function (code) { return UserActionResultCode.validUserActionCodes[code] = true; });
        }
        UserActionResultCode.prototype.toLocalizedResultMessage = function (userActionCode, count) {
            if (count === void 0) { count = 1; }
            userActionCode = this.normalizeUserActionCode(userActionCode);
            if (this.isValidUserActionCode(userActionCode)) {
                return this.$translate.instant(['userActionBulkOperationResult_', userActionCode].join(''), { COUNT: count }, VizPortal.L10n.Interpolations.Count);
            }
            else {
                console.log('unknown code ' + userActionCode);
                return '';
            }
        };
        UserActionResultCode.prototype.toLocalizedErrorMessage = function (userActionCode, count) {
            if (count === void 0) { count = 1; }
            userActionCode = this.normalizeUserActionCode(userActionCode);
            if (this.isValidUserActionErrorCode(userActionCode)) {
                return this.$translate.instant(['userActionBulkOperationErrorResult_', userActionCode].join(''), { COUNT: count }, VizPortal.L10n.Interpolations.Count);
            }
            else {
                console.log('unknown code ' + userActionCode);
                return '';
            }
        };
        UserActionResultCode.prototype.normalizeUserActionCode = function (userActionCode) {
            if (typeof userActionCode === 'string') {
                // server bug: some codes are returned as strings others as numbers.
                userActionCode = parseInt(userActionCode.toString(), 10) || 0;
            }
            return userActionCode;
        };
        UserActionResultCode.prototype.isValidUserActionCode = function (code) {
            return !!UserActionResultCode.validUserActionCodes[code];
        };
        UserActionResultCode.prototype.isValidUserActionErrorCode = function (code) {
            return !!VizPortal.UserErrorCode[code] || !!VizPortal.CommonErrorCode[code];
        };
        UserActionResultCode.$inject = ['$translate'];
        return UserActionResultCode;
    })();
    VizPortal.UserActionResultCode = UserActionResultCode;
    VizPortal.Module.instance().service('UserActionResultCode', UserActionResultCode);
})(VizPortal || (VizPortal = {}));
/// <reference path="../libs.ts" />
/// <reference path="../L10n/L10n.ts" />
/// <reference path="../Module.ts" />
var VizPortal;
(function (VizPortal) {
    var ViewErrors = (function () {
        function ViewErrors($translate) {
            this.$translate = $translate;
        }
        ViewErrors.prototype.errorDetailsFor = function (viewErrorItem) {
            return {
                itemName: viewErrorItem.item.name,
                itemUrl: null,
                errorMessage: this.errorMessageFor(viewErrorItem)
            };
        };
        ViewErrors.prototype.errorMessageFor = function (errorItem) {
            var view = errorItem.item;
            switch (errorItem.error.code) {
                case VizPortal.CommonErrorCode.ViewNotFound:
                    return this.$translate.instant('errorViewNotFound', { VIEW_NAME: VizPortal.L10n.elideIfLong(view.name) });
                case VizPortal.CommonErrorCode.CallingUserInsufficientPermissions:
                    return this.$translate.instant('errorViewInsufficientPermissions');
                default:
                    return this.$translate.instant('errorUnknown');
            }
        };
        ViewErrors.$inject = ['$translate'];
        return ViewErrors;
    })();
    VizPortal.ViewErrors = ViewErrors;
    VizPortal.Module.instance().service('ViewErrors', ViewErrors);
})(VizPortal || (VizPortal = {}));
/// <reference path="../../libs.ts" />
/// <reference path="../../ts/libs.ts" />
var VizPortal;
(function (VizPortal) {
    VizPortal.Module.instance().directive('tbWindowMaxWidth', [
        '$window',
        function ($window) {
            return {
                restrict: 'A',
                link: function (scope, elm, attrs) {
                    var syncToWindowWidth = function () { return elm.css('maxWidth', $($window).width()); };
                    syncToWindowWidth();
                    $($window).on('resize', syncToWindowWidth);
                    elm.on('$destroy', function () {
                        $($window).off('resize', syncToWindowWidth);
                    });
                }
            };
        }
    ]);
})(VizPortal || (VizPortal = {}));
/// <reference path="FeatureFlags.ts" />
/// <reference path="config.ts" />
/// <reference path="contentConfig.ts" />
/// <reference path="decorators/qDecorator.ts" />
/// <reference path="decorators/stateServiceDecorator.ts" />
/// <reference path="run.ts" />
/// <reference path="actions/UserSettingsActions.ts" />
/// <reference path="controllers/AddActiveDirectoryGroupDialogCtrl.ts" />
/// <reference path="controllers/AddActiveDirectoryServerUsersDialogCtrl.ts" />
/// <reference path="controllers/AddActiveDirectorySiteUsersDialogCtrl.ts" />
/// <reference path="controllers/AddSiteCtrl.ts" />
/// <reference path="controllers/AddUsersToGroupDialogCtrl.ts" />
/// <reference path="controllers/AdminVizViewerCtrl.ts" />
/// <reference path="controllers/AlertMenuCtrl.ts" />
/// <reference path="controllers/AngularCtrl.ts" />
/// <reference path="controllers/BulkImportUsersDialogCtrl.ts" />
/// <reference path="controllers/ContentGridCtrl.ts" />
/// <reference path="controllers/ContentItemPopoverCtrl.ts" />
/// <reference path="controllers/ContentPlaceCtrl.ts" />
/// <reference path="controllers/ContentSubplaceCtrl.ts" />
/// <reference path="controllers/CreateOrEditScheduleCtrl.ts" />
/// <reference path="controllers/DataGridCtrl.ts" />
/// <reference path="controllers/DatasourceDataConnectionCtrl.ts" />
/// <reference path="controllers/DateFilterCtrl.ts" />
/// <reference path="controllers/ErrorCtrl.ts" />
/// <reference path="controllers/ErrorDetailsToastCtrl.ts" />
/// <reference path="controllers/FavoritesMenuCtrl.ts" />
/// <reference path="controllers/FilterPanelCtrl.ts" />
/// <reference path="../common/attributes/tbFocus/FocusCtrl.ts" />
/// <reference path="controllers/GroupDetailsCtrl.ts" />
/// <reference path="controllers/GroupsPlaceCtrl.ts" />
/// <reference path="controllers/GroupUsersSubplaceCtrl.ts" />
/// <reference path="controllers/HelpMenuCtrl.ts" />
/// <reference path="controllers/LicensesCtrl.ts" />
/// <reference path="controllers/LoginCtrl.ts" />
/// <reference path="controllers/LoginSitePickerCtrl.ts" />
/// <reference path="controllers/InitializationCtrl.ts" />
/// <reference path="controllers/PermissionRuleEditorCtrl.ts" />
/// <reference path="controllers/RemoteRefreshSchedulesCtrl.ts" />
/// <reference path="controllers/SigninErrorCtrl.ts" />
/// <reference path="controllers/SchedulesCtrl.ts" />
/// <reference path="controllers/ScrollCtrl.ts" />
/// <reference path="controllers/ServerSettingsFormCtrl.ts" />
/// <reference path="controllers/ServerStatusCtrl.ts" />
/// <reference path="controllers/ServerUserPlaceCtrl.ts" />
/// <reference path="controllers/SignedOutCtrl.ts" />
/// <reference path="controllers/SiteAuthenticationCtrl.ts" />
/// <reference path="controllers/SiteRolesPickerCtrl.ts" />
/// <reference path="controllers/SiteSettingsForServerAdminFormCtrl.ts" />
/// <reference path="controllers/SiteSettingsForSiteAdminFormCtrl.ts" />
/// <reference path="controllers/SitesPlaceCtrl.ts" />
/// <reference path="controllers/SiteSwitcherCtrl.ts" />
/// <reference path="controllers/SiteUserDatasourcesSubplaceCtrl.ts" />
/// <reference path="controllers/SiteUserPlaceCtrl.ts" />
/// <reference path="controllers/SiteUserSettingsSubplaceCtrl.ts" />
/// <reference path="controllers/SiteUserSubscriptionsSubplaceCtrl.ts" />
/// <reference path="controllers/SiteUserViewsSubplaceCtrl.ts" />
/// <reference path="controllers/SiteUserWorkbooksSubplaceCtrl.ts" />
/// <reference path="controllers/SiteUsersPlaceCtrl.ts" />
/// <reference path="controllers/VizViewerCtrl.ts" />
/// <reference path="controllers/ZiplogCtrl.ts" />
/// <reference path="directives/childEventDirectives.ts" />
/// <reference path="directives/keyEventDirectives.ts" />
/// <reference path="directives/pixelStyleDirectives.ts" />
/// <reference path="directives/reactDirectiveFactory.ts" />
/// <reference path="directives/tbAlertInfo.ts" />
/// <reference path="directives/tbAlertMenu.ts" />
/// <reference path="directives/tbAssignPermissionsToContents.ts" />
/// <reference path="../common/attributes/tbAutoSelect.ts" />
/// <reference path="directives/tbBackgroundImage.ts" />
/// <reference path="../common/attributes/tbButtonClick.ts" />
/// <reference path="../common/attributes/tbButtonDown.ts" />
/// <reference path="directives/tbBytesInputConverter.ts" />
/// <reference path="directives/tbBulkImportUsersForm.ts" />
/// <reference path="directives/tbBulkImportResultsSummary.ts" />
/// <reference path="directives/tbChangePassword.ts" />
/// <reference path="../common/components/checkboxes/tbCheckbox.ts" />
/// <reference path="../common/components/checkboxes/tbCheckboxGroup.ts" />
/// <reference path="../common/components/checkboxes/tbCheckboxLabel.ts" />
/// <reference path="../common/components/checkboxes/tbCheckboxTristate.ts" />
/// <reference path="directives/tbCreateTextarea.ts" />
/// <reference path="directives/tbDataGrid.ts" />
/// <reference path="directives/tbDataGridBody.ts" />
/// <reference path="directives/tbDataGridEditableRow.ts" />
/// <reference path="directives/tbDataGridHeaders.ts" />
/// <reference path="../common/components/tbDatePicker/tbDatePicker.ts" />
/// <reference path="directives/tbDaysPicker.ts" />
/// <reference path="directives/tbDisabled.ts" />
/// <reference path="directives/tbDisableSelection.ts" />
/// <reference path="directives/tbEditableCapabilityValue.ts" />
/// <reference path="directives/tbEditableTags.ts" />
/// <reference path="directives/tbEditableText.ts" />
/// <reference path="directives/tbEditableTextarea.ts" />
/// <reference path="directives/tbEditDisplayName.ts" />
/// <reference path="directives/tbEditEmail.ts" />
/// <reference path="directives/tbEditLanguageAndLocale.ts" />
/// <reference path="directives/tbEmailInputValidator.ts" />
/// <reference path="directives/tbEmbeddedPassword.ts" />
/// <reference path="directives/tbFavoritesMenu.ts" />
/// <reference path="directives/tbFavoriteToggle.ts" />
/// <reference path="directives/tbIfFeatureFlag.ts" />
/// <reference path="directives/tbFileDrop.ts" />
/// <reference path="directives/tbFileInput.ts" />
/// <reference path="directives/tbFilteringListBox.ts" />
/// <reference path="../common/attributes/tbFocus/tbFocus.ts" />
/// <reference path="directives/tbFormattingHints.ts" />
/// <reference path="directives/tbHelpMenu.ts" />
/// <reference path="directives/tbHidden.ts" />
/// <reference path="directives/tbIntegerInputValidator.ts" />
/// <reference path="directives/tbLockUnlockProjectPermissions.ts" />
/// <reference path="directives/tbSigningIn.ts" />
/// <reference path="directives/tbMatchingInputsValidator.ts" />
/// <reference path="directives/tbModeSwitcher.ts" />
/// <reference path="directives/tbMouseCapture.ts" />
/// <reference path="directives/tbMousedownOutside.ts" />
/// <reference path="directives/tbMouseTrack.ts" />
/// <reference path="directives/tbOmnibox.ts" />
/// <reference path="directives/tbPermissionsPanel.ts" />
/// <reference path="directives/tbPermissionRuleEditor.ts" />
/// <reference path="directives/tbPlaceDescription.ts" />
/// <reference path="directives/tbPopover.ts" />
/// <reference path="directives/tbPopup.ts" />
/// <reference path="directives/tbPopupMenu.ts" />
/// <reference path="directives/tbPopupMenuButton.ts" />
/// <reference path="directives/tbPopupMenuContent.ts" />
/// <reference path="directives/tbPortInputValidator.ts" />
/// <reference path="directives/tbPreventInput.ts" />
/// <reference path="directives/tbProgressBar.ts" />
/// <reference path="directives/tbRadioButton.ts" />
/// <reference path="directives/tbRangeInputValidator.ts" />
/// <reference path="directives/tbResetStartPage.ts" />
/// <reference path="directives/tbScroll.ts" />
/// <reference path="directives/tbSelect.ts" />
/// <reference path="directives/tbSelected.ts" />
/// <reference path="directives/tbSelectionMenu.ts" />
/// <reference path="directives/tbServerSettingsForm.ts" />
/// <reference path="directives/tbSignedInUserMenu.ts" />
/// <reference path="directives/tbSignInLogo.ts" />
/// <reference path="directives/tbSiteIdInputValidator.ts" />
/// <reference path="directives/tbSiteRolePermissionsTable.ts" />
/// <reference path="directives/tbSiteRolesPicker.ts" />
/// <reference path="directives/tbSettingsCoordinator.ts" />
/// <reference path="directives/tbSiteSettingsForServerAdminForm.ts" />
/// <reference path="directives/tbSiteSettingsForSiteAdminForm.ts" />
/// <reference path="directives/tbSiteSwitcher.ts" />
/// <reference path="directives/tbSortTool.ts" />
/// <reference path="directives/tbStackedElement.ts" />
/// <reference path="directives/tbStateHref.ts" />
/// <reference path="directives/tbTagsInput.ts" />
/// <reference path="directives/tbTemplateList.ts" />
/// <reference path="directives/tbTextBox.ts" />
/// <reference path="directives/tbTextDropdown.ts" />
/// <reference path="directives/tbTextile.ts" />
/// <reference path="directives/tbTimePicker.ts" />
/// <reference path="directives/tbTypeaheadFilter.ts" />
/// <reference path="directives/tbToast.ts" />
/// <reference path="directives/tbToaster.ts" />
/// <reference path="directives/tbTooltipArea.ts" />
/// <reference path="directives/tbTopBar.ts" />
/// <reference path="directives/tbTranscludeFn.ts" />
/// <reference path="directives/tbTypeahead.ts" />
/// <reference path="directives/tbTypeaheadFormat.ts" />
/// <reference path="directives/tbUpdateSiteLogoForm.ts" />
/// <reference path="directives/tbUploadIframe.ts" />
/// <reference path="directives/tbUserNameInputValidator.ts" />
/// <reference path="directives/tbUserOrGroupSelector.ts" />
/// <reference path="directives/tbVisible.ts" />
/// <reference path="directives/tbViz.ts" />
/// <reference path="directives/tbWindowResize.ts" />
/// <reference path="directives/tbWorkerProcessStatus.ts" />
/// <reference path="filters/CredentialTypeFilter.ts" />
/// <reference path="filters/CronExpressionFilter.ts" />
/// <reference path="filters/LastSignInDateFilter.ts" />
/// <reference path="filters/ListFilter.ts" />
/// <reference path="filters/LocalizedCountFilter.ts" />
/// <reference path="filters/LocalizedDateFilter.ts" />
/// <reference path="filters/LocalizedPercentFilter.ts" />
/// <reference path="filters/LocLinkifierFilter.ts" />
/// <reference path="filters/PadFilter.ts" />
/// <reference path="filters/RemoteRefreshScheduleTypeNameFilter.ts" />
/// <reference path="filters/ScheduleActionNameFilter.ts" />
/// <reference path="filters/ScheduleFrequencyDescriptionFilter.ts" />
/// <reference path="filters/ScheduleTypeNameFilter.ts" />
/// <reference path="filters/ScheduleFrequencyDescriptionFilter.ts" />
/// <reference path="filters/SiteRoleFilter.ts" />
/// <reference path="filters/SizeFilter.ts" />
/// <reference path="../common/react/angularDirectives.ts" />
/// <reference path="resources/ActiveDirectoryGroups.ts" />
/// <reference path="resources/Alerts.ts" />
/// <reference path="resources/Comments.ts" />
/// <reference path="resources/DataConnections.ts" />
/// <reference path="resources/DataConnectionTypes.ts" />
/// <reference path="resources/Datasources.ts" />
/// <reference path="resources/ExplicitPermissions.ts" />
/// <reference path="resources/ExtractTasks.ts" />
/// <reference path="resources/Favorites.ts" />
/// <reference path="resources/Languages.ts" />
/// <reference path="resources/Locales.ts" />
/// <reference path="resources/Projects.ts" />
/// <reference path="resources/ProjectNames.ts" />
/// <reference path="resources/Query.ts" />
/// <reference path="resources/Resource.ts" />
/// <reference path="resources/Schedules.ts" />
/// <reference path="resources/ServerSettings.ts" />
/// <reference path="resources/SiteNameSansIds.ts" />
/// <reference path="resources/SiteNameWithIds.ts" />
/// <reference path="resources/SiteRoles.ts" />
/// <reference path="resources/Sites.ts" />
/// <reference path="resources/Tags.ts" />
/// <reference path="resources/UserNames.ts" />
/// <reference path="resources/Views.ts" />
/// <reference path="resources/Workbooks.ts" />
/// <reference path="services/AddActiveDirectoryUsersAction.ts" />
/// <reference path="services/AddUsersToGroupAction.ts" />
/// <reference path="services/assignPermissionsToContentsService.ts" />
/// <reference path="services/BackdropService.ts" />
/// <reference path="services/BreadcrumbsService.ts" />
/// <reference path="services/BulkImportUsersAction.ts" />
/// <reference path="services/ChangeDatasourceRefreshModeAction.ts" />
/// <reference path="services/ChangeDatasourceRemoteAgentAction.ts" />
/// <reference path="services/ChangeDatasourceRemoteRefreshPropertiesAction.ts" />
/// <reference path="services/ConfirmActionDialog.ts" />
/// <reference path="services/ContentActions.ts" />
/// <reference path="services/ContentFilterService.ts" />
/// <reference path="services/ContentUrl.ts" />
/// <reference path="services/CreateGroupDialogAction.ts" />
/// <reference path="services/CreateSiteAction.ts" />
/// <reference path="services/DataSourceErrors.ts" />
/// <reference path="services/DeleteCommentActions.ts" />
/// <reference path="services/DeleteConnectedDeviceAction.ts" />
/// <reference path="services/DeleteGroupAction.ts" />
/// <reference path="services/DeleteUsersFromServerAction.ts" />
/// <reference path="services/DesktopLaunchService.ts" />
/// <reference path="services/DisplaySettingsService.ts" />
/// <reference path="services/EditConnectionAction.ts" />
/// <reference path="services/EditSiteAction.ts" />
/// <reference path="services/ErrorMessageHandler.ts" />
/// <reference path="services/EffectivePermissionsService.ts" />
/// <reference path="services/FetcherFactory.ts" />
/// <reference path="services/FilterPanelService.ts" />
/// <reference path="services/GetActionableObjectsForAction.ts" />
/// <reference path="services/GettingStartedNotifications.ts" />
/// <reference path="services/HelpService.ts" />
/// <reference path="services/ImagePreloadService.ts" />
/// <reference path="services/LicensesService.ts" />
/// <reference path="services/LogoService.ts" />
/// <reference path="services/LongRunningActionService.ts" />
/// <reference path="services/MastheadNotifications.ts" />
/// <reference path="services/ModalService.ts" />
/// <reference path="services/PermissionsPanelActions.ts" />
/// <reference path="services/PollService.ts" />
/// <reference path="services/PostLoginNotifications.ts" />
/// <reference path="services/ProjectErrors.ts" />
/// <reference path="services/QueryService.ts" />
/// <reference path="services/RebuildSearchIndexService.ts" />
/// <reference path="services/RemoveUsersFromGroupAction.ts" />
/// <reference path="services/SchedulePermissions.ts" />
/// <reference path="services/SchedulesConfig.ts" />
/// <reference path="services/SearchSuggestionsService.ts" />
/// <reference path="services/SelectionService.ts" />
/// <reference path="services/ServerInfoService.ts" />
/// <reference path="services/ServerService.ts" />
/// <reference path="services/ServerUsersActions.ts" />
/// <reference path="services/SetProjectControlledPermissionsAction.ts" />
/// <reference path="services/SetSiteUsersSiteRoleAction.ts" />
/// <reference path="services/SiteSwitchService.ts" />
/// <reference path="services/SiteUrlMatcherFactory.ts" />
/// <reference path="services/SiteUsersActions.ts" />
/// <reference path="services/SliceableFactory.ts" />
/// <reference path="services/SorterFactory.ts" />
/// <reference path="services/StackedElementsService.ts" />
/// <reference path="services/StartPageService.ts" />
/// <reference path="services/StateWrapperService.ts" />
/// <reference path="services/ToasterService.ts" />
/// <reference path="services/UpdateGroupNameAction.ts" />
/// <reference path="services/UserActionResultCode.ts" />
/// <reference path="services/ViewErrors.ts" />
/// <reference path="services/VizService.ts" />
/// <reference path="services/WindowLocationService.ts" />
/// <reference path="services/WindowPopupService.ts" />
/// <reference path="services/WorkbookErrors.ts" />
/// <reference path="services/ZiplogService.ts" />
/// <reference path="ServerApi/types/BulkImportUsersFromCsvResponse.ts" />
/// <reference path="stores/UserSettingsStore.ts" />
/// <reference path="../common/attributes/tbWindowMaxWidth.ts" />
